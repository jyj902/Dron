
Dron_PPM_STM32L475_Bo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000facc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800fc60  0800fc60  0001fc60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010218  08010218  0003025c  2**0
                  CONTENTS
  4 .ARM          00000008  08010218  08010218  00020218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010220  08010220  0003025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010220  08010220  00020220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010224  08010224  00020224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  08010228  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b78  2000025c  08010484  0003025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dd4  08010484  00030dd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024376  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004260  00000000  00000000  00054602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ee0  00000000  00000000  00058868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d28  00000000  00000000  0005a748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b2b2  00000000  00000000  0005c470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021aa9  00000000  00000000  00087722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102da4  00000000  00000000  000a91cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001abf6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009bf0  00000000  00000000  001abfc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000025c 	.word	0x2000025c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fc44 	.word	0x0800fc44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000260 	.word	0x20000260
 80001cc:	0800fc44 	.word	0x0800fc44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000ffa:	2110      	movs	r1, #16
 8000ffc:	20d4      	movs	r0, #212	; 0xd4
 8000ffe:	f002 fa21 	bl	8003444 <SENSOR_IO_Read>
 8001002:	4603      	mov	r3, r0
 8001004:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800100a:	7bbb      	ldrb	r3, [r7, #14]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001012:	7bba      	ldrb	r2, [r7, #14]
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	4313      	orrs	r3, r2
 8001018:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800101a:	7bbb      	ldrb	r3, [r7, #14]
 800101c:	461a      	mov	r2, r3
 800101e:	2110      	movs	r1, #16
 8001020:	20d4      	movs	r0, #212	; 0xd4
 8001022:	f002 f9f5 	bl	8003410 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001026:	2112      	movs	r1, #18
 8001028:	20d4      	movs	r0, #212	; 0xd4
 800102a:	f002 fa0b 	bl	8003444 <SENSOR_IO_Read>
 800102e:	4603      	mov	r3, r0
 8001030:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	b29b      	uxth	r3, r3
 8001038:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800103a:	7bbb      	ldrb	r3, [r7, #14]
 800103c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001040:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001042:	7bba      	ldrb	r2, [r7, #14]
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	4313      	orrs	r3, r2
 8001048:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800104a:	7bbb      	ldrb	r3, [r7, #14]
 800104c:	461a      	mov	r2, r3
 800104e:	2112      	movs	r1, #18
 8001050:	20d4      	movs	r0, #212	; 0xd4
 8001052:	f002 f9dd 	bl	8003410 <SENSOR_IO_Write>
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001064:	2300      	movs	r3, #0
 8001066:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001068:	2110      	movs	r1, #16
 800106a:	20d4      	movs	r0, #212	; 0xd4
 800106c:	f002 f9ea 	bl	8003444 <SENSOR_IO_Read>
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	461a      	mov	r2, r3
 8001080:	2110      	movs	r1, #16
 8001082:	20d4      	movs	r0, #212	; 0xd4
 8001084:	f002 f9c4 	bl	8003410 <SENSOR_IO_Write>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001094:	f002 f9b2 	bl	80033fc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001098:	210f      	movs	r1, #15
 800109a:	20d4      	movs	r0, #212	; 0xd4
 800109c:	f002 f9d2 	bl	8003444 <SENSOR_IO_Read>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80010b4:	2115      	movs	r1, #21
 80010b6:	20d4      	movs	r0, #212	; 0xd4
 80010b8:	f002 f9c4 	bl	8003444 <SENSOR_IO_Read>
 80010bc:	4603      	mov	r3, r0
 80010be:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	f023 0310 	bic.w	r3, r3, #16
 80010c6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	f043 0310 	orr.w	r3, r3, #16
 80010d4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	461a      	mov	r2, r3
 80010da:	2115      	movs	r1, #21
 80010dc:	20d4      	movs	r0, #212	; 0xd4
 80010de:	f002 f997 	bl	8003410 <SENSOR_IO_Write>
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80010fc:	f04f 0300 	mov.w	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001102:	2110      	movs	r1, #16
 8001104:	20d4      	movs	r0, #212	; 0xd4
 8001106:	f002 f99d 	bl	8003444 <SENSOR_IO_Read>
 800110a:	4603      	mov	r3, r0
 800110c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800110e:	f107 0208 	add.w	r2, r7, #8
 8001112:	2306      	movs	r3, #6
 8001114:	2128      	movs	r1, #40	; 0x28
 8001116:	20d4      	movs	r0, #212	; 0xd4
 8001118:	f002 f9b2 	bl	8003480 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800111c:	2300      	movs	r3, #0
 800111e:	77fb      	strb	r3, [r7, #31]
 8001120:	e01f      	b.n	8001162 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001122:	7ffb      	ldrb	r3, [r7, #31]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	3301      	adds	r3, #1
 8001128:	f107 0220 	add.w	r2, r7, #32
 800112c:	4413      	add	r3, r2
 800112e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001132:	b29b      	uxth	r3, r3
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b29a      	uxth	r2, r3
 8001138:	7ffb      	ldrb	r3, [r7, #31]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	f107 0120 	add.w	r1, r7, #32
 8001140:	440b      	add	r3, r1
 8001142:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001146:	b29b      	uxth	r3, r3
 8001148:	4413      	add	r3, r2
 800114a:	b29a      	uxth	r2, r3
 800114c:	7ffb      	ldrb	r3, [r7, #31]
 800114e:	b212      	sxth	r2, r2
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	f107 0120 	add.w	r1, r7, #32
 8001156:	440b      	add	r3, r1
 8001158:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800115c:	7ffb      	ldrb	r3, [r7, #31]
 800115e:	3301      	adds	r3, #1
 8001160:	77fb      	strb	r3, [r7, #31]
 8001162:	7ffb      	ldrb	r3, [r7, #31]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d9dc      	bls.n	8001122 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	2b0c      	cmp	r3, #12
 8001170:	d828      	bhi.n	80011c4 <LSM6DSL_AccReadXYZ+0xd8>
 8001172:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <LSM6DSL_AccReadXYZ+0x8c>)
 8001174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001178:	080011ad 	.word	0x080011ad
 800117c:	080011c5 	.word	0x080011c5
 8001180:	080011c5 	.word	0x080011c5
 8001184:	080011c5 	.word	0x080011c5
 8001188:	080011bf 	.word	0x080011bf
 800118c:	080011c5 	.word	0x080011c5
 8001190:	080011c5 	.word	0x080011c5
 8001194:	080011c5 	.word	0x080011c5
 8001198:	080011b3 	.word	0x080011b3
 800119c:	080011c5 	.word	0x080011c5
 80011a0:	080011c5 	.word	0x080011c5
 80011a4:	080011c5 	.word	0x080011c5
 80011a8:	080011b9 	.word	0x080011b9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <LSM6DSL_AccReadXYZ+0x128>)
 80011ae:	61bb      	str	r3, [r7, #24]
    break;
 80011b0:	e008      	b.n	80011c4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <LSM6DSL_AccReadXYZ+0x12c>)
 80011b4:	61bb      	str	r3, [r7, #24]
    break;
 80011b6:	e005      	b.n	80011c4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <LSM6DSL_AccReadXYZ+0x130>)
 80011ba:	61bb      	str	r3, [r7, #24]
    break;
 80011bc:	e002      	b.n	80011c4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <LSM6DSL_AccReadXYZ+0x134>)
 80011c0:	61bb      	str	r3, [r7, #24]
    break;    
 80011c2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80011c4:	2300      	movs	r3, #0
 80011c6:	77fb      	strb	r3, [r7, #31]
 80011c8:	e01b      	b.n	8001202 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	f107 0220 	add.w	r2, r7, #32
 80011d2:	4413      	add	r3, r2
 80011d4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80011d8:	ee07 3a90 	vmov	s15, r3
 80011dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80011e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e8:	7ffb      	ldrb	r3, [r7, #31]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f4:	ee17 2a90 	vmov	r2, s15
 80011f8:	b212      	sxth	r2, r2
 80011fa:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80011fc:	7ffb      	ldrb	r3, [r7, #31]
 80011fe:	3301      	adds	r3, #1
 8001200:	77fb      	strb	r3, [r7, #31]
 8001202:	7ffb      	ldrb	r3, [r7, #31]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d9e0      	bls.n	80011ca <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3720      	adds	r7, #32
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	3d79db23 	.word	0x3d79db23
 8001218:	3df9db23 	.word	0x3df9db23
 800121c:	3e79db23 	.word	0x3e79db23
 8001220:	3ef9db23 	.word	0x3ef9db23

08001224 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001232:	2111      	movs	r1, #17
 8001234:	20d4      	movs	r0, #212	; 0xd4
 8001236:	f002 f905 	bl	8003444 <SENSOR_IO_Read>
 800123a:	4603      	mov	r3, r0
 800123c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001242:	7bbb      	ldrb	r3, [r7, #14]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800124a:	7bba      	ldrb	r2, [r7, #14]
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	4313      	orrs	r3, r2
 8001250:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8001252:	7bbb      	ldrb	r3, [r7, #14]
 8001254:	461a      	mov	r2, r3
 8001256:	2111      	movs	r1, #17
 8001258:	20d4      	movs	r0, #212	; 0xd4
 800125a:	f002 f8d9 	bl	8003410 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800125e:	2112      	movs	r1, #18
 8001260:	20d4      	movs	r0, #212	; 0xd4
 8001262:	f002 f8ef 	bl	8003444 <SENSOR_IO_Read>
 8001266:	4603      	mov	r3, r0
 8001268:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	b29b      	uxth	r3, r3
 8001270:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001272:	7bbb      	ldrb	r3, [r7, #14]
 8001274:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001278:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800127a:	7bba      	ldrb	r2, [r7, #14]
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	4313      	orrs	r3, r2
 8001280:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001282:	7bbb      	ldrb	r3, [r7, #14]
 8001284:	461a      	mov	r2, r3
 8001286:	2112      	movs	r1, #18
 8001288:	20d4      	movs	r0, #212	; 0xd4
 800128a:	f002 f8c1 	bl	8003410 <SENSOR_IO_Write>
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800129c:	2300      	movs	r3, #0
 800129e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80012a0:	2111      	movs	r1, #17
 80012a2:	20d4      	movs	r0, #212	; 0xd4
 80012a4:	f002 f8ce 	bl	8003444 <SENSOR_IO_Read>
 80012a8:	4603      	mov	r3, r0
 80012aa:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	461a      	mov	r2, r3
 80012b8:	2111      	movs	r1, #17
 80012ba:	20d4      	movs	r0, #212	; 0xd4
 80012bc:	f002 f8a8 	bl	8003410 <SENSOR_IO_Write>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80012cc:	f002 f896 	bl	80033fc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80012d0:	210f      	movs	r1, #15
 80012d2:	20d4      	movs	r0, #212	; 0xd4
 80012d4:	f002 f8b6 	bl	8003444 <SENSOR_IO_Read>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}

080012de <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80012ec:	2116      	movs	r1, #22
 80012ee:	20d4      	movs	r0, #212	; 0xd4
 80012f0:	f002 f8a8 	bl	8003444 <SENSOR_IO_Read>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012fe:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800130c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	461a      	mov	r2, r3
 8001312:	2116      	movs	r1, #22
 8001314:	20d4      	movs	r0, #212	; 0xd4
 8001316:	f002 f87b 	bl	8003410 <SENSOR_IO_Write>
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 800132c:	2300      	movs	r3, #0
 800132e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800133a:	2111      	movs	r1, #17
 800133c:	20d4      	movs	r0, #212	; 0xd4
 800133e:	f002 f881 	bl	8003444 <SENSOR_IO_Read>
 8001342:	4603      	mov	r3, r0
 8001344:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8001346:	f107 0208 	add.w	r2, r7, #8
 800134a:	2306      	movs	r3, #6
 800134c:	2122      	movs	r1, #34	; 0x22
 800134e:	20d4      	movs	r0, #212	; 0xd4
 8001350:	f002 f896 	bl	8003480 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001354:	2300      	movs	r3, #0
 8001356:	77fb      	strb	r3, [r7, #31]
 8001358:	e01f      	b.n	800139a <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800135a:	7ffb      	ldrb	r3, [r7, #31]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	3301      	adds	r3, #1
 8001360:	f107 0220 	add.w	r2, r7, #32
 8001364:	4413      	add	r3, r2
 8001366:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800136a:	b29b      	uxth	r3, r3
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b29a      	uxth	r2, r3
 8001370:	7ffb      	ldrb	r3, [r7, #31]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	f107 0120 	add.w	r1, r7, #32
 8001378:	440b      	add	r3, r1
 800137a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800137e:	b29b      	uxth	r3, r3
 8001380:	4413      	add	r3, r2
 8001382:	b29a      	uxth	r2, r3
 8001384:	7ffb      	ldrb	r3, [r7, #31]
 8001386:	b212      	sxth	r2, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	f107 0120 	add.w	r1, r7, #32
 800138e:	440b      	add	r3, r1
 8001390:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001394:	7ffb      	ldrb	r3, [r7, #31]
 8001396:	3301      	adds	r3, #1
 8001398:	77fb      	strb	r3, [r7, #31]
 800139a:	7ffb      	ldrb	r3, [r7, #31]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d9dc      	bls.n	800135a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b0c      	cmp	r3, #12
 80013a8:	d828      	bhi.n	80013fc <LSM6DSL_GyroReadXYZAngRate+0xd8>
 80013aa:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	080013e5 	.word	0x080013e5
 80013b4:	080013fd 	.word	0x080013fd
 80013b8:	080013fd 	.word	0x080013fd
 80013bc:	080013fd 	.word	0x080013fd
 80013c0:	080013eb 	.word	0x080013eb
 80013c4:	080013fd 	.word	0x080013fd
 80013c8:	080013fd 	.word	0x080013fd
 80013cc:	080013fd 	.word	0x080013fd
 80013d0:	080013f1 	.word	0x080013f1
 80013d4:	080013fd 	.word	0x080013fd
 80013d8:	080013fd 	.word	0x080013fd
 80013dc:	080013fd 	.word	0x080013fd
 80013e0:	080013f7 	.word	0x080013f7
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80013e6:	61bb      	str	r3, [r7, #24]
    break;
 80013e8:	e008      	b.n	80013fc <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80013ec:	61bb      	str	r3, [r7, #24]
    break;
 80013ee:	e005      	b.n	80013fc <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <LSM6DSL_GyroReadXYZAngRate+0x128>)
 80013f2:	61bb      	str	r3, [r7, #24]
    break;
 80013f4:	e002      	b.n	80013fc <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <LSM6DSL_GyroReadXYZAngRate+0x12c>)
 80013f8:	61bb      	str	r3, [r7, #24]
    break;    
 80013fa:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	77fb      	strb	r3, [r7, #31]
 8001400:	e017      	b.n	8001432 <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001402:	7ffb      	ldrb	r3, [r7, #31]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	f107 0220 	add.w	r2, r7, #32
 800140a:	4413      	add	r3, r2
 800140c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001418:	7ffb      	ldrb	r3, [r7, #31]
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	edd7 7a06 	vldr	s15, [r7, #24]
 8001424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001428:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800142c:	7ffb      	ldrb	r3, [r7, #31]
 800142e:	3301      	adds	r3, #1
 8001430:	77fb      	strb	r3, [r7, #31]
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d9e4      	bls.n	8001402 <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3720      	adds	r7, #32
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	410c0000 	.word	0x410c0000
 8001448:	418c0000 	.word	0x418c0000
 800144c:	420c0000 	.word	0x420c0000
 8001450:	428c0000 	.word	0x428c0000
 8001454:	00000000 	.word	0x00000000

08001458 <HAL_UART_RxCpltCallback>:
float goal_angle[3]={0,};
char Data[50], kpData[50],rData;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800145c:	b08a      	sub	sp, #40	; 0x28
 800145e:	af06      	add	r7, sp, #24
 8001460:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a86      	ldr	r2, [pc, #536]	; (8001680 <HAL_UART_RxCpltCallback+0x228>)
 8001468:	4293      	cmp	r3, r2
 800146a:	f040 80f9 	bne.w	8001660 <HAL_UART_RxCpltCallback+0x208>
	{
		if(rData == '1') Kp += 1;
 800146e:	4b85      	ldr	r3, [pc, #532]	; (8001684 <HAL_UART_RxCpltCallback+0x22c>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b31      	cmp	r3, #49	; 0x31
 8001474:	d10a      	bne.n	800148c <HAL_UART_RxCpltCallback+0x34>
 8001476:	4b84      	ldr	r3, [pc, #528]	; (8001688 <HAL_UART_RxCpltCallback+0x230>)
 8001478:	edd3 7a00 	vldr	s15, [r3]
 800147c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001484:	4b80      	ldr	r3, [pc, #512]	; (8001688 <HAL_UART_RxCpltCallback+0x230>)
 8001486:	edc3 7a00 	vstr	s15, [r3]
 800148a:	e0b2      	b.n	80015f2 <HAL_UART_RxCpltCallback+0x19a>
		else if(rData == '2') Kp -= 1;
 800148c:	4b7d      	ldr	r3, [pc, #500]	; (8001684 <HAL_UART_RxCpltCallback+0x22c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b32      	cmp	r3, #50	; 0x32
 8001492:	d10a      	bne.n	80014aa <HAL_UART_RxCpltCallback+0x52>
 8001494:	4b7c      	ldr	r3, [pc, #496]	; (8001688 <HAL_UART_RxCpltCallback+0x230>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800149e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a2:	4b79      	ldr	r3, [pc, #484]	; (8001688 <HAL_UART_RxCpltCallback+0x230>)
 80014a4:	edc3 7a00 	vstr	s15, [r3]
 80014a8:	e0a3      	b.n	80015f2 <HAL_UART_RxCpltCallback+0x19a>
		else if(rData == '3') g_Kp += 0.0001;
 80014aa:	4b76      	ldr	r3, [pc, #472]	; (8001684 <HAL_UART_RxCpltCallback+0x22c>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b33      	cmp	r3, #51	; 0x33
 80014b0:	d113      	bne.n	80014da <HAL_UART_RxCpltCallback+0x82>
 80014b2:	4b76      	ldr	r3, [pc, #472]	; (800168c <HAL_UART_RxCpltCallback+0x234>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f846 	bl	8000548 <__aeabi_f2d>
 80014bc:	a36c      	add	r3, pc, #432	; (adr r3, 8001670 <HAL_UART_RxCpltCallback+0x218>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7fe fee3 	bl	800028c <__adddf3>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fb8b 	bl	8000be8 <__aeabi_d2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a6d      	ldr	r2, [pc, #436]	; (800168c <HAL_UART_RxCpltCallback+0x234>)
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	e08b      	b.n	80015f2 <HAL_UART_RxCpltCallback+0x19a>
		else if(rData == '4') g_Kp -= 0.0001;
 80014da:	4b6a      	ldr	r3, [pc, #424]	; (8001684 <HAL_UART_RxCpltCallback+0x22c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b34      	cmp	r3, #52	; 0x34
 80014e0:	d113      	bne.n	800150a <HAL_UART_RxCpltCallback+0xb2>
 80014e2:	4b6a      	ldr	r3, [pc, #424]	; (800168c <HAL_UART_RxCpltCallback+0x234>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f82e 	bl	8000548 <__aeabi_f2d>
 80014ec:	a360      	add	r3, pc, #384	; (adr r3, 8001670 <HAL_UART_RxCpltCallback+0x218>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7fe fec9 	bl	8000288 <__aeabi_dsub>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff fb73 	bl	8000be8 <__aeabi_d2f>
 8001502:	4603      	mov	r3, r0
 8001504:	4a61      	ldr	r2, [pc, #388]	; (800168c <HAL_UART_RxCpltCallback+0x234>)
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	e073      	b.n	80015f2 <HAL_UART_RxCpltCallback+0x19a>
		else if(rData == '5') g_Ki += 0.05;
 800150a:	4b5e      	ldr	r3, [pc, #376]	; (8001684 <HAL_UART_RxCpltCallback+0x22c>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b35      	cmp	r3, #53	; 0x35
 8001510:	d113      	bne.n	800153a <HAL_UART_RxCpltCallback+0xe2>
 8001512:	4b5f      	ldr	r3, [pc, #380]	; (8001690 <HAL_UART_RxCpltCallback+0x238>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f816 	bl	8000548 <__aeabi_f2d>
 800151c:	a356      	add	r3, pc, #344	; (adr r3, 8001678 <HAL_UART_RxCpltCallback+0x220>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7fe feb3 	bl	800028c <__adddf3>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb5b 	bl	8000be8 <__aeabi_d2f>
 8001532:	4603      	mov	r3, r0
 8001534:	4a56      	ldr	r2, [pc, #344]	; (8001690 <HAL_UART_RxCpltCallback+0x238>)
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e05b      	b.n	80015f2 <HAL_UART_RxCpltCallback+0x19a>
		else if(rData == '6') g_Ki -= 0.05;
 800153a:	4b52      	ldr	r3, [pc, #328]	; (8001684 <HAL_UART_RxCpltCallback+0x22c>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b36      	cmp	r3, #54	; 0x36
 8001540:	d113      	bne.n	800156a <HAL_UART_RxCpltCallback+0x112>
 8001542:	4b53      	ldr	r3, [pc, #332]	; (8001690 <HAL_UART_RxCpltCallback+0x238>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe fffe 	bl	8000548 <__aeabi_f2d>
 800154c:	a34a      	add	r3, pc, #296	; (adr r3, 8001678 <HAL_UART_RxCpltCallback+0x220>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7fe fe99 	bl	8000288 <__aeabi_dsub>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff fb43 	bl	8000be8 <__aeabi_d2f>
 8001562:	4603      	mov	r3, r0
 8001564:	4a4a      	ldr	r2, [pc, #296]	; (8001690 <HAL_UART_RxCpltCallback+0x238>)
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	e043      	b.n	80015f2 <HAL_UART_RxCpltCallback+0x19a>
		else if(rData == '7') g_Kd += 0.05;
 800156a:	4b46      	ldr	r3, [pc, #280]	; (8001684 <HAL_UART_RxCpltCallback+0x22c>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b37      	cmp	r3, #55	; 0x37
 8001570:	d113      	bne.n	800159a <HAL_UART_RxCpltCallback+0x142>
 8001572:	4b48      	ldr	r3, [pc, #288]	; (8001694 <HAL_UART_RxCpltCallback+0x23c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ffe6 	bl	8000548 <__aeabi_f2d>
 800157c:	a33e      	add	r3, pc, #248	; (adr r3, 8001678 <HAL_UART_RxCpltCallback+0x220>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7fe fe83 	bl	800028c <__adddf3>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fb2b 	bl	8000be8 <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	4a3f      	ldr	r2, [pc, #252]	; (8001694 <HAL_UART_RxCpltCallback+0x23c>)
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	e02b      	b.n	80015f2 <HAL_UART_RxCpltCallback+0x19a>
		else if(rData == '8') g_Kd -= 0.05;
 800159a:	4b3a      	ldr	r3, [pc, #232]	; (8001684 <HAL_UART_RxCpltCallback+0x22c>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b38      	cmp	r3, #56	; 0x38
 80015a0:	d113      	bne.n	80015ca <HAL_UART_RxCpltCallback+0x172>
 80015a2:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <HAL_UART_RxCpltCallback+0x23c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ffce 	bl	8000548 <__aeabi_f2d>
 80015ac:	a332      	add	r3, pc, #200	; (adr r3, 8001678 <HAL_UART_RxCpltCallback+0x220>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7fe fe69 	bl	8000288 <__aeabi_dsub>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff fb13 	bl	8000be8 <__aeabi_d2f>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4a33      	ldr	r2, [pc, #204]	; (8001694 <HAL_UART_RxCpltCallback+0x23c>)
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	e013      	b.n	80015f2 <HAL_UART_RxCpltCallback+0x19a>
		else if(rData == '9')
 80015ca:	4b2e      	ldr	r3, [pc, #184]	; (8001684 <HAL_UART_RxCpltCallback+0x22c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b39      	cmp	r3, #57	; 0x39
 80015d0:	d10f      	bne.n	80015f2 <HAL_UART_RxCpltCallback+0x19a>
		{
			for(int i=0; i<3; i++)	g_PID_I[i] = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	e009      	b.n	80015ec <HAL_UART_RxCpltCallback+0x194>
 80015d8:	4a2f      	ldr	r2, [pc, #188]	; (8001698 <HAL_UART_RxCpltCallback+0x240>)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3301      	adds	r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	ddf2      	ble.n	80015d8 <HAL_UART_RxCpltCallback+0x180>
		}
		sprintf(kpData,"kp=%.2f / gkp=%.4f / gki=%.3f / gkd=%.3f",Kp,g_Kp, g_Ki,g_Kd);
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_UART_RxCpltCallback+0x230>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffa6 	bl	8000548 <__aeabi_f2d>
 80015fc:	4682      	mov	sl, r0
 80015fe:	468b      	mov	fp, r1
 8001600:	4b22      	ldr	r3, [pc, #136]	; (800168c <HAL_UART_RxCpltCallback+0x234>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff9f 	bl	8000548 <__aeabi_f2d>
 800160a:	4604      	mov	r4, r0
 800160c:	460d      	mov	r5, r1
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_UART_RxCpltCallback+0x238>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff98 	bl	8000548 <__aeabi_f2d>
 8001618:	4680      	mov	r8, r0
 800161a:	4689      	mov	r9, r1
 800161c:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_UART_RxCpltCallback+0x23c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff91 	bl	8000548 <__aeabi_f2d>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800162e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001632:	e9cd 4500 	strd	r4, r5, [sp]
 8001636:	4652      	mov	r2, sl
 8001638:	465b      	mov	r3, fp
 800163a:	4918      	ldr	r1, [pc, #96]	; (800169c <HAL_UART_RxCpltCallback+0x244>)
 800163c:	4818      	ldr	r0, [pc, #96]	; (80016a0 <HAL_UART_RxCpltCallback+0x248>)
 800163e:	f009 fbdf 	bl	800ae00 <siprintf>
		HAL_UART_Transmit_IT(&huart2, kpData, strlen(kpData));
 8001642:	4817      	ldr	r0, [pc, #92]	; (80016a0 <HAL_UART_RxCpltCallback+0x248>)
 8001644:	f7fe fdc4 	bl	80001d0 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	b29b      	uxth	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	4914      	ldr	r1, [pc, #80]	; (80016a0 <HAL_UART_RxCpltCallback+0x248>)
 8001650:	4814      	ldr	r0, [pc, #80]	; (80016a4 <HAL_UART_RxCpltCallback+0x24c>)
 8001652:	f007 f9c5 	bl	80089e0 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2, &rData, 1);
 8001656:	2201      	movs	r2, #1
 8001658:	490a      	ldr	r1, [pc, #40]	; (8001684 <HAL_UART_RxCpltCallback+0x22c>)
 800165a:	4812      	ldr	r0, [pc, #72]	; (80016a4 <HAL_UART_RxCpltCallback+0x24c>)
 800165c:	f007 fa1c 	bl	8008a98 <HAL_UART_Receive_IT>
	}
}
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800166a:	bf00      	nop
 800166c:	f3af 8000 	nop.w
 8001670:	eb1c432d 	.word	0xeb1c432d
 8001674:	3f1a36e2 	.word	0x3f1a36e2
 8001678:	9999999a 	.word	0x9999999a
 800167c:	3fa99999 	.word	0x3fa99999
 8001680:	40004400 	.word	0x40004400
 8001684:	20000b7e 	.word	0x20000b7e
 8001688:	20000068 	.word	0x20000068
 800168c:	2000006c 	.word	0x2000006c
 8001690:	20000290 	.word	0x20000290
 8001694:	20000070 	.word	0x20000070
 8001698:	20000390 	.word	0x20000390
 800169c:	0800fc60 	.word	0x0800fc60
 80016a0:	20000b80 	.word	0x20000b80
 80016a4:	20000c14 	.word	0x20000c14

080016a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET)
 80016b2:	2110      	movs	r1, #16
 80016b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b8:	f003 fae2 	bl	8004c80 <HAL_GPIO_ReadPin>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d10b      	bne.n	80016da <HAL_GPIO_EXTI_Callback+0x32>
	{
		HighTime[Count++] = msTime;
 80016c2:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <HAL_GPIO_EXTI_Callback+0xd0>)
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	4b2d      	ldr	r3, [pc, #180]	; (800177c <HAL_GPIO_EXTI_Callback+0xd4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	492b      	ldr	r1, [pc, #172]	; (800177c <HAL_GPIO_EXTI_Callback+0xd4>)
 80016ce:	600a      	str	r2, [r1, #0]
 80016d0:	b201      	sxth	r1, r0
 80016d2:	4a2b      	ldr	r2, [pc, #172]	; (8001780 <HAL_GPIO_EXTI_Callback+0xd8>)
 80016d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		{
			Count =0;
			msTime =0;
		}
	}
}
 80016d8:	e049      	b.n	800176e <HAL_GPIO_EXTI_Callback+0xc6>
	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET)
 80016da:	2110      	movs	r1, #16
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e0:	f003 face 	bl	8004c80 <HAL_GPIO_ReadPin>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d141      	bne.n	800176e <HAL_GPIO_EXTI_Callback+0xc6>
		if(Count > 0)
 80016ea:	4b24      	ldr	r3, [pc, #144]	; (800177c <HAL_GPIO_EXTI_Callback+0xd4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d033      	beq.n	800175a <HAL_GPIO_EXTI_Callback+0xb2>
			LowTime[Count-1] = msTime;
 80016f2:	4b21      	ldr	r3, [pc, #132]	; (8001778 <HAL_GPIO_EXTI_Callback+0xd0>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b21      	ldr	r3, [pc, #132]	; (800177c <HAL_GPIO_EXTI_Callback+0xd4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b211      	sxth	r1, r2
 80016fe:	4a21      	ldr	r2, [pc, #132]	; (8001784 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001700:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(LowTime[Count-1] - HighTime[Count-1]>600)
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <HAL_GPIO_EXTI_Callback+0xd4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3b01      	subs	r3, #1
 800170a:	4a1e      	ldr	r2, [pc, #120]	; (8001784 <HAL_GPIO_EXTI_Callback+0xdc>)
 800170c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001710:	4619      	mov	r1, r3
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <HAL_GPIO_EXTI_Callback+0xd4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	3b01      	subs	r3, #1
 8001718:	4a19      	ldr	r2, [pc, #100]	; (8001780 <HAL_GPIO_EXTI_Callback+0xd8>)
 800171a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800171e:	1acb      	subs	r3, r1, r3
 8001720:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001724:	dd02      	ble.n	800172c <HAL_GPIO_EXTI_Callback+0x84>
				Count=9;
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_GPIO_EXTI_Callback+0xd4>)
 8001728:	2209      	movs	r2, #9
 800172a:	601a      	str	r2, [r3, #0]
			PwmTime[Count-1] = LowTime[Count-1] - HighTime[Count-1];
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_GPIO_EXTI_Callback+0xd4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	3b01      	subs	r3, #1
 8001732:	4a14      	ldr	r2, [pc, #80]	; (8001784 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001734:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_GPIO_EXTI_Callback+0xd4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	3b01      	subs	r3, #1
 8001740:	490f      	ldr	r1, [pc, #60]	; (8001780 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001742:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001746:	b29b      	uxth	r3, r3
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	b29a      	uxth	r2, r3
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_GPIO_EXTI_Callback+0xd4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3b01      	subs	r3, #1
 8001752:	b211      	sxth	r1, r2
 8001754:	4a0c      	ldr	r2, [pc, #48]	; (8001788 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001756:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(Count>8)
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_GPIO_EXTI_Callback+0xd4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b08      	cmp	r3, #8
 8001760:	d905      	bls.n	800176e <HAL_GPIO_EXTI_Callback+0xc6>
			Count =0;
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_GPIO_EXTI_Callback+0xd4>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
			msTime =0;
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_GPIO_EXTI_Callback+0xd0>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000284 	.word	0x20000284
 800177c:	20000280 	.word	0x20000280
 8001780:	2000048c 	.word	0x2000048c
 8001784:	20000bb4 	.word	0x20000bb4
 8001788:	20000428 	.word	0x20000428

0800178c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800179c:	d104      	bne.n	80017a8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		msTime++;
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	3301      	adds	r3, #1
 80017a4:	4a03      	ldr	r2, [pc, #12]	; (80017b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80017a6:	6013      	str	r3, [r2, #0]
	}
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	20000284 	.word	0x20000284

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017be:	f002 fc8a 	bl	80040d6 <HAL_Init>

  /* USER CODE END Init */


  /* Configure the system clock */
  SystemClock_Config();
 80017c2:	f000 ff5d 	bl	8002680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c6:	f001 fbab 	bl	8002f20 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80017ca:	f000 ffff 	bl	80027cc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80017ce:	f001 f835 	bl	800283c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80017d2:	f001 f873 	bl	80028bc <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80017d6:	f001 f897 	bl	8002908 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80017da:	f001 fae3 	bl	8002da4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80017de:	f001 fb41 	bl	8002e64 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80017e2:	f001 fb6f 	bl	8002ec4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80017e6:	f001 f8cd 	bl	8002984 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017ea:	f001 f917 	bl	8002a1c <MX_TIM3_Init>
  MX_TIM4_Init();
 80017ee:	f001 f98d 	bl	8002b0c <MX_TIM4_Init>
  MX_TIM5_Init();
 80017f2:	f001 fa03 	bl	8002bfc <MX_TIM5_Init>
  MX_TIM17_Init();
 80017f6:	f001 fa5d 	bl	8002cb4 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 80017fa:	f001 fb03 	bl	8002e04 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rData, 1);
 80017fe:	2201      	movs	r2, #1
 8001800:	49b5      	ldr	r1, [pc, #724]	; (8001ad8 <main+0x320>)
 8001802:	48b6      	ldr	r0, [pc, #728]	; (8001adc <main+0x324>)
 8001804:	f007 f948 	bl	8008a98 <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim2);
 8001808:	48b5      	ldr	r0, [pc, #724]	; (8001ae0 <main+0x328>)
 800180a:	f005 fe5b 	bl	80074c4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800180e:	2100      	movs	r1, #0
 8001810:	48b4      	ldr	r0, [pc, #720]	; (8001ae4 <main+0x32c>)
 8001812:	f005 ff1f 	bl	8007654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001816:	2100      	movs	r1, #0
 8001818:	48b3      	ldr	r0, [pc, #716]	; (8001ae8 <main+0x330>)
 800181a:	f005 ff1b 	bl	8007654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800181e:	2108      	movs	r1, #8
 8001820:	48b2      	ldr	r0, [pc, #712]	; (8001aec <main+0x334>)
 8001822:	f005 ff17 	bl	8007654 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001826:	2108      	movs	r1, #8
 8001828:	48b1      	ldr	r0, [pc, #708]	; (8001af0 <main+0x338>)
 800182a:	f005 ff13 	bl	8007654 <HAL_TIM_PWM_Start>
  BSP_ACCELERO_Init();
 800182e:	f001 fe45 	bl	80034bc <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 8001832:	f001 fe99 	bl	8003568 <BSP_GYRO_Init>
  //초기값 설정
  for(int j=0; j<100; j++)
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e056      	b.n	80018ea <main+0x132>
  {
	  BSP_ACCELERO_AccGetXYZ(Acc_XYZ_Data);
 800183c:	48ad      	ldr	r0, [pc, #692]	; (8001af4 <main+0x33c>)
 800183e:	f001 fe7b 	bl	8003538 <BSP_ACCELERO_AccGetXYZ>
	  BSP_GYRO_GetXYZ(Gyro_XYZ_Data);
 8001842:	48ad      	ldr	r0, [pc, #692]	; (8001af8 <main+0x340>)
 8001844:	f001 fed2 	bl	80035ec <BSP_GYRO_GetXYZ>
	  sum[0] += Acc_XYZ_Data[0];
 8001848:	4bac      	ldr	r3, [pc, #688]	; (8001afc <main+0x344>)
 800184a:	ed93 7a00 	vldr	s14, [r3]
 800184e:	4ba9      	ldr	r3, [pc, #676]	; (8001af4 <main+0x33c>)
 8001850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001860:	4ba6      	ldr	r3, [pc, #664]	; (8001afc <main+0x344>)
 8001862:	edc3 7a00 	vstr	s15, [r3]
	  sum[1] += Acc_XYZ_Data[1];
 8001866:	4ba5      	ldr	r3, [pc, #660]	; (8001afc <main+0x344>)
 8001868:	ed93 7a01 	vldr	s14, [r3, #4]
 800186c:	4ba1      	ldr	r3, [pc, #644]	; (8001af4 <main+0x33c>)
 800186e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187e:	4b9f      	ldr	r3, [pc, #636]	; (8001afc <main+0x344>)
 8001880:	edc3 7a01 	vstr	s15, [r3, #4]
	  sum[2] += Acc_XYZ_Data[2];
 8001884:	4b9d      	ldr	r3, [pc, #628]	; (8001afc <main+0x344>)
 8001886:	ed93 7a02 	vldr	s14, [r3, #8]
 800188a:	4b9a      	ldr	r3, [pc, #616]	; (8001af4 <main+0x33c>)
 800188c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001890:	ee07 3a90 	vmov	s15, r3
 8001894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189c:	4b97      	ldr	r3, [pc, #604]	; (8001afc <main+0x344>)
 800189e:	edc3 7a02 	vstr	s15, [r3, #8]
	  g_sum[0] += Gyro_XYZ_Data[0];
 80018a2:	4b97      	ldr	r3, [pc, #604]	; (8001b00 <main+0x348>)
 80018a4:	ed93 7a00 	vldr	s14, [r3]
 80018a8:	4b93      	ldr	r3, [pc, #588]	; (8001af8 <main+0x340>)
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b2:	4b93      	ldr	r3, [pc, #588]	; (8001b00 <main+0x348>)
 80018b4:	edc3 7a00 	vstr	s15, [r3]
	  g_sum[1] += Gyro_XYZ_Data[1];
 80018b8:	4b91      	ldr	r3, [pc, #580]	; (8001b00 <main+0x348>)
 80018ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80018be:	4b8e      	ldr	r3, [pc, #568]	; (8001af8 <main+0x340>)
 80018c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80018c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c8:	4b8d      	ldr	r3, [pc, #564]	; (8001b00 <main+0x348>)
 80018ca:	edc3 7a01 	vstr	s15, [r3, #4]
	  g_sum[2] += Gyro_XYZ_Data[2];
 80018ce:	4b8c      	ldr	r3, [pc, #560]	; (8001b00 <main+0x348>)
 80018d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80018d4:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <main+0x340>)
 80018d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80018da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018de:	4b88      	ldr	r3, [pc, #544]	; (8001b00 <main+0x348>)
 80018e0:	edc3 7a02 	vstr	s15, [r3, #8]
  for(int j=0; j<100; j++)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3301      	adds	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b63      	cmp	r3, #99	; 0x63
 80018ee:	dda5      	ble.n	800183c <main+0x84>
  }
  BaseAc[0] = sum[0] / 100;
 80018f0:	4b82      	ldr	r3, [pc, #520]	; (8001afc <main+0x344>)
 80018f2:	ed93 7a00 	vldr	s14, [r3]
 80018f6:	eddf 6a83 	vldr	s13, [pc, #524]	; 8001b04 <main+0x34c>
 80018fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018fe:	4b82      	ldr	r3, [pc, #520]	; (8001b08 <main+0x350>)
 8001900:	edc3 7a00 	vstr	s15, [r3]
  BaseAc[1] = sum[1] / 100;
 8001904:	4b7d      	ldr	r3, [pc, #500]	; (8001afc <main+0x344>)
 8001906:	ed93 7a01 	vldr	s14, [r3, #4]
 800190a:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8001b04 <main+0x34c>
 800190e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001912:	4b7d      	ldr	r3, [pc, #500]	; (8001b08 <main+0x350>)
 8001914:	edc3 7a01 	vstr	s15, [r3, #4]
  BaseAc[2] = sum[2] / 100;
 8001918:	4b78      	ldr	r3, [pc, #480]	; (8001afc <main+0x344>)
 800191a:	ed93 7a02 	vldr	s14, [r3, #8]
 800191e:	eddf 6a79 	vldr	s13, [pc, #484]	; 8001b04 <main+0x34c>
 8001922:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001926:	4b78      	ldr	r3, [pc, #480]	; (8001b08 <main+0x350>)
 8001928:	edc3 7a02 	vstr	s15, [r3, #8]
  BaseG[0] = g_sum[0] / 100;
 800192c:	4b74      	ldr	r3, [pc, #464]	; (8001b00 <main+0x348>)
 800192e:	ed93 7a00 	vldr	s14, [r3]
 8001932:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001b04 <main+0x34c>
 8001936:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193a:	4b74      	ldr	r3, [pc, #464]	; (8001b0c <main+0x354>)
 800193c:	edc3 7a00 	vstr	s15, [r3]
  BaseG[1] = g_sum[1] / 100;
 8001940:	4b6f      	ldr	r3, [pc, #444]	; (8001b00 <main+0x348>)
 8001942:	ed93 7a01 	vldr	s14, [r3, #4]
 8001946:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8001b04 <main+0x34c>
 800194a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194e:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <main+0x354>)
 8001950:	edc3 7a01 	vstr	s15, [r3, #4]
  BaseG[2] = g_sum[2] / 100;
 8001954:	4b6a      	ldr	r3, [pc, #424]	; (8001b00 <main+0x348>)
 8001956:	ed93 7a02 	vldr	s14, [r3, #8]
 800195a:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8001b04 <main+0x34c>
 800195e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001962:	4b6a      	ldr	r3, [pc, #424]	; (8001b0c <main+0x354>)
 8001964:	edc3 7a02 	vstr	s15, [r3, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //각도, 각속도 측정
	  BSP_ACCELERO_AccGetXYZ(Acc_XYZ_Data);
 8001968:	4862      	ldr	r0, [pc, #392]	; (8001af4 <main+0x33c>)
 800196a:	f001 fde5 	bl	8003538 <BSP_ACCELERO_AccGetXYZ>
	  BSP_GYRO_GetXYZ(Gyro_XYZ_Data);
 800196e:	4862      	ldr	r0, [pc, #392]	; (8001af8 <main+0x340>)
 8001970:	f001 fe3c 	bl	80035ec <BSP_GYRO_GetXYZ>
	  //각도 필터
	  fAcc[0] = Acc_XYZ_Data[0] - BaseAc[0];
 8001974:	4b5f      	ldr	r3, [pc, #380]	; (8001af4 <main+0x33c>)
 8001976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001982:	4b61      	ldr	r3, [pc, #388]	; (8001b08 <main+0x350>)
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198c:	4b60      	ldr	r3, [pc, #384]	; (8001b10 <main+0x358>)
 800198e:	edc3 7a00 	vstr	s15, [r3]
	  fAcc[1] = Acc_XYZ_Data[1] - BaseAc[1];
 8001992:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <main+0x33c>)
 8001994:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a0:	4b59      	ldr	r3, [pc, #356]	; (8001b08 <main+0x350>)
 80019a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80019a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019aa:	4b59      	ldr	r3, [pc, #356]	; (8001b10 <main+0x358>)
 80019ac:	edc3 7a01 	vstr	s15, [r3, #4]
	  fAcc[2] = Acc_XYZ_Data[2] + 1008 - BaseAc[2];
 80019b0:	4b50      	ldr	r3, [pc, #320]	; (8001af4 <main+0x33c>)
 80019b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019b6:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c2:	4b51      	ldr	r3, [pc, #324]	; (8001b08 <main+0x350>)
 80019c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80019c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019cc:	4b50      	ldr	r3, [pc, #320]	; (8001b10 <main+0x358>)
 80019ce:	edc3 7a02 	vstr	s15, [r3, #8]

	  for(int j=0;j<3;j++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	e032      	b.n	8001a3e <main+0x286>
		  LPF_Output[j] = (0.05 * LPF_Output[j]) + (1-0.05) * fAcc[j];
 80019d8:	4a4e      	ldr	r2, [pc, #312]	; (8001b14 <main+0x35c>)
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fdb0 	bl	8000548 <__aeabi_f2d>
 80019e8:	a337      	add	r3, pc, #220	; (adr r3, 8001ac8 <main+0x310>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	f7fe fe03 	bl	80005f8 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4614      	mov	r4, r2
 80019f8:	461d      	mov	r5, r3
 80019fa:	4a45      	ldr	r2, [pc, #276]	; (8001b10 <main+0x358>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fd9f 	bl	8000548 <__aeabi_f2d>
 8001a0a:	a331      	add	r3, pc, #196	; (adr r3, 8001ad0 <main+0x318>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe fdf2 	bl	80005f8 <__aeabi_dmul>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4620      	mov	r0, r4
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f7fe fc36 	bl	800028c <__adddf3>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7ff f8de 	bl	8000be8 <__aeabi_d2f>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	4939      	ldr	r1, [pc, #228]	; (8001b14 <main+0x35c>)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	601a      	str	r2, [r3, #0]
	  for(int j=0;j<3;j++)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	ddc9      	ble.n	80019d8 <main+0x220>

	  AcXYZ[0] = LPF_Output[0];
 8001a44:	4b33      	ldr	r3, [pc, #204]	; (8001b14 <main+0x35c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a33      	ldr	r2, [pc, #204]	; (8001b18 <main+0x360>)
 8001a4a:	6013      	str	r3, [r2, #0]
	  AcXYZ[1] = LPF_Output[1];
 8001a4c:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <main+0x35c>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4a31      	ldr	r2, [pc, #196]	; (8001b18 <main+0x360>)
 8001a52:	6053      	str	r3, [r2, #4]
	  AcXYZ[2] = LPF_Output[2];
 8001a54:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <main+0x35c>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	4a2f      	ldr	r2, [pc, #188]	; (8001b18 <main+0x360>)
 8001a5a:	6093      	str	r3, [r2, #8]
	  //가속도 필터

	  fGyro[0] = -((Gyro_XYZ_Data[0] - BaseG[0]) / 12.5); //65536
 8001a5c:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <main+0x340>)
 8001a5e:	ed93 7a00 	vldr	s14, [r3]
 8001a62:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <main+0x354>)
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a6c:	eef2 6a09 	vmov.f32	s13, #41	; 0x41480000  12.5
 8001a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a74:	eef1 7a67 	vneg.f32	s15, s15
 8001a78:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <main+0x364>)
 8001a7a:	edc3 7a00 	vstr	s15, [r3]
	  fGyro[1] = ((Gyro_XYZ_Data[1] - BaseG[1]) / 16);
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <main+0x340>)
 8001a80:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a84:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <main+0x354>)
 8001a86:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a8e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001a92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a96:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <main+0x364>)
 8001a98:	edc3 7a01 	vstr	s15, [r3, #4]
	  fGyro[2] = -((Gyro_XYZ_Data[2] - BaseG[2]) / 20);
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <main+0x340>)
 8001a9e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <main+0x354>)
 8001aa4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001aa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aac:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001ab0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab4:	eef1 7a67 	vneg.f32	s15, s15
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <main+0x364>)
 8001aba:	edc3 7a02 	vstr	s15, [r3, #8]

	  for(int j=0;j<3;j++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	e060      	b.n	8001b86 <main+0x3ce>
 8001ac4:	f3af 8000 	nop.w
 8001ac8:	9999999a 	.word	0x9999999a
 8001acc:	3fa99999 	.word	0x3fa99999
 8001ad0:	66666666 	.word	0x66666666
 8001ad4:	3fee6666 	.word	0x3fee6666
 8001ad8:	20000b7e 	.word	0x20000b7e
 8001adc:	20000c14 	.word	0x20000c14
 8001ae0:	20000bc8 	.word	0x20000bc8
 8001ae4:	2000097c 	.word	0x2000097c
 8001ae8:	200009cc 	.word	0x200009cc
 8001aec:	20000440 	.word	0x20000440
 8001af0:	20000a18 	.word	0x20000a18
 8001af4:	200002a4 	.word	0x200002a4
 8001af8:	200002ac 	.word	0x200002ac
 8001afc:	200002f4 	.word	0x200002f4
 8001b00:	20000300 	.word	0x20000300
 8001b04:	42c80000 	.word	0x42c80000
 8001b08:	20000318 	.word	0x20000318
 8001b0c:	20000324 	.word	0x20000324
 8001b10:	200002c4 	.word	0x200002c4
 8001b14:	200002b8 	.word	0x200002b8
 8001b18:	2000030c 	.word	0x2000030c
 8001b1c:	200002dc 	.word	0x200002dc
		  LGY_Output[j] = (0.05 * LGY_Output[j]) + (1-0.05) * fGyro[j];
 8001b20:	4ac9      	ldr	r2, [pc, #804]	; (8001e48 <main+0x690>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fd0c 	bl	8000548 <__aeabi_f2d>
 8001b30:	a3b7      	add	r3, pc, #732	; (adr r3, 8001e10 <main+0x658>)
 8001b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b36:	f7fe fd5f 	bl	80005f8 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4614      	mov	r4, r2
 8001b40:	461d      	mov	r5, r3
 8001b42:	4ac2      	ldr	r2, [pc, #776]	; (8001e4c <main+0x694>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fcfb 	bl	8000548 <__aeabi_f2d>
 8001b52:	a3b1      	add	r3, pc, #708	; (adr r3, 8001e18 <main+0x660>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fd4e 	bl	80005f8 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4620      	mov	r0, r4
 8001b62:	4629      	mov	r1, r5
 8001b64:	f7fe fb92 	bl	800028c <__adddf3>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f7ff f83a 	bl	8000be8 <__aeabi_d2f>
 8001b74:	4602      	mov	r2, r0
 8001b76:	49b4      	ldr	r1, [pc, #720]	; (8001e48 <main+0x690>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	601a      	str	r2, [r3, #0]
	  for(int j=0;j<3;j++)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3301      	adds	r3, #1
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	ddc9      	ble.n	8001b20 <main+0x368>

	  fGyro[0] = LGY_Output[0];
 8001b8c:	4bae      	ldr	r3, [pc, #696]	; (8001e48 <main+0x690>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4aae      	ldr	r2, [pc, #696]	; (8001e4c <main+0x694>)
 8001b92:	6013      	str	r3, [r2, #0]
	  fGyro[1] = LGY_Output[1];
 8001b94:	4bac      	ldr	r3, [pc, #688]	; (8001e48 <main+0x690>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	4aac      	ldr	r2, [pc, #688]	; (8001e4c <main+0x694>)
 8001b9a:	6053      	str	r3, [r2, #4]
	  fGyro[2] =  LGY_Output[2];
 8001b9c:	4baa      	ldr	r3, [pc, #680]	; (8001e48 <main+0x690>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4aaa      	ldr	r2, [pc, #680]	; (8001e4c <main+0x694>)
 8001ba2:	6093      	str	r3, [r2, #8]

	  Gyro_Pitch_Input = (Gyro_Pitch_Input * 0.7) + ((fGyro[0] / 65.5) * 0.3);
 8001ba4:	4baa      	ldr	r3, [pc, #680]	; (8001e50 <main+0x698>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fccd 	bl	8000548 <__aeabi_f2d>
 8001bae:	a39c      	add	r3, pc, #624	; (adr r3, 8001e20 <main+0x668>)
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	f7fe fd20 	bl	80005f8 <__aeabi_dmul>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4614      	mov	r4, r2
 8001bbe:	461d      	mov	r5, r3
 8001bc0:	4ba2      	ldr	r3, [pc, #648]	; (8001e4c <main+0x694>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fcbf 	bl	8000548 <__aeabi_f2d>
 8001bca:	a397      	add	r3, pc, #604	; (adr r3, 8001e28 <main+0x670>)
 8001bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd0:	f7fe fe3c 	bl	800084c <__aeabi_ddiv>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	a394      	add	r3, pc, #592	; (adr r3, 8001e30 <main+0x678>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	f7fe fd09 	bl	80005f8 <__aeabi_dmul>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4620      	mov	r0, r4
 8001bec:	4629      	mov	r1, r5
 8001bee:	f7fe fb4d 	bl	800028c <__adddf3>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f7fe fff5 	bl	8000be8 <__aeabi_d2f>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4a93      	ldr	r2, [pc, #588]	; (8001e50 <main+0x698>)
 8001c02:	6013      	str	r3, [r2, #0]
	  Gyro_Roll_Input  = (Gyro_Roll_Input * 0.7)  + ((fGyro[1] / 65.5) * 0.3);
 8001c04:	4b93      	ldr	r3, [pc, #588]	; (8001e54 <main+0x69c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fc9d 	bl	8000548 <__aeabi_f2d>
 8001c0e:	a384      	add	r3, pc, #528	; (adr r3, 8001e20 <main+0x668>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f7fe fcf0 	bl	80005f8 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4614      	mov	r4, r2
 8001c1e:	461d      	mov	r5, r3
 8001c20:	4b8a      	ldr	r3, [pc, #552]	; (8001e4c <main+0x694>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc8f 	bl	8000548 <__aeabi_f2d>
 8001c2a:	a37f      	add	r3, pc, #508	; (adr r3, 8001e28 <main+0x670>)
 8001c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c30:	f7fe fe0c 	bl	800084c <__aeabi_ddiv>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	a37c      	add	r3, pc, #496	; (adr r3, 8001e30 <main+0x678>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f7fe fcd9 	bl	80005f8 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	f7fe fb1d 	bl	800028c <__adddf3>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe ffc5 	bl	8000be8 <__aeabi_d2f>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4a7c      	ldr	r2, [pc, #496]	; (8001e54 <main+0x69c>)
 8001c62:	6013      	str	r3, [r2, #0]
	  Gyro_Yaw_Input   = (Gyro_Yaw_Input * 0.7)   + ((fGyro[2] / 65.5) * 0.3);
 8001c64:	4b7c      	ldr	r3, [pc, #496]	; (8001e58 <main+0x6a0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc6d 	bl	8000548 <__aeabi_f2d>
 8001c6e:	a36c      	add	r3, pc, #432	; (adr r3, 8001e20 <main+0x668>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	f7fe fcc0 	bl	80005f8 <__aeabi_dmul>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4614      	mov	r4, r2
 8001c7e:	461d      	mov	r5, r3
 8001c80:	4b72      	ldr	r3, [pc, #456]	; (8001e4c <main+0x694>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fc5f 	bl	8000548 <__aeabi_f2d>
 8001c8a:	a367      	add	r3, pc, #412	; (adr r3, 8001e28 <main+0x670>)
 8001c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c90:	f7fe fddc 	bl	800084c <__aeabi_ddiv>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	a364      	add	r3, pc, #400	; (adr r3, 8001e30 <main+0x678>)
 8001c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca2:	f7fe fca9 	bl	80005f8 <__aeabi_dmul>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4620      	mov	r0, r4
 8001cac:	4629      	mov	r1, r5
 8001cae:	f7fe faed 	bl	800028c <__adddf3>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f7fe ff95 	bl	8000be8 <__aeabi_d2f>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4a65      	ldr	r2, [pc, #404]	; (8001e58 <main+0x6a0>)
 8001cc2:	6013      	str	r3, [r2, #0]

	  now_angle[0] = now_angle[0] + (fGyro[0] *  0.0000382);
 8001cc4:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <main+0x6a4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fc3d 	bl	8000548 <__aeabi_f2d>
 8001cce:	4604      	mov	r4, r0
 8001cd0:	460d      	mov	r5, r1
 8001cd2:	4b5e      	ldr	r3, [pc, #376]	; (8001e4c <main+0x694>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc36 	bl	8000548 <__aeabi_f2d>
 8001cdc:	a356      	add	r3, pc, #344	; (adr r3, 8001e38 <main+0x680>)
 8001cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce2:	f7fe fc89 	bl	80005f8 <__aeabi_dmul>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4620      	mov	r0, r4
 8001cec:	4629      	mov	r1, r5
 8001cee:	f7fe facd 	bl	800028c <__adddf3>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f7fe ff75 	bl	8000be8 <__aeabi_d2f>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4a56      	ldr	r2, [pc, #344]	; (8001e5c <main+0x6a4>)
 8001d02:	6013      	str	r3, [r2, #0]
	  now_angle[1]  = now_angle[1]  + (fGyro[1] *  0.0000382);
 8001d04:	4b55      	ldr	r3, [pc, #340]	; (8001e5c <main+0x6a4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fc1d 	bl	8000548 <__aeabi_f2d>
 8001d0e:	4604      	mov	r4, r0
 8001d10:	460d      	mov	r5, r1
 8001d12:	4b4e      	ldr	r3, [pc, #312]	; (8001e4c <main+0x694>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fc16 	bl	8000548 <__aeabi_f2d>
 8001d1c:	a346      	add	r3, pc, #280	; (adr r3, 8001e38 <main+0x680>)
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	f7fe fc69 	bl	80005f8 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	4629      	mov	r1, r5
 8001d2e:	f7fe faad 	bl	800028c <__adddf3>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f7fe ff55 	bl	8000be8 <__aeabi_d2f>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4a46      	ldr	r2, [pc, #280]	; (8001e5c <main+0x6a4>)
 8001d42:	6053      	str	r3, [r2, #4]

	  //각도 자료형 변환
	  accel_xz = sqrt(pow(AcXYZ[0],2) + pow(AcXYZ[2],2));
 8001d44:	4b46      	ldr	r3, [pc, #280]	; (8001e60 <main+0x6a8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fbfd 	bl	8000548 <__aeabi_f2d>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8001e40 <main+0x688>
 8001d56:	ec43 2b10 	vmov	d0, r2, r3
 8001d5a:	f00c ff9f 	bl	800ec9c <pow>
 8001d5e:	ec55 4b10 	vmov	r4, r5, d0
 8001d62:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <main+0x6a8>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbee 	bl	8000548 <__aeabi_f2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8001e40 <main+0x688>
 8001d74:	ec43 2b10 	vmov	d0, r2, r3
 8001d78:	f00c ff90 	bl	800ec9c <pow>
 8001d7c:	ec53 2b10 	vmov	r2, r3, d0
 8001d80:	4620      	mov	r0, r4
 8001d82:	4629      	mov	r1, r5
 8001d84:	f7fe fa82 	bl	800028c <__adddf3>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	ec43 2b17 	vmov	d7, r2, r3
 8001d90:	eeb0 0a47 	vmov.f32	s0, s14
 8001d94:	eef0 0a67 	vmov.f32	s1, s15
 8001d98:	f00d f82e 	bl	800edf8 <sqrt>
 8001d9c:	ec53 2b10 	vmov	r2, r3, d0
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	f7fe ff20 	bl	8000be8 <__aeabi_d2f>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4a2e      	ldr	r2, [pc, #184]	; (8001e64 <main+0x6ac>)
 8001dac:	6013      	str	r3, [r2, #0]
	  accel_angle_x = atan(-AcXYZ[1]/accel_xz) * RADIANS_TO_DEGREES;
 8001dae:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <main+0x6a8>)
 8001db0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001db4:	eeb1 7a67 	vneg.f32	s14, s15
 8001db8:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <main+0x6ac>)
 8001dba:	edd3 7a00 	vldr	s15, [r3]
 8001dbe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dc2:	ee16 0a90 	vmov	r0, s13
 8001dc6:	f7fe fbbf 	bl	8000548 <__aeabi_f2d>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	ec43 2b10 	vmov	d0, r2, r3
 8001dd2:	f00c fdb9 	bl	800e948 <atan>
 8001dd6:	ec55 4b10 	vmov	r4, r5, d0
 8001dda:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <main+0x6b0>)
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fbb3 	bl	8000548 <__aeabi_f2d>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4620      	mov	r0, r4
 8001de8:	4629      	mov	r1, r5
 8001dea:	f7fe fc05 	bl	80005f8 <__aeabi_dmul>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	f7fe fef7 	bl	8000be8 <__aeabi_d2f>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4a1b      	ldr	r2, [pc, #108]	; (8001e6c <main+0x6b4>)
 8001dfe:	6013      	str	r3, [r2, #0]
	  accel_yz = sqrt(pow(AcXYZ[1],2) + pow(AcXYZ[2],2));
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <main+0x6a8>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb9f 	bl	8000548 <__aeabi_f2d>
 8001e0a:	e031      	b.n	8001e70 <main+0x6b8>
 8001e0c:	f3af 8000 	nop.w
 8001e10:	9999999a 	.word	0x9999999a
 8001e14:	3fa99999 	.word	0x3fa99999
 8001e18:	66666666 	.word	0x66666666
 8001e1c:	3fee6666 	.word	0x3fee6666
 8001e20:	66666666 	.word	0x66666666
 8001e24:	3fe66666 	.word	0x3fe66666
 8001e28:	00000000 	.word	0x00000000
 8001e2c:	40506000 	.word	0x40506000
 8001e30:	33333333 	.word	0x33333333
 8001e34:	3fd33333 	.word	0x3fd33333
 8001e38:	0172c6c7 	.word	0x0172c6c7
 8001e3c:	3f04071e 	.word	0x3f04071e
 8001e40:	00000000 	.word	0x00000000
 8001e44:	40000000 	.word	0x40000000
 8001e48:	200002d0 	.word	0x200002d0
 8001e4c:	200002dc 	.word	0x200002dc
 8001e50:	200002e8 	.word	0x200002e8
 8001e54:	200002ec 	.word	0x200002ec
 8001e58:	200002f0 	.word	0x200002f0
 8001e5c:	20000c98 	.word	0x20000c98
 8001e60:	2000030c 	.word	0x2000030c
 8001e64:	20000cec 	.word	0x20000cec
 8001e68:	42652eee 	.word	0x42652eee
 8001e6c:	2000043c 	.word	0x2000043c
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8002000 <main+0x848>
 8001e78:	ec43 2b10 	vmov	d0, r2, r3
 8001e7c:	f00c ff0e 	bl	800ec9c <pow>
 8001e80:	ec55 4b10 	vmov	r4, r5, d0
 8001e84:	4b64      	ldr	r3, [pc, #400]	; (8002018 <main+0x860>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb5d 	bl	8000548 <__aeabi_f2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8002000 <main+0x848>
 8001e96:	ec43 2b10 	vmov	d0, r2, r3
 8001e9a:	f00c feff 	bl	800ec9c <pow>
 8001e9e:	ec53 2b10 	vmov	r2, r3, d0
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	f7fe f9f1 	bl	800028c <__adddf3>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	ec43 2b17 	vmov	d7, r2, r3
 8001eb2:	eeb0 0a47 	vmov.f32	s0, s14
 8001eb6:	eef0 0a67 	vmov.f32	s1, s15
 8001eba:	f00c ff9d 	bl	800edf8 <sqrt>
 8001ebe:	ec53 2b10 	vmov	r2, r3, d0
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f7fe fe8f 	bl	8000be8 <__aeabi_d2f>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4a53      	ldr	r2, [pc, #332]	; (800201c <main+0x864>)
 8001ece:	6013      	str	r3, [r2, #0]
	  accel_angle_y = atan(-AcXYZ[0]/accel_yz) * RADIANS_TO_DEGREES;
 8001ed0:	4b51      	ldr	r3, [pc, #324]	; (8002018 <main+0x860>)
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	eeb1 7a67 	vneg.f32	s14, s15
 8001eda:	4b50      	ldr	r3, [pc, #320]	; (800201c <main+0x864>)
 8001edc:	edd3 7a00 	vldr	s15, [r3]
 8001ee0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ee4:	ee16 0a90 	vmov	r0, s13
 8001ee8:	f7fe fb2e 	bl	8000548 <__aeabi_f2d>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	ec43 2b10 	vmov	d0, r2, r3
 8001ef4:	f00c fd28 	bl	800e948 <atan>
 8001ef8:	ec55 4b10 	vmov	r4, r5, d0
 8001efc:	4b48      	ldr	r3, [pc, #288]	; (8002020 <main+0x868>)
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fb22 	bl	8000548 <__aeabi_f2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4620      	mov	r0, r4
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f7fe fe66 	bl	8000be8 <__aeabi_d2f>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4a41      	ldr	r2, [pc, #260]	; (8002024 <main+0x86c>)
 8001f20:	6013      	str	r3, [r2, #0]
	  accel_angle_z = 0;
 8001f22:	4b41      	ldr	r3, [pc, #260]	; (8002028 <main+0x870>)
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]

	  //각속도, 각도의 비율을 조절
	  now_angle[0] = (0.9996 * now_angle[0] + (0.0004)*accel_angle_x);			//x		Pitch
 8001f2a:	4b40      	ldr	r3, [pc, #256]	; (800202c <main+0x874>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fb0a 	bl	8000548 <__aeabi_f2d>
 8001f34:	a334      	add	r3, pc, #208	; (adr r3, 8002008 <main+0x850>)
 8001f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3a:	f7fe fb5d 	bl	80005f8 <__aeabi_dmul>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4614      	mov	r4, r2
 8001f44:	461d      	mov	r5, r3
 8001f46:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <main+0x878>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fafc 	bl	8000548 <__aeabi_f2d>
 8001f50:	a32f      	add	r3, pc, #188	; (adr r3, 8002010 <main+0x858>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe fb4f 	bl	80005f8 <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4629      	mov	r1, r5
 8001f62:	f7fe f993 	bl	800028c <__adddf3>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7fe fe3b 	bl	8000be8 <__aeabi_d2f>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4a2d      	ldr	r2, [pc, #180]	; (800202c <main+0x874>)
 8001f76:	6013      	str	r3, [r2, #0]
	  now_angle[1] = (0.9996 * now_angle[1] + (0.0004)*accel_angle_y);			//y		Roll
 8001f78:	4b2c      	ldr	r3, [pc, #176]	; (800202c <main+0x874>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fae3 	bl	8000548 <__aeabi_f2d>
 8001f82:	a321      	add	r3, pc, #132	; (adr r3, 8002008 <main+0x850>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f7fe fb36 	bl	80005f8 <__aeabi_dmul>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4614      	mov	r4, r2
 8001f92:	461d      	mov	r5, r3
 8001f94:	4b23      	ldr	r3, [pc, #140]	; (8002024 <main+0x86c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fad5 	bl	8000548 <__aeabi_f2d>
 8001f9e:	a31c      	add	r3, pc, #112	; (adr r3, 8002010 <main+0x858>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	f7fe fb28 	bl	80005f8 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4620      	mov	r0, r4
 8001fae:	4629      	mov	r1, r5
 8001fb0:	f7fe f96c 	bl	800028c <__adddf3>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7fe fe14 	bl	8000be8 <__aeabi_d2f>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4a1a      	ldr	r2, [pc, #104]	; (800202c <main+0x874>)
 8001fc4:	6053      	str	r3, [r2, #4]
	  now_angle[2] = Gyro_Yaw_Input;													//z		Yaw
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <main+0x87c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a18      	ldr	r2, [pc, #96]	; (800202c <main+0x874>)
 8001fcc:	6093      	str	r3, [r2, #8]
	  //now_angle[2] = temp_angleZ;
	  for(int j=0; j <3; j++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	603b      	str	r3, [r7, #0]
 8001fd2:	e04b      	b.n	800206c <main+0x8b4>
	  {
		  if(now_angle[j]>35)
 8001fd4:	4a15      	ldr	r2, [pc, #84]	; (800202c <main+0x874>)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	edd3 7a00 	vldr	s15, [r3]
 8001fe0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002038 <main+0x880>
 8001fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fec:	dd28      	ble.n	8002040 <main+0x888>
			  now_angle[j] = 35;
 8001fee:	4a0f      	ldr	r2, [pc, #60]	; (800202c <main+0x874>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	4a11      	ldr	r2, [pc, #68]	; (800203c <main+0x884>)
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e034      	b.n	8002066 <main+0x8ae>
 8001ffc:	f3af 8000 	nop.w
 8002000:	00000000 	.word	0x00000000
 8002004:	40000000 	.word	0x40000000
 8002008:	23a29c78 	.word	0x23a29c78
 800200c:	3feffcb9 	.word	0x3feffcb9
 8002010:	eb1c432d 	.word	0xeb1c432d
 8002014:	3f3a36e2 	.word	0x3f3a36e2
 8002018:	2000030c 	.word	0x2000030c
 800201c:	200009c8 	.word	0x200009c8
 8002020:	42652eee 	.word	0x42652eee
 8002024:	20000ca4 	.word	0x20000ca4
 8002028:	2000092c 	.word	0x2000092c
 800202c:	20000c98 	.word	0x20000c98
 8002030:	2000043c 	.word	0x2000043c
 8002034:	200002f0 	.word	0x200002f0
 8002038:	420c0000 	.word	0x420c0000
 800203c:	420c0000 	.word	0x420c0000
		  else if( now_angle[j]<-35)
 8002040:	4ac7      	ldr	r2, [pc, #796]	; (8002360 <main+0xba8>)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8002364 <main+0xbac>
 8002050:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002058:	d505      	bpl.n	8002066 <main+0x8ae>
			  now_angle[j] = -35;
 800205a:	4ac1      	ldr	r2, [pc, #772]	; (8002360 <main+0xba8>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	4ac1      	ldr	r2, [pc, #772]	; (8002368 <main+0xbb0>)
 8002064:	601a      	str	r2, [r3, #0]
	  for(int j=0; j <3; j++)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	2b02      	cmp	r3, #2
 8002070:	ddb0      	ble.n	8001fd4 <main+0x81c>
	  }
	  goal_angle[0] = (PwmTime[2]-112);
 8002072:	4bbe      	ldr	r3, [pc, #760]	; (800236c <main+0xbb4>)
 8002074:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002078:	3b70      	subs	r3, #112	; 0x70
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002082:	4bbb      	ldr	r3, [pc, #748]	; (8002370 <main+0xbb8>)
 8002084:	edc3 7a00 	vstr	s15, [r3]
	  goal_angle[1] = -(PwmTime[0]-112);
 8002088:	4bb8      	ldr	r3, [pc, #736]	; (800236c <main+0xbb4>)
 800208a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800208e:	f1c3 0370 	rsb	r3, r3, #112	; 0x70
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209a:	4bb5      	ldr	r3, [pc, #724]	; (8002370 <main+0xbb8>)
 800209c:	edc3 7a01 	vstr	s15, [r3, #4]
	  goal_angle[2] = -(PwmTime[3]-112);
 80020a0:	4bb2      	ldr	r3, [pc, #712]	; (800236c <main+0xbb4>)
 80020a2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80020a6:	f1c3 0370 	rsb	r3, r3, #112	; 0x70
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b2:	4baf      	ldr	r3, [pc, #700]	; (8002370 <main+0xbb8>)
 80020b4:	edc3 7a02 	vstr	s15, [r3, #8]

	  //목표값과 기기상태값의 차이를 error로 저장
	  error[0] = (goal_angle[0] - now_angle[0]);
 80020b8:	4bad      	ldr	r3, [pc, #692]	; (8002370 <main+0xbb8>)
 80020ba:	ed93 7a00 	vldr	s14, [r3]
 80020be:	4ba8      	ldr	r3, [pc, #672]	; (8002360 <main+0xba8>)
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c8:	4baa      	ldr	r3, [pc, #680]	; (8002374 <main+0xbbc>)
 80020ca:	edc3 7a00 	vstr	s15, [r3]
	  error[1] = (goal_angle[1] - now_angle[1]);
 80020ce:	4ba8      	ldr	r3, [pc, #672]	; (8002370 <main+0xbb8>)
 80020d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80020d4:	4ba2      	ldr	r3, [pc, #648]	; (8002360 <main+0xba8>)
 80020d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80020da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020de:	4ba5      	ldr	r3, [pc, #660]	; (8002374 <main+0xbbc>)
 80020e0:	edc3 7a01 	vstr	s15, [r3, #4]
	  error[2] = (goal_angle[2] - now_angle[2]);
 80020e4:	4ba2      	ldr	r3, [pc, #648]	; (8002370 <main+0xbb8>)
 80020e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80020ea:	4b9d      	ldr	r3, [pc, #628]	; (8002360 <main+0xba8>)
 80020ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80020f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f4:	4b9f      	ldr	r3, [pc, #636]	; (8002374 <main+0xbbc>)
 80020f6:	edc3 7a02 	vstr	s15, [r3, #8]

	  //2중 PID제어
	  PID_P[0]  = Kp * error[0];
 80020fa:	4b9e      	ldr	r3, [pc, #632]	; (8002374 <main+0xbbc>)
 80020fc:	ed93 7a00 	vldr	s14, [r3]
 8002100:	4b9d      	ldr	r3, [pc, #628]	; (8002378 <main+0xbc0>)
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210a:	4b9c      	ldr	r3, [pc, #624]	; (800237c <main+0xbc4>)
 800210c:	edc3 7a00 	vstr	s15, [r3]
	  PID_I[0]  = Ki * error[0] * DTime;
 8002110:	4b98      	ldr	r3, [pc, #608]	; (8002374 <main+0xbbc>)
 8002112:	ed93 7a00 	vldr	s14, [r3]
 8002116:	4b9a      	ldr	r3, [pc, #616]	; (8002380 <main+0xbc8>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002120:	4b98      	ldr	r3, [pc, #608]	; (8002384 <main+0xbcc>)
 8002122:	edd3 7a00 	vldr	s15, [r3]
 8002126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212a:	4b97      	ldr	r3, [pc, #604]	; (8002388 <main+0xbd0>)
 800212c:	edc3 7a00 	vstr	s15, [r3]
	  PID_D[0]  = Kd * (error[0]-_error[0]);
 8002130:	4b90      	ldr	r3, [pc, #576]	; (8002374 <main+0xbbc>)
 8002132:	ed93 7a00 	vldr	s14, [r3]
 8002136:	4b95      	ldr	r3, [pc, #596]	; (800238c <main+0xbd4>)
 8002138:	edd3 7a00 	vldr	s15, [r3]
 800213c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002140:	4b93      	ldr	r3, [pc, #588]	; (8002390 <main+0xbd8>)
 8002142:	edd3 7a00 	vldr	s15, [r3]
 8002146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214a:	4b92      	ldr	r3, [pc, #584]	; (8002394 <main+0xbdc>)
 800214c:	edc3 7a00 	vstr	s15, [r3]

	  PID_P[1]  = Kp * error[1];
 8002150:	4b88      	ldr	r3, [pc, #544]	; (8002374 <main+0xbbc>)
 8002152:	ed93 7a01 	vldr	s14, [r3, #4]
 8002156:	4b88      	ldr	r3, [pc, #544]	; (8002378 <main+0xbc0>)
 8002158:	edd3 7a00 	vldr	s15, [r3]
 800215c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002160:	4b86      	ldr	r3, [pc, #536]	; (800237c <main+0xbc4>)
 8002162:	edc3 7a01 	vstr	s15, [r3, #4]
	  PID_I[1]  = Ki * error[1] * DTime;
 8002166:	4b83      	ldr	r3, [pc, #524]	; (8002374 <main+0xbbc>)
 8002168:	ed93 7a01 	vldr	s14, [r3, #4]
 800216c:	4b84      	ldr	r3, [pc, #528]	; (8002380 <main+0xbc8>)
 800216e:	edd3 7a00 	vldr	s15, [r3]
 8002172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002176:	4b83      	ldr	r3, [pc, #524]	; (8002384 <main+0xbcc>)
 8002178:	edd3 7a00 	vldr	s15, [r3]
 800217c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002180:	4b81      	ldr	r3, [pc, #516]	; (8002388 <main+0xbd0>)
 8002182:	edc3 7a01 	vstr	s15, [r3, #4]
	  PID_D[1]  = Kd * (error[1]-_error[1]);
 8002186:	4b7b      	ldr	r3, [pc, #492]	; (8002374 <main+0xbbc>)
 8002188:	ed93 7a01 	vldr	s14, [r3, #4]
 800218c:	4b7f      	ldr	r3, [pc, #508]	; (800238c <main+0xbd4>)
 800218e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002192:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002196:	4b7e      	ldr	r3, [pc, #504]	; (8002390 <main+0xbd8>)
 8002198:	edd3 7a00 	vldr	s15, [r3]
 800219c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a0:	4b7c      	ldr	r3, [pc, #496]	; (8002394 <main+0xbdc>)
 80021a2:	edc3 7a01 	vstr	s15, [r3, #4]

	  PID_P[2]  = Kp * error[2];
 80021a6:	4b73      	ldr	r3, [pc, #460]	; (8002374 <main+0xbbc>)
 80021a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80021ac:	4b72      	ldr	r3, [pc, #456]	; (8002378 <main+0xbc0>)
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b6:	4b71      	ldr	r3, [pc, #452]	; (800237c <main+0xbc4>)
 80021b8:	edc3 7a02 	vstr	s15, [r3, #8]
	  PID_I[2]  = Ki * error[2] * DTime;
 80021bc:	4b6d      	ldr	r3, [pc, #436]	; (8002374 <main+0xbbc>)
 80021be:	ed93 7a02 	vldr	s14, [r3, #8]
 80021c2:	4b6f      	ldr	r3, [pc, #444]	; (8002380 <main+0xbc8>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021cc:	4b6d      	ldr	r3, [pc, #436]	; (8002384 <main+0xbcc>)
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d6:	4b6c      	ldr	r3, [pc, #432]	; (8002388 <main+0xbd0>)
 80021d8:	edc3 7a02 	vstr	s15, [r3, #8]
	  PID_D[2]  = Kd * (error[2]-_error[2]);
 80021dc:	4b65      	ldr	r3, [pc, #404]	; (8002374 <main+0xbbc>)
 80021de:	ed93 7a02 	vldr	s14, [r3, #8]
 80021e2:	4b6a      	ldr	r3, [pc, #424]	; (800238c <main+0xbd4>)
 80021e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80021e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ec:	4b68      	ldr	r3, [pc, #416]	; (8002390 <main+0xbd8>)
 80021ee:	edd3 7a00 	vldr	s15, [r3]
 80021f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f6:	4b67      	ldr	r3, [pc, #412]	; (8002394 <main+0xbdc>)
 80021f8:	edc3 7a02 	vstr	s15, [r3, #8]




	  g_error[0] = PID_P[0] - (Gyro_Pitch_Input*0.05); //GyroX
 80021fc:	4b5f      	ldr	r3, [pc, #380]	; (800237c <main+0xbc4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe f9a1 	bl	8000548 <__aeabi_f2d>
 8002206:	4604      	mov	r4, r0
 8002208:	460d      	mov	r5, r1
 800220a:	4b63      	ldr	r3, [pc, #396]	; (8002398 <main+0xbe0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f99a 	bl	8000548 <__aeabi_f2d>
 8002214:	a350      	add	r3, pc, #320	; (adr r3, 8002358 <main+0xba0>)
 8002216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221a:	f7fe f9ed 	bl	80005f8 <__aeabi_dmul>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4620      	mov	r0, r4
 8002224:	4629      	mov	r1, r5
 8002226:	f7fe f82f 	bl	8000288 <__aeabi_dsub>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	f7fe fcd9 	bl	8000be8 <__aeabi_d2f>
 8002236:	4603      	mov	r3, r0
 8002238:	4a58      	ldr	r2, [pc, #352]	; (800239c <main+0xbe4>)
 800223a:	6013      	str	r3, [r2, #0]
	  g_error[1] = PID_P[1] - (Gyro_Roll_Input*0.05);
 800223c:	4b4f      	ldr	r3, [pc, #316]	; (800237c <main+0xbc4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe f981 	bl	8000548 <__aeabi_f2d>
 8002246:	4604      	mov	r4, r0
 8002248:	460d      	mov	r5, r1
 800224a:	4b55      	ldr	r3, [pc, #340]	; (80023a0 <main+0xbe8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f97a 	bl	8000548 <__aeabi_f2d>
 8002254:	a340      	add	r3, pc, #256	; (adr r3, 8002358 <main+0xba0>)
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	f7fe f9cd 	bl	80005f8 <__aeabi_dmul>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4620      	mov	r0, r4
 8002264:	4629      	mov	r1, r5
 8002266:	f7fe f80f 	bl	8000288 <__aeabi_dsub>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4610      	mov	r0, r2
 8002270:	4619      	mov	r1, r3
 8002272:	f7fe fcb9 	bl	8000be8 <__aeabi_d2f>
 8002276:	4603      	mov	r3, r0
 8002278:	4a48      	ldr	r2, [pc, #288]	; (800239c <main+0xbe4>)
 800227a:	6053      	str	r3, [r2, #4]
	  g_error[2] = PID_P[2] - (Gyro_Yaw_Input*0.05);
 800227c:	4b3f      	ldr	r3, [pc, #252]	; (800237c <main+0xbc4>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe f961 	bl	8000548 <__aeabi_f2d>
 8002286:	4604      	mov	r4, r0
 8002288:	460d      	mov	r5, r1
 800228a:	4b46      	ldr	r3, [pc, #280]	; (80023a4 <main+0xbec>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe f95a 	bl	8000548 <__aeabi_f2d>
 8002294:	a330      	add	r3, pc, #192	; (adr r3, 8002358 <main+0xba0>)
 8002296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229a:	f7fe f9ad 	bl	80005f8 <__aeabi_dmul>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4620      	mov	r0, r4
 80022a4:	4629      	mov	r1, r5
 80022a6:	f7fd ffef 	bl	8000288 <__aeabi_dsub>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4610      	mov	r0, r2
 80022b0:	4619      	mov	r1, r3
 80022b2:	f7fe fc99 	bl	8000be8 <__aeabi_d2f>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4a38      	ldr	r2, [pc, #224]	; (800239c <main+0xbe4>)
 80022ba:	6093      	str	r3, [r2, #8]

	  g_PID_P[0]  = g_Kp * g_error[0];
 80022bc:	4b37      	ldr	r3, [pc, #220]	; (800239c <main+0xbe4>)
 80022be:	ed93 7a00 	vldr	s14, [r3]
 80022c2:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <main+0xbf0>)
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022cc:	4b37      	ldr	r3, [pc, #220]	; (80023ac <main+0xbf4>)
 80022ce:	edc3 7a00 	vstr	s15, [r3]
	  g_PID_I[0] += g_Ki * g_error[0]*DTime;
 80022d2:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <main+0xbf8>)
 80022d4:	ed93 7a00 	vldr	s14, [r3]
 80022d8:	4b30      	ldr	r3, [pc, #192]	; (800239c <main+0xbe4>)
 80022da:	edd3 6a00 	vldr	s13, [r3]
 80022de:	4b35      	ldr	r3, [pc, #212]	; (80023b4 <main+0xbfc>)
 80022e0:	edd3 7a00 	vldr	s15, [r3]
 80022e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022e8:	4b26      	ldr	r3, [pc, #152]	; (8002384 <main+0xbcc>)
 80022ea:	edd3 7a00 	vldr	s15, [r3]
 80022ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f6:	4b2e      	ldr	r3, [pc, #184]	; (80023b0 <main+0xbf8>)
 80022f8:	edc3 7a00 	vstr	s15, [r3]
	  g_PID_D[0]  = g_Kd * (g_error[0]-_g_error[0]);
 80022fc:	4b27      	ldr	r3, [pc, #156]	; (800239c <main+0xbe4>)
 80022fe:	ed93 7a00 	vldr	s14, [r3]
 8002302:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <main+0xc00>)
 8002304:	edd3 7a00 	vldr	s15, [r3]
 8002308:	ee37 7a67 	vsub.f32	s14, s14, s15
 800230c:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <main+0xc04>)
 800230e:	edd3 7a00 	vldr	s15, [r3]
 8002312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002316:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <main+0xc08>)
 8002318:	edc3 7a00 	vstr	s15, [r3]

	  g_PID_P[1]  = g_Kp * g_error[1];
 800231c:	4b1f      	ldr	r3, [pc, #124]	; (800239c <main+0xbe4>)
 800231e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002322:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <main+0xbf0>)
 8002324:	edd3 7a00 	vldr	s15, [r3]
 8002328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232c:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <main+0xbf4>)
 800232e:	edc3 7a01 	vstr	s15, [r3, #4]
	  g_PID_I[1] += g_Ki * g_error[1]*DTime;
 8002332:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <main+0xbf8>)
 8002334:	ed93 7a01 	vldr	s14, [r3, #4]
 8002338:	4b18      	ldr	r3, [pc, #96]	; (800239c <main+0xbe4>)
 800233a:	edd3 6a01 	vldr	s13, [r3, #4]
 800233e:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <main+0xbfc>)
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <main+0xbcc>)
 800234a:	edd3 7a00 	vldr	s15, [r3]
 800234e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002352:	e037      	b.n	80023c4 <main+0xc0c>
 8002354:	f3af 8000 	nop.w
 8002358:	9999999a 	.word	0x9999999a
 800235c:	3fa99999 	.word	0x3fa99999
 8002360:	20000c98 	.word	0x20000c98
 8002364:	c20c0000 	.word	0xc20c0000
 8002368:	c20c0000 	.word	0xc20c0000
 800236c:	20000428 	.word	0x20000428
 8002370:	200003a8 	.word	0x200003a8
 8002374:	20000330 	.word	0x20000330
 8002378:	20000068 	.word	0x20000068
 800237c:	20000348 	.word	0x20000348
 8002380:	20000288 	.word	0x20000288
 8002384:	20000074 	.word	0x20000074
 8002388:	20000354 	.word	0x20000354
 800238c:	2000033c 	.word	0x2000033c
 8002390:	2000028c 	.word	0x2000028c
 8002394:	20000360 	.word	0x20000360
 8002398:	200002e8 	.word	0x200002e8
 800239c:	2000036c 	.word	0x2000036c
 80023a0:	200002ec 	.word	0x200002ec
 80023a4:	200002f0 	.word	0x200002f0
 80023a8:	2000006c 	.word	0x2000006c
 80023ac:	20000384 	.word	0x20000384
 80023b0:	20000390 	.word	0x20000390
 80023b4:	20000290 	.word	0x20000290
 80023b8:	20000378 	.word	0x20000378
 80023bc:	20000070 	.word	0x20000070
 80023c0:	2000039c 	.word	0x2000039c
 80023c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c8:	4b95      	ldr	r3, [pc, #596]	; (8002620 <main+0xe68>)
 80023ca:	edc3 7a01 	vstr	s15, [r3, #4]
	  g_PID_D[1]  = g_Kd * (g_error[1]-_g_error[1]);
 80023ce:	4b95      	ldr	r3, [pc, #596]	; (8002624 <main+0xe6c>)
 80023d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80023d4:	4b94      	ldr	r3, [pc, #592]	; (8002628 <main+0xe70>)
 80023d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80023da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023de:	4b93      	ldr	r3, [pc, #588]	; (800262c <main+0xe74>)
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e8:	4b91      	ldr	r3, [pc, #580]	; (8002630 <main+0xe78>)
 80023ea:	edc3 7a01 	vstr	s15, [r3, #4]

	  g_PID_P[2]  = g_Kp * g_error[2];
 80023ee:	4b8d      	ldr	r3, [pc, #564]	; (8002624 <main+0xe6c>)
 80023f0:	ed93 7a02 	vldr	s14, [r3, #8]
 80023f4:	4b8f      	ldr	r3, [pc, #572]	; (8002634 <main+0xe7c>)
 80023f6:	edd3 7a00 	vldr	s15, [r3]
 80023fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fe:	4b8e      	ldr	r3, [pc, #568]	; (8002638 <main+0xe80>)
 8002400:	edc3 7a02 	vstr	s15, [r3, #8]
	  g_PID_I[2] += g_Ki * g_error[2]*DTime;
 8002404:	4b86      	ldr	r3, [pc, #536]	; (8002620 <main+0xe68>)
 8002406:	ed93 7a02 	vldr	s14, [r3, #8]
 800240a:	4b86      	ldr	r3, [pc, #536]	; (8002624 <main+0xe6c>)
 800240c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002410:	4b8a      	ldr	r3, [pc, #552]	; (800263c <main+0xe84>)
 8002412:	edd3 7a00 	vldr	s15, [r3]
 8002416:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800241a:	4b89      	ldr	r3, [pc, #548]	; (8002640 <main+0xe88>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002428:	4b7d      	ldr	r3, [pc, #500]	; (8002620 <main+0xe68>)
 800242a:	edc3 7a02 	vstr	s15, [r3, #8]
	  g_PID_D[2]  = g_Kd * (g_error[2]-_g_error[2]);
 800242e:	4b7d      	ldr	r3, [pc, #500]	; (8002624 <main+0xe6c>)
 8002430:	ed93 7a02 	vldr	s14, [r3, #8]
 8002434:	4b7c      	ldr	r3, [pc, #496]	; (8002628 <main+0xe70>)
 8002436:	edd3 7a02 	vldr	s15, [r3, #8]
 800243a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800243e:	4b7b      	ldr	r3, [pc, #492]	; (800262c <main+0xe74>)
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002448:	4b79      	ldr	r3, [pc, #484]	; (8002630 <main+0xe78>)
 800244a:	edc3 7a02 	vstr	s15, [r3, #8]

	  pitch_output = (g_PID_P[0] + g_PID_I[0] + g_PID_D[0]);
 800244e:	4b7a      	ldr	r3, [pc, #488]	; (8002638 <main+0xe80>)
 8002450:	ed93 7a00 	vldr	s14, [r3]
 8002454:	4b72      	ldr	r3, [pc, #456]	; (8002620 <main+0xe68>)
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800245e:	4b74      	ldr	r3, [pc, #464]	; (8002630 <main+0xe78>)
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800246c:	ee17 3a90 	vmov	r3, s15
 8002470:	b21a      	sxth	r2, r3
 8002472:	4b74      	ldr	r3, [pc, #464]	; (8002644 <main+0xe8c>)
 8002474:	801a      	strh	r2, [r3, #0]
	  roll_output  = (g_PID_P[1] + g_PID_I[1] + g_PID_D[1]);
 8002476:	4b70      	ldr	r3, [pc, #448]	; (8002638 <main+0xe80>)
 8002478:	ed93 7a01 	vldr	s14, [r3, #4]
 800247c:	4b68      	ldr	r3, [pc, #416]	; (8002620 <main+0xe68>)
 800247e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002482:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002486:	4b6a      	ldr	r3, [pc, #424]	; (8002630 <main+0xe78>)
 8002488:	edd3 7a01 	vldr	s15, [r3, #4]
 800248c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002494:	ee17 3a90 	vmov	r3, s15
 8002498:	b21a      	sxth	r2, r3
 800249a:	4b6b      	ldr	r3, [pc, #428]	; (8002648 <main+0xe90>)
 800249c:	801a      	strh	r2, [r3, #0]
	  yow_output = 0;// g_PID_P[2] + g_PID_I[2];
 800249e:	4b6b      	ldr	r3, [pc, #428]	; (800264c <main+0xe94>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	801a      	strh	r2, [r3, #0]

	  Motor[0] = ((PwmTime[1]-70) ==0|| PwmTime[1]-69 == 0) ? 0 : (PwmTime[1] + yow_output + roll_output + pitch_output) + 38; 		//1
 80024a4:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <main+0xe98>)
 80024a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024aa:	2b46      	cmp	r3, #70	; 0x46
 80024ac:	d016      	beq.n	80024dc <main+0xd24>
 80024ae:	4b68      	ldr	r3, [pc, #416]	; (8002650 <main+0xe98>)
 80024b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024b4:	2b45      	cmp	r3, #69	; 0x45
 80024b6:	d011      	beq.n	80024dc <main+0xd24>
 80024b8:	4b65      	ldr	r3, [pc, #404]	; (8002650 <main+0xe98>)
 80024ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024be:	461a      	mov	r2, r3
 80024c0:	4b62      	ldr	r3, [pc, #392]	; (800264c <main+0xe94>)
 80024c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c6:	4413      	add	r3, r2
 80024c8:	4a5f      	ldr	r2, [pc, #380]	; (8002648 <main+0xe90>)
 80024ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024ce:	4413      	add	r3, r2
 80024d0:	4a5c      	ldr	r2, [pc, #368]	; (8002644 <main+0xe8c>)
 80024d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024d6:	4413      	add	r3, r2
 80024d8:	3326      	adds	r3, #38	; 0x26
 80024da:	e000      	b.n	80024de <main+0xd26>
 80024dc:	2300      	movs	r3, #0
 80024de:	4a5d      	ldr	r2, [pc, #372]	; (8002654 <main+0xe9c>)
 80024e0:	6013      	str	r3, [r2, #0]
	  Motor[1] = ((PwmTime[1]-70) ==0|| PwmTime[1]-69 == 0) ? 0 : (PwmTime[1] - yow_output - roll_output + pitch_output) + 40;		//2
 80024e2:	4b5b      	ldr	r3, [pc, #364]	; (8002650 <main+0xe98>)
 80024e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024e8:	2b46      	cmp	r3, #70	; 0x46
 80024ea:	d016      	beq.n	800251a <main+0xd62>
 80024ec:	4b58      	ldr	r3, [pc, #352]	; (8002650 <main+0xe98>)
 80024ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024f2:	2b45      	cmp	r3, #69	; 0x45
 80024f4:	d011      	beq.n	800251a <main+0xd62>
 80024f6:	4b56      	ldr	r3, [pc, #344]	; (8002650 <main+0xe98>)
 80024f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b53      	ldr	r3, [pc, #332]	; (800264c <main+0xe94>)
 8002500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	4a50      	ldr	r2, [pc, #320]	; (8002648 <main+0xe90>)
 8002508:	f9b2 2000 	ldrsh.w	r2, [r2]
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	4a4d      	ldr	r2, [pc, #308]	; (8002644 <main+0xe8c>)
 8002510:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002514:	4413      	add	r3, r2
 8002516:	3328      	adds	r3, #40	; 0x28
 8002518:	e000      	b.n	800251c <main+0xd64>
 800251a:	2300      	movs	r3, #0
 800251c:	4a4d      	ldr	r2, [pc, #308]	; (8002654 <main+0xe9c>)
 800251e:	6053      	str	r3, [r2, #4]
	  Motor[2] = ((PwmTime[1]-70) ==0|| PwmTime[1]-69 == 0) ? 0 : (PwmTime[1] + yow_output - roll_output - pitch_output) + 40;		//3
 8002520:	4b4b      	ldr	r3, [pc, #300]	; (8002650 <main+0xe98>)
 8002522:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002526:	2b46      	cmp	r3, #70	; 0x46
 8002528:	d016      	beq.n	8002558 <main+0xda0>
 800252a:	4b49      	ldr	r3, [pc, #292]	; (8002650 <main+0xe98>)
 800252c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002530:	2b45      	cmp	r3, #69	; 0x45
 8002532:	d011      	beq.n	8002558 <main+0xda0>
 8002534:	4b46      	ldr	r3, [pc, #280]	; (8002650 <main+0xe98>)
 8002536:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800253a:	461a      	mov	r2, r3
 800253c:	4b43      	ldr	r3, [pc, #268]	; (800264c <main+0xe94>)
 800253e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002542:	4413      	add	r3, r2
 8002544:	4a40      	ldr	r2, [pc, #256]	; (8002648 <main+0xe90>)
 8002546:	f9b2 2000 	ldrsh.w	r2, [r2]
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	4a3d      	ldr	r2, [pc, #244]	; (8002644 <main+0xe8c>)
 800254e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	3328      	adds	r3, #40	; 0x28
 8002556:	e000      	b.n	800255a <main+0xda2>
 8002558:	2300      	movs	r3, #0
 800255a:	4a3e      	ldr	r2, [pc, #248]	; (8002654 <main+0xe9c>)
 800255c:	6093      	str	r3, [r2, #8]
	  Motor[3] = ((PwmTime[1]-70) ==0|| PwmTime[1]-69 == 0) ? 0 : (PwmTime[1] - yow_output + roll_output - pitch_output) + 37;		//4
 800255e:	4b3c      	ldr	r3, [pc, #240]	; (8002650 <main+0xe98>)
 8002560:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002564:	2b46      	cmp	r3, #70	; 0x46
 8002566:	d016      	beq.n	8002596 <main+0xdde>
 8002568:	4b39      	ldr	r3, [pc, #228]	; (8002650 <main+0xe98>)
 800256a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800256e:	2b45      	cmp	r3, #69	; 0x45
 8002570:	d011      	beq.n	8002596 <main+0xdde>
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <main+0xe98>)
 8002574:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002578:	461a      	mov	r2, r3
 800257a:	4b34      	ldr	r3, [pc, #208]	; (800264c <main+0xe94>)
 800257c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	4a31      	ldr	r2, [pc, #196]	; (8002648 <main+0xe90>)
 8002584:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002588:	4413      	add	r3, r2
 800258a:	4a2e      	ldr	r2, [pc, #184]	; (8002644 <main+0xe8c>)
 800258c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	3325      	adds	r3, #37	; 0x25
 8002594:	e000      	b.n	8002598 <main+0xde0>
 8002596:	2300      	movs	r3, #0
 8002598:	4a2e      	ldr	r2, [pc, #184]	; (8002654 <main+0xe9c>)
 800259a:	60d3      	str	r3, [r2, #12]

	  TIM3->CCR3 =  Motor[0];		//PB0	D3			5
 800259c:	4a2e      	ldr	r2, [pc, #184]	; (8002658 <main+0xea0>)
 800259e:	4b2d      	ldr	r3, [pc, #180]	; (8002654 <main+0xe9c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	63d3      	str	r3, [r2, #60]	; 0x3c
	  TIM17->CCR1 = Motor[1];		//PA7	D11			1
 80025a4:	4a2d      	ldr	r2, [pc, #180]	; (800265c <main+0xea4>)
 80025a6:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <main+0xe9c>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM5->CCR1 =  Motor[2];		//PA0	D1  		11
 80025ac:	4a2c      	ldr	r2, [pc, #176]	; (8002660 <main+0xea8>)
 80025ae:	4b29      	ldr	r3, [pc, #164]	; (8002654 <main+0xe9c>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM4->CCR3 =  Motor[3];		//PD14	D2  		7
 80025b4:	4a2b      	ldr	r2, [pc, #172]	; (8002664 <main+0xeac>)
 80025b6:	4b27      	ldr	r3, [pc, #156]	; (8002654 <main+0xe9c>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	63d3      	str	r3, [r2, #60]	; 0x3c

	  //sprintf(Data,"%d,0,10\n",pitch_output); //Motor[0]
	  sprintf(Data,"%f,-50,50\n",now_angle[0]);
 80025bc:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <main+0xeb0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fd ffc1 	bl	8000548 <__aeabi_f2d>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4928      	ldr	r1, [pc, #160]	; (800266c <main+0xeb4>)
 80025cc:	4828      	ldr	r0, [pc, #160]	; (8002670 <main+0xeb8>)
 80025ce:	f008 fc17 	bl	800ae00 <siprintf>
	  HAL_UART_Transmit_IT(&huart1, Data, strlen(Data));
 80025d2:	4827      	ldr	r0, [pc, #156]	; (8002670 <main+0xeb8>)
 80025d4:	f7fd fdfc 	bl	80001d0 <strlen>
 80025d8:	4603      	mov	r3, r0
 80025da:	b29b      	uxth	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	4924      	ldr	r1, [pc, #144]	; (8002670 <main+0xeb8>)
 80025e0:	4824      	ldr	r0, [pc, #144]	; (8002674 <main+0xebc>)
 80025e2:	f006 f9fd 	bl	80089e0 <HAL_UART_Transmit_IT>

	  _error[0] = error[0];
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <main+0xec0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a24      	ldr	r2, [pc, #144]	; (800267c <main+0xec4>)
 80025ec:	6013      	str	r3, [r2, #0]
	  _error[1] = error[1];
 80025ee:	4b22      	ldr	r3, [pc, #136]	; (8002678 <main+0xec0>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4a22      	ldr	r2, [pc, #136]	; (800267c <main+0xec4>)
 80025f4:	6053      	str	r3, [r2, #4]
	  _error[2] = error[2];
 80025f6:	4b20      	ldr	r3, [pc, #128]	; (8002678 <main+0xec0>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4a20      	ldr	r2, [pc, #128]	; (800267c <main+0xec4>)
 80025fc:	6093      	str	r3, [r2, #8]

	  _g_error[0] = g_error[0];
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <main+0xe6c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a09      	ldr	r2, [pc, #36]	; (8002628 <main+0xe70>)
 8002604:	6013      	str	r3, [r2, #0]
	  _g_error[1] = g_error[1];
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <main+0xe6c>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4a07      	ldr	r2, [pc, #28]	; (8002628 <main+0xe70>)
 800260c:	6053      	str	r3, [r2, #4]
	  _g_error[2] = g_error[2];
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <main+0xe6c>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4a05      	ldr	r2, [pc, #20]	; (8002628 <main+0xe70>)
 8002614:	6093      	str	r3, [r2, #8]


	  HAL_Delay(1);
 8002616:	2001      	movs	r0, #1
 8002618:	f001 fdd2 	bl	80041c0 <HAL_Delay>
  {
 800261c:	f7ff b9a4 	b.w	8001968 <main+0x1b0>
 8002620:	20000390 	.word	0x20000390
 8002624:	2000036c 	.word	0x2000036c
 8002628:	20000378 	.word	0x20000378
 800262c:	20000070 	.word	0x20000070
 8002630:	2000039c 	.word	0x2000039c
 8002634:	2000006c 	.word	0x2000006c
 8002638:	20000384 	.word	0x20000384
 800263c:	20000290 	.word	0x20000290
 8002640:	20000074 	.word	0x20000074
 8002644:	2000027c 	.word	0x2000027c
 8002648:	2000027a 	.word	0x2000027a
 800264c:	20000278 	.word	0x20000278
 8002650:	20000428 	.word	0x20000428
 8002654:	20000294 	.word	0x20000294
 8002658:	40000400 	.word	0x40000400
 800265c:	40014800 	.word	0x40014800
 8002660:	40000c00 	.word	0x40000c00
 8002664:	40000800 	.word	0x40000800
 8002668:	20000c98 	.word	0x20000c98
 800266c:	0800fc8c 	.word	0x0800fc8c
 8002670:	20000b4c 	.word	0x20000b4c
 8002674:	20000ac8 	.word	0x20000ac8
 8002678:	20000330 	.word	0x20000330
 800267c:	2000033c 	.word	0x2000033c

08002680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b0b8      	sub	sp, #224	; 0xe0
 8002684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002686:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800268a:	2244      	movs	r2, #68	; 0x44
 800268c:	2100      	movs	r1, #0
 800268e:	4618      	mov	r0, r3
 8002690:	f007 fd2e 	bl	800a0f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002694:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026a4:	463b      	mov	r3, r7
 80026a6:	2288      	movs	r2, #136	; 0x88
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f007 fd20 	bl	800a0f0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80026b0:	f003 fa16 	bl	8005ae0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80026b4:	4b43      	ldr	r3, [pc, #268]	; (80027c4 <SystemClock_Config+0x144>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ba:	4a42      	ldr	r2, [pc, #264]	; (80027c4 <SystemClock_Config+0x144>)
 80026bc:	f023 0318 	bic.w	r3, r3, #24
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80026c4:	2314      	movs	r3, #20
 80026c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80026dc:	2360      	movs	r3, #96	; 0x60
 80026de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026e2:	2302      	movs	r3, #2
 80026e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80026f4:	2328      	movs	r3, #40	; 0x28
 80026f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80026fa:	2307      	movs	r3, #7
 80026fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002700:	2302      	movs	r3, #2
 8002702:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002706:	2302      	movs	r3, #2
 8002708:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800270c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002710:	4618      	mov	r0, r3
 8002712:	f003 fb25 	bl	8005d60 <HAL_RCC_OscConfig>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800271c:	f000 fd78 	bl	8003210 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002720:	230f      	movs	r3, #15
 8002722:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002726:	2303      	movs	r3, #3
 8002728:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002732:	2300      	movs	r3, #0
 8002734:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002738:	2300      	movs	r3, #0
 800273a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800273e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002742:	2104      	movs	r1, #4
 8002744:	4618      	mov	r0, r3
 8002746:	f003 fef1 	bl	800652c <HAL_RCC_ClockConfig>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002750:	f000 fd5e 	bl	8003210 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002754:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <SystemClock_Config+0x148>)
 8002756:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002758:	2300      	movs	r3, #0
 800275a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800275c:	2300      	movs	r3, #0
 800275e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002760:	2300      	movs	r3, #0
 8002762:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002764:	2300      	movs	r3, #0
 8002766:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002768:	2300      	movs	r3, #0
 800276a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800276e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002772:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002774:	2301      	movs	r3, #1
 8002776:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002778:	2301      	movs	r3, #1
 800277a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800277c:	2318      	movs	r3, #24
 800277e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002780:	2307      	movs	r3, #7
 8002782:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002784:	2302      	movs	r3, #2
 8002786:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002788:	2302      	movs	r3, #2
 800278a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800278c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002790:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002792:	463b      	mov	r3, r7
 8002794:	4618      	mov	r0, r3
 8002796:	f004 f8cf 	bl	8006938 <HAL_RCCEx_PeriphCLKConfig>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <SystemClock_Config+0x124>
  {
    Error_Handler();
 80027a0:	f000 fd36 	bl	8003210 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80027a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80027a8:	f003 f9b8 	bl	8005b1c <HAL_PWREx_ControlVoltageScaling>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <SystemClock_Config+0x136>
  {
    Error_Handler();
 80027b2:	f000 fd2d 	bl	8003210 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80027b6:	f004 fba9 	bl	8006f0c <HAL_RCCEx_EnableMSIPLLMode>
}
 80027ba:	bf00      	nop
 80027bc:	37e0      	adds	r7, #224	; 0xe0
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	00012087 	.word	0x00012087

080027cc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80027d0:	4b18      	ldr	r3, [pc, #96]	; (8002834 <MX_DFSDM1_Init+0x68>)
 80027d2:	4a19      	ldr	r2, [pc, #100]	; (8002838 <MX_DFSDM1_Init+0x6c>)
 80027d4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80027d6:	4b17      	ldr	r3, [pc, #92]	; (8002834 <MX_DFSDM1_Init+0x68>)
 80027d8:	2201      	movs	r2, #1
 80027da:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80027dc:	4b15      	ldr	r3, [pc, #84]	; (8002834 <MX_DFSDM1_Init+0x68>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80027e2:	4b14      	ldr	r3, [pc, #80]	; (8002834 <MX_DFSDM1_Init+0x68>)
 80027e4:	2202      	movs	r2, #2
 80027e6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80027e8:	4b12      	ldr	r3, [pc, #72]	; (8002834 <MX_DFSDM1_Init+0x68>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80027ee:	4b11      	ldr	r3, [pc, #68]	; (8002834 <MX_DFSDM1_Init+0x68>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <MX_DFSDM1_Init+0x68>)
 80027f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027fa:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80027fc:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <MX_DFSDM1_Init+0x68>)
 80027fe:	2200      	movs	r2, #0
 8002800:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8002802:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <MX_DFSDM1_Init+0x68>)
 8002804:	2204      	movs	r2, #4
 8002806:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002808:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <MX_DFSDM1_Init+0x68>)
 800280a:	2200      	movs	r2, #0
 800280c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <MX_DFSDM1_Init+0x68>)
 8002810:	2201      	movs	r2, #1
 8002812:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8002814:	4b07      	ldr	r3, [pc, #28]	; (8002834 <MX_DFSDM1_Init+0x68>)
 8002816:	2200      	movs	r2, #0
 8002818:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <MX_DFSDM1_Init+0x68>)
 800281c:	2200      	movs	r2, #0
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8002820:	4804      	ldr	r0, [pc, #16]	; (8002834 <MX_DFSDM1_Init+0x68>)
 8002822:	f001 fe03 	bl	800442c <HAL_DFSDM_ChannelInit>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800282c:	f000 fcf0 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}
 8002834:	200003f0 	.word	0x200003f0
 8002838:	40016020 	.word	0x40016020

0800283c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <MX_I2C2_Init+0x74>)
 8002842:	4a1c      	ldr	r2, [pc, #112]	; (80028b4 <MX_I2C2_Init+0x78>)
 8002844:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8002846:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <MX_I2C2_Init+0x74>)
 8002848:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <MX_I2C2_Init+0x7c>)
 800284a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <MX_I2C2_Init+0x74>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002852:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <MX_I2C2_Init+0x74>)
 8002854:	2201      	movs	r2, #1
 8002856:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002858:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <MX_I2C2_Init+0x74>)
 800285a:	2200      	movs	r2, #0
 800285c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800285e:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <MX_I2C2_Init+0x74>)
 8002860:	2200      	movs	r2, #0
 8002862:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <MX_I2C2_Init+0x74>)
 8002866:	2200      	movs	r2, #0
 8002868:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800286a:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <MX_I2C2_Init+0x74>)
 800286c:	2200      	movs	r2, #0
 800286e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002870:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <MX_I2C2_Init+0x74>)
 8002872:	2200      	movs	r2, #0
 8002874:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002876:	480e      	ldr	r0, [pc, #56]	; (80028b0 <MX_I2C2_Init+0x74>)
 8002878:	f002 fa4a 	bl	8004d10 <HAL_I2C_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002882:	f000 fcc5 	bl	8003210 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002886:	2100      	movs	r1, #0
 8002888:	4809      	ldr	r0, [pc, #36]	; (80028b0 <MX_I2C2_Init+0x74>)
 800288a:	f002 ff49 	bl	8005720 <HAL_I2CEx_ConfigAnalogFilter>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002894:	f000 fcbc 	bl	8003210 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002898:	2100      	movs	r1, #0
 800289a:	4805      	ldr	r0, [pc, #20]	; (80028b0 <MX_I2C2_Init+0x74>)
 800289c:	f002 ff8b 	bl	80057b6 <HAL_I2CEx_ConfigDigitalFilter>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80028a6:	f000 fcb3 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000930 	.word	0x20000930
 80028b4:	40005800 	.word	0x40005800
 80028b8:	10909cec 	.word	0x10909cec

080028bc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <MX_QUADSPI_Init+0x44>)
 80028c2:	4a10      	ldr	r2, [pc, #64]	; (8002904 <MX_QUADSPI_Init+0x48>)
 80028c4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <MX_QUADSPI_Init+0x44>)
 80028c8:	2202      	movs	r2, #2
 80028ca:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <MX_QUADSPI_Init+0x44>)
 80028ce:	2204      	movs	r2, #4
 80028d0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <MX_QUADSPI_Init+0x44>)
 80028d4:	2210      	movs	r2, #16
 80028d6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80028d8:	4b09      	ldr	r3, [pc, #36]	; (8002900 <MX_QUADSPI_Init+0x44>)
 80028da:	2217      	movs	r2, #23
 80028dc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <MX_QUADSPI_Init+0x44>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <MX_QUADSPI_Init+0x44>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80028ea:	4805      	ldr	r0, [pc, #20]	; (8002900 <MX_QUADSPI_Init+0x44>)
 80028ec:	f003 f97c 	bl	8005be8 <HAL_QSPI_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80028f6:	f000 fc8b 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000ca8 	.word	0x20000ca8
 8002904:	a0001000 	.word	0xa0001000

08002908 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <MX_SPI3_Init+0x74>)
 800290e:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <MX_SPI3_Init+0x78>)
 8002910:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002912:	4b1a      	ldr	r3, [pc, #104]	; (800297c <MX_SPI3_Init+0x74>)
 8002914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002918:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800291a:	4b18      	ldr	r3, [pc, #96]	; (800297c <MX_SPI3_Init+0x74>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002920:	4b16      	ldr	r3, [pc, #88]	; (800297c <MX_SPI3_Init+0x74>)
 8002922:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002926:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <MX_SPI3_Init+0x74>)
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800292e:	4b13      	ldr	r3, [pc, #76]	; (800297c <MX_SPI3_Init+0x74>)
 8002930:	2200      	movs	r2, #0
 8002932:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <MX_SPI3_Init+0x74>)
 8002936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800293a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800293c:	4b0f      	ldr	r3, [pc, #60]	; (800297c <MX_SPI3_Init+0x74>)
 800293e:	2200      	movs	r2, #0
 8002940:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <MX_SPI3_Init+0x74>)
 8002944:	2200      	movs	r2, #0
 8002946:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <MX_SPI3_Init+0x74>)
 800294a:	2200      	movs	r2, #0
 800294c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800294e:	4b0b      	ldr	r3, [pc, #44]	; (800297c <MX_SPI3_Init+0x74>)
 8002950:	2200      	movs	r2, #0
 8002952:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <MX_SPI3_Init+0x74>)
 8002956:	2207      	movs	r2, #7
 8002958:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <MX_SPI3_Init+0x74>)
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <MX_SPI3_Init+0x74>)
 8002962:	2208      	movs	r2, #8
 8002964:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002966:	4805      	ldr	r0, [pc, #20]	; (800297c <MX_SPI3_Init+0x74>)
 8002968:	f004 fcb2 	bl	80072d0 <HAL_SPI_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002972:	f000 fc4d 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000a64 	.word	0x20000a64
 8002980:	40003c00 	.word	0x40003c00

08002984 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800298a:	f107 0310 	add.w	r3, r7, #16
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029a2:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80029aa:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029ac:	2207      	movs	r2, #7
 80029ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b0:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80029b6:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029b8:	2263      	movs	r2, #99	; 0x63
 80029ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029bc:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029c8:	4813      	ldr	r0, [pc, #76]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029ca:	f004 fd24 	bl	8007416 <HAL_TIM_Base_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80029d4:	f000 fc1c 	bl	8003210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029de:	f107 0310 	add.w	r3, r7, #16
 80029e2:	4619      	mov	r1, r3
 80029e4:	480c      	ldr	r0, [pc, #48]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029e6:	f005 f96b 	bl	8007cc0 <HAL_TIM_ConfigClockSource>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80029f0:	f000 fc0e 	bl	8003210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f4:	2300      	movs	r3, #0
 80029f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	4619      	mov	r1, r3
 8002a00:	4805      	ldr	r0, [pc, #20]	; (8002a18 <MX_TIM2_Init+0x94>)
 8002a02:	f005 fe7b 	bl	80086fc <HAL_TIMEx_MasterConfigSynchronization>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002a0c:	f000 fc00 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a10:	bf00      	nop
 8002a12:	3720      	adds	r7, #32
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000bc8 	.word	0x20000bc8

08002a1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08e      	sub	sp, #56	; 0x38
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a30:	f107 031c 	add.w	r3, r7, #28
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a3c:	463b      	mov	r3, r7
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	60da      	str	r2, [r3, #12]
 8002a48:	611a      	str	r2, [r3, #16]
 8002a4a:	615a      	str	r2, [r3, #20]
 8002a4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a4e:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <MX_TIM3_Init+0xe8>)
 8002a50:	4a2d      	ldr	r2, [pc, #180]	; (8002b08 <MX_TIM3_Init+0xec>)
 8002a52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8002a54:	4b2b      	ldr	r3, [pc, #172]	; (8002b04 <MX_TIM3_Init+0xe8>)
 8002a56:	f240 321f 	movw	r2, #799	; 0x31f
 8002a5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a5c:	4b29      	ldr	r3, [pc, #164]	; (8002b04 <MX_TIM3_Init+0xe8>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8002a62:	4b28      	ldr	r3, [pc, #160]	; (8002b04 <MX_TIM3_Init+0xe8>)
 8002a64:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002a68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <MX_TIM3_Init+0xe8>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a70:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <MX_TIM3_Init+0xe8>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a76:	4823      	ldr	r0, [pc, #140]	; (8002b04 <MX_TIM3_Init+0xe8>)
 8002a78:	f004 fccd 	bl	8007416 <HAL_TIM_Base_Init>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8002a82:	f000 fbc5 	bl	8003210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a90:	4619      	mov	r1, r3
 8002a92:	481c      	ldr	r0, [pc, #112]	; (8002b04 <MX_TIM3_Init+0xe8>)
 8002a94:	f005 f914 	bl	8007cc0 <HAL_TIM_ConfigClockSource>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8002a9e:	f000 fbb7 	bl	8003210 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002aa2:	4818      	ldr	r0, [pc, #96]	; (8002b04 <MX_TIM3_Init+0xe8>)
 8002aa4:	f004 fd7e 	bl	80075a4 <HAL_TIM_PWM_Init>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002aae:	f000 fbaf 	bl	8003210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aba:	f107 031c 	add.w	r3, r7, #28
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4810      	ldr	r0, [pc, #64]	; (8002b04 <MX_TIM3_Init+0xe8>)
 8002ac2:	f005 fe1b 	bl	80086fc <HAL_TIMEx_MasterConfigSynchronization>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002acc:	f000 fba0 	bl	8003210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ad0:	2360      	movs	r3, #96	; 0x60
 8002ad2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 99;
 8002ad4:	2363      	movs	r3, #99	; 0x63
 8002ad6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ae0:	463b      	mov	r3, r7
 8002ae2:	2208      	movs	r2, #8
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4807      	ldr	r0, [pc, #28]	; (8002b04 <MX_TIM3_Init+0xe8>)
 8002ae8:	f004 ffda 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002af2:	f000 fb8d 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002af6:	4803      	ldr	r0, [pc, #12]	; (8002b04 <MX_TIM3_Init+0xe8>)
 8002af8:	f000 ff6c 	bl	80039d4 <HAL_TIM_MspPostInit>

}
 8002afc:	bf00      	nop
 8002afe:	3738      	adds	r7, #56	; 0x38
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000a18 	.word	0x20000a18
 8002b08:	40000400 	.word	0x40000400

08002b0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08e      	sub	sp, #56	; 0x38
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b20:	f107 031c 	add.w	r3, r7, #28
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b2c:	463b      	mov	r3, r7
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	60da      	str	r2, [r3, #12]
 8002b38:	611a      	str	r2, [r3, #16]
 8002b3a:	615a      	str	r2, [r3, #20]
 8002b3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b3e:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <MX_TIM4_Init+0xe8>)
 8002b40:	4a2d      	ldr	r2, [pc, #180]	; (8002bf8 <MX_TIM4_Init+0xec>)
 8002b42:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 799;
 8002b44:	4b2b      	ldr	r3, [pc, #172]	; (8002bf4 <MX_TIM4_Init+0xe8>)
 8002b46:	f240 321f 	movw	r2, #799	; 0x31f
 8002b4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4c:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <MX_TIM4_Init+0xe8>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8002b52:	4b28      	ldr	r3, [pc, #160]	; (8002bf4 <MX_TIM4_Init+0xe8>)
 8002b54:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002b58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b5a:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <MX_TIM4_Init+0xe8>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b60:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <MX_TIM4_Init+0xe8>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b66:	4823      	ldr	r0, [pc, #140]	; (8002bf4 <MX_TIM4_Init+0xe8>)
 8002b68:	f004 fc55 	bl	8007416 <HAL_TIM_Base_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8002b72:	f000 fb4d 	bl	8003210 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b80:	4619      	mov	r1, r3
 8002b82:	481c      	ldr	r0, [pc, #112]	; (8002bf4 <MX_TIM4_Init+0xe8>)
 8002b84:	f005 f89c 	bl	8007cc0 <HAL_TIM_ConfigClockSource>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8002b8e:	f000 fb3f 	bl	8003210 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002b92:	4818      	ldr	r0, [pc, #96]	; (8002bf4 <MX_TIM4_Init+0xe8>)
 8002b94:	f004 fd06 	bl	80075a4 <HAL_TIM_PWM_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8002b9e:	f000 fb37 	bl	8003210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002baa:	f107 031c 	add.w	r3, r7, #28
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4810      	ldr	r0, [pc, #64]	; (8002bf4 <MX_TIM4_Init+0xe8>)
 8002bb2:	f005 fda3 	bl	80086fc <HAL_TIMEx_MasterConfigSynchronization>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002bbc:	f000 fb28 	bl	8003210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bc0:	2360      	movs	r3, #96	; 0x60
 8002bc2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 99;
 8002bc4:	2363      	movs	r3, #99	; 0x63
 8002bc6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bd0:	463b      	mov	r3, r7
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4807      	ldr	r0, [pc, #28]	; (8002bf4 <MX_TIM4_Init+0xe8>)
 8002bd8:	f004 ff62 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8002be2:	f000 fb15 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002be6:	4803      	ldr	r0, [pc, #12]	; (8002bf4 <MX_TIM4_Init+0xe8>)
 8002be8:	f000 fef4 	bl	80039d4 <HAL_TIM_MspPostInit>

}
 8002bec:	bf00      	nop
 8002bee:	3738      	adds	r7, #56	; 0x38
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000440 	.word	0x20000440
 8002bf8:	40000800 	.word	0x40000800

08002bfc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	; 0x28
 8002c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c02:	f107 031c 	add.w	r3, r7, #28
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c0e:	463b      	mov	r3, r7
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
 8002c1c:	615a      	str	r2, [r3, #20]
 8002c1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002c20:	4b22      	ldr	r3, [pc, #136]	; (8002cac <MX_TIM5_Init+0xb0>)
 8002c22:	4a23      	ldr	r2, [pc, #140]	; (8002cb0 <MX_TIM5_Init+0xb4>)
 8002c24:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 799;
 8002c26:	4b21      	ldr	r3, [pc, #132]	; (8002cac <MX_TIM5_Init+0xb0>)
 8002c28:	f240 321f 	movw	r2, #799	; 0x31f
 8002c2c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c2e:	4b1f      	ldr	r3, [pc, #124]	; (8002cac <MX_TIM5_Init+0xb0>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8002c34:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <MX_TIM5_Init+0xb0>)
 8002c36:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002c3a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <MX_TIM5_Init+0xb0>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c42:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <MX_TIM5_Init+0xb0>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002c48:	4818      	ldr	r0, [pc, #96]	; (8002cac <MX_TIM5_Init+0xb0>)
 8002c4a:	f004 fcab 	bl	80075a4 <HAL_TIM_PWM_Init>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 8002c54:	f000 fadc 	bl	8003210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c60:	f107 031c 	add.w	r3, r7, #28
 8002c64:	4619      	mov	r1, r3
 8002c66:	4811      	ldr	r0, [pc, #68]	; (8002cac <MX_TIM5_Init+0xb0>)
 8002c68:	f005 fd48 	bl	80086fc <HAL_TIMEx_MasterConfigSynchronization>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8002c72:	f000 facd 	bl	8003210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c76:	2360      	movs	r3, #96	; 0x60
 8002c78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 99;
 8002c7a:	2363      	movs	r3, #99	; 0x63
 8002c7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c86:	463b      	mov	r3, r7
 8002c88:	2200      	movs	r2, #0
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4807      	ldr	r0, [pc, #28]	; (8002cac <MX_TIM5_Init+0xb0>)
 8002c8e:	f004 ff07 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8002c98:	f000 faba 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002c9c:	4803      	ldr	r0, [pc, #12]	; (8002cac <MX_TIM5_Init+0xb0>)
 8002c9e:	f000 fe99 	bl	80039d4 <HAL_TIM_MspPostInit>

}
 8002ca2:	bf00      	nop
 8002ca4:	3728      	adds	r7, #40	; 0x28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	200009cc 	.word	0x200009cc
 8002cb0:	40000c00 	.word	0x40000c00

08002cb4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b092      	sub	sp, #72	; 0x48
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	609a      	str	r2, [r3, #8]
 8002cc6:	60da      	str	r2, [r3, #12]
 8002cc8:	611a      	str	r2, [r3, #16]
 8002cca:	615a      	str	r2, [r3, #20]
 8002ccc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cce:	463b      	mov	r3, r7
 8002cd0:	222c      	movs	r2, #44	; 0x2c
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f007 fa0b 	bl	800a0f0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002cda:	4b30      	ldr	r3, [pc, #192]	; (8002d9c <MX_TIM17_Init+0xe8>)
 8002cdc:	4a30      	ldr	r2, [pc, #192]	; (8002da0 <MX_TIM17_Init+0xec>)
 8002cde:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 799;
 8002ce0:	4b2e      	ldr	r3, [pc, #184]	; (8002d9c <MX_TIM17_Init+0xe8>)
 8002ce2:	f240 321f 	movw	r2, #799	; 0x31f
 8002ce6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce8:	4b2c      	ldr	r3, [pc, #176]	; (8002d9c <MX_TIM17_Init+0xe8>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1999;
 8002cee:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <MX_TIM17_Init+0xe8>)
 8002cf0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002cf4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf6:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <MX_TIM17_Init+0xe8>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002cfc:	4b27      	ldr	r3, [pc, #156]	; (8002d9c <MX_TIM17_Init+0xe8>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d02:	4b26      	ldr	r3, [pc, #152]	; (8002d9c <MX_TIM17_Init+0xe8>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002d08:	4824      	ldr	r0, [pc, #144]	; (8002d9c <MX_TIM17_Init+0xe8>)
 8002d0a:	f004 fb84 	bl	8007416 <HAL_TIM_Base_Init>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8002d14:	f000 fa7c 	bl	8003210 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002d18:	4820      	ldr	r0, [pc, #128]	; (8002d9c <MX_TIM17_Init+0xe8>)
 8002d1a:	f004 fc43 	bl	80075a4 <HAL_TIM_PWM_Init>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8002d24:	f000 fa74 	bl	8003210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d28:	2360      	movs	r3, #96	; 0x60
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 99;
 8002d2c:	2363      	movs	r3, #99	; 0x63
 8002d2e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d30:	2300      	movs	r3, #0
 8002d32:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d34:	2300      	movs	r3, #0
 8002d36:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d40:	2300      	movs	r3, #0
 8002d42:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d48:	2200      	movs	r2, #0
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4813      	ldr	r0, [pc, #76]	; (8002d9c <MX_TIM17_Init+0xe8>)
 8002d4e:	f004 fea7 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8002d58:	f000 fa5a 	bl	8003210 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002d7a:	463b      	mov	r3, r7
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4807      	ldr	r0, [pc, #28]	; (8002d9c <MX_TIM17_Init+0xe8>)
 8002d80:	f005 fd44 	bl	800880c <HAL_TIMEx_ConfigBreakDeadTime>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8002d8a:	f000 fa41 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002d8e:	4803      	ldr	r0, [pc, #12]	; (8002d9c <MX_TIM17_Init+0xe8>)
 8002d90:	f000 fe20 	bl	80039d4 <HAL_TIM_MspPostInit>

}
 8002d94:	bf00      	nop
 8002d96:	3748      	adds	r7, #72	; 0x48
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	2000097c 	.word	0x2000097c
 8002da0:	40014800 	.word	0x40014800

08002da4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002da8:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <MX_USART1_UART_Init+0x54>)
 8002daa:	4a14      	ldr	r2, [pc, #80]	; (8002dfc <MX_USART1_UART_Init+0x58>)
 8002dac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <MX_USART1_UART_Init+0x54>)
 8002db0:	4a13      	ldr	r2, [pc, #76]	; (8002e00 <MX_USART1_UART_Init+0x5c>)
 8002db2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002db4:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <MX_USART1_UART_Init+0x54>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dba:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <MX_USART1_UART_Init+0x54>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <MX_USART1_UART_Init+0x54>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <MX_USART1_UART_Init+0x54>)
 8002dc8:	220c      	movs	r2, #12
 8002dca:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <MX_USART1_UART_Init+0x54>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <MX_USART1_UART_Init+0x54>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dd8:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <MX_USART1_UART_Init+0x54>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <MX_USART1_UART_Init+0x54>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002de4:	4804      	ldr	r0, [pc, #16]	; (8002df8 <MX_USART1_UART_Init+0x54>)
 8002de6:	f005 fdad 	bl	8008944 <HAL_UART_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8002df0:	f000 fa0e 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000ac8 	.word	0x20000ac8
 8002dfc:	40013800 	.word	0x40013800
 8002e00:	000f4240 	.word	0x000f4240

08002e04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e08:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <MX_USART2_UART_Init+0x58>)
 8002e0a:	4a15      	ldr	r2, [pc, #84]	; (8002e60 <MX_USART2_UART_Init+0x5c>)
 8002e0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002e0e:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <MX_USART2_UART_Init+0x58>)
 8002e10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <MX_USART2_UART_Init+0x58>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <MX_USART2_UART_Init+0x58>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <MX_USART2_UART_Init+0x58>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <MX_USART2_UART_Init+0x58>)
 8002e2a:	220c      	movs	r2, #12
 8002e2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <MX_USART2_UART_Init+0x58>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <MX_USART2_UART_Init+0x58>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <MX_USART2_UART_Init+0x58>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <MX_USART2_UART_Init+0x58>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e46:	4805      	ldr	r0, [pc, #20]	; (8002e5c <MX_USART2_UART_Init+0x58>)
 8002e48:	f005 fd7c 	bl	8008944 <HAL_UART_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002e52:	f000 f9dd 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000c14 	.word	0x20000c14
 8002e60:	40004400 	.word	0x40004400

08002e64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e68:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <MX_USART3_UART_Init+0x58>)
 8002e6a:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <MX_USART3_UART_Init+0x5c>)
 8002e6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e6e:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <MX_USART3_UART_Init+0x58>)
 8002e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e76:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <MX_USART3_UART_Init+0x58>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <MX_USART3_UART_Init+0x58>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e82:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <MX_USART3_UART_Init+0x58>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <MX_USART3_UART_Init+0x58>)
 8002e8a:	220c      	movs	r2, #12
 8002e8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <MX_USART3_UART_Init+0x58>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <MX_USART3_UART_Init+0x58>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <MX_USART3_UART_Init+0x58>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <MX_USART3_UART_Init+0x58>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ea6:	4805      	ldr	r0, [pc, #20]	; (8002ebc <MX_USART3_UART_Init+0x58>)
 8002ea8:	f005 fd4c 	bl	8008944 <HAL_UART_Init>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002eb2:	f000 f9ad 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	200004a0 	.word	0x200004a0
 8002ec0:	40004800 	.word	0x40004800

08002ec4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002ec8:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002eca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002ece:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002ed0:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ed2:	2206      	movs	r2, #6
 8002ed4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002ed6:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ed8:	2202      	movs	r2, #2
 8002eda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002edc:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ede:	2202      	movs	r2, #2
 8002ee0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002ef4:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002f06:	4805      	ldr	r0, [pc, #20]	; (8002f1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f08:	f002 fca1 	bl	800584e <HAL_PCD_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002f12:	f000 f97d 	bl	8003210 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000524 	.word	0x20000524

08002f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	; 0x28
 8002f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f26:	f107 0314 	add.w	r3, r7, #20
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f36:	4bae      	ldr	r3, [pc, #696]	; (80031f0 <MX_GPIO_Init+0x2d0>)
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	4aad      	ldr	r2, [pc, #692]	; (80031f0 <MX_GPIO_Init+0x2d0>)
 8002f3c:	f043 0310 	orr.w	r3, r3, #16
 8002f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f42:	4bab      	ldr	r3, [pc, #684]	; (80031f0 <MX_GPIO_Init+0x2d0>)
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f4e:	4ba8      	ldr	r3, [pc, #672]	; (80031f0 <MX_GPIO_Init+0x2d0>)
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	4aa7      	ldr	r2, [pc, #668]	; (80031f0 <MX_GPIO_Init+0x2d0>)
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f5a:	4ba5      	ldr	r3, [pc, #660]	; (80031f0 <MX_GPIO_Init+0x2d0>)
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f66:	4ba2      	ldr	r3, [pc, #648]	; (80031f0 <MX_GPIO_Init+0x2d0>)
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	4aa1      	ldr	r2, [pc, #644]	; (80031f0 <MX_GPIO_Init+0x2d0>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f72:	4b9f      	ldr	r3, [pc, #636]	; (80031f0 <MX_GPIO_Init+0x2d0>)
 8002f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7e:	4b9c      	ldr	r3, [pc, #624]	; (80031f0 <MX_GPIO_Init+0x2d0>)
 8002f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f82:	4a9b      	ldr	r2, [pc, #620]	; (80031f0 <MX_GPIO_Init+0x2d0>)
 8002f84:	f043 0302 	orr.w	r3, r3, #2
 8002f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f8a:	4b99      	ldr	r3, [pc, #612]	; (80031f0 <MX_GPIO_Init+0x2d0>)
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f96:	4b96      	ldr	r3, [pc, #600]	; (80031f0 <MX_GPIO_Init+0x2d0>)
 8002f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9a:	4a95      	ldr	r2, [pc, #596]	; (80031f0 <MX_GPIO_Init+0x2d0>)
 8002f9c:	f043 0308 	orr.w	r3, r3, #8
 8002fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fa2:	4b93      	ldr	r3, [pc, #588]	; (80031f0 <MX_GPIO_Init+0x2d0>)
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002fb4:	488f      	ldr	r0, [pc, #572]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8002fb6:	f001 fe7b 	bl	8004cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f24f 0114 	movw	r1, #61460	; 0xf014
 8002fc0:	488d      	ldr	r0, [pc, #564]	; (80031f8 <MX_GPIO_Init+0x2d8>)
 8002fc2:	f001 fe75 	bl	8004cb0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f241 0181 	movw	r1, #4225	; 0x1081
 8002fcc:	488b      	ldr	r0, [pc, #556]	; (80031fc <MX_GPIO_Init+0x2dc>)
 8002fce:	f001 fe6f 	bl	8004cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fd8:	4888      	ldr	r0, [pc, #544]	; (80031fc <MX_GPIO_Init+0x2dc>)
 8002fda:	f001 fe69 	bl	8004cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002fe4:	4886      	ldr	r0, [pc, #536]	; (8003200 <MX_GPIO_Init+0x2e0>)
 8002fe6:	f001 fe63 	bl	8004cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_RST_GPIO_Port, SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);
 8002fea:	2200      	movs	r2, #0
 8002fec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ff4:	f001 fe5c 	bl	8004cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	2120      	movs	r1, #32
 8002ffc:	487e      	ldr	r0, [pc, #504]	; (80031f8 <MX_GPIO_Init+0x2d8>)
 8002ffe:	f001 fe57 	bl	8004cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003002:	2201      	movs	r2, #1
 8003004:	2101      	movs	r1, #1
 8003006:	487b      	ldr	r0, [pc, #492]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8003008:	f001 fe52 	bl	8004cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800300c:	f240 1315 	movw	r3, #277	; 0x115
 8003010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003012:	2301      	movs	r3, #1
 8003014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301a:	2300      	movs	r3, #0
 800301c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800301e:	f107 0314 	add.w	r3, r7, #20
 8003022:	4619      	mov	r1, r3
 8003024:	4873      	ldr	r0, [pc, #460]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 8003026:	f001 fb8d 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800302a:	236a      	movs	r3, #106	; 0x6a
 800302c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800302e:	4b75      	ldr	r3, [pc, #468]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8003030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	4619      	mov	r1, r3
 800303c:	486d      	ldr	r0, [pc, #436]	; (80031f4 <MX_GPIO_Init+0x2d4>)
 800303e:	f001 fb81 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8003042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003048:	4b6f      	ldr	r3, [pc, #444]	; (8003208 <MX_GPIO_Init+0x2e8>)
 800304a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	4619      	mov	r1, r3
 8003056:	486a      	ldr	r0, [pc, #424]	; (8003200 <MX_GPIO_Init+0x2e0>)
 8003058:	f001 fb74 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800305c:	233f      	movs	r3, #63	; 0x3f
 800305e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003060:	230b      	movs	r3, #11
 8003062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4619      	mov	r1, r3
 800306e:	4864      	ldr	r0, [pc, #400]	; (8003200 <MX_GPIO_Init+0x2e0>)
 8003070:	f001 fb68 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003074:	2310      	movs	r3, #16
 8003076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003078:	4b64      	ldr	r3, [pc, #400]	; (800320c <MX_GPIO_Init+0x2ec>)
 800307a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	4619      	mov	r1, r3
 8003086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800308a:	f001 fb5b 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin;
 800308e:	2360      	movs	r3, #96	; 0x60
 8003090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003092:	2302      	movs	r3, #2
 8003094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309a:	2303      	movs	r3, #3
 800309c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800309e:	2305      	movs	r3, #5
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a2:	f107 0314 	add.w	r3, r7, #20
 80030a6:	4619      	mov	r1, r3
 80030a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030ac:	f001 fb4a 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80030b0:	2302      	movs	r3, #2
 80030b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80030b4:	230b      	movs	r3, #11
 80030b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	4619      	mov	r1, r3
 80030c2:	484d      	ldr	r0, [pc, #308]	; (80031f8 <MX_GPIO_Init+0x2d8>)
 80030c4:	f001 fb3e 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80030c8:	f24f 0334 	movw	r3, #61492	; 0xf034
 80030cc:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ce:	2301      	movs	r3, #1
 80030d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	2300      	movs	r3, #0
 80030d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030da:	f107 0314 	add.w	r3, r7, #20
 80030de:	4619      	mov	r1, r3
 80030e0:	4845      	ldr	r0, [pc, #276]	; (80031f8 <MX_GPIO_Init+0x2d8>)
 80030e2:	f001 fb2f 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
 80030e6:	f648 4304 	movw	r3, #35844	; 0x8c04
 80030ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030ec:	4b45      	ldr	r3, [pc, #276]	; (8003204 <MX_GPIO_Init+0x2e4>)
 80030ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030f4:	f107 0314 	add.w	r3, r7, #20
 80030f8:	4619      	mov	r1, r3
 80030fa:	4840      	ldr	r0, [pc, #256]	; (80031fc <MX_GPIO_Init+0x2dc>)
 80030fc:	f001 fb22 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8003100:	f243 0381 	movw	r3, #12417	; 0x3081
 8003104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003106:	2301      	movs	r3, #1
 8003108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310e:	2300      	movs	r3, #0
 8003110:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003112:	f107 0314 	add.w	r3, r7, #20
 8003116:	4619      	mov	r1, r3
 8003118:	4838      	ldr	r0, [pc, #224]	; (80031fc <MX_GPIO_Init+0x2dc>)
 800311a:	f001 fb13 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800311e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003124:	2301      	movs	r3, #1
 8003126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312c:	2300      	movs	r3, #0
 800312e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003130:	f107 0314 	add.w	r3, r7, #20
 8003134:	4619      	mov	r1, r3
 8003136:	4832      	ldr	r0, [pc, #200]	; (8003200 <MX_GPIO_Init+0x2e0>)
 8003138:	f001 fb04 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800313c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003142:	4b30      	ldr	r3, [pc, #192]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8003144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800314a:	f107 0314 	add.w	r3, r7, #20
 800314e:	4619      	mov	r1, r3
 8003150:	482b      	ldr	r0, [pc, #172]	; (8003200 <MX_GPIO_Init+0x2e0>)
 8003152:	f001 faf7 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPBTLE_RF_RST_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_RST_Pin;
 8003156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800315a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800315c:	2301      	movs	r3, #1
 800315e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003164:	2300      	movs	r3, #0
 8003166:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPBTLE_RF_RST_GPIO_Port, &GPIO_InitStruct);
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	4619      	mov	r1, r3
 800316e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003172:	f001 fae7 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8003176:	2302      	movs	r3, #2
 8003178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317a:	2302      	movs	r3, #2
 800317c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003182:	2303      	movs	r3, #3
 8003184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003186:	2305      	movs	r3, #5
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	4619      	mov	r1, r3
 8003190:	481a      	ldr	r0, [pc, #104]	; (80031fc <MX_GPIO_Init+0x2dc>)
 8003192:	f001 fad7 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8003196:	f44f 7340 	mov.w	r3, #768	; 0x300
 800319a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800319c:	2312      	movs	r3, #18
 800319e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031a0:	2301      	movs	r3, #1
 80031a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a4:	2303      	movs	r3, #3
 80031a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031a8:	2304      	movs	r3, #4
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4619      	mov	r1, r3
 80031b2:	4811      	ldr	r0, [pc, #68]	; (80031f8 <MX_GPIO_Init+0x2d8>)
 80031b4:	f001 fac6 	bl	8004744 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80031b8:	2200      	movs	r2, #0
 80031ba:	2100      	movs	r1, #0
 80031bc:	200a      	movs	r0, #10
 80031be:	f001 f8fe 	bl	80043be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80031c2:	200a      	movs	r0, #10
 80031c4:	f001 f917 	bl	80043f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80031c8:	2200      	movs	r2, #0
 80031ca:	2100      	movs	r1, #0
 80031cc:	2017      	movs	r0, #23
 80031ce:	f001 f8f6 	bl	80043be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80031d2:	2017      	movs	r0, #23
 80031d4:	f001 f90f 	bl	80043f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80031d8:	2200      	movs	r2, #0
 80031da:	2100      	movs	r1, #0
 80031dc:	2028      	movs	r0, #40	; 0x28
 80031de:	f001 f8ee 	bl	80043be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031e2:	2028      	movs	r0, #40	; 0x28
 80031e4:	f001 f907 	bl	80043f6 <HAL_NVIC_EnableIRQ>

}
 80031e8:	bf00      	nop
 80031ea:	3728      	adds	r7, #40	; 0x28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000
 80031f4:	48001000 	.word	0x48001000
 80031f8:	48000400 	.word	0x48000400
 80031fc:	48000c00 	.word	0x48000c00
 8003200:	48000800 	.word	0x48000800
 8003204:	10110000 	.word	0x10110000
 8003208:	10210000 	.word	0x10210000
 800320c:	10310000 	.word	0x10310000

08003210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003214:	b672      	cpsid	i
}
 8003216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003218:	e7fe      	b.n	8003218 <Error_Handler+0x8>
	...

0800321c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	; 0x28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003224:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <I2Cx_MspInit+0xa8>)
 8003226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003228:	4a26      	ldr	r2, [pc, #152]	; (80032c4 <I2Cx_MspInit+0xa8>)
 800322a:	f043 0302 	orr.w	r3, r3, #2
 800322e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003230:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <I2Cx_MspInit+0xa8>)
 8003232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800323c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003240:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003242:	2312      	movs	r3, #18
 8003244:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003246:	2301      	movs	r3, #1
 8003248:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324a:	2303      	movs	r3, #3
 800324c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800324e:	2304      	movs	r3, #4
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003252:	f107 0314 	add.w	r3, r7, #20
 8003256:	4619      	mov	r1, r3
 8003258:	481b      	ldr	r0, [pc, #108]	; (80032c8 <I2Cx_MspInit+0xac>)
 800325a:	f001 fa73 	bl	8004744 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800325e:	f107 0314 	add.w	r3, r7, #20
 8003262:	4619      	mov	r1, r3
 8003264:	4818      	ldr	r0, [pc, #96]	; (80032c8 <I2Cx_MspInit+0xac>)
 8003266:	f001 fa6d 	bl	8004744 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800326a:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <I2Cx_MspInit+0xa8>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <I2Cx_MspInit+0xa8>)
 8003270:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003274:	6593      	str	r3, [r2, #88]	; 0x58
 8003276:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <I2Cx_MspInit+0xa8>)
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <I2Cx_MspInit+0xa8>)
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	4a0f      	ldr	r2, [pc, #60]	; (80032c4 <I2Cx_MspInit+0xa8>)
 8003288:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800328c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800328e:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <I2Cx_MspInit+0xa8>)
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	4a0c      	ldr	r2, [pc, #48]	; (80032c4 <I2Cx_MspInit+0xa8>)
 8003294:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003298:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800329a:	2200      	movs	r2, #0
 800329c:	210f      	movs	r1, #15
 800329e:	2021      	movs	r0, #33	; 0x21
 80032a0:	f001 f88d 	bl	80043be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80032a4:	2021      	movs	r0, #33	; 0x21
 80032a6:	f001 f8a6 	bl	80043f6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80032aa:	2200      	movs	r2, #0
 80032ac:	210f      	movs	r1, #15
 80032ae:	2022      	movs	r0, #34	; 0x22
 80032b0:	f001 f885 	bl	80043be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80032b4:	2022      	movs	r0, #34	; 0x22
 80032b6:	f001 f89e 	bl	80043f6 <HAL_NVIC_EnableIRQ>
}
 80032ba:	bf00      	nop
 80032bc:	3728      	adds	r7, #40	; 0x28
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000
 80032c8:	48000400 	.word	0x48000400

080032cc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a12      	ldr	r2, [pc, #72]	; (8003320 <I2Cx_Init+0x54>)
 80032d8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a11      	ldr	r2, [pc, #68]	; (8003324 <I2Cx_Init+0x58>)
 80032de:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7ff ff89 	bl	800321c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f001 fd00 	bl	8004d10 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003310:	2100      	movs	r1, #0
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f002 fa04 	bl	8005720 <HAL_I2CEx_ConfigAnalogFilter>
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40005800 	.word	0x40005800
 8003324:	00702681 	.word	0x00702681

08003328 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af04      	add	r7, sp, #16
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	4608      	mov	r0, r1
 8003332:	4611      	mov	r1, r2
 8003334:	461a      	mov	r2, r3
 8003336:	4603      	mov	r3, r0
 8003338:	72fb      	strb	r3, [r7, #11]
 800333a:	460b      	mov	r3, r1
 800333c:	813b      	strh	r3, [r7, #8]
 800333e:	4613      	mov	r3, r2
 8003340:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003346:	7afb      	ldrb	r3, [r7, #11]
 8003348:	b299      	uxth	r1, r3
 800334a:	88f8      	ldrh	r0, [r7, #6]
 800334c:	893a      	ldrh	r2, [r7, #8]
 800334e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003352:	9302      	str	r3, [sp, #8]
 8003354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	4603      	mov	r3, r0
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f001 fea8 	bl	80050b4 <HAL_I2C_Mem_Read>
 8003364:	4603      	mov	r3, r0
 8003366:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003368:	7dfb      	ldrb	r3, [r7, #23]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800336e:	7afb      	ldrb	r3, [r7, #11]
 8003370:	4619      	mov	r1, r3
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f832 	bl	80033dc <I2Cx_Error>
  }
  return status;
 8003378:	7dfb      	ldrb	r3, [r7, #23]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b08a      	sub	sp, #40	; 0x28
 8003386:	af04      	add	r7, sp, #16
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	4608      	mov	r0, r1
 800338c:	4611      	mov	r1, r2
 800338e:	461a      	mov	r2, r3
 8003390:	4603      	mov	r3, r0
 8003392:	72fb      	strb	r3, [r7, #11]
 8003394:	460b      	mov	r3, r1
 8003396:	813b      	strh	r3, [r7, #8]
 8003398:	4613      	mov	r3, r2
 800339a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80033a0:	7afb      	ldrb	r3, [r7, #11]
 80033a2:	b299      	uxth	r1, r3
 80033a4:	88f8      	ldrh	r0, [r7, #6]
 80033a6:	893a      	ldrh	r2, [r7, #8]
 80033a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ac:	9302      	str	r3, [sp, #8]
 80033ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	4603      	mov	r3, r0
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f001 fd67 	bl	8004e8c <HAL_I2C_Mem_Write>
 80033be:	4603      	mov	r3, r0
 80033c0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80033c8:	7afb      	ldrb	r3, [r7, #11]
 80033ca:	4619      	mov	r1, r3
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f805 	bl	80033dc <I2Cx_Error>
  }
  return status;
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f001 fd20 	bl	8004e2e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff ff6c 	bl	80032cc <I2Cx_Init>
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <SENSOR_IO_Init+0x10>)
 8003402:	f7ff ff63 	bl	80032cc <I2Cx_Init>
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000d74 	.word	0x20000d74

08003410 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af02      	add	r7, sp, #8
 8003416:	4603      	mov	r3, r0
 8003418:	71fb      	strb	r3, [r7, #7]
 800341a:	460b      	mov	r3, r1
 800341c:	71bb      	strb	r3, [r7, #6]
 800341e:	4613      	mov	r3, r2
 8003420:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003422:	79bb      	ldrb	r3, [r7, #6]
 8003424:	b29a      	uxth	r2, r3
 8003426:	79f9      	ldrb	r1, [r7, #7]
 8003428:	2301      	movs	r3, #1
 800342a:	9301      	str	r3, [sp, #4]
 800342c:	1d7b      	adds	r3, r7, #5
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	2301      	movs	r3, #1
 8003432:	4803      	ldr	r0, [pc, #12]	; (8003440 <SENSOR_IO_Write+0x30>)
 8003434:	f7ff ffa5 	bl	8003382 <I2Cx_WriteMultiple>
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20000d74 	.word	0x20000d74

08003444 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af02      	add	r7, sp, #8
 800344a:	4603      	mov	r3, r0
 800344c:	460a      	mov	r2, r1
 800344e:	71fb      	strb	r3, [r7, #7]
 8003450:	4613      	mov	r3, r2
 8003452:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003458:	79bb      	ldrb	r3, [r7, #6]
 800345a:	b29a      	uxth	r2, r3
 800345c:	79f9      	ldrb	r1, [r7, #7]
 800345e:	2301      	movs	r3, #1
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	f107 030f 	add.w	r3, r7, #15
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2301      	movs	r3, #1
 800346a:	4804      	ldr	r0, [pc, #16]	; (800347c <SENSOR_IO_Read+0x38>)
 800346c:	f7ff ff5c 	bl	8003328 <I2Cx_ReadMultiple>

  return read_value;
 8003470:	7bfb      	ldrb	r3, [r7, #15]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000d74 	.word	0x20000d74

08003480 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af02      	add	r7, sp, #8
 8003486:	603a      	str	r2, [r7, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
 800348e:	460b      	mov	r3, r1
 8003490:	71bb      	strb	r3, [r7, #6]
 8003492:	4613      	mov	r3, r2
 8003494:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003496:	79bb      	ldrb	r3, [r7, #6]
 8003498:	b29a      	uxth	r2, r3
 800349a:	79f9      	ldrb	r1, [r7, #7]
 800349c:	88bb      	ldrh	r3, [r7, #4]
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2301      	movs	r3, #1
 80034a6:	4804      	ldr	r0, [pc, #16]	; (80034b8 <SENSOR_IO_ReadMultiple+0x38>)
 80034a8:	f7ff ff3e 	bl	8003328 <I2Cx_ReadMultiple>
 80034ac:	4603      	mov	r3, r0
 80034ae:	b29b      	uxth	r3, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20000d74 	.word	0x20000d74

080034bc <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80034c6:	2300      	movs	r3, #0
 80034c8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80034ca:	4b19      	ldr	r3, [pc, #100]	; (8003530 <BSP_ACCELERO_Init+0x74>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	4798      	blx	r3
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b6a      	cmp	r3, #106	; 0x6a
 80034d4:	d002      	beq.n	80034dc <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
 80034da:	e024      	b.n	8003526 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80034dc:	4b15      	ldr	r3, [pc, #84]	; (8003534 <BSP_ACCELERO_Init+0x78>)
 80034de:	4a14      	ldr	r2, [pc, #80]	; (8003530 <BSP_ACCELERO_Init+0x74>)
 80034e0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80034e2:	2330      	movs	r3, #48	; 0x30
 80034e4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80034e6:	2300      	movs	r3, #0
 80034e8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80034ea:	2300      	movs	r3, #0
 80034ec:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80034ee:	2340      	movs	r3, #64	; 0x40
 80034f0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80034fa:	797a      	ldrb	r2, [r7, #5]
 80034fc:	7abb      	ldrb	r3, [r7, #10]
 80034fe:	4313      	orrs	r3, r2
 8003500:	b2db      	uxtb	r3, r3
 8003502:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003504:	7a3b      	ldrb	r3, [r7, #8]
 8003506:	f043 0304 	orr.w	r3, r3, #4
 800350a:	b2db      	uxtb	r3, r3
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	b21a      	sxth	r2, r3
 8003510:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	b21b      	sxth	r3, r3
 8003518:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <BSP_ACCELERO_Init+0x78>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	89ba      	ldrh	r2, [r7, #12]
 8003522:	4610      	mov	r0, r2
 8003524:	4798      	blx	r3
  }  

  return ret;
 8003526:	7bfb      	ldrb	r3, [r7, #15]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20000000 	.word	0x20000000
 8003534:	200003b4 	.word	0x200003b4

08003538 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8003540:	4b08      	ldr	r3, [pc, #32]	; (8003564 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d009      	beq.n	800355c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8003552:	4b04      	ldr	r3, [pc, #16]	; (8003564 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	4798      	blx	r3
    }
  }
}
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	200003b4 	.word	0x200003b4

08003568 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003572:	2300      	movs	r3, #0
 8003574:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8003576:	4b1b      	ldr	r3, [pc, #108]	; (80035e4 <BSP_GYRO_Init+0x7c>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	4798      	blx	r3
 800357c:	4603      	mov	r3, r0
 800357e:	2b6a      	cmp	r3, #106	; 0x6a
 8003580:	d002      	beq.n	8003588 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
 8003586:	e028      	b.n	80035da <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8003588:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <BSP_GYRO_Init+0x80>)
 800358a:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <BSP_GYRO_Init+0x7c>)
 800358c:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8003592:	2330      	movs	r3, #48	; 0x30
 8003594:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800359e:	2340      	movs	r3, #64	; 0x40
 80035a0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80035a6:	230c      	movs	r3, #12
 80035a8:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80035aa:	7aba      	ldrb	r2, [r7, #10]
 80035ac:	797b      	ldrb	r3, [r7, #5]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80035b4:	7a3b      	ldrb	r3, [r7, #8]
 80035b6:	f043 0304 	orr.w	r3, r3, #4
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	b21a      	sxth	r2, r3
 80035c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	b21b      	sxth	r3, r3
 80035c8:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80035ca:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <BSP_GYRO_Init+0x80>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	89ba      	ldrh	r2, [r7, #12]
 80035d2:	4610      	mov	r0, r2
 80035d4:	4798      	blx	r3
    
    ret = GYRO_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80035da:	7bfb      	ldrb	r3, [r7, #15]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000034 	.word	0x20000034
 80035e8:	200003b8 	.word	0x200003b8

080035ec <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 80035f4:	4b08      	ldr	r3, [pc, #32]	; (8003618 <BSP_GYRO_GetXYZ+0x2c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d009      	beq.n	8003610 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <BSP_GYRO_GetXYZ+0x2c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	2b00      	cmp	r3, #0
 8003604:	d004      	beq.n	8003610 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8003606:	4b04      	ldr	r3, [pc, #16]	; (8003618 <BSP_GYRO_GetXYZ+0x2c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
    }
  }
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	200003b8 	.word	0x200003b8

0800361c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003622:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <HAL_MspInit+0x44>)
 8003624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003626:	4a0e      	ldr	r2, [pc, #56]	; (8003660 <HAL_MspInit+0x44>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	6613      	str	r3, [r2, #96]	; 0x60
 800362e:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <HAL_MspInit+0x44>)
 8003630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	607b      	str	r3, [r7, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	4b09      	ldr	r3, [pc, #36]	; (8003660 <HAL_MspInit+0x44>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363e:	4a08      	ldr	r2, [pc, #32]	; (8003660 <HAL_MspInit+0x44>)
 8003640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003644:	6593      	str	r3, [r2, #88]	; 0x58
 8003646:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_MspInit+0x44>)
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000

08003664 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800366c:	f107 0314 	add.w	r3, r7, #20
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 800367c:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <HAL_DFSDM_ChannelMspInit+0x84>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d12d      	bne.n	80036e0 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003684:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_DFSDM_ChannelMspInit+0x88>)
 8003686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003688:	4a18      	ldr	r2, [pc, #96]	; (80036ec <HAL_DFSDM_ChannelMspInit+0x88>)
 800368a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800368e:	6613      	str	r3, [r2, #96]	; 0x60
 8003690:	4b16      	ldr	r3, [pc, #88]	; (80036ec <HAL_DFSDM_ChannelMspInit+0x88>)
 8003692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800369c:	4b13      	ldr	r3, [pc, #76]	; (80036ec <HAL_DFSDM_ChannelMspInit+0x88>)
 800369e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a0:	4a12      	ldr	r2, [pc, #72]	; (80036ec <HAL_DFSDM_ChannelMspInit+0x88>)
 80036a2:	f043 0310 	orr.w	r3, r3, #16
 80036a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036a8:	4b10      	ldr	r3, [pc, #64]	; (80036ec <HAL_DFSDM_ChannelMspInit+0x88>)
 80036aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80036b4:	f44f 7320 	mov.w	r3, #640	; 0x280
 80036b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ba:	2302      	movs	r3, #2
 80036bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c2:	2300      	movs	r3, #0
 80036c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80036c6:	2306      	movs	r3, #6
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036ca:	f107 0314 	add.w	r3, r7, #20
 80036ce:	4619      	mov	r1, r3
 80036d0:	4807      	ldr	r0, [pc, #28]	; (80036f0 <HAL_DFSDM_ChannelMspInit+0x8c>)
 80036d2:	f001 f837 	bl	8004744 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80036d6:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <HAL_DFSDM_ChannelMspInit+0x84>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3301      	adds	r3, #1
 80036dc:	4a02      	ldr	r2, [pc, #8]	; (80036e8 <HAL_DFSDM_ChannelMspInit+0x84>)
 80036de:	6013      	str	r3, [r2, #0]
  }

}
 80036e0:	bf00      	nop
 80036e2:	3728      	adds	r7, #40	; 0x28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	200003bc 	.word	0x200003bc
 80036ec:	40021000 	.word	0x40021000
 80036f0:	48001000 	.word	0x48001000

080036f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	; 0x28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a17      	ldr	r2, [pc, #92]	; (8003770 <HAL_I2C_MspInit+0x7c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d128      	bne.n	8003768 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003716:	4b17      	ldr	r3, [pc, #92]	; (8003774 <HAL_I2C_MspInit+0x80>)
 8003718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371a:	4a16      	ldr	r2, [pc, #88]	; (8003774 <HAL_I2C_MspInit+0x80>)
 800371c:	f043 0302 	orr.w	r3, r3, #2
 8003720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003722:	4b14      	ldr	r3, [pc, #80]	; (8003774 <HAL_I2C_MspInit+0x80>)
 8003724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800372e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003734:	2312      	movs	r3, #18
 8003736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003738:	2301      	movs	r3, #1
 800373a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373c:	2303      	movs	r3, #3
 800373e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003740:	2304      	movs	r3, #4
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	4619      	mov	r1, r3
 800374a:	480b      	ldr	r0, [pc, #44]	; (8003778 <HAL_I2C_MspInit+0x84>)
 800374c:	f000 fffa 	bl	8004744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_I2C_MspInit+0x80>)
 8003752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003754:	4a07      	ldr	r2, [pc, #28]	; (8003774 <HAL_I2C_MspInit+0x80>)
 8003756:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800375a:	6593      	str	r3, [r2, #88]	; 0x58
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_I2C_MspInit+0x80>)
 800375e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003768:	bf00      	nop
 800376a:	3728      	adds	r7, #40	; 0x28
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40005800 	.word	0x40005800
 8003774:	40021000 	.word	0x40021000
 8003778:	48000400 	.word	0x48000400

0800377c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0b      	ldr	r2, [pc, #44]	; (80037b8 <HAL_I2C_MspDeInit+0x3c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d10f      	bne.n	80037ae <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_I2C_MspDeInit+0x40>)
 8003790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003792:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <HAL_I2C_MspDeInit+0x40>)
 8003794:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003798:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800379a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800379e:	4808      	ldr	r0, [pc, #32]	; (80037c0 <HAL_I2C_MspDeInit+0x44>)
 80037a0:	f001 f97a 	bl	8004a98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80037a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037a8:	4805      	ldr	r0, [pc, #20]	; (80037c0 <HAL_I2C_MspDeInit+0x44>)
 80037aa:	f001 f975 	bl	8004a98 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40005800 	.word	0x40005800
 80037bc:	40021000 	.word	0x40021000
 80037c0:	48000400 	.word	0x48000400

080037c4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	f107 0314 	add.w	r3, r7, #20
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a17      	ldr	r2, [pc, #92]	; (8003840 <HAL_QSPI_MspInit+0x7c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d128      	bne.n	8003838 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80037e6:	4b17      	ldr	r3, [pc, #92]	; (8003844 <HAL_QSPI_MspInit+0x80>)
 80037e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ea:	4a16      	ldr	r2, [pc, #88]	; (8003844 <HAL_QSPI_MspInit+0x80>)
 80037ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f0:	6513      	str	r3, [r2, #80]	; 0x50
 80037f2:	4b14      	ldr	r3, [pc, #80]	; (8003844 <HAL_QSPI_MspInit+0x80>)
 80037f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037fe:	4b11      	ldr	r3, [pc, #68]	; (8003844 <HAL_QSPI_MspInit+0x80>)
 8003800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003802:	4a10      	ldr	r2, [pc, #64]	; (8003844 <HAL_QSPI_MspInit+0x80>)
 8003804:	f043 0310 	orr.w	r3, r3, #16
 8003808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800380a:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <HAL_QSPI_MspInit+0x80>)
 800380c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8003816:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800381a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381c:	2302      	movs	r3, #2
 800381e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003824:	2303      	movs	r3, #3
 8003826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003828:	230a      	movs	r3, #10
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800382c:	f107 0314 	add.w	r3, r7, #20
 8003830:	4619      	mov	r1, r3
 8003832:	4805      	ldr	r0, [pc, #20]	; (8003848 <HAL_QSPI_MspInit+0x84>)
 8003834:	f000 ff86 	bl	8004744 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003838:	bf00      	nop
 800383a:	3728      	adds	r7, #40	; 0x28
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	a0001000 	.word	0xa0001000
 8003844:	40021000 	.word	0x40021000
 8003848:	48001000 	.word	0x48001000

0800384c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003854:	f107 0314 	add.w	r3, r7, #20
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a17      	ldr	r2, [pc, #92]	; (80038c8 <HAL_SPI_MspInit+0x7c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d128      	bne.n	80038c0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800386e:	4b17      	ldr	r3, [pc, #92]	; (80038cc <HAL_SPI_MspInit+0x80>)
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	4a16      	ldr	r2, [pc, #88]	; (80038cc <HAL_SPI_MspInit+0x80>)
 8003874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003878:	6593      	str	r3, [r2, #88]	; 0x58
 800387a:	4b14      	ldr	r3, [pc, #80]	; (80038cc <HAL_SPI_MspInit+0x80>)
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_SPI_MspInit+0x80>)
 8003888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388a:	4a10      	ldr	r2, [pc, #64]	; (80038cc <HAL_SPI_MspInit+0x80>)
 800388c:	f043 0304 	orr.w	r3, r3, #4
 8003890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <HAL_SPI_MspInit+0x80>)
 8003894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800389e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80038a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a4:	2302      	movs	r3, #2
 80038a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ac:	2303      	movs	r3, #3
 80038ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80038b0:	2306      	movs	r3, #6
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038b4:	f107 0314 	add.w	r3, r7, #20
 80038b8:	4619      	mov	r1, r3
 80038ba:	4805      	ldr	r0, [pc, #20]	; (80038d0 <HAL_SPI_MspInit+0x84>)
 80038bc:	f000 ff42 	bl	8004744 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80038c0:	bf00      	nop
 80038c2:	3728      	adds	r7, #40	; 0x28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40003c00 	.word	0x40003c00
 80038cc:	40021000 	.word	0x40021000
 80038d0:	48000800 	.word	0x48000800

080038d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e4:	d114      	bne.n	8003910 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038e6:	4b27      	ldr	r3, [pc, #156]	; (8003984 <HAL_TIM_Base_MspInit+0xb0>)
 80038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ea:	4a26      	ldr	r2, [pc, #152]	; (8003984 <HAL_TIM_Base_MspInit+0xb0>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6593      	str	r3, [r2, #88]	; 0x58
 80038f2:	4b24      	ldr	r3, [pc, #144]	; (8003984 <HAL_TIM_Base_MspInit+0xb0>)
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80038fe:	2200      	movs	r2, #0
 8003900:	2100      	movs	r1, #0
 8003902:	201c      	movs	r0, #28
 8003904:	f000 fd5b 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003908:	201c      	movs	r0, #28
 800390a:	f000 fd74 	bl	80043f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800390e:	e034      	b.n	800397a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1c      	ldr	r2, [pc, #112]	; (8003988 <HAL_TIM_Base_MspInit+0xb4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d10c      	bne.n	8003934 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800391a:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <HAL_TIM_Base_MspInit+0xb0>)
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	4a19      	ldr	r2, [pc, #100]	; (8003984 <HAL_TIM_Base_MspInit+0xb0>)
 8003920:	f043 0302 	orr.w	r3, r3, #2
 8003924:	6593      	str	r3, [r2, #88]	; 0x58
 8003926:	4b17      	ldr	r3, [pc, #92]	; (8003984 <HAL_TIM_Base_MspInit+0xb0>)
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	693b      	ldr	r3, [r7, #16]
}
 8003932:	e022      	b.n	800397a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a14      	ldr	r2, [pc, #80]	; (800398c <HAL_TIM_Base_MspInit+0xb8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d10c      	bne.n	8003958 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800393e:	4b11      	ldr	r3, [pc, #68]	; (8003984 <HAL_TIM_Base_MspInit+0xb0>)
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	4a10      	ldr	r2, [pc, #64]	; (8003984 <HAL_TIM_Base_MspInit+0xb0>)
 8003944:	f043 0304 	orr.w	r3, r3, #4
 8003948:	6593      	str	r3, [r2, #88]	; 0x58
 800394a:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <HAL_TIM_Base_MspInit+0xb0>)
 800394c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
}
 8003956:	e010      	b.n	800397a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM17)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0c      	ldr	r2, [pc, #48]	; (8003990 <HAL_TIM_Base_MspInit+0xbc>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d10b      	bne.n	800397a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003962:	4b08      	ldr	r3, [pc, #32]	; (8003984 <HAL_TIM_Base_MspInit+0xb0>)
 8003964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003966:	4a07      	ldr	r2, [pc, #28]	; (8003984 <HAL_TIM_Base_MspInit+0xb0>)
 8003968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800396c:	6613      	str	r3, [r2, #96]	; 0x60
 800396e:	4b05      	ldr	r3, [pc, #20]	; (8003984 <HAL_TIM_Base_MspInit+0xb0>)
 8003970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
}
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800
 8003990:	40014800 	.word	0x40014800

08003994 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <HAL_TIM_PWM_MspInit+0x38>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10b      	bne.n	80039be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80039a6:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	4a09      	ldr	r2, [pc, #36]	; (80039d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80039ac:	f043 0308 	orr.w	r3, r3, #8
 80039b0:	6593      	str	r3, [r2, #88]	; 0x58
 80039b2:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80039b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80039be:	bf00      	nop
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40000c00 	.word	0x40000c00
 80039d0:	40021000 	.word	0x40021000

080039d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08c      	sub	sp, #48	; 0x30
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039dc:	f107 031c 	add.w	r3, r7, #28
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	60da      	str	r2, [r3, #12]
 80039ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a45      	ldr	r2, [pc, #276]	; (8003b08 <HAL_TIM_MspPostInit+0x134>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d11c      	bne.n	8003a30 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f6:	4b45      	ldr	r3, [pc, #276]	; (8003b0c <HAL_TIM_MspPostInit+0x138>)
 80039f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fa:	4a44      	ldr	r2, [pc, #272]	; (8003b0c <HAL_TIM_MspPostInit+0x138>)
 80039fc:	f043 0302 	orr.w	r3, r3, #2
 8003a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a02:	4b42      	ldr	r3, [pc, #264]	; (8003b0c <HAL_TIM_MspPostInit+0x138>)
 8003a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a12:	2302      	movs	r3, #2
 8003a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a22:	f107 031c 	add.w	r3, r7, #28
 8003a26:	4619      	mov	r1, r3
 8003a28:	4839      	ldr	r0, [pc, #228]	; (8003b10 <HAL_TIM_MspPostInit+0x13c>)
 8003a2a:	f000 fe8b 	bl	8004744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003a2e:	e067      	b.n	8003b00 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM4)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a37      	ldr	r2, [pc, #220]	; (8003b14 <HAL_TIM_MspPostInit+0x140>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d11d      	bne.n	8003a76 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a3a:	4b34      	ldr	r3, [pc, #208]	; (8003b0c <HAL_TIM_MspPostInit+0x138>)
 8003a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3e:	4a33      	ldr	r2, [pc, #204]	; (8003b0c <HAL_TIM_MspPostInit+0x138>)
 8003a40:	f043 0308 	orr.w	r3, r3, #8
 8003a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a46:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <HAL_TIM_MspPostInit+0x138>)
 8003a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003a52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a60:	2300      	movs	r3, #0
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a64:	2302      	movs	r3, #2
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a68:	f107 031c 	add.w	r3, r7, #28
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	482a      	ldr	r0, [pc, #168]	; (8003b18 <HAL_TIM_MspPostInit+0x144>)
 8003a70:	f000 fe68 	bl	8004744 <HAL_GPIO_Init>
}
 8003a74:	e044      	b.n	8003b00 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM5)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a28      	ldr	r2, [pc, #160]	; (8003b1c <HAL_TIM_MspPostInit+0x148>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d11d      	bne.n	8003abc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a80:	4b22      	ldr	r3, [pc, #136]	; (8003b0c <HAL_TIM_MspPostInit+0x138>)
 8003a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a84:	4a21      	ldr	r2, [pc, #132]	; (8003b0c <HAL_TIM_MspPostInit+0x138>)
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a8c:	4b1f      	ldr	r3, [pc, #124]	; (8003b0c <HAL_TIM_MspPostInit+0x138>)
 8003a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aac:	f107 031c 	add.w	r3, r7, #28
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ab6:	f000 fe45 	bl	8004744 <HAL_GPIO_Init>
}
 8003aba:	e021      	b.n	8003b00 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM17)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <HAL_TIM_MspPostInit+0x14c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d11c      	bne.n	8003b00 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac6:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <HAL_TIM_MspPostInit+0x138>)
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aca:	4a10      	ldr	r2, [pc, #64]	; (8003b0c <HAL_TIM_MspPostInit+0x138>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ad2:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <HAL_TIM_MspPostInit+0x138>)
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aea:	2300      	movs	r3, #0
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8003aee:	230e      	movs	r3, #14
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af2:	f107 031c 	add.w	r3, r7, #28
 8003af6:	4619      	mov	r1, r3
 8003af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003afc:	f000 fe22 	bl	8004744 <HAL_GPIO_Init>
}
 8003b00:	bf00      	nop
 8003b02:	3730      	adds	r7, #48	; 0x30
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	48000400 	.word	0x48000400
 8003b14:	40000800 	.word	0x40000800
 8003b18:	48000c00 	.word	0x48000c00
 8003b1c:	40000c00 	.word	0x40000c00
 8003b20:	40014800 	.word	0x40014800

08003b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08e      	sub	sp, #56	; 0x38
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a5c      	ldr	r2, [pc, #368]	; (8003cb4 <HAL_UART_MspInit+0x190>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d130      	bne.n	8003ba8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b46:	4b5c      	ldr	r3, [pc, #368]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4a:	4a5b      	ldr	r2, [pc, #364]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b50:	6613      	str	r3, [r2, #96]	; 0x60
 8003b52:	4b59      	ldr	r3, [pc, #356]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5a:	623b      	str	r3, [r7, #32]
 8003b5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b5e:	4b56      	ldr	r3, [pc, #344]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b62:	4a55      	ldr	r2, [pc, #340]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003b64:	f043 0302 	orr.w	r3, r3, #2
 8003b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b6a:	4b53      	ldr	r3, [pc, #332]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	61fb      	str	r3, [r7, #28]
 8003b74:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003b76:	23c0      	movs	r3, #192	; 0xc0
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b82:	2303      	movs	r3, #3
 8003b84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b86:	2307      	movs	r3, #7
 8003b88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b8e:	4619      	mov	r1, r3
 8003b90:	484a      	ldr	r0, [pc, #296]	; (8003cbc <HAL_UART_MspInit+0x198>)
 8003b92:	f000 fdd7 	bl	8004744 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003b96:	2200      	movs	r2, #0
 8003b98:	2100      	movs	r1, #0
 8003b9a:	2025      	movs	r0, #37	; 0x25
 8003b9c:	f000 fc0f 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ba0:	2025      	movs	r0, #37	; 0x25
 8003ba2:	f000 fc28 	bl	80043f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003ba6:	e080      	b.n	8003caa <HAL_UART_MspInit+0x186>
  else if(huart->Instance==USART2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a44      	ldr	r2, [pc, #272]	; (8003cc0 <HAL_UART_MspInit+0x19c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d14d      	bne.n	8003c4e <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bb2:	4b41      	ldr	r3, [pc, #260]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb6:	4a40      	ldr	r2, [pc, #256]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8003bbe:	4b3e      	ldr	r3, [pc, #248]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	61bb      	str	r3, [r7, #24]
 8003bc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bca:	4b3b      	ldr	r3, [pc, #236]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bce:	4a3a      	ldr	r2, [pc, #232]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bd6:	4b38      	ldr	r3, [pc, #224]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003be2:	4b35      	ldr	r3, [pc, #212]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be6:	4a34      	ldr	r2, [pc, #208]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003be8:	f043 0308 	orr.w	r3, r3, #8
 8003bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bee:	4b32      	ldr	r3, [pc, #200]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8003bfa:	230c      	movs	r3, #12
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c06:	2303      	movs	r3, #3
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c0a:	2307      	movs	r3, #7
 8003c0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c12:	4619      	mov	r1, r3
 8003c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c18:	f000 fd94 	bl	8004744 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin;
 8003c1c:	2318      	movs	r3, #24
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c20:	2302      	movs	r3, #2
 8003c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c2c:	2307      	movs	r3, #7
 8003c2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c34:	4619      	mov	r1, r3
 8003c36:	4823      	ldr	r0, [pc, #140]	; (8003cc4 <HAL_UART_MspInit+0x1a0>)
 8003c38:	f000 fd84 	bl	8004744 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2100      	movs	r1, #0
 8003c40:	2026      	movs	r0, #38	; 0x26
 8003c42:	f000 fbbc 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c46:	2026      	movs	r0, #38	; 0x26
 8003c48:	f000 fbd5 	bl	80043f6 <HAL_NVIC_EnableIRQ>
}
 8003c4c:	e02d      	b.n	8003caa <HAL_UART_MspInit+0x186>
  else if(huart->Instance==USART3)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <HAL_UART_MspInit+0x1a4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d128      	bne.n	8003caa <HAL_UART_MspInit+0x186>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c58:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5c:	4a16      	ldr	r2, [pc, #88]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003c5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c62:	6593      	str	r3, [r2, #88]	; 0x58
 8003c64:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c70:	4b11      	ldr	r3, [pc, #68]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c74:	4a10      	ldr	r2, [pc, #64]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003c76:	f043 0308 	orr.w	r3, r3, #8
 8003c7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c7c:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <HAL_UART_MspInit+0x194>)
 8003c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003c88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c96:	2303      	movs	r3, #3
 8003c98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c9a:	2307      	movs	r3, #7
 8003c9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4807      	ldr	r0, [pc, #28]	; (8003cc4 <HAL_UART_MspInit+0x1a0>)
 8003ca6:	f000 fd4d 	bl	8004744 <HAL_GPIO_Init>
}
 8003caa:	bf00      	nop
 8003cac:	3738      	adds	r7, #56	; 0x38
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40013800 	.word	0x40013800
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	48000400 	.word	0x48000400
 8003cc0:	40004400 	.word	0x40004400
 8003cc4:	48000c00 	.word	0x48000c00
 8003cc8:	40004800 	.word	0x40004800

08003ccc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cec:	d154      	bne.n	8003d98 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cee:	4b2c      	ldr	r3, [pc, #176]	; (8003da0 <HAL_PCD_MspInit+0xd4>)
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf2:	4a2b      	ldr	r2, [pc, #172]	; (8003da0 <HAL_PCD_MspInit+0xd4>)
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cfa:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <HAL_PCD_MspInit+0xd4>)
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8003d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003d14:	f107 0314 	add.w	r3, r7, #20
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d1e:	f000 fd11 	bl	8004744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8003d22:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d30:	2303      	movs	r3, #3
 8003d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003d34:	230a      	movs	r3, #10
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d38:	f107 0314 	add.w	r3, r7, #20
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d42:	f000 fcff 	bl	8004744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003d46:	4b16      	ldr	r3, [pc, #88]	; (8003da0 <HAL_PCD_MspInit+0xd4>)
 8003d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4a:	4a15      	ldr	r2, [pc, #84]	; (8003da0 <HAL_PCD_MspInit+0xd4>)
 8003d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d52:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <HAL_PCD_MspInit+0xd4>)
 8003d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d5e:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <HAL_PCD_MspInit+0xd4>)
 8003d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d114      	bne.n	8003d94 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <HAL_PCD_MspInit+0xd4>)
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6e:	4a0c      	ldr	r2, [pc, #48]	; (8003da0 <HAL_PCD_MspInit+0xd4>)
 8003d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d74:	6593      	str	r3, [r2, #88]	; 0x58
 8003d76:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <HAL_PCD_MspInit+0xd4>)
 8003d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	60bb      	str	r3, [r7, #8]
 8003d80:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8003d82:	f001 ff21 	bl	8005bc8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_PCD_MspInit+0xd4>)
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	4a05      	ldr	r2, [pc, #20]	; (8003da0 <HAL_PCD_MspInit+0xd4>)
 8003d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d90:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003d92:	e001      	b.n	8003d98 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8003d94:	f001 ff18 	bl	8005bc8 <HAL_PWREx_EnableVddUSB>
}
 8003d98:	bf00      	nop
 8003d9a:	3728      	adds	r7, #40	; 0x28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40021000 	.word	0x40021000

08003da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003da8:	e7fe      	b.n	8003da8 <NMI_Handler+0x4>

08003daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003daa:	b480      	push	{r7}
 8003dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dae:	e7fe      	b.n	8003dae <HardFault_Handler+0x4>

08003db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003db4:	e7fe      	b.n	8003db4 <MemManage_Handler+0x4>

08003db6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003db6:	b480      	push	{r7}
 8003db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dba:	e7fe      	b.n	8003dba <BusFault_Handler+0x4>

08003dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dc0:	e7fe      	b.n	8003dc0 <UsageFault_Handler+0x4>

08003dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dc6:	bf00      	nop
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dd4:	bf00      	nop
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dde:	b480      	push	{r7}
 8003de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003df0:	f000 f9c6 	bl	8004180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003df4:	bf00      	nop
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003dfc:	2010      	movs	r0, #16
 8003dfe:	f000 ff6f 	bl	8004ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003e0a:	2020      	movs	r0, #32
 8003e0c:	f000 ff68 	bl	8004ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003e10:	2040      	movs	r0, #64	; 0x40
 8003e12:	f000 ff65 	bl	8004ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003e16:	2080      	movs	r0, #128	; 0x80
 8003e18:	f000 ff62 	bl	8004ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003e1c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003e20:	f000 ff5e 	bl	8004ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e24:	bf00      	nop
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e2c:	4802      	ldr	r0, [pc, #8]	; (8003e38 <TIM2_IRQHandler+0x10>)
 8003e2e:	f003 fd17 	bl	8007860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20000bc8 	.word	0x20000bc8

08003e3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e40:	4802      	ldr	r0, [pc, #8]	; (8003e4c <USART1_IRQHandler+0x10>)
 8003e42:	f004 fe6d 	bl	8008b20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000ac8 	.word	0x20000ac8

08003e50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e54:	4802      	ldr	r0, [pc, #8]	; (8003e60 <USART2_IRQHandler+0x10>)
 8003e56:	f004 fe63 	bl	8008b20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000c14 	.word	0x20000c14

08003e64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003e68:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003e6c:	f000 ff38 	bl	8004ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003e70:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003e74:	f000 ff34 	bl	8004ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003e78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003e7c:	f000 ff30 	bl	8004ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003e80:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003e84:	f000 ff2c 	bl	8004ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e88:	bf00      	nop
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
	return 1;
 8003e90:	2301      	movs	r3, #1
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <_kill>:

int _kill(int pid, int sig)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ea6:	f006 f8f9 	bl	800a09c <__errno>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2216      	movs	r2, #22
 8003eae:	601a      	str	r2, [r3, #0]
	return -1;
 8003eb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <_exit>:

void _exit (int status)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff ffe7 	bl	8003e9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003ece:	e7fe      	b.n	8003ece <_exit+0x12>

08003ed0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	e00a      	b.n	8003ef8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ee2:	f3af 8000 	nop.w
 8003ee6:	4601      	mov	r1, r0
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	60ba      	str	r2, [r7, #8]
 8003eee:	b2ca      	uxtb	r2, r1
 8003ef0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	dbf0      	blt.n	8003ee2 <_read+0x12>
	}

return len;
 8003f00:	687b      	ldr	r3, [r7, #4]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b086      	sub	sp, #24
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e009      	b.n	8003f30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	60ba      	str	r2, [r7, #8]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	dbf1      	blt.n	8003f1c <_write+0x12>
	}
	return len;
 8003f38:	687b      	ldr	r3, [r7, #4]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <_close>:

int _close(int file)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
	return -1;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f6a:	605a      	str	r2, [r3, #4]
	return 0;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <_isatty>:

int _isatty(int file)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
	return 1;
 8003f82:	2301      	movs	r3, #1
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
	return 0;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <_sbrk+0x5c>)
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <_sbrk+0x60>)
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fc0:	4b13      	ldr	r3, [pc, #76]	; (8004010 <_sbrk+0x64>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <_sbrk+0x64>)
 8003fca:	4a12      	ldr	r2, [pc, #72]	; (8004014 <_sbrk+0x68>)
 8003fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fce:	4b10      	ldr	r3, [pc, #64]	; (8004010 <_sbrk+0x64>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d207      	bcs.n	8003fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fdc:	f006 f85e 	bl	800a09c <__errno>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	220c      	movs	r2, #12
 8003fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fea:	e009      	b.n	8004000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fec:	4b08      	ldr	r3, [pc, #32]	; (8004010 <_sbrk+0x64>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <_sbrk+0x64>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	4a05      	ldr	r2, [pc, #20]	; (8004010 <_sbrk+0x64>)
 8003ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20018000 	.word	0x20018000
 800400c:	00000400 	.word	0x00000400
 8004010:	200003c0 	.word	0x200003c0
 8004014:	20000dd8 	.word	0x20000dd8

08004018 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800401c:	4b17      	ldr	r3, [pc, #92]	; (800407c <SystemInit+0x64>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	4a16      	ldr	r2, [pc, #88]	; (800407c <SystemInit+0x64>)
 8004024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800402c:	4b14      	ldr	r3, [pc, #80]	; (8004080 <SystemInit+0x68>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a13      	ldr	r2, [pc, #76]	; (8004080 <SystemInit+0x68>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004038:	4b11      	ldr	r3, [pc, #68]	; (8004080 <SystemInit+0x68>)
 800403a:	2200      	movs	r2, #0
 800403c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <SystemInit+0x68>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a0f      	ldr	r2, [pc, #60]	; (8004080 <SystemInit+0x68>)
 8004044:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004048:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800404c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800404e:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <SystemInit+0x68>)
 8004050:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004054:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <SystemInit+0x68>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a09      	ldr	r2, [pc, #36]	; (8004080 <SystemInit+0x68>)
 800405c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004060:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <SystemInit+0x68>)
 8004064:	2200      	movs	r2, #0
 8004066:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004068:	4b04      	ldr	r3, [pc, #16]	; (800407c <SystemInit+0x64>)
 800406a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800406e:	609a      	str	r2, [r3, #8]
#endif
}
 8004070:	bf00      	nop
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	e000ed00 	.word	0xe000ed00
 8004080:	40021000 	.word	0x40021000

08004084 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004088:	f7ff ffc6 	bl	8004018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800408c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800408e:	e003      	b.n	8004098 <LoopCopyDataInit>

08004090 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004092:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004094:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004096:	3104      	adds	r1, #4

08004098 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004098:	480a      	ldr	r0, [pc, #40]	; (80040c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800409a:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800409c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800409e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80040a0:	d3f6      	bcc.n	8004090 <CopyDataInit>
	ldr	r2, =_sbss
 80040a2:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80040a4:	e002      	b.n	80040ac <LoopFillZerobss>

080040a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80040a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80040a8:	f842 3b04 	str.w	r3, [r2], #4

080040ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80040ac:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <LoopForever+0x16>)
	cmp	r2, r3
 80040ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80040b0:	d3f9      	bcc.n	80040a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040b2:	f005 fff9 	bl	800a0a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80040b6:	f7fd fb7f 	bl	80017b8 <main>

080040ba <LoopForever>:

LoopForever:
    b LoopForever
 80040ba:	e7fe      	b.n	80040ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80040bc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80040c0:	08010228 	.word	0x08010228
	ldr	r0, =_sdata
 80040c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80040c8:	2000025c 	.word	0x2000025c
	ldr	r2, =_sbss
 80040cc:	2000025c 	.word	0x2000025c
	ldr	r3, = _ebss
 80040d0:	20000dd4 	.word	0x20000dd4

080040d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040d4:	e7fe      	b.n	80040d4 <ADC1_2_IRQHandler>

080040d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040e0:	2003      	movs	r0, #3
 80040e2:	f000 f961 	bl	80043a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040e6:	2000      	movs	r0, #0
 80040e8:	f000 f80e 	bl	8004108 <HAL_InitTick>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	71fb      	strb	r3, [r7, #7]
 80040f6:	e001      	b.n	80040fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80040f8:	f7ff fa90 	bl	800361c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040fc:	79fb      	ldrb	r3, [r7, #7]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004114:	4b17      	ldr	r3, [pc, #92]	; (8004174 <HAL_InitTick+0x6c>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d023      	beq.n	8004164 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800411c:	4b16      	ldr	r3, [pc, #88]	; (8004178 <HAL_InitTick+0x70>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4b14      	ldr	r3, [pc, #80]	; (8004174 <HAL_InitTick+0x6c>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	4619      	mov	r1, r3
 8004126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800412a:	fbb3 f3f1 	udiv	r3, r3, r1
 800412e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004132:	4618      	mov	r0, r3
 8004134:	f000 f96d 	bl	8004412 <HAL_SYSTICK_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10f      	bne.n	800415e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b0f      	cmp	r3, #15
 8004142:	d809      	bhi.n	8004158 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004144:	2200      	movs	r2, #0
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	f04f 30ff 	mov.w	r0, #4294967295
 800414c:	f000 f937 	bl	80043be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004150:	4a0a      	ldr	r2, [pc, #40]	; (800417c <HAL_InitTick+0x74>)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	e007      	b.n	8004168 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	73fb      	strb	r3, [r7, #15]
 800415c:	e004      	b.n	8004168 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	73fb      	strb	r3, [r7, #15]
 8004162:	e001      	b.n	8004168 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000080 	.word	0x20000080
 8004178:	20000078 	.word	0x20000078
 800417c:	2000007c 	.word	0x2000007c

08004180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004184:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <HAL_IncTick+0x20>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <HAL_IncTick+0x24>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4413      	add	r3, r2
 8004190:	4a04      	ldr	r2, [pc, #16]	; (80041a4 <HAL_IncTick+0x24>)
 8004192:	6013      	str	r3, [r2, #0]
}
 8004194:	bf00      	nop
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20000080 	.word	0x20000080
 80041a4:	20000dc0 	.word	0x20000dc0

080041a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  return uwTick;
 80041ac:	4b03      	ldr	r3, [pc, #12]	; (80041bc <HAL_GetTick+0x14>)
 80041ae:	681b      	ldr	r3, [r3, #0]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000dc0 	.word	0x20000dc0

080041c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041c8:	f7ff ffee 	bl	80041a8 <HAL_GetTick>
 80041cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d005      	beq.n	80041e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80041da:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <HAL_Delay+0x44>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041e6:	bf00      	nop
 80041e8:	f7ff ffde 	bl	80041a8 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d8f7      	bhi.n	80041e8 <HAL_Delay+0x28>
  {
  }
}
 80041f8:	bf00      	nop
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000080 	.word	0x20000080

08004208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <__NVIC_SetPriorityGrouping+0x44>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004224:	4013      	ands	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800423a:	4a04      	ldr	r2, [pc, #16]	; (800424c <__NVIC_SetPriorityGrouping+0x44>)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	60d3      	str	r3, [r2, #12]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004254:	4b04      	ldr	r3, [pc, #16]	; (8004268 <__NVIC_GetPriorityGrouping+0x18>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	0a1b      	lsrs	r3, r3, #8
 800425a:	f003 0307 	and.w	r3, r3, #7
}
 800425e:	4618      	mov	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	e000ed00 	.word	0xe000ed00

0800426c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427a:	2b00      	cmp	r3, #0
 800427c:	db0b      	blt.n	8004296 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	f003 021f 	and.w	r2, r3, #31
 8004284:	4907      	ldr	r1, [pc, #28]	; (80042a4 <__NVIC_EnableIRQ+0x38>)
 8004286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	2001      	movs	r0, #1
 800428e:	fa00 f202 	lsl.w	r2, r0, r2
 8004292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	e000e100 	.word	0xe000e100

080042a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	6039      	str	r1, [r7, #0]
 80042b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	db0a      	blt.n	80042d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	490c      	ldr	r1, [pc, #48]	; (80042f4 <__NVIC_SetPriority+0x4c>)
 80042c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c6:	0112      	lsls	r2, r2, #4
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	440b      	add	r3, r1
 80042cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042d0:	e00a      	b.n	80042e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	4908      	ldr	r1, [pc, #32]	; (80042f8 <__NVIC_SetPriority+0x50>)
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	3b04      	subs	r3, #4
 80042e0:	0112      	lsls	r2, r2, #4
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	440b      	add	r3, r1
 80042e6:	761a      	strb	r2, [r3, #24]
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	e000e100 	.word	0xe000e100
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b089      	sub	sp, #36	; 0x24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f1c3 0307 	rsb	r3, r3, #7
 8004316:	2b04      	cmp	r3, #4
 8004318:	bf28      	it	cs
 800431a:	2304      	movcs	r3, #4
 800431c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3304      	adds	r3, #4
 8004322:	2b06      	cmp	r3, #6
 8004324:	d902      	bls.n	800432c <NVIC_EncodePriority+0x30>
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	3b03      	subs	r3, #3
 800432a:	e000      	b.n	800432e <NVIC_EncodePriority+0x32>
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004330:	f04f 32ff 	mov.w	r2, #4294967295
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43da      	mvns	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	401a      	ands	r2, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004344:	f04f 31ff 	mov.w	r1, #4294967295
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	fa01 f303 	lsl.w	r3, r1, r3
 800434e:	43d9      	mvns	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004354:	4313      	orrs	r3, r2
         );
}
 8004356:	4618      	mov	r0, r3
 8004358:	3724      	adds	r7, #36	; 0x24
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3b01      	subs	r3, #1
 8004370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004374:	d301      	bcc.n	800437a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004376:	2301      	movs	r3, #1
 8004378:	e00f      	b.n	800439a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800437a:	4a0a      	ldr	r2, [pc, #40]	; (80043a4 <SysTick_Config+0x40>)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3b01      	subs	r3, #1
 8004380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004382:	210f      	movs	r1, #15
 8004384:	f04f 30ff 	mov.w	r0, #4294967295
 8004388:	f7ff ff8e 	bl	80042a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <SysTick_Config+0x40>)
 800438e:	2200      	movs	r2, #0
 8004390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004392:	4b04      	ldr	r3, [pc, #16]	; (80043a4 <SysTick_Config+0x40>)
 8004394:	2207      	movs	r2, #7
 8004396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	e000e010 	.word	0xe000e010

080043a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff ff29 	bl	8004208 <__NVIC_SetPriorityGrouping>
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	4603      	mov	r3, r0
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043d0:	f7ff ff3e 	bl	8004250 <__NVIC_GetPriorityGrouping>
 80043d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	6978      	ldr	r0, [r7, #20]
 80043dc:	f7ff ff8e 	bl	80042fc <NVIC_EncodePriority>
 80043e0:	4602      	mov	r2, r0
 80043e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff ff5d 	bl	80042a8 <__NVIC_SetPriority>
}
 80043ee:	bf00      	nop
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	4603      	mov	r3, r0
 80043fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff ff31 	bl	800426c <__NVIC_EnableIRQ>
}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff ffa2 	bl	8004364 <SysTick_Config>
 8004420:	4603      	mov	r3, r0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e0ac      	b.n	8004598 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f000 f8b2 	bl	80045ac <DFSDM_GetChannelFromInstance>
 8004448:	4603      	mov	r3, r0
 800444a:	4a55      	ldr	r2, [pc, #340]	; (80045a0 <HAL_DFSDM_ChannelInit+0x174>)
 800444c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e09f      	b.n	8004598 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff f903 	bl	8003664 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800445e:	4b51      	ldr	r3, [pc, #324]	; (80045a4 <HAL_DFSDM_ChannelInit+0x178>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3301      	adds	r3, #1
 8004464:	4a4f      	ldr	r2, [pc, #316]	; (80045a4 <HAL_DFSDM_ChannelInit+0x178>)
 8004466:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004468:	4b4e      	ldr	r3, [pc, #312]	; (80045a4 <HAL_DFSDM_ChannelInit+0x178>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d125      	bne.n	80044bc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004470:	4b4d      	ldr	r3, [pc, #308]	; (80045a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a4c      	ldr	r2, [pc, #304]	; (80045a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004476:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800447a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800447c:	4b4a      	ldr	r3, [pc, #296]	; (80045a8 <HAL_DFSDM_ChannelInit+0x17c>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	4948      	ldr	r1, [pc, #288]	; (80045a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800448a:	4b47      	ldr	r3, [pc, #284]	; (80045a8 <HAL_DFSDM_ChannelInit+0x17c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a46      	ldr	r2, [pc, #280]	; (80045a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004490:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004494:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	791b      	ldrb	r3, [r3, #4]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d108      	bne.n	80044b0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800449e:	4b42      	ldr	r3, [pc, #264]	; (80045a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	041b      	lsls	r3, r3, #16
 80044aa:	493f      	ldr	r1, [pc, #252]	; (80045a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80044b0:	4b3d      	ldr	r3, [pc, #244]	; (80045a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a3c      	ldr	r2, [pc, #240]	; (80045a8 <HAL_DFSDM_ChannelInit+0x17c>)
 80044b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044ba:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80044ca:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6819      	ldr	r1, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80044da:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80044e0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 020f 	bic.w	r2, r2, #15
 80044f8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6819      	ldr	r1, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004520:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6899      	ldr	r1, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	3b01      	subs	r3, #1
 8004532:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f002 0207 	and.w	r2, r2, #7
 800454c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6859      	ldr	r1, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004578:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f000 f810 	bl	80045ac <DFSDM_GetChannelFromInstance>
 800458c:	4602      	mov	r2, r0
 800458e:	4904      	ldr	r1, [pc, #16]	; (80045a0 <HAL_DFSDM_ChannelInit+0x174>)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	200003c8 	.word	0x200003c8
 80045a4:	200003c4 	.word	0x200003c4
 80045a8:	40016000 	.word	0x40016000

080045ac <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a1c      	ldr	r2, [pc, #112]	; (8004628 <DFSDM_GetChannelFromInstance+0x7c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d102      	bne.n	80045c2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	e02b      	b.n	800461a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a19      	ldr	r2, [pc, #100]	; (800462c <DFSDM_GetChannelFromInstance+0x80>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d102      	bne.n	80045d0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80045ca:	2301      	movs	r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	e024      	b.n	800461a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a17      	ldr	r2, [pc, #92]	; (8004630 <DFSDM_GetChannelFromInstance+0x84>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d102      	bne.n	80045de <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80045d8:	2302      	movs	r3, #2
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	e01d      	b.n	800461a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a14      	ldr	r2, [pc, #80]	; (8004634 <DFSDM_GetChannelFromInstance+0x88>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d102      	bne.n	80045ec <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80045e6:	2304      	movs	r3, #4
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	e016      	b.n	800461a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a12      	ldr	r2, [pc, #72]	; (8004638 <DFSDM_GetChannelFromInstance+0x8c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d102      	bne.n	80045fa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80045f4:	2305      	movs	r3, #5
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	e00f      	b.n	800461a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a0f      	ldr	r2, [pc, #60]	; (800463c <DFSDM_GetChannelFromInstance+0x90>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d102      	bne.n	8004608 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004602:	2306      	movs	r3, #6
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	e008      	b.n	800461a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a0d      	ldr	r2, [pc, #52]	; (8004640 <DFSDM_GetChannelFromInstance+0x94>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d102      	bne.n	8004616 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004610:	2307      	movs	r3, #7
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	e001      	b.n	800461a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004616:	2303      	movs	r3, #3
 8004618:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800461a:	68fb      	ldr	r3, [r7, #12]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	40016000 	.word	0x40016000
 800462c:	40016020 	.word	0x40016020
 8004630:	40016040 	.word	0x40016040
 8004634:	40016080 	.word	0x40016080
 8004638:	400160a0 	.word	0x400160a0
 800463c:	400160c0 	.word	0x400160c0
 8004640:	400160e0 	.word	0x400160e0

08004644 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800464c:	2300      	movs	r3, #0
 800464e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d008      	beq.n	800466e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2204      	movs	r2, #4
 8004660:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e022      	b.n	80046b4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 020e 	bic.w	r2, r2, #14
 800467c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0201 	bic.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	f003 021c 	and.w	r2, r3, #28
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	2101      	movs	r1, #1
 800469c:	fa01 f202 	lsl.w	r2, r1, r2
 80046a0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d005      	beq.n	80046e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2204      	movs	r2, #4
 80046dc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	73fb      	strb	r3, [r7, #15]
 80046e2:	e029      	b.n	8004738 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 020e 	bic.w	r2, r2, #14
 80046f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004708:	f003 021c 	and.w	r2, r3, #28
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	2101      	movs	r1, #1
 8004712:	fa01 f202 	lsl.w	r2, r1, r2
 8004716:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	4798      	blx	r3
    }
  }
  return status;
 8004738:	7bfb      	ldrb	r3, [r7, #15]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004752:	e17f      	b.n	8004a54 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	2101      	movs	r1, #1
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	fa01 f303 	lsl.w	r3, r1, r3
 8004760:	4013      	ands	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8171 	beq.w	8004a4e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d00b      	beq.n	800478c <HAL_GPIO_Init+0x48>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d007      	beq.n	800478c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004780:	2b11      	cmp	r3, #17
 8004782:	d003      	beq.n	800478c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b12      	cmp	r3, #18
 800478a:	d130      	bne.n	80047ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	2203      	movs	r2, #3
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4013      	ands	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047c2:	2201      	movs	r2, #1
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4013      	ands	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	091b      	lsrs	r3, r3, #4
 80047d8:	f003 0201 	and.w	r2, r3, #1
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d118      	bne.n	800482c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004800:	2201      	movs	r2, #1
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4013      	ands	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	08db      	lsrs	r3, r3, #3
 8004816:	f003 0201 	and.w	r2, r3, #1
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	2203      	movs	r2, #3
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	43db      	mvns	r3, r3
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4013      	ands	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d003      	beq.n	800486c <HAL_GPIO_Init+0x128>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b12      	cmp	r3, #18
 800486a:	d123      	bne.n	80048b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	08da      	lsrs	r2, r3, #3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3208      	adds	r2, #8
 8004874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004878:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	220f      	movs	r2, #15
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	43db      	mvns	r3, r3
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4013      	ands	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	08da      	lsrs	r2, r3, #3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3208      	adds	r2, #8
 80048ae:	6939      	ldr	r1, [r7, #16]
 80048b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	2203      	movs	r2, #3
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4013      	ands	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 0203 	and.w	r2, r3, #3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 80ac 	beq.w	8004a4e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048f6:	4b5f      	ldr	r3, [pc, #380]	; (8004a74 <HAL_GPIO_Init+0x330>)
 80048f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fa:	4a5e      	ldr	r2, [pc, #376]	; (8004a74 <HAL_GPIO_Init+0x330>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	6613      	str	r3, [r2, #96]	; 0x60
 8004902:	4b5c      	ldr	r3, [pc, #368]	; (8004a74 <HAL_GPIO_Init+0x330>)
 8004904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800490e:	4a5a      	ldr	r2, [pc, #360]	; (8004a78 <HAL_GPIO_Init+0x334>)
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	089b      	lsrs	r3, r3, #2
 8004914:	3302      	adds	r3, #2
 8004916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800491a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	220f      	movs	r2, #15
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004938:	d025      	beq.n	8004986 <HAL_GPIO_Init+0x242>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a4f      	ldr	r2, [pc, #316]	; (8004a7c <HAL_GPIO_Init+0x338>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d01f      	beq.n	8004982 <HAL_GPIO_Init+0x23e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a4e      	ldr	r2, [pc, #312]	; (8004a80 <HAL_GPIO_Init+0x33c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d019      	beq.n	800497e <HAL_GPIO_Init+0x23a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a4d      	ldr	r2, [pc, #308]	; (8004a84 <HAL_GPIO_Init+0x340>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <HAL_GPIO_Init+0x236>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a4c      	ldr	r2, [pc, #304]	; (8004a88 <HAL_GPIO_Init+0x344>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00d      	beq.n	8004976 <HAL_GPIO_Init+0x232>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a4b      	ldr	r2, [pc, #300]	; (8004a8c <HAL_GPIO_Init+0x348>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d007      	beq.n	8004972 <HAL_GPIO_Init+0x22e>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a4a      	ldr	r2, [pc, #296]	; (8004a90 <HAL_GPIO_Init+0x34c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d101      	bne.n	800496e <HAL_GPIO_Init+0x22a>
 800496a:	2306      	movs	r3, #6
 800496c:	e00c      	b.n	8004988 <HAL_GPIO_Init+0x244>
 800496e:	2307      	movs	r3, #7
 8004970:	e00a      	b.n	8004988 <HAL_GPIO_Init+0x244>
 8004972:	2305      	movs	r3, #5
 8004974:	e008      	b.n	8004988 <HAL_GPIO_Init+0x244>
 8004976:	2304      	movs	r3, #4
 8004978:	e006      	b.n	8004988 <HAL_GPIO_Init+0x244>
 800497a:	2303      	movs	r3, #3
 800497c:	e004      	b.n	8004988 <HAL_GPIO_Init+0x244>
 800497e:	2302      	movs	r3, #2
 8004980:	e002      	b.n	8004988 <HAL_GPIO_Init+0x244>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <HAL_GPIO_Init+0x244>
 8004986:	2300      	movs	r3, #0
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	f002 0203 	and.w	r2, r2, #3
 800498e:	0092      	lsls	r2, r2, #2
 8004990:	4093      	lsls	r3, r2
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004998:	4937      	ldr	r1, [pc, #220]	; (8004a78 <HAL_GPIO_Init+0x334>)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	089b      	lsrs	r3, r3, #2
 800499e:	3302      	adds	r3, #2
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80049a6:	4b3b      	ldr	r3, [pc, #236]	; (8004a94 <HAL_GPIO_Init+0x350>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	43db      	mvns	r3, r3
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4013      	ands	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049ca:	4a32      	ldr	r2, [pc, #200]	; (8004a94 <HAL_GPIO_Init+0x350>)
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80049d0:	4b30      	ldr	r3, [pc, #192]	; (8004a94 <HAL_GPIO_Init+0x350>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	43db      	mvns	r3, r3
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4013      	ands	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049f4:	4a27      	ldr	r2, [pc, #156]	; (8004a94 <HAL_GPIO_Init+0x350>)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049fa:	4b26      	ldr	r3, [pc, #152]	; (8004a94 <HAL_GPIO_Init+0x350>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	43db      	mvns	r3, r3
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4013      	ands	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a1e:	4a1d      	ldr	r2, [pc, #116]	; (8004a94 <HAL_GPIO_Init+0x350>)
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a24:	4b1b      	ldr	r3, [pc, #108]	; (8004a94 <HAL_GPIO_Init+0x350>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	43db      	mvns	r3, r3
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4013      	ands	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a48:	4a12      	ldr	r2, [pc, #72]	; (8004a94 <HAL_GPIO_Init+0x350>)
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	3301      	adds	r3, #1
 8004a52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f47f ae78 	bne.w	8004754 <HAL_GPIO_Init+0x10>
  }
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40021000 	.word	0x40021000
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	48000400 	.word	0x48000400
 8004a80:	48000800 	.word	0x48000800
 8004a84:	48000c00 	.word	0x48000c00
 8004a88:	48001000 	.word	0x48001000
 8004a8c:	48001400 	.word	0x48001400
 8004a90:	48001800 	.word	0x48001800
 8004a94:	40010400 	.word	0x40010400

08004a98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004aa6:	e0cd      	b.n	8004c44 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 80c0 	beq.w	8004c3e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004abe:	4a68      	ldr	r2, [pc, #416]	; (8004c60 <HAL_GPIO_DeInit+0x1c8>)
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	089b      	lsrs	r3, r3, #2
 8004ac4:	3302      	adds	r3, #2
 8004ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aca:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	220f      	movs	r2, #15
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4013      	ands	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ae6:	d025      	beq.n	8004b34 <HAL_GPIO_DeInit+0x9c>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a5e      	ldr	r2, [pc, #376]	; (8004c64 <HAL_GPIO_DeInit+0x1cc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d01f      	beq.n	8004b30 <HAL_GPIO_DeInit+0x98>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a5d      	ldr	r2, [pc, #372]	; (8004c68 <HAL_GPIO_DeInit+0x1d0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d019      	beq.n	8004b2c <HAL_GPIO_DeInit+0x94>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a5c      	ldr	r2, [pc, #368]	; (8004c6c <HAL_GPIO_DeInit+0x1d4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d013      	beq.n	8004b28 <HAL_GPIO_DeInit+0x90>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a5b      	ldr	r2, [pc, #364]	; (8004c70 <HAL_GPIO_DeInit+0x1d8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00d      	beq.n	8004b24 <HAL_GPIO_DeInit+0x8c>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a5a      	ldr	r2, [pc, #360]	; (8004c74 <HAL_GPIO_DeInit+0x1dc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d007      	beq.n	8004b20 <HAL_GPIO_DeInit+0x88>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a59      	ldr	r2, [pc, #356]	; (8004c78 <HAL_GPIO_DeInit+0x1e0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d101      	bne.n	8004b1c <HAL_GPIO_DeInit+0x84>
 8004b18:	2306      	movs	r3, #6
 8004b1a:	e00c      	b.n	8004b36 <HAL_GPIO_DeInit+0x9e>
 8004b1c:	2307      	movs	r3, #7
 8004b1e:	e00a      	b.n	8004b36 <HAL_GPIO_DeInit+0x9e>
 8004b20:	2305      	movs	r3, #5
 8004b22:	e008      	b.n	8004b36 <HAL_GPIO_DeInit+0x9e>
 8004b24:	2304      	movs	r3, #4
 8004b26:	e006      	b.n	8004b36 <HAL_GPIO_DeInit+0x9e>
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e004      	b.n	8004b36 <HAL_GPIO_DeInit+0x9e>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e002      	b.n	8004b36 <HAL_GPIO_DeInit+0x9e>
 8004b30:	2301      	movs	r3, #1
 8004b32:	e000      	b.n	8004b36 <HAL_GPIO_DeInit+0x9e>
 8004b34:	2300      	movs	r3, #0
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	f002 0203 	and.w	r2, r2, #3
 8004b3c:	0092      	lsls	r2, r2, #2
 8004b3e:	4093      	lsls	r3, r2
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d132      	bne.n	8004bac <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004b46:	4b4d      	ldr	r3, [pc, #308]	; (8004c7c <HAL_GPIO_DeInit+0x1e4>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	494b      	ldr	r1, [pc, #300]	; (8004c7c <HAL_GPIO_DeInit+0x1e4>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004b54:	4b49      	ldr	r3, [pc, #292]	; (8004c7c <HAL_GPIO_DeInit+0x1e4>)
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	4947      	ldr	r1, [pc, #284]	; (8004c7c <HAL_GPIO_DeInit+0x1e4>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004b62:	4b46      	ldr	r3, [pc, #280]	; (8004c7c <HAL_GPIO_DeInit+0x1e4>)
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	4944      	ldr	r1, [pc, #272]	; (8004c7c <HAL_GPIO_DeInit+0x1e4>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004b70:	4b42      	ldr	r3, [pc, #264]	; (8004c7c <HAL_GPIO_DeInit+0x1e4>)
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	43db      	mvns	r3, r3
 8004b78:	4940      	ldr	r1, [pc, #256]	; (8004c7c <HAL_GPIO_DeInit+0x1e4>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	220f      	movs	r2, #15
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004b8e:	4a34      	ldr	r2, [pc, #208]	; (8004c60 <HAL_GPIO_DeInit+0x1c8>)
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	089b      	lsrs	r3, r3, #2
 8004b94:	3302      	adds	r3, #2
 8004b96:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	43da      	mvns	r2, r3
 8004b9e:	4830      	ldr	r0, [pc, #192]	; (8004c60 <HAL_GPIO_DeInit+0x1c8>)
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	089b      	lsrs	r3, r3, #2
 8004ba4:	400a      	ands	r2, r1
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	2103      	movs	r1, #3
 8004bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	08da      	lsrs	r2, r3, #3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3208      	adds	r2, #8
 8004bc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	220f      	movs	r2, #15
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	08d2      	lsrs	r2, r2, #3
 8004be0:	4019      	ands	r1, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3208      	adds	r2, #8
 8004be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	2103      	movs	r1, #3
 8004bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	401a      	ands	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	2101      	movs	r1, #1
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	401a      	ands	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	2103      	movs	r1, #3
 8004c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	401a      	ands	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2e:	2101      	movs	r1, #1
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	fa01 f303 	lsl.w	r3, r1, r3
 8004c36:	43db      	mvns	r3, r3
 8004c38:	401a      	ands	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	3301      	adds	r3, #1
 8004c42:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f47f af2b 	bne.w	8004aa8 <HAL_GPIO_DeInit+0x10>
  }
}
 8004c52:	bf00      	nop
 8004c54:	bf00      	nop
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	40010000 	.word	0x40010000
 8004c64:	48000400 	.word	0x48000400
 8004c68:	48000800 	.word	0x48000800
 8004c6c:	48000c00 	.word	0x48000c00
 8004c70:	48001000 	.word	0x48001000
 8004c74:	48001400 	.word	0x48001400
 8004c78:	48001800 	.word	0x48001800
 8004c7c:	40010400 	.word	0x40010400

08004c80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	887b      	ldrh	r3, [r7, #2]
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
 8004c9c:	e001      	b.n	8004ca2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	807b      	strh	r3, [r7, #2]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cc0:	787b      	ldrb	r3, [r7, #1]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004cc6:	887a      	ldrh	r2, [r7, #2]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ccc:	e002      	b.n	8004cd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004cce:	887a      	ldrh	r2, [r7, #2]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004cea:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cec:	695a      	ldr	r2, [r3, #20]
 8004cee:	88fb      	ldrh	r3, [r7, #6]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d006      	beq.n	8004d04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cf6:	4a05      	ldr	r2, [pc, #20]	; (8004d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cfc:	88fb      	ldrh	r3, [r7, #6]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fc fcd2 	bl	80016a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d04:	bf00      	nop
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40010400 	.word	0x40010400

08004d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e081      	b.n	8004e26 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fe fcdc 	bl	80036f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2224      	movs	r2, #36	; 0x24
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0201 	bic.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d107      	bne.n	8004d8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d86:	609a      	str	r2, [r3, #8]
 8004d88:	e006      	b.n	8004d98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004d96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d104      	bne.n	8004daa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004da8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	ea42 0103 	orr.w	r1, r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	021a      	lsls	r2, r3, #8
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	69d9      	ldr	r1, [r3, #28]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1a      	ldr	r2, [r3, #32]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0201 	orr.w	r2, r2, #1
 8004e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e021      	b.n	8004e84 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2224      	movs	r2, #36	; 0x24
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0201 	bic.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7fe fc8f 	bl	800377c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	4608      	mov	r0, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	817b      	strh	r3, [r7, #10]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	813b      	strh	r3, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	f040 80f9 	bne.w	80050a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_I2C_Mem_Write+0x34>
 8004eba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d105      	bne.n	8004ecc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ec6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0ed      	b.n	80050a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_I2C_Mem_Write+0x4e>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e0e6      	b.n	80050a8 <HAL_I2C_Mem_Write+0x21c>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ee2:	f7ff f961 	bl	80041a8 <HAL_GetTick>
 8004ee6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	2319      	movs	r3, #25
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fac3 	bl	8005480 <I2C_WaitOnFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0d1      	b.n	80050a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2221      	movs	r2, #33	; 0x21
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2240      	movs	r2, #64	; 0x40
 8004f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a3a      	ldr	r2, [r7, #32]
 8004f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f2c:	88f8      	ldrh	r0, [r7, #6]
 8004f2e:	893a      	ldrh	r2, [r7, #8]
 8004f30:	8979      	ldrh	r1, [r7, #10]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 f9d3 	bl	80052e8 <I2C_RequestMemoryWrite>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e0a9      	b.n	80050a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	2bff      	cmp	r3, #255	; 0xff
 8004f5c:	d90e      	bls.n	8004f7c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	22ff      	movs	r2, #255	; 0xff
 8004f62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	8979      	ldrh	r1, [r7, #10]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 fba5 	bl	80056c4 <I2C_TransferConfig>
 8004f7a:	e00f      	b.n	8004f9c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	8979      	ldrh	r1, [r7, #10]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 fb94 	bl	80056c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 faad 	bl	8005500 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e07b      	b.n	80050a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	781a      	ldrb	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d034      	beq.n	8005054 <HAL_I2C_Mem_Write+0x1c8>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d130      	bne.n	8005054 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2180      	movs	r1, #128	; 0x80
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fa3f 	bl	8005480 <I2C_WaitOnFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e04d      	b.n	80050a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005010:	b29b      	uxth	r3, r3
 8005012:	2bff      	cmp	r3, #255	; 0xff
 8005014:	d90e      	bls.n	8005034 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	22ff      	movs	r2, #255	; 0xff
 800501a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005020:	b2da      	uxtb	r2, r3
 8005022:	8979      	ldrh	r1, [r7, #10]
 8005024:	2300      	movs	r3, #0
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 fb49 	bl	80056c4 <I2C_TransferConfig>
 8005032:	e00f      	b.n	8005054 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005042:	b2da      	uxtb	r2, r3
 8005044:	8979      	ldrh	r1, [r7, #10]
 8005046:	2300      	movs	r3, #0
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 fb38 	bl	80056c4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005058:	b29b      	uxth	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d19e      	bne.n	8004f9c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 fa8c 	bl	8005580 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e01a      	b.n	80050a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2220      	movs	r2, #32
 8005078:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6859      	ldr	r1, [r3, #4]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	4b0a      	ldr	r3, [pc, #40]	; (80050b0 <HAL_I2C_Mem_Write+0x224>)
 8005086:	400b      	ands	r3, r1
 8005088:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2220      	movs	r2, #32
 800508e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	e000      	b.n	80050a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80050a6:	2302      	movs	r3, #2
  }
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	fe00e800 	.word	0xfe00e800

080050b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	4608      	mov	r0, r1
 80050be:	4611      	mov	r1, r2
 80050c0:	461a      	mov	r2, r3
 80050c2:	4603      	mov	r3, r0
 80050c4:	817b      	strh	r3, [r7, #10]
 80050c6:	460b      	mov	r3, r1
 80050c8:	813b      	strh	r3, [r7, #8]
 80050ca:	4613      	mov	r3, r2
 80050cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	f040 80fd 	bne.w	80052d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <HAL_I2C_Mem_Read+0x34>
 80050e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d105      	bne.n	80050f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e0f1      	b.n	80052d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_I2C_Mem_Read+0x4e>
 80050fe:	2302      	movs	r3, #2
 8005100:	e0ea      	b.n	80052d8 <HAL_I2C_Mem_Read+0x224>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800510a:	f7ff f84d 	bl	80041a8 <HAL_GetTick>
 800510e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	2319      	movs	r3, #25
 8005116:	2201      	movs	r2, #1
 8005118:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f9af 	bl	8005480 <I2C_WaitOnFlagUntilTimeout>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e0d5      	b.n	80052d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2222      	movs	r2, #34	; 0x22
 8005130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2240      	movs	r2, #64	; 0x40
 8005138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6a3a      	ldr	r2, [r7, #32]
 8005146:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800514c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005154:	88f8      	ldrh	r0, [r7, #6]
 8005156:	893a      	ldrh	r2, [r7, #8]
 8005158:	8979      	ldrh	r1, [r7, #10]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	4603      	mov	r3, r0
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f913 	bl	8005390 <I2C_RequestMemoryRead>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e0ad      	b.n	80052d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005180:	b29b      	uxth	r3, r3
 8005182:	2bff      	cmp	r3, #255	; 0xff
 8005184:	d90e      	bls.n	80051a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	22ff      	movs	r2, #255	; 0xff
 800518a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005190:	b2da      	uxtb	r2, r3
 8005192:	8979      	ldrh	r1, [r7, #10]
 8005194:	4b52      	ldr	r3, [pc, #328]	; (80052e0 <HAL_I2C_Mem_Read+0x22c>)
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 fa91 	bl	80056c4 <I2C_TransferConfig>
 80051a2:	e00f      	b.n	80051c4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	8979      	ldrh	r1, [r7, #10]
 80051b6:	4b4a      	ldr	r3, [pc, #296]	; (80052e0 <HAL_I2C_Mem_Read+0x22c>)
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 fa80 	bl	80056c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	2200      	movs	r2, #0
 80051cc:	2104      	movs	r1, #4
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 f956 	bl	8005480 <I2C_WaitOnFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e07c      	b.n	80052d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d034      	beq.n	8005284 <HAL_I2C_Mem_Read+0x1d0>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521e:	2b00      	cmp	r3, #0
 8005220:	d130      	bne.n	8005284 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	2200      	movs	r2, #0
 800522a:	2180      	movs	r1, #128	; 0x80
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 f927 	bl	8005480 <I2C_WaitOnFlagUntilTimeout>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e04d      	b.n	80052d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	2bff      	cmp	r3, #255	; 0xff
 8005244:	d90e      	bls.n	8005264 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	22ff      	movs	r2, #255	; 0xff
 800524a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005250:	b2da      	uxtb	r2, r3
 8005252:	8979      	ldrh	r1, [r7, #10]
 8005254:	2300      	movs	r3, #0
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 fa31 	bl	80056c4 <I2C_TransferConfig>
 8005262:	e00f      	b.n	8005284 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005272:	b2da      	uxtb	r2, r3
 8005274:	8979      	ldrh	r1, [r7, #10]
 8005276:	2300      	movs	r3, #0
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 fa20 	bl	80056c4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d19a      	bne.n	80051c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 f974 	bl	8005580 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e01a      	b.n	80052d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2220      	movs	r2, #32
 80052a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6859      	ldr	r1, [r3, #4]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <HAL_I2C_Mem_Read+0x230>)
 80052b6:	400b      	ands	r3, r1
 80052b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	e000      	b.n	80052d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80052d6:	2302      	movs	r3, #2
  }
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	80002400 	.word	0x80002400
 80052e4:	fe00e800 	.word	0xfe00e800

080052e8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	4608      	mov	r0, r1
 80052f2:	4611      	mov	r1, r2
 80052f4:	461a      	mov	r2, r3
 80052f6:	4603      	mov	r3, r0
 80052f8:	817b      	strh	r3, [r7, #10]
 80052fa:	460b      	mov	r3, r1
 80052fc:	813b      	strh	r3, [r7, #8]
 80052fe:	4613      	mov	r3, r2
 8005300:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	b2da      	uxtb	r2, r3
 8005306:	8979      	ldrh	r1, [r7, #10]
 8005308:	4b20      	ldr	r3, [pc, #128]	; (800538c <I2C_RequestMemoryWrite+0xa4>)
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f9d7 	bl	80056c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	69b9      	ldr	r1, [r7, #24]
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 f8f0 	bl	8005500 <I2C_WaitOnTXISFlagUntilTimeout>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e02c      	b.n	8005384 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d105      	bne.n	800533c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005330:	893b      	ldrh	r3, [r7, #8]
 8005332:	b2da      	uxtb	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	629a      	str	r2, [r3, #40]	; 0x28
 800533a:	e015      	b.n	8005368 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800533c:	893b      	ldrh	r3, [r7, #8]
 800533e:	0a1b      	lsrs	r3, r3, #8
 8005340:	b29b      	uxth	r3, r3
 8005342:	b2da      	uxtb	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	69b9      	ldr	r1, [r7, #24]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f8d6 	bl	8005500 <I2C_WaitOnTXISFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e012      	b.n	8005384 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800535e:	893b      	ldrh	r3, [r7, #8]
 8005360:	b2da      	uxtb	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	2200      	movs	r2, #0
 8005370:	2180      	movs	r1, #128	; 0x80
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 f884 	bl	8005480 <I2C_WaitOnFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	80002000 	.word	0x80002000

08005390 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	4608      	mov	r0, r1
 800539a:	4611      	mov	r1, r2
 800539c:	461a      	mov	r2, r3
 800539e:	4603      	mov	r3, r0
 80053a0:	817b      	strh	r3, [r7, #10]
 80053a2:	460b      	mov	r3, r1
 80053a4:	813b      	strh	r3, [r7, #8]
 80053a6:	4613      	mov	r3, r2
 80053a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	8979      	ldrh	r1, [r7, #10]
 80053b0:	4b20      	ldr	r3, [pc, #128]	; (8005434 <I2C_RequestMemoryRead+0xa4>)
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	2300      	movs	r3, #0
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f984 	bl	80056c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053bc:	69fa      	ldr	r2, [r7, #28]
 80053be:	69b9      	ldr	r1, [r7, #24]
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 f89d 	bl	8005500 <I2C_WaitOnTXISFlagUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e02c      	b.n	800542a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053d0:	88fb      	ldrh	r3, [r7, #6]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d105      	bne.n	80053e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053d6:	893b      	ldrh	r3, [r7, #8]
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	629a      	str	r2, [r3, #40]	; 0x28
 80053e0:	e015      	b.n	800540e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80053e2:	893b      	ldrh	r3, [r7, #8]
 80053e4:	0a1b      	lsrs	r3, r3, #8
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	69b9      	ldr	r1, [r7, #24]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f883 	bl	8005500 <I2C_WaitOnTXISFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e012      	b.n	800542a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005404:	893b      	ldrh	r3, [r7, #8]
 8005406:	b2da      	uxtb	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	2200      	movs	r2, #0
 8005416:	2140      	movs	r1, #64	; 0x40
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f831 	bl	8005480 <I2C_WaitOnFlagUntilTimeout>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	80002000 	.word	0x80002000

08005438 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b02      	cmp	r3, #2
 800544c:	d103      	bne.n	8005456 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2200      	movs	r2, #0
 8005454:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b01      	cmp	r3, #1
 8005462:	d007      	beq.n	8005474 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	619a      	str	r2, [r3, #24]
  }
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	4613      	mov	r3, r2
 800548e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005490:	e022      	b.n	80054d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005498:	d01e      	beq.n	80054d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549a:	f7fe fe85 	bl	80041a8 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d302      	bcc.n	80054b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d113      	bne.n	80054d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b4:	f043 0220 	orr.w	r2, r3, #32
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e00f      	b.n	80054f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4013      	ands	r3, r2
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	bf0c      	ite	eq
 80054e8:	2301      	moveq	r3, #1
 80054ea:	2300      	movne	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d0cd      	beq.n	8005492 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800550c:	e02c      	b.n	8005568 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f870 	bl	80055f8 <I2C_IsAcknowledgeFailed>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e02a      	b.n	8005578 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005528:	d01e      	beq.n	8005568 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800552a:	f7fe fe3d 	bl	80041a8 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	d302      	bcc.n	8005540 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d113      	bne.n	8005568 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005544:	f043 0220 	orr.w	r2, r3, #32
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e007      	b.n	8005578 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b02      	cmp	r3, #2
 8005574:	d1cb      	bne.n	800550e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800558c:	e028      	b.n	80055e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 f830 	bl	80055f8 <I2C_IsAcknowledgeFailed>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e026      	b.n	80055f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a2:	f7fe fe01 	bl	80041a8 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d302      	bcc.n	80055b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d113      	bne.n	80055e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055bc:	f043 0220 	orr.w	r2, r3, #32
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e007      	b.n	80055f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d1cf      	bne.n	800558e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	f003 0310 	and.w	r3, r3, #16
 800560e:	2b10      	cmp	r3, #16
 8005610:	d151      	bne.n	80056b6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005612:	e022      	b.n	800565a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561a:	d01e      	beq.n	800565a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561c:	f7fe fdc4 	bl	80041a8 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	429a      	cmp	r2, r3
 800562a:	d302      	bcc.n	8005632 <I2C_IsAcknowledgeFailed+0x3a>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d113      	bne.n	800565a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005636:	f043 0220 	orr.w	r2, r3, #32
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e02e      	b.n	80056b8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b20      	cmp	r3, #32
 8005666:	d1d5      	bne.n	8005614 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2210      	movs	r2, #16
 800566e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2220      	movs	r2, #32
 8005676:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f7ff fedd 	bl	8005438 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6859      	ldr	r1, [r3, #4]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4b0d      	ldr	r3, [pc, #52]	; (80056c0 <I2C_IsAcknowledgeFailed+0xc8>)
 800568a:	400b      	ands	r3, r1
 800568c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005692:	f043 0204 	orr.w	r2, r3, #4
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	fe00e800 	.word	0xfe00e800

080056c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	607b      	str	r3, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	817b      	strh	r3, [r7, #10]
 80056d2:	4613      	mov	r3, r2
 80056d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	0d5b      	lsrs	r3, r3, #21
 80056e0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80056e4:	4b0d      	ldr	r3, [pc, #52]	; (800571c <I2C_TransferConfig+0x58>)
 80056e6:	430b      	orrs	r3, r1
 80056e8:	43db      	mvns	r3, r3
 80056ea:	ea02 0103 	and.w	r1, r2, r3
 80056ee:	897b      	ldrh	r3, [r7, #10]
 80056f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056f4:	7a7b      	ldrb	r3, [r7, #9]
 80056f6:	041b      	lsls	r3, r3, #16
 80056f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	431a      	orrs	r2, r3
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	431a      	orrs	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800570e:	bf00      	nop
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	03ff63ff 	.word	0x03ff63ff

08005720 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b20      	cmp	r3, #32
 8005734:	d138      	bne.n	80057a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005740:	2302      	movs	r3, #2
 8005742:	e032      	b.n	80057aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2224      	movs	r2, #36	; 0x24
 8005750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0201 	bic.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005772:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6819      	ldr	r1, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2220      	movs	r2, #32
 8005798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	e000      	b.n	80057aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057a8:	2302      	movs	r3, #2
  }
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b085      	sub	sp, #20
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	d139      	bne.n	8005840 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e033      	b.n	8005842 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2224      	movs	r2, #36	; 0x24
 80057e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0201 	bic.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005808:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0201 	orr.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	e000      	b.n	8005842 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005840:	2302      	movs	r3, #2
  }
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800584e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005850:	b08f      	sub	sp, #60	; 0x3c
 8005852:	af0a      	add	r7, sp, #40	; 0x28
 8005854:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e116      	b.n	8005a8e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fe fa26 	bl	8003ccc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2203      	movs	r2, #3
 8005884:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f004 f9be 	bl	8009c20 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	603b      	str	r3, [r7, #0]
 80058aa:	687e      	ldr	r6, [r7, #4]
 80058ac:	466d      	mov	r5, sp
 80058ae:	f106 0410 	add.w	r4, r6, #16
 80058b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80058be:	e885 0003 	stmia.w	r5, {r0, r1}
 80058c2:	1d33      	adds	r3, r6, #4
 80058c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058c6:	6838      	ldr	r0, [r7, #0]
 80058c8:	f004 f97e 	bl	8009bc8 <USB_CoreInit>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e0d7      	b.n	8005a8e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2100      	movs	r1, #0
 80058e4:	4618      	mov	r0, r3
 80058e6:	f004 f9ac 	bl	8009c42 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058ea:	2300      	movs	r3, #0
 80058ec:	73fb      	strb	r3, [r7, #15]
 80058ee:	e04a      	b.n	8005986 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80058f0:	7bfa      	ldrb	r2, [r7, #15]
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	4613      	mov	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	1a9b      	subs	r3, r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	440b      	add	r3, r1
 80058fe:	333d      	adds	r3, #61	; 0x3d
 8005900:	2201      	movs	r2, #1
 8005902:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005904:	7bfa      	ldrb	r2, [r7, #15]
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	4613      	mov	r3, r2
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	1a9b      	subs	r3, r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	333c      	adds	r3, #60	; 0x3c
 8005914:	7bfa      	ldrb	r2, [r7, #15]
 8005916:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005918:	7bfa      	ldrb	r2, [r7, #15]
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	b298      	uxth	r0, r3
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	4613      	mov	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	1a9b      	subs	r3, r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	440b      	add	r3, r1
 800592a:	3342      	adds	r3, #66	; 0x42
 800592c:	4602      	mov	r2, r0
 800592e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005930:	7bfa      	ldrb	r2, [r7, #15]
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	4613      	mov	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	1a9b      	subs	r3, r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	440b      	add	r3, r1
 800593e:	333f      	adds	r3, #63	; 0x3f
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005944:	7bfa      	ldrb	r2, [r7, #15]
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	4613      	mov	r3, r2
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	440b      	add	r3, r1
 8005952:	3344      	adds	r3, #68	; 0x44
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005958:	7bfa      	ldrb	r2, [r7, #15]
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	4613      	mov	r3, r2
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	1a9b      	subs	r3, r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	3348      	adds	r3, #72	; 0x48
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800596c:	7bfa      	ldrb	r2, [r7, #15]
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	4613      	mov	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	3350      	adds	r3, #80	; 0x50
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005980:	7bfb      	ldrb	r3, [r7, #15]
 8005982:	3301      	adds	r3, #1
 8005984:	73fb      	strb	r3, [r7, #15]
 8005986:	7bfa      	ldrb	r2, [r7, #15]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	429a      	cmp	r2, r3
 800598e:	d3af      	bcc.n	80058f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005990:	2300      	movs	r3, #0
 8005992:	73fb      	strb	r3, [r7, #15]
 8005994:	e044      	b.n	8005a20 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005996:	7bfa      	ldrb	r2, [r7, #15]
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	1a9b      	subs	r3, r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059ac:	7bfa      	ldrb	r2, [r7, #15]
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	1a9b      	subs	r3, r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80059be:	7bfa      	ldrb	r2, [r7, #15]
 80059c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80059c2:	7bfa      	ldrb	r2, [r7, #15]
 80059c4:	6879      	ldr	r1, [r7, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	1a9b      	subs	r3, r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	440b      	add	r3, r1
 80059d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80059d4:	2200      	movs	r2, #0
 80059d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80059d8:	7bfa      	ldrb	r2, [r7, #15]
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	4613      	mov	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80059ee:	7bfa      	ldrb	r2, [r7, #15]
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	1a9b      	subs	r3, r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a04:	7bfa      	ldrb	r2, [r7, #15]
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	1a9b      	subs	r3, r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	73fb      	strb	r3, [r7, #15]
 8005a20:	7bfa      	ldrb	r2, [r7, #15]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d3b5      	bcc.n	8005996 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	687e      	ldr	r6, [r7, #4]
 8005a32:	466d      	mov	r5, sp
 8005a34:	f106 0410 	add.w	r4, r6, #16
 8005a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a44:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a48:	1d33      	adds	r3, r6, #4
 8005a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a4c:	6838      	ldr	r0, [r7, #0]
 8005a4e:	f004 f923 	bl	8009c98 <USB_DevInit>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e014      	b.n	8005a8e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d102      	bne.n	8005a82 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f80a 	bl	8005a96 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f004 fab3 	bl	8009ff2 <USB_DevDisconnect>

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a96 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b085      	sub	sp, #20
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac8:	f043 0303 	orr.w	r3, r3, #3
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
	...

08005ae0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a04      	ldr	r2, [pc, #16]	; (8005afc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aee:	6013      	str	r3, [r2, #0]
}
 8005af0:	bf00      	nop
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40007000 	.word	0x40007000

08005b00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005b04:	4b04      	ldr	r3, [pc, #16]	; (8005b18 <HAL_PWREx_GetVoltageRange+0x18>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40007000 	.word	0x40007000

08005b1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b2a:	d130      	bne.n	8005b8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b2c:	4b23      	ldr	r3, [pc, #140]	; (8005bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b38:	d038      	beq.n	8005bac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b3a:	4b20      	ldr	r3, [pc, #128]	; (8005bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b42:	4a1e      	ldr	r2, [pc, #120]	; (8005bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b4a:	4b1d      	ldr	r3, [pc, #116]	; (8005bc0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2232      	movs	r2, #50	; 0x32
 8005b50:	fb02 f303 	mul.w	r3, r2, r3
 8005b54:	4a1b      	ldr	r2, [pc, #108]	; (8005bc4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	0c9b      	lsrs	r3, r3, #18
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b60:	e002      	b.n	8005b68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b68:	4b14      	ldr	r3, [pc, #80]	; (8005bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b74:	d102      	bne.n	8005b7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f2      	bne.n	8005b62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b7c:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b88:	d110      	bne.n	8005bac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e00f      	b.n	8005bae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b8e:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b9a:	d007      	beq.n	8005bac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b9c:	4b07      	ldr	r3, [pc, #28]	; (8005bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ba4:	4a05      	ldr	r2, [pc, #20]	; (8005bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005baa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40007000 	.word	0x40007000
 8005bc0:	20000078 	.word	0x20000078
 8005bc4:	431bde83 	.word	0x431bde83

08005bc8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005bcc:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	4a04      	ldr	r2, [pc, #16]	; (8005be4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bd6:	6053      	str	r3, [r2, #4]
}
 8005bd8:	bf00      	nop
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40007000 	.word	0x40007000

08005be8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af02      	add	r7, sp, #8
 8005bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005bf0:	f7fe fada 	bl	80041a8 <HAL_GetTick>
 8005bf4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e063      	b.n	8005cc8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10b      	bne.n	8005c24 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7fd fdd5 	bl	80037c4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005c1a:	f241 3188 	movw	r1, #5000	; 0x1388
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f858 	bl	8005cd4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	021a      	lsls	r2, r3, #8
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	2120      	movs	r1, #32
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f850 	bl	8005cf0 <QSPI_WaitFlagStateUntilTimeout>
 8005c50:	4603      	mov	r3, r0
 8005c52:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005c54:	7afb      	ldrb	r3, [r7, #11]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d131      	bne.n	8005cbe <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c64:	f023 0310 	bic.w	r3, r3, #16
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6852      	ldr	r2, [r2, #4]
 8005c6c:	0611      	lsls	r1, r2, #24
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	68d2      	ldr	r2, [r2, #12]
 8005c72:	4311      	orrs	r1, r2
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	4b13      	ldr	r3, [pc, #76]	; (8005cd0 <HAL_QSPI_Init+0xe8>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6912      	ldr	r2, [r2, #16]
 8005c8a:	0411      	lsls	r1, r2, #16
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6952      	ldr	r2, [r2, #20]
 8005c90:	4311      	orrs	r1, r2
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6992      	ldr	r2, [r2, #24]
 8005c96:	4311      	orrs	r1, r2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0201 	orr.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005cc6:	7afb      	ldrb	r3, [r7, #11]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	ffe0f8fe 	.word	0xffe0f8fe

08005cd4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	603b      	str	r3, [r7, #0]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005d00:	e01a      	b.n	8005d38 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d08:	d016      	beq.n	8005d38 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d0a:	f7fe fa4d 	bl	80041a8 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d302      	bcc.n	8005d20 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10b      	bne.n	8005d38 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2204      	movs	r2, #4
 8005d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2c:	f043 0201 	orr.w	r2, r3, #1
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e00e      	b.n	8005d56 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689a      	ldr	r2, [r3, #8]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	4013      	ands	r3, r2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	bf14      	ite	ne
 8005d46:	2301      	movne	r3, #1
 8005d48:	2300      	moveq	r3, #0
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d1d6      	bne.n	8005d02 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e3d4      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d72:	4ba1      	ldr	r3, [pc, #644]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 030c 	and.w	r3, r3, #12
 8005d7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d7c:	4b9e      	ldr	r3, [pc, #632]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 0303 	and.w	r3, r3, #3
 8005d84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0310 	and.w	r3, r3, #16
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 80e4 	beq.w	8005f5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d007      	beq.n	8005daa <HAL_RCC_OscConfig+0x4a>
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	2b0c      	cmp	r3, #12
 8005d9e:	f040 808b 	bne.w	8005eb8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	f040 8087 	bne.w	8005eb8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005daa:	4b93      	ldr	r3, [pc, #588]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d005      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x62>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e3ac      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1a      	ldr	r2, [r3, #32]
 8005dc6:	4b8c      	ldr	r3, [pc, #560]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d004      	beq.n	8005ddc <HAL_RCC_OscConfig+0x7c>
 8005dd2:	4b89      	ldr	r3, [pc, #548]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dda:	e005      	b.n	8005de8 <HAL_RCC_OscConfig+0x88>
 8005ddc:	4b86      	ldr	r3, [pc, #536]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005de2:	091b      	lsrs	r3, r3, #4
 8005de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d223      	bcs.n	8005e34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fd41 	bl	8006878 <RCC_SetFlashLatencyFromMSIRange>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e38d      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e00:	4b7d      	ldr	r3, [pc, #500]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a7c      	ldr	r2, [pc, #496]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005e06:	f043 0308 	orr.w	r3, r3, #8
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	4b7a      	ldr	r3, [pc, #488]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	4977      	ldr	r1, [pc, #476]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e1e:	4b76      	ldr	r3, [pc, #472]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	4972      	ldr	r1, [pc, #456]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	604b      	str	r3, [r1, #4]
 8005e32:	e025      	b.n	8005e80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e34:	4b70      	ldr	r3, [pc, #448]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a6f      	ldr	r2, [pc, #444]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005e3a:	f043 0308 	orr.w	r3, r3, #8
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	4b6d      	ldr	r3, [pc, #436]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	496a      	ldr	r1, [pc, #424]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e52:	4b69      	ldr	r3, [pc, #420]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	021b      	lsls	r3, r3, #8
 8005e60:	4965      	ldr	r1, [pc, #404]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d109      	bne.n	8005e80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 fd01 	bl	8006878 <RCC_SetFlashLatencyFromMSIRange>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e34d      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e80:	f000 fc36 	bl	80066f0 <HAL_RCC_GetSysClockFreq>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4b5c      	ldr	r3, [pc, #368]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	495a      	ldr	r1, [pc, #360]	; (8005ffc <HAL_RCC_OscConfig+0x29c>)
 8005e92:	5ccb      	ldrb	r3, [r1, r3]
 8005e94:	f003 031f 	and.w	r3, r3, #31
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
 8005e9c:	4a58      	ldr	r2, [pc, #352]	; (8006000 <HAL_RCC_OscConfig+0x2a0>)
 8005e9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ea0:	4b58      	ldr	r3, [pc, #352]	; (8006004 <HAL_RCC_OscConfig+0x2a4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fe f92f 	bl	8004108 <HAL_InitTick>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d052      	beq.n	8005f5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	e331      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d032      	beq.n	8005f26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ec0:	4b4d      	ldr	r3, [pc, #308]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a4c      	ldr	r2, [pc, #304]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005ec6:	f043 0301 	orr.w	r3, r3, #1
 8005eca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ecc:	f7fe f96c 	bl	80041a8 <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ed4:	f7fe f968 	bl	80041a8 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e31a      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ee6:	4b44      	ldr	r3, [pc, #272]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0f0      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ef2:	4b41      	ldr	r3, [pc, #260]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a40      	ldr	r2, [pc, #256]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005ef8:	f043 0308 	orr.w	r3, r3, #8
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	4b3e      	ldr	r3, [pc, #248]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	493b      	ldr	r1, [pc, #236]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f10:	4b39      	ldr	r3, [pc, #228]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	4936      	ldr	r1, [pc, #216]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	604b      	str	r3, [r1, #4]
 8005f24:	e01a      	b.n	8005f5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f26:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a33      	ldr	r2, [pc, #204]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005f2c:	f023 0301 	bic.w	r3, r3, #1
 8005f30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f32:	f7fe f939 	bl	80041a8 <HAL_GetTick>
 8005f36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f3a:	f7fe f935 	bl	80041a8 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e2e7      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f4c:	4b2a      	ldr	r3, [pc, #168]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1f0      	bne.n	8005f3a <HAL_RCC_OscConfig+0x1da>
 8005f58:	e000      	b.n	8005f5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d074      	beq.n	8006052 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d005      	beq.n	8005f7a <HAL_RCC_OscConfig+0x21a>
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	2b0c      	cmp	r3, #12
 8005f72:	d10e      	bne.n	8005f92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d10b      	bne.n	8005f92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f7a:	4b1f      	ldr	r3, [pc, #124]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d064      	beq.n	8006050 <HAL_RCC_OscConfig+0x2f0>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d160      	bne.n	8006050 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e2c4      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f9a:	d106      	bne.n	8005faa <HAL_RCC_OscConfig+0x24a>
 8005f9c:	4b16      	ldr	r3, [pc, #88]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a15      	ldr	r2, [pc, #84]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	e01d      	b.n	8005fe6 <HAL_RCC_OscConfig+0x286>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fb2:	d10c      	bne.n	8005fce <HAL_RCC_OscConfig+0x26e>
 8005fb4:	4b10      	ldr	r3, [pc, #64]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a0f      	ldr	r2, [pc, #60]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005fba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	4b0d      	ldr	r3, [pc, #52]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a0c      	ldr	r2, [pc, #48]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	e00b      	b.n	8005fe6 <HAL_RCC_OscConfig+0x286>
 8005fce:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a09      	ldr	r2, [pc, #36]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	4b07      	ldr	r3, [pc, #28]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a06      	ldr	r2, [pc, #24]	; (8005ff8 <HAL_RCC_OscConfig+0x298>)
 8005fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fe4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d01c      	beq.n	8006028 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fee:	f7fe f8db 	bl	80041a8 <HAL_GetTick>
 8005ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ff4:	e011      	b.n	800601a <HAL_RCC_OscConfig+0x2ba>
 8005ff6:	bf00      	nop
 8005ff8:	40021000 	.word	0x40021000
 8005ffc:	0800fc98 	.word	0x0800fc98
 8006000:	20000078 	.word	0x20000078
 8006004:	2000007c 	.word	0x2000007c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006008:	f7fe f8ce 	bl	80041a8 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b64      	cmp	r3, #100	; 0x64
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e280      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800601a:	4baf      	ldr	r3, [pc, #700]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0f0      	beq.n	8006008 <HAL_RCC_OscConfig+0x2a8>
 8006026:	e014      	b.n	8006052 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006028:	f7fe f8be 	bl	80041a8 <HAL_GetTick>
 800602c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006030:	f7fe f8ba 	bl	80041a8 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b64      	cmp	r3, #100	; 0x64
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e26c      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006042:	4ba5      	ldr	r3, [pc, #660]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1f0      	bne.n	8006030 <HAL_RCC_OscConfig+0x2d0>
 800604e:	e000      	b.n	8006052 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d060      	beq.n	8006120 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	2b04      	cmp	r3, #4
 8006062:	d005      	beq.n	8006070 <HAL_RCC_OscConfig+0x310>
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	2b0c      	cmp	r3, #12
 8006068:	d119      	bne.n	800609e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d116      	bne.n	800609e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006070:	4b99      	ldr	r3, [pc, #612]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006078:	2b00      	cmp	r3, #0
 800607a:	d005      	beq.n	8006088 <HAL_RCC_OscConfig+0x328>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e249      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006088:	4b93      	ldr	r3, [pc, #588]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	061b      	lsls	r3, r3, #24
 8006096:	4990      	ldr	r1, [pc, #576]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 8006098:	4313      	orrs	r3, r2
 800609a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800609c:	e040      	b.n	8006120 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d023      	beq.n	80060ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060a6:	4b8c      	ldr	r3, [pc, #560]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a8b      	ldr	r2, [pc, #556]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 80060ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b2:	f7fe f879 	bl	80041a8 <HAL_GetTick>
 80060b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060b8:	e008      	b.n	80060cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060ba:	f7fe f875 	bl	80041a8 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d901      	bls.n	80060cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e227      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060cc:	4b82      	ldr	r3, [pc, #520]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d0f0      	beq.n	80060ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060d8:	4b7f      	ldr	r3, [pc, #508]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	061b      	lsls	r3, r3, #24
 80060e6:	497c      	ldr	r1, [pc, #496]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	604b      	str	r3, [r1, #4]
 80060ec:	e018      	b.n	8006120 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060ee:	4b7a      	ldr	r3, [pc, #488]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a79      	ldr	r2, [pc, #484]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 80060f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060fa:	f7fe f855 	bl	80041a8 <HAL_GetTick>
 80060fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006100:	e008      	b.n	8006114 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006102:	f7fe f851 	bl	80041a8 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d901      	bls.n	8006114 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e203      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006114:	4b70      	ldr	r3, [pc, #448]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1f0      	bne.n	8006102 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b00      	cmp	r3, #0
 800612a:	d03c      	beq.n	80061a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01c      	beq.n	800616e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006134:	4b68      	ldr	r3, [pc, #416]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 8006136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800613a:	4a67      	ldr	r2, [pc, #412]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 800613c:	f043 0301 	orr.w	r3, r3, #1
 8006140:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006144:	f7fe f830 	bl	80041a8 <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800614c:	f7fe f82c 	bl	80041a8 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e1de      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800615e:	4b5e      	ldr	r3, [pc, #376]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 8006160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0ef      	beq.n	800614c <HAL_RCC_OscConfig+0x3ec>
 800616c:	e01b      	b.n	80061a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800616e:	4b5a      	ldr	r3, [pc, #360]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 8006170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006174:	4a58      	ldr	r2, [pc, #352]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 8006176:	f023 0301 	bic.w	r3, r3, #1
 800617a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800617e:	f7fe f813 	bl	80041a8 <HAL_GetTick>
 8006182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006184:	e008      	b.n	8006198 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006186:	f7fe f80f 	bl	80041a8 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d901      	bls.n	8006198 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e1c1      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006198:	4b4f      	ldr	r3, [pc, #316]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 800619a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1ef      	bne.n	8006186 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 80a6 	beq.w	8006300 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061b4:	2300      	movs	r3, #0
 80061b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80061b8:	4b47      	ldr	r3, [pc, #284]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 80061ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10d      	bne.n	80061e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061c4:	4b44      	ldr	r3, [pc, #272]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 80061c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c8:	4a43      	ldr	r2, [pc, #268]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 80061ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ce:	6593      	str	r3, [r2, #88]	; 0x58
 80061d0:	4b41      	ldr	r3, [pc, #260]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 80061d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061dc:	2301      	movs	r3, #1
 80061de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061e0:	4b3e      	ldr	r3, [pc, #248]	; (80062dc <HAL_RCC_OscConfig+0x57c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d118      	bne.n	800621e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061ec:	4b3b      	ldr	r3, [pc, #236]	; (80062dc <HAL_RCC_OscConfig+0x57c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a3a      	ldr	r2, [pc, #232]	; (80062dc <HAL_RCC_OscConfig+0x57c>)
 80061f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061f8:	f7fd ffd6 	bl	80041a8 <HAL_GetTick>
 80061fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006200:	f7fd ffd2 	bl	80041a8 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e184      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006212:	4b32      	ldr	r3, [pc, #200]	; (80062dc <HAL_RCC_OscConfig+0x57c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621a:	2b00      	cmp	r3, #0
 800621c:	d0f0      	beq.n	8006200 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d108      	bne.n	8006238 <HAL_RCC_OscConfig+0x4d8>
 8006226:	4b2c      	ldr	r3, [pc, #176]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 8006228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622c:	4a2a      	ldr	r2, [pc, #168]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 800622e:	f043 0301 	orr.w	r3, r3, #1
 8006232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006236:	e024      	b.n	8006282 <HAL_RCC_OscConfig+0x522>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	2b05      	cmp	r3, #5
 800623e:	d110      	bne.n	8006262 <HAL_RCC_OscConfig+0x502>
 8006240:	4b25      	ldr	r3, [pc, #148]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 8006242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006246:	4a24      	ldr	r2, [pc, #144]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 8006248:	f043 0304 	orr.w	r3, r3, #4
 800624c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006250:	4b21      	ldr	r3, [pc, #132]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 8006252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006256:	4a20      	ldr	r2, [pc, #128]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 8006258:	f043 0301 	orr.w	r3, r3, #1
 800625c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006260:	e00f      	b.n	8006282 <HAL_RCC_OscConfig+0x522>
 8006262:	4b1d      	ldr	r3, [pc, #116]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 8006264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006268:	4a1b      	ldr	r2, [pc, #108]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 800626a:	f023 0301 	bic.w	r3, r3, #1
 800626e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006272:	4b19      	ldr	r3, [pc, #100]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 8006274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006278:	4a17      	ldr	r2, [pc, #92]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 800627a:	f023 0304 	bic.w	r3, r3, #4
 800627e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d016      	beq.n	80062b8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800628a:	f7fd ff8d 	bl	80041a8 <HAL_GetTick>
 800628e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006290:	e00a      	b.n	80062a8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006292:	f7fd ff89 	bl	80041a8 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d901      	bls.n	80062a8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e139      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062a8:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <HAL_RCC_OscConfig+0x578>)
 80062aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0ed      	beq.n	8006292 <HAL_RCC_OscConfig+0x532>
 80062b6:	e01a      	b.n	80062ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b8:	f7fd ff76 	bl	80041a8 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062be:	e00f      	b.n	80062e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c0:	f7fd ff72 	bl	80041a8 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d906      	bls.n	80062e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e122      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
 80062d6:	bf00      	nop
 80062d8:	40021000 	.word	0x40021000
 80062dc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062e0:	4b90      	ldr	r3, [pc, #576]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 80062e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1e8      	bne.n	80062c0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062ee:	7ffb      	ldrb	r3, [r7, #31]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d105      	bne.n	8006300 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062f4:	4b8b      	ldr	r3, [pc, #556]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 80062f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062f8:	4a8a      	ldr	r2, [pc, #552]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 80062fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 8108 	beq.w	800651a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630e:	2b02      	cmp	r3, #2
 8006310:	f040 80d0 	bne.w	80064b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006314:	4b83      	ldr	r3, [pc, #524]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f003 0203 	and.w	r2, r3, #3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	429a      	cmp	r2, r3
 8006326:	d130      	bne.n	800638a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	3b01      	subs	r3, #1
 8006334:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006336:	429a      	cmp	r2, r3
 8006338:	d127      	bne.n	800638a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006344:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006346:	429a      	cmp	r2, r3
 8006348:	d11f      	bne.n	800638a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006354:	2a07      	cmp	r2, #7
 8006356:	bf14      	ite	ne
 8006358:	2201      	movne	r2, #1
 800635a:	2200      	moveq	r2, #0
 800635c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800635e:	4293      	cmp	r3, r2
 8006360:	d113      	bne.n	800638a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636c:	085b      	lsrs	r3, r3, #1
 800636e:	3b01      	subs	r3, #1
 8006370:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006372:	429a      	cmp	r2, r3
 8006374:	d109      	bne.n	800638a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	085b      	lsrs	r3, r3, #1
 8006382:	3b01      	subs	r3, #1
 8006384:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006386:	429a      	cmp	r2, r3
 8006388:	d06e      	beq.n	8006468 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	2b0c      	cmp	r3, #12
 800638e:	d069      	beq.n	8006464 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006390:	4b64      	ldr	r3, [pc, #400]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d105      	bne.n	80063a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800639c:	4b61      	ldr	r3, [pc, #388]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e0b7      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80063ac:	4b5d      	ldr	r3, [pc, #372]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a5c      	ldr	r2, [pc, #368]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 80063b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80063b8:	f7fd fef6 	bl	80041a8 <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c0:	f7fd fef2 	bl	80041a8 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e0a4      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063d2:	4b54      	ldr	r3, [pc, #336]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063de:	4b51      	ldr	r3, [pc, #324]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	4b51      	ldr	r3, [pc, #324]	; (8006528 <HAL_RCC_OscConfig+0x7c8>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80063ee:	3a01      	subs	r2, #1
 80063f0:	0112      	lsls	r2, r2, #4
 80063f2:	4311      	orrs	r1, r2
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80063f8:	0212      	lsls	r2, r2, #8
 80063fa:	4311      	orrs	r1, r2
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006400:	0852      	lsrs	r2, r2, #1
 8006402:	3a01      	subs	r2, #1
 8006404:	0552      	lsls	r2, r2, #21
 8006406:	4311      	orrs	r1, r2
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800640c:	0852      	lsrs	r2, r2, #1
 800640e:	3a01      	subs	r2, #1
 8006410:	0652      	lsls	r2, r2, #25
 8006412:	4311      	orrs	r1, r2
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006418:	0912      	lsrs	r2, r2, #4
 800641a:	0452      	lsls	r2, r2, #17
 800641c:	430a      	orrs	r2, r1
 800641e:	4941      	ldr	r1, [pc, #260]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 8006420:	4313      	orrs	r3, r2
 8006422:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006424:	4b3f      	ldr	r3, [pc, #252]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a3e      	ldr	r2, [pc, #248]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 800642a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800642e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006430:	4b3c      	ldr	r3, [pc, #240]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	4a3b      	ldr	r2, [pc, #236]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 8006436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800643a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800643c:	f7fd feb4 	bl	80041a8 <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006444:	f7fd feb0 	bl	80041a8 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e062      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006456:	4b33      	ldr	r3, [pc, #204]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d0f0      	beq.n	8006444 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006462:	e05a      	b.n	800651a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e059      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006468:	4b2e      	ldr	r3, [pc, #184]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d152      	bne.n	800651a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006474:	4b2b      	ldr	r3, [pc, #172]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a2a      	ldr	r2, [pc, #168]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 800647a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800647e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006480:	4b28      	ldr	r3, [pc, #160]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	4a27      	ldr	r2, [pc, #156]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 8006486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800648a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800648c:	f7fd fe8c 	bl	80041a8 <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006492:	e008      	b.n	80064a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006494:	f7fd fe88 	bl	80041a8 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e03a      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064a6:	4b1f      	ldr	r3, [pc, #124]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0f0      	beq.n	8006494 <HAL_RCC_OscConfig+0x734>
 80064b2:	e032      	b.n	800651a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	2b0c      	cmp	r3, #12
 80064b8:	d02d      	beq.n	8006516 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ba:	4b1a      	ldr	r3, [pc, #104]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a19      	ldr	r2, [pc, #100]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 80064c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064c4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80064c6:	4b17      	ldr	r3, [pc, #92]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d105      	bne.n	80064de <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80064d2:	4b14      	ldr	r3, [pc, #80]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	4a13      	ldr	r2, [pc, #76]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 80064d8:	f023 0303 	bic.w	r3, r3, #3
 80064dc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80064de:	4b11      	ldr	r3, [pc, #68]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	4a10      	ldr	r2, [pc, #64]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 80064e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80064e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ee:	f7fd fe5b 	bl	80041a8 <HAL_GetTick>
 80064f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064f4:	e008      	b.n	8006508 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064f6:	f7fd fe57 	bl	80041a8 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	2b02      	cmp	r3, #2
 8006502:	d901      	bls.n	8006508 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e009      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006508:	4b06      	ldr	r3, [pc, #24]	; (8006524 <HAL_RCC_OscConfig+0x7c4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1f0      	bne.n	80064f6 <HAL_RCC_OscConfig+0x796>
 8006514:	e001      	b.n	800651a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3720      	adds	r7, #32
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40021000 	.word	0x40021000
 8006528:	f99d808c 	.word	0xf99d808c

0800652c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e0c8      	b.n	80066d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006540:	4b66      	ldr	r3, [pc, #408]	; (80066dc <HAL_RCC_ClockConfig+0x1b0>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d910      	bls.n	8006570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800654e:	4b63      	ldr	r3, [pc, #396]	; (80066dc <HAL_RCC_ClockConfig+0x1b0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f023 0207 	bic.w	r2, r3, #7
 8006556:	4961      	ldr	r1, [pc, #388]	; (80066dc <HAL_RCC_ClockConfig+0x1b0>)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	4313      	orrs	r3, r2
 800655c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800655e:	4b5f      	ldr	r3, [pc, #380]	; (80066dc <HAL_RCC_ClockConfig+0x1b0>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d001      	beq.n	8006570 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e0b0      	b.n	80066d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	d04c      	beq.n	8006616 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	2b03      	cmp	r3, #3
 8006582:	d107      	bne.n	8006594 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006584:	4b56      	ldr	r3, [pc, #344]	; (80066e0 <HAL_RCC_ClockConfig+0x1b4>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d121      	bne.n	80065d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e09e      	b.n	80066d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2b02      	cmp	r3, #2
 800659a:	d107      	bne.n	80065ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800659c:	4b50      	ldr	r3, [pc, #320]	; (80066e0 <HAL_RCC_ClockConfig+0x1b4>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d115      	bne.n	80065d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e092      	b.n	80066d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d107      	bne.n	80065c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065b4:	4b4a      	ldr	r3, [pc, #296]	; (80066e0 <HAL_RCC_ClockConfig+0x1b4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d109      	bne.n	80065d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e086      	b.n	80066d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065c4:	4b46      	ldr	r3, [pc, #280]	; (80066e0 <HAL_RCC_ClockConfig+0x1b4>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e07e      	b.n	80066d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065d4:	4b42      	ldr	r3, [pc, #264]	; (80066e0 <HAL_RCC_ClockConfig+0x1b4>)
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f023 0203 	bic.w	r2, r3, #3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	493f      	ldr	r1, [pc, #252]	; (80066e0 <HAL_RCC_ClockConfig+0x1b4>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e6:	f7fd fddf 	bl	80041a8 <HAL_GetTick>
 80065ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ec:	e00a      	b.n	8006604 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065ee:	f7fd fddb 	bl	80041a8 <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e066      	b.n	80066d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006604:	4b36      	ldr	r3, [pc, #216]	; (80066e0 <HAL_RCC_ClockConfig+0x1b4>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f003 020c 	and.w	r2, r3, #12
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	429a      	cmp	r2, r3
 8006614:	d1eb      	bne.n	80065ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d008      	beq.n	8006634 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006622:	4b2f      	ldr	r3, [pc, #188]	; (80066e0 <HAL_RCC_ClockConfig+0x1b4>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	492c      	ldr	r1, [pc, #176]	; (80066e0 <HAL_RCC_ClockConfig+0x1b4>)
 8006630:	4313      	orrs	r3, r2
 8006632:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006634:	4b29      	ldr	r3, [pc, #164]	; (80066dc <HAL_RCC_ClockConfig+0x1b0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0307 	and.w	r3, r3, #7
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	d210      	bcs.n	8006664 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006642:	4b26      	ldr	r3, [pc, #152]	; (80066dc <HAL_RCC_ClockConfig+0x1b0>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f023 0207 	bic.w	r2, r3, #7
 800664a:	4924      	ldr	r1, [pc, #144]	; (80066dc <HAL_RCC_ClockConfig+0x1b0>)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	4313      	orrs	r3, r2
 8006650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006652:	4b22      	ldr	r3, [pc, #136]	; (80066dc <HAL_RCC_ClockConfig+0x1b0>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	429a      	cmp	r2, r3
 800665e:	d001      	beq.n	8006664 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e036      	b.n	80066d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b00      	cmp	r3, #0
 800666e:	d008      	beq.n	8006682 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006670:	4b1b      	ldr	r3, [pc, #108]	; (80066e0 <HAL_RCC_ClockConfig+0x1b4>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	4918      	ldr	r1, [pc, #96]	; (80066e0 <HAL_RCC_ClockConfig+0x1b4>)
 800667e:	4313      	orrs	r3, r2
 8006680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0308 	and.w	r3, r3, #8
 800668a:	2b00      	cmp	r3, #0
 800668c:	d009      	beq.n	80066a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800668e:	4b14      	ldr	r3, [pc, #80]	; (80066e0 <HAL_RCC_ClockConfig+0x1b4>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	4910      	ldr	r1, [pc, #64]	; (80066e0 <HAL_RCC_ClockConfig+0x1b4>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066a2:	f000 f825 	bl	80066f0 <HAL_RCC_GetSysClockFreq>
 80066a6:	4602      	mov	r2, r0
 80066a8:	4b0d      	ldr	r3, [pc, #52]	; (80066e0 <HAL_RCC_ClockConfig+0x1b4>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	091b      	lsrs	r3, r3, #4
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	490c      	ldr	r1, [pc, #48]	; (80066e4 <HAL_RCC_ClockConfig+0x1b8>)
 80066b4:	5ccb      	ldrb	r3, [r1, r3]
 80066b6:	f003 031f 	and.w	r3, r3, #31
 80066ba:	fa22 f303 	lsr.w	r3, r2, r3
 80066be:	4a0a      	ldr	r2, [pc, #40]	; (80066e8 <HAL_RCC_ClockConfig+0x1bc>)
 80066c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80066c2:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <HAL_RCC_ClockConfig+0x1c0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fd fd1e 	bl	8004108 <HAL_InitTick>
 80066cc:	4603      	mov	r3, r0
 80066ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80066d0:	7afb      	ldrb	r3, [r7, #11]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40022000 	.word	0x40022000
 80066e0:	40021000 	.word	0x40021000
 80066e4:	0800fc98 	.word	0x0800fc98
 80066e8:	20000078 	.word	0x20000078
 80066ec:	2000007c 	.word	0x2000007c

080066f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b089      	sub	sp, #36	; 0x24
 80066f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	61fb      	str	r3, [r7, #28]
 80066fa:	2300      	movs	r3, #0
 80066fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066fe:	4b3e      	ldr	r3, [pc, #248]	; (80067f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f003 030c 	and.w	r3, r3, #12
 8006706:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006708:	4b3b      	ldr	r3, [pc, #236]	; (80067f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f003 0303 	and.w	r3, r3, #3
 8006710:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <HAL_RCC_GetSysClockFreq+0x34>
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	2b0c      	cmp	r3, #12
 800671c:	d121      	bne.n	8006762 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d11e      	bne.n	8006762 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006724:	4b34      	ldr	r3, [pc, #208]	; (80067f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b00      	cmp	r3, #0
 800672e:	d107      	bne.n	8006740 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006730:	4b31      	ldr	r3, [pc, #196]	; (80067f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006736:	0a1b      	lsrs	r3, r3, #8
 8006738:	f003 030f 	and.w	r3, r3, #15
 800673c:	61fb      	str	r3, [r7, #28]
 800673e:	e005      	b.n	800674c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006740:	4b2d      	ldr	r3, [pc, #180]	; (80067f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	091b      	lsrs	r3, r3, #4
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800674c:	4a2b      	ldr	r2, [pc, #172]	; (80067fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006754:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10d      	bne.n	8006778 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006760:	e00a      	b.n	8006778 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b04      	cmp	r3, #4
 8006766:	d102      	bne.n	800676e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006768:	4b25      	ldr	r3, [pc, #148]	; (8006800 <HAL_RCC_GetSysClockFreq+0x110>)
 800676a:	61bb      	str	r3, [r7, #24]
 800676c:	e004      	b.n	8006778 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	2b08      	cmp	r3, #8
 8006772:	d101      	bne.n	8006778 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006774:	4b23      	ldr	r3, [pc, #140]	; (8006804 <HAL_RCC_GetSysClockFreq+0x114>)
 8006776:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2b0c      	cmp	r3, #12
 800677c:	d134      	bne.n	80067e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800677e:	4b1e      	ldr	r3, [pc, #120]	; (80067f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b02      	cmp	r3, #2
 800678c:	d003      	beq.n	8006796 <HAL_RCC_GetSysClockFreq+0xa6>
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2b03      	cmp	r3, #3
 8006792:	d003      	beq.n	800679c <HAL_RCC_GetSysClockFreq+0xac>
 8006794:	e005      	b.n	80067a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006796:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <HAL_RCC_GetSysClockFreq+0x110>)
 8006798:	617b      	str	r3, [r7, #20]
      break;
 800679a:	e005      	b.n	80067a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800679c:	4b19      	ldr	r3, [pc, #100]	; (8006804 <HAL_RCC_GetSysClockFreq+0x114>)
 800679e:	617b      	str	r3, [r7, #20]
      break;
 80067a0:	e002      	b.n	80067a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	617b      	str	r3, [r7, #20]
      break;
 80067a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067a8:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	091b      	lsrs	r3, r3, #4
 80067ae:	f003 0307 	and.w	r3, r3, #7
 80067b2:	3301      	adds	r3, #1
 80067b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80067b6:	4b10      	ldr	r3, [pc, #64]	; (80067f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	0a1b      	lsrs	r3, r3, #8
 80067bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	fb02 f203 	mul.w	r2, r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067ce:	4b0a      	ldr	r3, [pc, #40]	; (80067f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	0e5b      	lsrs	r3, r3, #25
 80067d4:	f003 0303 	and.w	r3, r3, #3
 80067d8:	3301      	adds	r3, #1
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80067e8:	69bb      	ldr	r3, [r7, #24]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3724      	adds	r7, #36	; 0x24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	40021000 	.word	0x40021000
 80067fc:	0800fcb0 	.word	0x0800fcb0
 8006800:	00f42400 	.word	0x00f42400
 8006804:	007a1200 	.word	0x007a1200

08006808 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800680c:	4b03      	ldr	r3, [pc, #12]	; (800681c <HAL_RCC_GetHCLKFreq+0x14>)
 800680e:	681b      	ldr	r3, [r3, #0]
}
 8006810:	4618      	mov	r0, r3
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	20000078 	.word	0x20000078

08006820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006824:	f7ff fff0 	bl	8006808 <HAL_RCC_GetHCLKFreq>
 8006828:	4602      	mov	r2, r0
 800682a:	4b06      	ldr	r3, [pc, #24]	; (8006844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	0a1b      	lsrs	r3, r3, #8
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	4904      	ldr	r1, [pc, #16]	; (8006848 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006836:	5ccb      	ldrb	r3, [r1, r3]
 8006838:	f003 031f 	and.w	r3, r3, #31
 800683c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006840:	4618      	mov	r0, r3
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40021000 	.word	0x40021000
 8006848:	0800fca8 	.word	0x0800fca8

0800684c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006850:	f7ff ffda 	bl	8006808 <HAL_RCC_GetHCLKFreq>
 8006854:	4602      	mov	r2, r0
 8006856:	4b06      	ldr	r3, [pc, #24]	; (8006870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	0adb      	lsrs	r3, r3, #11
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	4904      	ldr	r1, [pc, #16]	; (8006874 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006862:	5ccb      	ldrb	r3, [r1, r3]
 8006864:	f003 031f 	and.w	r3, r3, #31
 8006868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800686c:	4618      	mov	r0, r3
 800686e:	bd80      	pop	{r7, pc}
 8006870:	40021000 	.word	0x40021000
 8006874:	0800fca8 	.word	0x0800fca8

08006878 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006880:	2300      	movs	r3, #0
 8006882:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006884:	4b2a      	ldr	r3, [pc, #168]	; (8006930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006890:	f7ff f936 	bl	8005b00 <HAL_PWREx_GetVoltageRange>
 8006894:	6178      	str	r0, [r7, #20]
 8006896:	e014      	b.n	80068c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006898:	4b25      	ldr	r3, [pc, #148]	; (8006930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800689a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689c:	4a24      	ldr	r2, [pc, #144]	; (8006930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800689e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068a2:	6593      	str	r3, [r2, #88]	; 0x58
 80068a4:	4b22      	ldr	r3, [pc, #136]	; (8006930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80068b0:	f7ff f926 	bl	8005b00 <HAL_PWREx_GetVoltageRange>
 80068b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80068b6:	4b1e      	ldr	r3, [pc, #120]	; (8006930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ba:	4a1d      	ldr	r2, [pc, #116]	; (8006930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c8:	d10b      	bne.n	80068e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b80      	cmp	r3, #128	; 0x80
 80068ce:	d919      	bls.n	8006904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2ba0      	cmp	r3, #160	; 0xa0
 80068d4:	d902      	bls.n	80068dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80068d6:	2302      	movs	r3, #2
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	e013      	b.n	8006904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80068dc:	2301      	movs	r3, #1
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	e010      	b.n	8006904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b80      	cmp	r3, #128	; 0x80
 80068e6:	d902      	bls.n	80068ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80068e8:	2303      	movs	r3, #3
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	e00a      	b.n	8006904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b80      	cmp	r3, #128	; 0x80
 80068f2:	d102      	bne.n	80068fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80068f4:	2302      	movs	r3, #2
 80068f6:	613b      	str	r3, [r7, #16]
 80068f8:	e004      	b.n	8006904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b70      	cmp	r3, #112	; 0x70
 80068fe:	d101      	bne.n	8006904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006900:	2301      	movs	r3, #1
 8006902:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006904:	4b0b      	ldr	r3, [pc, #44]	; (8006934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f023 0207 	bic.w	r2, r3, #7
 800690c:	4909      	ldr	r1, [pc, #36]	; (8006934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006914:	4b07      	ldr	r3, [pc, #28]	; (8006934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	429a      	cmp	r2, r3
 8006920:	d001      	beq.n	8006926 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	40021000 	.word	0x40021000
 8006934:	40022000 	.word	0x40022000

08006938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006940:	2300      	movs	r3, #0
 8006942:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006944:	2300      	movs	r3, #0
 8006946:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006950:	2b00      	cmp	r3, #0
 8006952:	d041      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006958:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800695c:	d02a      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800695e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006962:	d824      	bhi.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006964:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006968:	d008      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800696a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800696e:	d81e      	bhi.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00a      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006978:	d010      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800697a:	e018      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800697c:	4b86      	ldr	r3, [pc, #536]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	4a85      	ldr	r2, [pc, #532]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006986:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006988:	e015      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3304      	adds	r3, #4
 800698e:	2100      	movs	r1, #0
 8006990:	4618      	mov	r0, r3
 8006992:	f000 facb 	bl	8006f2c <RCCEx_PLLSAI1_Config>
 8006996:	4603      	mov	r3, r0
 8006998:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800699a:	e00c      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3320      	adds	r3, #32
 80069a0:	2100      	movs	r1, #0
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fbb6 	bl	8007114 <RCCEx_PLLSAI2_Config>
 80069a8:	4603      	mov	r3, r0
 80069aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069ac:	e003      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	74fb      	strb	r3, [r7, #19]
      break;
 80069b2:	e000      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80069b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069b6:	7cfb      	ldrb	r3, [r7, #19]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10b      	bne.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069bc:	4b76      	ldr	r3, [pc, #472]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069ca:	4973      	ldr	r1, [pc, #460]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80069d2:	e001      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d4:	7cfb      	ldrb	r3, [r7, #19]
 80069d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d041      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80069ec:	d02a      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80069ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80069f2:	d824      	bhi.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80069f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069f8:	d008      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80069fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069fe:	d81e      	bhi.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00a      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a08:	d010      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006a0a:	e018      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a0c:	4b62      	ldr	r3, [pc, #392]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	4a61      	ldr	r2, [pc, #388]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a18:	e015      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	2100      	movs	r1, #0
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 fa83 	bl	8006f2c <RCCEx_PLLSAI1_Config>
 8006a26:	4603      	mov	r3, r0
 8006a28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a2a:	e00c      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3320      	adds	r3, #32
 8006a30:	2100      	movs	r1, #0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fb6e 	bl	8007114 <RCCEx_PLLSAI2_Config>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a3c:	e003      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	74fb      	strb	r3, [r7, #19]
      break;
 8006a42:	e000      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006a44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a46:	7cfb      	ldrb	r3, [r7, #19]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10b      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a4c:	4b52      	ldr	r3, [pc, #328]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a5a:	494f      	ldr	r1, [pc, #316]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006a62:	e001      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a64:	7cfb      	ldrb	r3, [r7, #19]
 8006a66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80a0 	beq.w	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a76:	2300      	movs	r3, #0
 8006a78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a7a:	4b47      	ldr	r3, [pc, #284]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006a86:	2301      	movs	r3, #1
 8006a88:	e000      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00d      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a90:	4b41      	ldr	r3, [pc, #260]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a94:	4a40      	ldr	r2, [pc, #256]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8006a9c:	4b3e      	ldr	r3, [pc, #248]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aa4:	60bb      	str	r3, [r7, #8]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006aac:	4b3b      	ldr	r3, [pc, #236]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a3a      	ldr	r2, [pc, #232]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ab8:	f7fd fb76 	bl	80041a8 <HAL_GetTick>
 8006abc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006abe:	e009      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ac0:	f7fd fb72 	bl	80041a8 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d902      	bls.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	74fb      	strb	r3, [r7, #19]
        break;
 8006ad2:	e005      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ad4:	4b31      	ldr	r3, [pc, #196]	; (8006b9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0ef      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006ae0:	7cfb      	ldrb	r3, [r7, #19]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d15c      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ae6:	4b2c      	ldr	r3, [pc, #176]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006af0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d01f      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d019      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b04:	4b24      	ldr	r3, [pc, #144]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b10:	4b21      	ldr	r3, [pc, #132]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b16:	4a20      	ldr	r2, [pc, #128]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b20:	4b1d      	ldr	r3, [pc, #116]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b26:	4a1c      	ldr	r2, [pc, #112]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b30:	4a19      	ldr	r2, [pc, #100]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d016      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b42:	f7fd fb31 	bl	80041a8 <HAL_GetTick>
 8006b46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b48:	e00b      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b4a:	f7fd fb2d 	bl	80041a8 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d902      	bls.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	74fb      	strb	r3, [r7, #19]
            break;
 8006b60:	e006      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b62:	4b0d      	ldr	r3, [pc, #52]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d0ec      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006b70:	7cfb      	ldrb	r3, [r7, #19]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10c      	bne.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b76:	4b08      	ldr	r3, [pc, #32]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b86:	4904      	ldr	r1, [pc, #16]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006b8e:	e009      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b90:	7cfb      	ldrb	r3, [r7, #19]
 8006b92:	74bb      	strb	r3, [r7, #18]
 8006b94:	e006      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006b96:	bf00      	nop
 8006b98:	40021000 	.word	0x40021000
 8006b9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba0:	7cfb      	ldrb	r3, [r7, #19]
 8006ba2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ba4:	7c7b      	ldrb	r3, [r7, #17]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d105      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006baa:	4b9e      	ldr	r3, [pc, #632]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bae:	4a9d      	ldr	r2, [pc, #628]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bc2:	4b98      	ldr	r3, [pc, #608]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc8:	f023 0203 	bic.w	r2, r3, #3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	4994      	ldr	r1, [pc, #592]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00a      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006be4:	4b8f      	ldr	r3, [pc, #572]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bea:	f023 020c 	bic.w	r2, r3, #12
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf2:	498c      	ldr	r1, [pc, #560]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0304 	and.w	r3, r3, #4
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00a      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c06:	4b87      	ldr	r3, [pc, #540]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	4983      	ldr	r1, [pc, #524]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0308 	and.w	r3, r3, #8
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00a      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c28:	4b7e      	ldr	r3, [pc, #504]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c36:	497b      	ldr	r1, [pc, #492]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0310 	and.w	r3, r3, #16
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c4a:	4b76      	ldr	r3, [pc, #472]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c58:	4972      	ldr	r1, [pc, #456]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0320 	and.w	r3, r3, #32
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00a      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c6c:	4b6d      	ldr	r3, [pc, #436]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c7a:	496a      	ldr	r1, [pc, #424]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c8e:	4b65      	ldr	r3, [pc, #404]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9c:	4961      	ldr	r1, [pc, #388]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00a      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cb0:	4b5c      	ldr	r3, [pc, #368]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cbe:	4959      	ldr	r1, [pc, #356]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cd2:	4b54      	ldr	r3, [pc, #336]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce0:	4950      	ldr	r1, [pc, #320]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00a      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006cf4:	4b4b      	ldr	r3, [pc, #300]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d02:	4948      	ldr	r1, [pc, #288]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d16:	4b43      	ldr	r3, [pc, #268]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d24:	493f      	ldr	r1, [pc, #252]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d028      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d38:	4b3a      	ldr	r3, [pc, #232]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d46:	4937      	ldr	r1, [pc, #220]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d56:	d106      	bne.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d58:	4b32      	ldr	r3, [pc, #200]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	4a31      	ldr	r2, [pc, #196]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d62:	60d3      	str	r3, [r2, #12]
 8006d64:	e011      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d6e:	d10c      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3304      	adds	r3, #4
 8006d74:	2101      	movs	r1, #1
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 f8d8 	bl	8006f2c <RCCEx_PLLSAI1_Config>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006d80:	7cfb      	ldrb	r3, [r7, #19]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006d86:	7cfb      	ldrb	r3, [r7, #19]
 8006d88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d028      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006d96:	4b23      	ldr	r3, [pc, #140]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da4:	491f      	ldr	r1, [pc, #124]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006db4:	d106      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006db6:	4b1b      	ldr	r3, [pc, #108]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	4a1a      	ldr	r2, [pc, #104]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dc0:	60d3      	str	r3, [r2, #12]
 8006dc2:	e011      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006dcc:	d10c      	bne.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 f8a9 	bl	8006f2c <RCCEx_PLLSAI1_Config>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006dde:	7cfb      	ldrb	r3, [r7, #19]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006de4:	7cfb      	ldrb	r3, [r7, #19]
 8006de6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d02b      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006df4:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e02:	4908      	ldr	r1, [pc, #32]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e12:	d109      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e14:	4b03      	ldr	r3, [pc, #12]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	4a02      	ldr	r2, [pc, #8]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e1e:	60d3      	str	r3, [r2, #12]
 8006e20:	e014      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006e22:	bf00      	nop
 8006e24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e30:	d10c      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	3304      	adds	r3, #4
 8006e36:	2101      	movs	r1, #1
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 f877 	bl	8006f2c <RCCEx_PLLSAI1_Config>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e42:	7cfb      	ldrb	r3, [r7, #19]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006e48:	7cfb      	ldrb	r3, [r7, #19]
 8006e4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d02f      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e58:	4b2b      	ldr	r3, [pc, #172]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e66:	4928      	ldr	r1, [pc, #160]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e76:	d10d      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	2102      	movs	r1, #2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 f854 	bl	8006f2c <RCCEx_PLLSAI1_Config>
 8006e84:	4603      	mov	r3, r0
 8006e86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e88:	7cfb      	ldrb	r3, [r7, #19]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d014      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006e8e:	7cfb      	ldrb	r3, [r7, #19]
 8006e90:	74bb      	strb	r3, [r7, #18]
 8006e92:	e011      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e9c:	d10c      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	3320      	adds	r3, #32
 8006ea2:	2102      	movs	r1, #2
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 f935 	bl	8007114 <RCCEx_PLLSAI2_Config>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006eae:	7cfb      	ldrb	r3, [r7, #19]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006eb4:	7cfb      	ldrb	r3, [r7, #19]
 8006eb6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ec4:	4b10      	ldr	r3, [pc, #64]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ed2:	490d      	ldr	r1, [pc, #52]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00b      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ee6:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ef6:	4904      	ldr	r1, [pc, #16]	; (8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006efe:	7cbb      	ldrb	r3, [r7, #18]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	40021000 	.word	0x40021000

08006f0c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006f10:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a04      	ldr	r2, [pc, #16]	; (8006f28 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006f16:	f043 0304 	orr.w	r3, r3, #4
 8006f1a:	6013      	str	r3, [r2, #0]
}
 8006f1c:	bf00      	nop
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	40021000 	.word	0x40021000

08006f2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f3a:	4b75      	ldr	r3, [pc, #468]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f003 0303 	and.w	r3, r3, #3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d018      	beq.n	8006f78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006f46:	4b72      	ldr	r3, [pc, #456]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f003 0203 	and.w	r2, r3, #3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d10d      	bne.n	8006f72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
       ||
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d009      	beq.n	8006f72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006f5e:	4b6c      	ldr	r3, [pc, #432]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	091b      	lsrs	r3, r3, #4
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
       ||
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d047      	beq.n	8007002 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	73fb      	strb	r3, [r7, #15]
 8006f76:	e044      	b.n	8007002 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b03      	cmp	r3, #3
 8006f7e:	d018      	beq.n	8006fb2 <RCCEx_PLLSAI1_Config+0x86>
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d825      	bhi.n	8006fd0 <RCCEx_PLLSAI1_Config+0xa4>
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d002      	beq.n	8006f8e <RCCEx_PLLSAI1_Config+0x62>
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d009      	beq.n	8006fa0 <RCCEx_PLLSAI1_Config+0x74>
 8006f8c:	e020      	b.n	8006fd0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f8e:	4b60      	ldr	r3, [pc, #384]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d11d      	bne.n	8006fd6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f9e:	e01a      	b.n	8006fd6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006fa0:	4b5b      	ldr	r3, [pc, #364]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d116      	bne.n	8006fda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fb0:	e013      	b.n	8006fda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006fb2:	4b57      	ldr	r3, [pc, #348]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10f      	bne.n	8006fde <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006fbe:	4b54      	ldr	r3, [pc, #336]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d109      	bne.n	8006fde <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006fce:	e006      	b.n	8006fde <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fd4:	e004      	b.n	8006fe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006fd6:	bf00      	nop
 8006fd8:	e002      	b.n	8006fe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006fda:	bf00      	nop
 8006fdc:	e000      	b.n	8006fe0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006fde:	bf00      	nop
    }

    if(status == HAL_OK)
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10d      	bne.n	8007002 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006fe6:	4b4a      	ldr	r3, [pc, #296]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6819      	ldr	r1, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	430b      	orrs	r3, r1
 8006ffc:	4944      	ldr	r1, [pc, #272]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d17d      	bne.n	8007104 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007008:	4b41      	ldr	r3, [pc, #260]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a40      	ldr	r2, [pc, #256]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 800700e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007014:	f7fd f8c8 	bl	80041a8 <HAL_GetTick>
 8007018:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800701a:	e009      	b.n	8007030 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800701c:	f7fd f8c4 	bl	80041a8 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	2b02      	cmp	r3, #2
 8007028:	d902      	bls.n	8007030 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	73fb      	strb	r3, [r7, #15]
        break;
 800702e:	e005      	b.n	800703c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007030:	4b37      	ldr	r3, [pc, #220]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1ef      	bne.n	800701c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800703c:	7bfb      	ldrb	r3, [r7, #15]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d160      	bne.n	8007104 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d111      	bne.n	800706c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007048:	4b31      	ldr	r3, [pc, #196]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6892      	ldr	r2, [r2, #8]
 8007058:	0211      	lsls	r1, r2, #8
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	68d2      	ldr	r2, [r2, #12]
 800705e:	0912      	lsrs	r2, r2, #4
 8007060:	0452      	lsls	r2, r2, #17
 8007062:	430a      	orrs	r2, r1
 8007064:	492a      	ldr	r1, [pc, #168]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007066:	4313      	orrs	r3, r2
 8007068:	610b      	str	r3, [r1, #16]
 800706a:	e027      	b.n	80070bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d112      	bne.n	8007098 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007072:	4b27      	ldr	r3, [pc, #156]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800707a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6892      	ldr	r2, [r2, #8]
 8007082:	0211      	lsls	r1, r2, #8
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	6912      	ldr	r2, [r2, #16]
 8007088:	0852      	lsrs	r2, r2, #1
 800708a:	3a01      	subs	r2, #1
 800708c:	0552      	lsls	r2, r2, #21
 800708e:	430a      	orrs	r2, r1
 8007090:	491f      	ldr	r1, [pc, #124]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007092:	4313      	orrs	r3, r2
 8007094:	610b      	str	r3, [r1, #16]
 8007096:	e011      	b.n	80070bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007098:	4b1d      	ldr	r3, [pc, #116]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80070a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	6892      	ldr	r2, [r2, #8]
 80070a8:	0211      	lsls	r1, r2, #8
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6952      	ldr	r2, [r2, #20]
 80070ae:	0852      	lsrs	r2, r2, #1
 80070b0:	3a01      	subs	r2, #1
 80070b2:	0652      	lsls	r2, r2, #25
 80070b4:	430a      	orrs	r2, r1
 80070b6:	4916      	ldr	r1, [pc, #88]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80070bc:	4b14      	ldr	r3, [pc, #80]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a13      	ldr	r2, [pc, #76]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c8:	f7fd f86e 	bl	80041a8 <HAL_GetTick>
 80070cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80070ce:	e009      	b.n	80070e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070d0:	f7fd f86a 	bl	80041a8 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d902      	bls.n	80070e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	73fb      	strb	r3, [r7, #15]
          break;
 80070e2:	e005      	b.n	80070f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80070e4:	4b0a      	ldr	r3, [pc, #40]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0ef      	beq.n	80070d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80070f6:	4b06      	ldr	r3, [pc, #24]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070f8:	691a      	ldr	r2, [r3, #16]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	4904      	ldr	r1, [pc, #16]	; (8007110 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007100:	4313      	orrs	r3, r2
 8007102:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	40021000 	.word	0x40021000

08007114 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007122:	4b6a      	ldr	r3, [pc, #424]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f003 0303 	and.w	r3, r3, #3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d018      	beq.n	8007160 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800712e:	4b67      	ldr	r3, [pc, #412]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f003 0203 	and.w	r2, r3, #3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	429a      	cmp	r2, r3
 800713c:	d10d      	bne.n	800715a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
       ||
 8007142:	2b00      	cmp	r3, #0
 8007144:	d009      	beq.n	800715a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007146:	4b61      	ldr	r3, [pc, #388]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	091b      	lsrs	r3, r3, #4
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	1c5a      	adds	r2, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
       ||
 8007156:	429a      	cmp	r2, r3
 8007158:	d047      	beq.n	80071ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	73fb      	strb	r3, [r7, #15]
 800715e:	e044      	b.n	80071ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b03      	cmp	r3, #3
 8007166:	d018      	beq.n	800719a <RCCEx_PLLSAI2_Config+0x86>
 8007168:	2b03      	cmp	r3, #3
 800716a:	d825      	bhi.n	80071b8 <RCCEx_PLLSAI2_Config+0xa4>
 800716c:	2b01      	cmp	r3, #1
 800716e:	d002      	beq.n	8007176 <RCCEx_PLLSAI2_Config+0x62>
 8007170:	2b02      	cmp	r3, #2
 8007172:	d009      	beq.n	8007188 <RCCEx_PLLSAI2_Config+0x74>
 8007174:	e020      	b.n	80071b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007176:	4b55      	ldr	r3, [pc, #340]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d11d      	bne.n	80071be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007186:	e01a      	b.n	80071be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007188:	4b50      	ldr	r3, [pc, #320]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007190:	2b00      	cmp	r3, #0
 8007192:	d116      	bne.n	80071c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007198:	e013      	b.n	80071c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800719a:	4b4c      	ldr	r3, [pc, #304]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10f      	bne.n	80071c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80071a6:	4b49      	ldr	r3, [pc, #292]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071b6:	e006      	b.n	80071c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	73fb      	strb	r3, [r7, #15]
      break;
 80071bc:	e004      	b.n	80071c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80071be:	bf00      	nop
 80071c0:	e002      	b.n	80071c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80071c2:	bf00      	nop
 80071c4:	e000      	b.n	80071c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80071c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10d      	bne.n	80071ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80071ce:	4b3f      	ldr	r3, [pc, #252]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6819      	ldr	r1, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	3b01      	subs	r3, #1
 80071e0:	011b      	lsls	r3, r3, #4
 80071e2:	430b      	orrs	r3, r1
 80071e4:	4939      	ldr	r1, [pc, #228]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d167      	bne.n	80072c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80071f0:	4b36      	ldr	r3, [pc, #216]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a35      	ldr	r2, [pc, #212]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80071f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071fc:	f7fc ffd4 	bl	80041a8 <HAL_GetTick>
 8007200:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007202:	e009      	b.n	8007218 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007204:	f7fc ffd0 	bl	80041a8 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d902      	bls.n	8007218 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	73fb      	strb	r3, [r7, #15]
        break;
 8007216:	e005      	b.n	8007224 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007218:	4b2c      	ldr	r3, [pc, #176]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1ef      	bne.n	8007204 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d14a      	bne.n	80072c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d111      	bne.n	8007254 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007230:	4b26      	ldr	r3, [pc, #152]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	6892      	ldr	r2, [r2, #8]
 8007240:	0211      	lsls	r1, r2, #8
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	68d2      	ldr	r2, [r2, #12]
 8007246:	0912      	lsrs	r2, r2, #4
 8007248:	0452      	lsls	r2, r2, #17
 800724a:	430a      	orrs	r2, r1
 800724c:	491f      	ldr	r1, [pc, #124]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800724e:	4313      	orrs	r3, r2
 8007250:	614b      	str	r3, [r1, #20]
 8007252:	e011      	b.n	8007278 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007254:	4b1d      	ldr	r3, [pc, #116]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800725c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	6892      	ldr	r2, [r2, #8]
 8007264:	0211      	lsls	r1, r2, #8
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	6912      	ldr	r2, [r2, #16]
 800726a:	0852      	lsrs	r2, r2, #1
 800726c:	3a01      	subs	r2, #1
 800726e:	0652      	lsls	r2, r2, #25
 8007270:	430a      	orrs	r2, r1
 8007272:	4916      	ldr	r1, [pc, #88]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8007274:	4313      	orrs	r3, r2
 8007276:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007278:	4b14      	ldr	r3, [pc, #80]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a13      	ldr	r2, [pc, #76]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800727e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007282:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007284:	f7fc ff90 	bl	80041a8 <HAL_GetTick>
 8007288:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800728a:	e009      	b.n	80072a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800728c:	f7fc ff8c 	bl	80041a8 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	2b02      	cmp	r3, #2
 8007298:	d902      	bls.n	80072a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	73fb      	strb	r3, [r7, #15]
          break;
 800729e:	e005      	b.n	80072ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80072a0:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0ef      	beq.n	800728c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d106      	bne.n	80072c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80072b2:	4b06      	ldr	r3, [pc, #24]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80072b4:	695a      	ldr	r2, [r3, #20]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	4904      	ldr	r1, [pc, #16]	; (80072cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	40021000 	.word	0x40021000

080072d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e095      	b.n	800740e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d108      	bne.n	80072fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072f2:	d009      	beq.n	8007308 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	61da      	str	r2, [r3, #28]
 80072fa:	e005      	b.n	8007308 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d106      	bne.n	8007328 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7fc fa92 	bl	800384c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800733e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007348:	d902      	bls.n	8007350 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800734a:	2300      	movs	r3, #0
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	e002      	b.n	8007356 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007354:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800735e:	d007      	beq.n	8007370 <HAL_SPI_Init+0xa0>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007368:	d002      	beq.n	8007370 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800739e:	431a      	orrs	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073a8:	431a      	orrs	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073b2:	ea42 0103 	orr.w	r1, r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	0c1b      	lsrs	r3, r3, #16
 80073cc:	f003 0204 	and.w	r2, r3, #4
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	f003 0310 	and.w	r3, r3, #16
 80073d8:	431a      	orrs	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073de:	f003 0308 	and.w	r3, r3, #8
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80073ec:	ea42 0103 	orr.w	r1, r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b082      	sub	sp, #8
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e049      	b.n	80074bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7fc fa49 	bl	80038d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2202      	movs	r2, #2
 8007446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3304      	adds	r3, #4
 8007452:	4619      	mov	r1, r3
 8007454:	4610      	mov	r0, r2
 8007456:	f000 fd21 	bl	8007e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d001      	beq.n	80074dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e04f      	b.n	800757c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0201 	orr.w	r2, r2, #1
 80074f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a23      	ldr	r2, [pc, #140]	; (8007588 <HAL_TIM_Base_Start_IT+0xc4>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d01d      	beq.n	800753a <HAL_TIM_Base_Start_IT+0x76>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007506:	d018      	beq.n	800753a <HAL_TIM_Base_Start_IT+0x76>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a1f      	ldr	r2, [pc, #124]	; (800758c <HAL_TIM_Base_Start_IT+0xc8>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d013      	beq.n	800753a <HAL_TIM_Base_Start_IT+0x76>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a1e      	ldr	r2, [pc, #120]	; (8007590 <HAL_TIM_Base_Start_IT+0xcc>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d00e      	beq.n	800753a <HAL_TIM_Base_Start_IT+0x76>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a1c      	ldr	r2, [pc, #112]	; (8007594 <HAL_TIM_Base_Start_IT+0xd0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d009      	beq.n	800753a <HAL_TIM_Base_Start_IT+0x76>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a1b      	ldr	r2, [pc, #108]	; (8007598 <HAL_TIM_Base_Start_IT+0xd4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d004      	beq.n	800753a <HAL_TIM_Base_Start_IT+0x76>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a19      	ldr	r2, [pc, #100]	; (800759c <HAL_TIM_Base_Start_IT+0xd8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d115      	bne.n	8007566 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689a      	ldr	r2, [r3, #8]
 8007540:	4b17      	ldr	r3, [pc, #92]	; (80075a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007542:	4013      	ands	r3, r2
 8007544:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b06      	cmp	r3, #6
 800754a:	d015      	beq.n	8007578 <HAL_TIM_Base_Start_IT+0xb4>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007552:	d011      	beq.n	8007578 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0201 	orr.w	r2, r2, #1
 8007562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007564:	e008      	b.n	8007578 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f042 0201 	orr.w	r2, r2, #1
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	e000      	b.n	800757a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007578:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	40012c00 	.word	0x40012c00
 800758c:	40000400 	.word	0x40000400
 8007590:	40000800 	.word	0x40000800
 8007594:	40000c00 	.word	0x40000c00
 8007598:	40013400 	.word	0x40013400
 800759c:	40014000 	.word	0x40014000
 80075a0:	00010007 	.word	0x00010007

080075a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e049      	b.n	800764a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d106      	bne.n	80075d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fc f9e2 	bl	8003994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3304      	adds	r3, #4
 80075e0:	4619      	mov	r1, r3
 80075e2:	4610      	mov	r0, r2
 80075e4:	f000 fc5a 	bl	8007e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d109      	bne.n	8007678 <HAL_TIM_PWM_Start+0x24>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b01      	cmp	r3, #1
 800766e:	bf14      	ite	ne
 8007670:	2301      	movne	r3, #1
 8007672:	2300      	moveq	r3, #0
 8007674:	b2db      	uxtb	r3, r3
 8007676:	e03c      	b.n	80076f2 <HAL_TIM_PWM_Start+0x9e>
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2b04      	cmp	r3, #4
 800767c:	d109      	bne.n	8007692 <HAL_TIM_PWM_Start+0x3e>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b01      	cmp	r3, #1
 8007688:	bf14      	ite	ne
 800768a:	2301      	movne	r3, #1
 800768c:	2300      	moveq	r3, #0
 800768e:	b2db      	uxtb	r3, r3
 8007690:	e02f      	b.n	80076f2 <HAL_TIM_PWM_Start+0x9e>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b08      	cmp	r3, #8
 8007696:	d109      	bne.n	80076ac <HAL_TIM_PWM_Start+0x58>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	bf14      	ite	ne
 80076a4:	2301      	movne	r3, #1
 80076a6:	2300      	moveq	r3, #0
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	e022      	b.n	80076f2 <HAL_TIM_PWM_Start+0x9e>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	2b0c      	cmp	r3, #12
 80076b0:	d109      	bne.n	80076c6 <HAL_TIM_PWM_Start+0x72>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	bf14      	ite	ne
 80076be:	2301      	movne	r3, #1
 80076c0:	2300      	moveq	r3, #0
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	e015      	b.n	80076f2 <HAL_TIM_PWM_Start+0x9e>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b10      	cmp	r3, #16
 80076ca:	d109      	bne.n	80076e0 <HAL_TIM_PWM_Start+0x8c>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	bf14      	ite	ne
 80076d8:	2301      	movne	r3, #1
 80076da:	2300      	moveq	r3, #0
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	e008      	b.n	80076f2 <HAL_TIM_PWM_Start+0x9e>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	bf14      	ite	ne
 80076ec:	2301      	movne	r3, #1
 80076ee:	2300      	moveq	r3, #0
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e09c      	b.n	8007834 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d104      	bne.n	800770a <HAL_TIM_PWM_Start+0xb6>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007708:	e023      	b.n	8007752 <HAL_TIM_PWM_Start+0xfe>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b04      	cmp	r3, #4
 800770e:	d104      	bne.n	800771a <HAL_TIM_PWM_Start+0xc6>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007718:	e01b      	b.n	8007752 <HAL_TIM_PWM_Start+0xfe>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b08      	cmp	r3, #8
 800771e:	d104      	bne.n	800772a <HAL_TIM_PWM_Start+0xd6>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007728:	e013      	b.n	8007752 <HAL_TIM_PWM_Start+0xfe>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b0c      	cmp	r3, #12
 800772e:	d104      	bne.n	800773a <HAL_TIM_PWM_Start+0xe6>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007738:	e00b      	b.n	8007752 <HAL_TIM_PWM_Start+0xfe>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b10      	cmp	r3, #16
 800773e:	d104      	bne.n	800774a <HAL_TIM_PWM_Start+0xf6>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007748:	e003      	b.n	8007752 <HAL_TIM_PWM_Start+0xfe>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2202      	movs	r2, #2
 800774e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2201      	movs	r2, #1
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	4618      	mov	r0, r3
 800775c:	f000 ffa8 	bl	80086b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a35      	ldr	r2, [pc, #212]	; (800783c <HAL_TIM_PWM_Start+0x1e8>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d013      	beq.n	8007792 <HAL_TIM_PWM_Start+0x13e>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a34      	ldr	r2, [pc, #208]	; (8007840 <HAL_TIM_PWM_Start+0x1ec>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d00e      	beq.n	8007792 <HAL_TIM_PWM_Start+0x13e>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a32      	ldr	r2, [pc, #200]	; (8007844 <HAL_TIM_PWM_Start+0x1f0>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d009      	beq.n	8007792 <HAL_TIM_PWM_Start+0x13e>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a31      	ldr	r2, [pc, #196]	; (8007848 <HAL_TIM_PWM_Start+0x1f4>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d004      	beq.n	8007792 <HAL_TIM_PWM_Start+0x13e>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a2f      	ldr	r2, [pc, #188]	; (800784c <HAL_TIM_PWM_Start+0x1f8>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d101      	bne.n	8007796 <HAL_TIM_PWM_Start+0x142>
 8007792:	2301      	movs	r3, #1
 8007794:	e000      	b.n	8007798 <HAL_TIM_PWM_Start+0x144>
 8007796:	2300      	movs	r3, #0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d007      	beq.n	80077ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a22      	ldr	r2, [pc, #136]	; (800783c <HAL_TIM_PWM_Start+0x1e8>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d01d      	beq.n	80077f2 <HAL_TIM_PWM_Start+0x19e>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077be:	d018      	beq.n	80077f2 <HAL_TIM_PWM_Start+0x19e>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a22      	ldr	r2, [pc, #136]	; (8007850 <HAL_TIM_PWM_Start+0x1fc>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d013      	beq.n	80077f2 <HAL_TIM_PWM_Start+0x19e>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a21      	ldr	r2, [pc, #132]	; (8007854 <HAL_TIM_PWM_Start+0x200>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d00e      	beq.n	80077f2 <HAL_TIM_PWM_Start+0x19e>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a1f      	ldr	r2, [pc, #124]	; (8007858 <HAL_TIM_PWM_Start+0x204>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d009      	beq.n	80077f2 <HAL_TIM_PWM_Start+0x19e>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a17      	ldr	r2, [pc, #92]	; (8007840 <HAL_TIM_PWM_Start+0x1ec>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d004      	beq.n	80077f2 <HAL_TIM_PWM_Start+0x19e>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a15      	ldr	r2, [pc, #84]	; (8007844 <HAL_TIM_PWM_Start+0x1f0>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d115      	bne.n	800781e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	4b18      	ldr	r3, [pc, #96]	; (800785c <HAL_TIM_PWM_Start+0x208>)
 80077fa:	4013      	ands	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2b06      	cmp	r3, #6
 8007802:	d015      	beq.n	8007830 <HAL_TIM_PWM_Start+0x1dc>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800780a:	d011      	beq.n	8007830 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f042 0201 	orr.w	r2, r2, #1
 800781a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800781c:	e008      	b.n	8007830 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f042 0201 	orr.w	r2, r2, #1
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	e000      	b.n	8007832 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007830:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	40012c00 	.word	0x40012c00
 8007840:	40013400 	.word	0x40013400
 8007844:	40014000 	.word	0x40014000
 8007848:	40014400 	.word	0x40014400
 800784c:	40014800 	.word	0x40014800
 8007850:	40000400 	.word	0x40000400
 8007854:	40000800 	.word	0x40000800
 8007858:	40000c00 	.word	0x40000c00
 800785c:	00010007 	.word	0x00010007

08007860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b02      	cmp	r3, #2
 8007874:	d122      	bne.n	80078bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b02      	cmp	r3, #2
 8007882:	d11b      	bne.n	80078bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0202 	mvn.w	r2, #2
 800788c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fadc 	bl	8007e60 <HAL_TIM_IC_CaptureCallback>
 80078a8:	e005      	b.n	80078b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 face 	bl	8007e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fadf 	bl	8007e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	f003 0304 	and.w	r3, r3, #4
 80078c6:	2b04      	cmp	r3, #4
 80078c8:	d122      	bne.n	8007910 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b04      	cmp	r3, #4
 80078d6:	d11b      	bne.n	8007910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f06f 0204 	mvn.w	r2, #4
 80078e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2202      	movs	r2, #2
 80078e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fab2 	bl	8007e60 <HAL_TIM_IC_CaptureCallback>
 80078fc:	e005      	b.n	800790a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 faa4 	bl	8007e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fab5 	bl	8007e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f003 0308 	and.w	r3, r3, #8
 800791a:	2b08      	cmp	r3, #8
 800791c:	d122      	bne.n	8007964 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f003 0308 	and.w	r3, r3, #8
 8007928:	2b08      	cmp	r3, #8
 800792a:	d11b      	bne.n	8007964 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f06f 0208 	mvn.w	r2, #8
 8007934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2204      	movs	r2, #4
 800793a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	f003 0303 	and.w	r3, r3, #3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fa88 	bl	8007e60 <HAL_TIM_IC_CaptureCallback>
 8007950:	e005      	b.n	800795e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fa7a 	bl	8007e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fa8b 	bl	8007e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 0310 	and.w	r3, r3, #16
 800796e:	2b10      	cmp	r3, #16
 8007970:	d122      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f003 0310 	and.w	r3, r3, #16
 800797c:	2b10      	cmp	r3, #16
 800797e:	d11b      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f06f 0210 	mvn.w	r2, #16
 8007988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2208      	movs	r2, #8
 800798e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fa5e 	bl	8007e60 <HAL_TIM_IC_CaptureCallback>
 80079a4:	e005      	b.n	80079b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fa50 	bl	8007e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fa61 	bl	8007e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d10e      	bne.n	80079e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d107      	bne.n	80079e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f06f 0201 	mvn.w	r2, #1
 80079dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7f9 fed4 	bl	800178c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ee:	2b80      	cmp	r3, #128	; 0x80
 80079f0:	d10e      	bne.n	8007a10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fc:	2b80      	cmp	r3, #128	; 0x80
 80079fe:	d107      	bne.n	8007a10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 ff86 	bl	800891c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a1e:	d10e      	bne.n	8007a3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2a:	2b80      	cmp	r3, #128	; 0x80
 8007a2c:	d107      	bne.n	8007a3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 ff79 	bl	8008930 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a48:	2b40      	cmp	r3, #64	; 0x40
 8007a4a:	d10e      	bne.n	8007a6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a56:	2b40      	cmp	r3, #64	; 0x40
 8007a58:	d107      	bne.n	8007a6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fa0f 	bl	8007e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	f003 0320 	and.w	r3, r3, #32
 8007a74:	2b20      	cmp	r3, #32
 8007a76:	d10e      	bne.n	8007a96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b20      	cmp	r3, #32
 8007a84:	d107      	bne.n	8007a96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f06f 0220 	mvn.w	r2, #32
 8007a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 ff39 	bl	8008908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d101      	bne.n	8007aba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e0fd      	b.n	8007cb6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b14      	cmp	r3, #20
 8007ac6:	f200 80f0 	bhi.w	8007caa <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007aca:	a201      	add	r2, pc, #4	; (adr r2, 8007ad0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad0:	08007b25 	.word	0x08007b25
 8007ad4:	08007cab 	.word	0x08007cab
 8007ad8:	08007cab 	.word	0x08007cab
 8007adc:	08007cab 	.word	0x08007cab
 8007ae0:	08007b65 	.word	0x08007b65
 8007ae4:	08007cab 	.word	0x08007cab
 8007ae8:	08007cab 	.word	0x08007cab
 8007aec:	08007cab 	.word	0x08007cab
 8007af0:	08007ba7 	.word	0x08007ba7
 8007af4:	08007cab 	.word	0x08007cab
 8007af8:	08007cab 	.word	0x08007cab
 8007afc:	08007cab 	.word	0x08007cab
 8007b00:	08007be7 	.word	0x08007be7
 8007b04:	08007cab 	.word	0x08007cab
 8007b08:	08007cab 	.word	0x08007cab
 8007b0c:	08007cab 	.word	0x08007cab
 8007b10:	08007c29 	.word	0x08007c29
 8007b14:	08007cab 	.word	0x08007cab
 8007b18:	08007cab 	.word	0x08007cab
 8007b1c:	08007cab 	.word	0x08007cab
 8007b20:	08007c69 	.word	0x08007c69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68b9      	ldr	r1, [r7, #8]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 fa50 	bl	8007fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	699a      	ldr	r2, [r3, #24]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f042 0208 	orr.w	r2, r2, #8
 8007b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699a      	ldr	r2, [r3, #24]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0204 	bic.w	r2, r2, #4
 8007b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6999      	ldr	r1, [r3, #24]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	691a      	ldr	r2, [r3, #16]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	619a      	str	r2, [r3, #24]
      break;
 8007b62:	e0a3      	b.n	8007cac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68b9      	ldr	r1, [r7, #8]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 fac0 	bl	80080f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	699a      	ldr	r2, [r3, #24]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	699a      	ldr	r2, [r3, #24]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6999      	ldr	r1, [r3, #24]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	021a      	lsls	r2, r3, #8
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	619a      	str	r2, [r3, #24]
      break;
 8007ba4:	e082      	b.n	8007cac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68b9      	ldr	r1, [r7, #8]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 fb29 	bl	8008204 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	69da      	ldr	r2, [r3, #28]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f042 0208 	orr.w	r2, r2, #8
 8007bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69da      	ldr	r2, [r3, #28]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 0204 	bic.w	r2, r2, #4
 8007bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	69d9      	ldr	r1, [r3, #28]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	691a      	ldr	r2, [r3, #16]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	430a      	orrs	r2, r1
 8007be2:	61da      	str	r2, [r3, #28]
      break;
 8007be4:	e062      	b.n	8007cac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68b9      	ldr	r1, [r7, #8]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 fb91 	bl	8008314 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69da      	ldr	r2, [r3, #28]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	69da      	ldr	r2, [r3, #28]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	69d9      	ldr	r1, [r3, #28]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	021a      	lsls	r2, r3, #8
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	61da      	str	r2, [r3, #28]
      break;
 8007c26:	e041      	b.n	8007cac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68b9      	ldr	r1, [r7, #8]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 fbda 	bl	80083e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f042 0208 	orr.w	r2, r2, #8
 8007c42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f022 0204 	bic.w	r2, r2, #4
 8007c52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	691a      	ldr	r2, [r3, #16]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c66:	e021      	b.n	8007cac <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68b9      	ldr	r1, [r7, #8]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 fc1e 	bl	80084b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	021a      	lsls	r2, r3, #8
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ca8:	e000      	b.n	8007cac <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007caa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop

08007cc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d101      	bne.n	8007cd8 <HAL_TIM_ConfigClockSource+0x18>
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	e0b5      	b.n	8007e44 <HAL_TIM_ConfigClockSource+0x184>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007cfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d14:	d03e      	beq.n	8007d94 <HAL_TIM_ConfigClockSource+0xd4>
 8007d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d1a:	f200 8087 	bhi.w	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
 8007d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d22:	f000 8085 	beq.w	8007e30 <HAL_TIM_ConfigClockSource+0x170>
 8007d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d2a:	d87f      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
 8007d2c:	2b70      	cmp	r3, #112	; 0x70
 8007d2e:	d01a      	beq.n	8007d66 <HAL_TIM_ConfigClockSource+0xa6>
 8007d30:	2b70      	cmp	r3, #112	; 0x70
 8007d32:	d87b      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
 8007d34:	2b60      	cmp	r3, #96	; 0x60
 8007d36:	d050      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0x11a>
 8007d38:	2b60      	cmp	r3, #96	; 0x60
 8007d3a:	d877      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
 8007d3c:	2b50      	cmp	r3, #80	; 0x50
 8007d3e:	d03c      	beq.n	8007dba <HAL_TIM_ConfigClockSource+0xfa>
 8007d40:	2b50      	cmp	r3, #80	; 0x50
 8007d42:	d873      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
 8007d44:	2b40      	cmp	r3, #64	; 0x40
 8007d46:	d058      	beq.n	8007dfa <HAL_TIM_ConfigClockSource+0x13a>
 8007d48:	2b40      	cmp	r3, #64	; 0x40
 8007d4a:	d86f      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
 8007d4c:	2b30      	cmp	r3, #48	; 0x30
 8007d4e:	d064      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x15a>
 8007d50:	2b30      	cmp	r3, #48	; 0x30
 8007d52:	d86b      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
 8007d54:	2b20      	cmp	r3, #32
 8007d56:	d060      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x15a>
 8007d58:	2b20      	cmp	r3, #32
 8007d5a:	d867      	bhi.n	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d05c      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x15a>
 8007d60:	2b10      	cmp	r3, #16
 8007d62:	d05a      	beq.n	8007e1a <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007d64:	e062      	b.n	8007e2c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	6899      	ldr	r1, [r3, #8]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	f000 fc7b 	bl	8008670 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	609a      	str	r2, [r3, #8]
      break;
 8007d92:	e04e      	b.n	8007e32 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6818      	ldr	r0, [r3, #0]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	6899      	ldr	r1, [r3, #8]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f000 fc64 	bl	8008670 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689a      	ldr	r2, [r3, #8]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007db6:	609a      	str	r2, [r3, #8]
      break;
 8007db8:	e03b      	b.n	8007e32 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6818      	ldr	r0, [r3, #0]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	6859      	ldr	r1, [r3, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f000 fbd8 	bl	800857c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2150      	movs	r1, #80	; 0x50
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fc31 	bl	800863a <TIM_ITRx_SetConfig>
      break;
 8007dd8:	e02b      	b.n	8007e32 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	6859      	ldr	r1, [r3, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	461a      	mov	r2, r3
 8007de8:	f000 fbf7 	bl	80085da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2160      	movs	r1, #96	; 0x60
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 fc21 	bl	800863a <TIM_ITRx_SetConfig>
      break;
 8007df8:	e01b      	b.n	8007e32 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6818      	ldr	r0, [r3, #0]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	6859      	ldr	r1, [r3, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	461a      	mov	r2, r3
 8007e08:	f000 fbb8 	bl	800857c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2140      	movs	r1, #64	; 0x40
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fc11 	bl	800863a <TIM_ITRx_SetConfig>
      break;
 8007e18:	e00b      	b.n	8007e32 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4619      	mov	r1, r3
 8007e24:	4610      	mov	r0, r2
 8007e26:	f000 fc08 	bl	800863a <TIM_ITRx_SetConfig>
        break;
 8007e2a:	e002      	b.n	8007e32 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8007e2c:	bf00      	nop
 8007e2e:	e000      	b.n	8007e32 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8007e30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a40      	ldr	r2, [pc, #256]	; (8007fb0 <TIM_Base_SetConfig+0x114>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d013      	beq.n	8007edc <TIM_Base_SetConfig+0x40>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eba:	d00f      	beq.n	8007edc <TIM_Base_SetConfig+0x40>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a3d      	ldr	r2, [pc, #244]	; (8007fb4 <TIM_Base_SetConfig+0x118>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d00b      	beq.n	8007edc <TIM_Base_SetConfig+0x40>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a3c      	ldr	r2, [pc, #240]	; (8007fb8 <TIM_Base_SetConfig+0x11c>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d007      	beq.n	8007edc <TIM_Base_SetConfig+0x40>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a3b      	ldr	r2, [pc, #236]	; (8007fbc <TIM_Base_SetConfig+0x120>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d003      	beq.n	8007edc <TIM_Base_SetConfig+0x40>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a3a      	ldr	r2, [pc, #232]	; (8007fc0 <TIM_Base_SetConfig+0x124>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d108      	bne.n	8007eee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a2f      	ldr	r2, [pc, #188]	; (8007fb0 <TIM_Base_SetConfig+0x114>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d01f      	beq.n	8007f36 <TIM_Base_SetConfig+0x9a>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007efc:	d01b      	beq.n	8007f36 <TIM_Base_SetConfig+0x9a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a2c      	ldr	r2, [pc, #176]	; (8007fb4 <TIM_Base_SetConfig+0x118>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d017      	beq.n	8007f36 <TIM_Base_SetConfig+0x9a>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a2b      	ldr	r2, [pc, #172]	; (8007fb8 <TIM_Base_SetConfig+0x11c>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d013      	beq.n	8007f36 <TIM_Base_SetConfig+0x9a>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a2a      	ldr	r2, [pc, #168]	; (8007fbc <TIM_Base_SetConfig+0x120>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d00f      	beq.n	8007f36 <TIM_Base_SetConfig+0x9a>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a29      	ldr	r2, [pc, #164]	; (8007fc0 <TIM_Base_SetConfig+0x124>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d00b      	beq.n	8007f36 <TIM_Base_SetConfig+0x9a>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a28      	ldr	r2, [pc, #160]	; (8007fc4 <TIM_Base_SetConfig+0x128>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d007      	beq.n	8007f36 <TIM_Base_SetConfig+0x9a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a27      	ldr	r2, [pc, #156]	; (8007fc8 <TIM_Base_SetConfig+0x12c>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d003      	beq.n	8007f36 <TIM_Base_SetConfig+0x9a>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a26      	ldr	r2, [pc, #152]	; (8007fcc <TIM_Base_SetConfig+0x130>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d108      	bne.n	8007f48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	689a      	ldr	r2, [r3, #8]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a10      	ldr	r2, [pc, #64]	; (8007fb0 <TIM_Base_SetConfig+0x114>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d00f      	beq.n	8007f94 <TIM_Base_SetConfig+0xf8>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a12      	ldr	r2, [pc, #72]	; (8007fc0 <TIM_Base_SetConfig+0x124>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d00b      	beq.n	8007f94 <TIM_Base_SetConfig+0xf8>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a11      	ldr	r2, [pc, #68]	; (8007fc4 <TIM_Base_SetConfig+0x128>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d007      	beq.n	8007f94 <TIM_Base_SetConfig+0xf8>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a10      	ldr	r2, [pc, #64]	; (8007fc8 <TIM_Base_SetConfig+0x12c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d003      	beq.n	8007f94 <TIM_Base_SetConfig+0xf8>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a0f      	ldr	r2, [pc, #60]	; (8007fcc <TIM_Base_SetConfig+0x130>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d103      	bne.n	8007f9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	691a      	ldr	r2, [r3, #16]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	615a      	str	r2, [r3, #20]
}
 8007fa2:	bf00      	nop
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	40012c00 	.word	0x40012c00
 8007fb4:	40000400 	.word	0x40000400
 8007fb8:	40000800 	.word	0x40000800
 8007fbc:	40000c00 	.word	0x40000c00
 8007fc0:	40013400 	.word	0x40013400
 8007fc4:	40014000 	.word	0x40014000
 8007fc8:	40014400 	.word	0x40014400
 8007fcc:	40014800 	.word	0x40014800

08007fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b087      	sub	sp, #28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	f023 0201 	bic.w	r2, r3, #1
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f023 0303 	bic.w	r3, r3, #3
 800800a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	4313      	orrs	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f023 0302 	bic.w	r3, r3, #2
 800801c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	4313      	orrs	r3, r2
 8008026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a2c      	ldr	r2, [pc, #176]	; (80080dc <TIM_OC1_SetConfig+0x10c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d00f      	beq.n	8008050 <TIM_OC1_SetConfig+0x80>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a2b      	ldr	r2, [pc, #172]	; (80080e0 <TIM_OC1_SetConfig+0x110>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d00b      	beq.n	8008050 <TIM_OC1_SetConfig+0x80>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a2a      	ldr	r2, [pc, #168]	; (80080e4 <TIM_OC1_SetConfig+0x114>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d007      	beq.n	8008050 <TIM_OC1_SetConfig+0x80>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a29      	ldr	r2, [pc, #164]	; (80080e8 <TIM_OC1_SetConfig+0x118>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d003      	beq.n	8008050 <TIM_OC1_SetConfig+0x80>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a28      	ldr	r2, [pc, #160]	; (80080ec <TIM_OC1_SetConfig+0x11c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d10c      	bne.n	800806a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f023 0308 	bic.w	r3, r3, #8
 8008056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	4313      	orrs	r3, r2
 8008060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f023 0304 	bic.w	r3, r3, #4
 8008068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a1b      	ldr	r2, [pc, #108]	; (80080dc <TIM_OC1_SetConfig+0x10c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d00f      	beq.n	8008092 <TIM_OC1_SetConfig+0xc2>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a1a      	ldr	r2, [pc, #104]	; (80080e0 <TIM_OC1_SetConfig+0x110>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d00b      	beq.n	8008092 <TIM_OC1_SetConfig+0xc2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a19      	ldr	r2, [pc, #100]	; (80080e4 <TIM_OC1_SetConfig+0x114>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d007      	beq.n	8008092 <TIM_OC1_SetConfig+0xc2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a18      	ldr	r2, [pc, #96]	; (80080e8 <TIM_OC1_SetConfig+0x118>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d003      	beq.n	8008092 <TIM_OC1_SetConfig+0xc2>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a17      	ldr	r2, [pc, #92]	; (80080ec <TIM_OC1_SetConfig+0x11c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d111      	bne.n	80080b6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	621a      	str	r2, [r3, #32]
}
 80080d0:	bf00      	nop
 80080d2:	371c      	adds	r7, #28
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	40012c00 	.word	0x40012c00
 80080e0:	40013400 	.word	0x40013400
 80080e4:	40014000 	.word	0x40014000
 80080e8:	40014400 	.word	0x40014400
 80080ec:	40014800 	.word	0x40014800

080080f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a1b      	ldr	r3, [r3, #32]
 80080fe:	f023 0210 	bic.w	r2, r3, #16
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800811e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800812a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	021b      	lsls	r3, r3, #8
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	4313      	orrs	r3, r2
 8008136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f023 0320 	bic.w	r3, r3, #32
 800813e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	011b      	lsls	r3, r3, #4
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	4313      	orrs	r3, r2
 800814a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a28      	ldr	r2, [pc, #160]	; (80081f0 <TIM_OC2_SetConfig+0x100>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d003      	beq.n	800815c <TIM_OC2_SetConfig+0x6c>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a27      	ldr	r2, [pc, #156]	; (80081f4 <TIM_OC2_SetConfig+0x104>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d10d      	bne.n	8008178 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	011b      	lsls	r3, r3, #4
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	4313      	orrs	r3, r2
 800816e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008176:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a1d      	ldr	r2, [pc, #116]	; (80081f0 <TIM_OC2_SetConfig+0x100>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d00f      	beq.n	80081a0 <TIM_OC2_SetConfig+0xb0>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a1c      	ldr	r2, [pc, #112]	; (80081f4 <TIM_OC2_SetConfig+0x104>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d00b      	beq.n	80081a0 <TIM_OC2_SetConfig+0xb0>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a1b      	ldr	r2, [pc, #108]	; (80081f8 <TIM_OC2_SetConfig+0x108>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d007      	beq.n	80081a0 <TIM_OC2_SetConfig+0xb0>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a1a      	ldr	r2, [pc, #104]	; (80081fc <TIM_OC2_SetConfig+0x10c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d003      	beq.n	80081a0 <TIM_OC2_SetConfig+0xb0>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a19      	ldr	r2, [pc, #100]	; (8008200 <TIM_OC2_SetConfig+0x110>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d113      	bne.n	80081c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	621a      	str	r2, [r3, #32]
}
 80081e2:	bf00      	nop
 80081e4:	371c      	adds	r7, #28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	40012c00 	.word	0x40012c00
 80081f4:	40013400 	.word	0x40013400
 80081f8:	40014000 	.word	0x40014000
 80081fc:	40014400 	.word	0x40014400
 8008200:	40014800 	.word	0x40014800

08008204 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008204:	b480      	push	{r7}
 8008206:	b087      	sub	sp, #28
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0303 	bic.w	r3, r3, #3
 800823e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	4313      	orrs	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	021b      	lsls	r3, r3, #8
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	4313      	orrs	r3, r2
 800825c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a27      	ldr	r2, [pc, #156]	; (8008300 <TIM_OC3_SetConfig+0xfc>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d003      	beq.n	800826e <TIM_OC3_SetConfig+0x6a>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a26      	ldr	r2, [pc, #152]	; (8008304 <TIM_OC3_SetConfig+0x100>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d10d      	bne.n	800828a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	021b      	lsls	r3, r3, #8
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	4313      	orrs	r3, r2
 8008280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a1c      	ldr	r2, [pc, #112]	; (8008300 <TIM_OC3_SetConfig+0xfc>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d00f      	beq.n	80082b2 <TIM_OC3_SetConfig+0xae>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a1b      	ldr	r2, [pc, #108]	; (8008304 <TIM_OC3_SetConfig+0x100>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00b      	beq.n	80082b2 <TIM_OC3_SetConfig+0xae>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a1a      	ldr	r2, [pc, #104]	; (8008308 <TIM_OC3_SetConfig+0x104>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d007      	beq.n	80082b2 <TIM_OC3_SetConfig+0xae>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a19      	ldr	r2, [pc, #100]	; (800830c <TIM_OC3_SetConfig+0x108>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d003      	beq.n	80082b2 <TIM_OC3_SetConfig+0xae>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a18      	ldr	r2, [pc, #96]	; (8008310 <TIM_OC3_SetConfig+0x10c>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d113      	bne.n	80082da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	011b      	lsls	r3, r3, #4
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	011b      	lsls	r3, r3, #4
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	621a      	str	r2, [r3, #32]
}
 80082f4:	bf00      	nop
 80082f6:	371c      	adds	r7, #28
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	40012c00 	.word	0x40012c00
 8008304:	40013400 	.word	0x40013400
 8008308:	40014000 	.word	0x40014000
 800830c:	40014400 	.word	0x40014400
 8008310:	40014800 	.word	0x40014800

08008314 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800834e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	021b      	lsls	r3, r3, #8
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	4313      	orrs	r3, r2
 800835a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	031b      	lsls	r3, r3, #12
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	4313      	orrs	r3, r2
 800836e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a18      	ldr	r2, [pc, #96]	; (80083d4 <TIM_OC4_SetConfig+0xc0>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d00f      	beq.n	8008398 <TIM_OC4_SetConfig+0x84>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a17      	ldr	r2, [pc, #92]	; (80083d8 <TIM_OC4_SetConfig+0xc4>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d00b      	beq.n	8008398 <TIM_OC4_SetConfig+0x84>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a16      	ldr	r2, [pc, #88]	; (80083dc <TIM_OC4_SetConfig+0xc8>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d007      	beq.n	8008398 <TIM_OC4_SetConfig+0x84>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a15      	ldr	r2, [pc, #84]	; (80083e0 <TIM_OC4_SetConfig+0xcc>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d003      	beq.n	8008398 <TIM_OC4_SetConfig+0x84>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a14      	ldr	r2, [pc, #80]	; (80083e4 <TIM_OC4_SetConfig+0xd0>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d109      	bne.n	80083ac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800839e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	019b      	lsls	r3, r3, #6
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	621a      	str	r2, [r3, #32]
}
 80083c6:	bf00      	nop
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	40012c00 	.word	0x40012c00
 80083d8:	40013400 	.word	0x40013400
 80083dc:	40014000 	.word	0x40014000
 80083e0:	40014400 	.word	0x40014400
 80083e4:	40014800 	.word	0x40014800

080083e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b087      	sub	sp, #28
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800840e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	4313      	orrs	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800842c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	041b      	lsls	r3, r3, #16
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	4313      	orrs	r3, r2
 8008438:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a17      	ldr	r2, [pc, #92]	; (800849c <TIM_OC5_SetConfig+0xb4>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d00f      	beq.n	8008462 <TIM_OC5_SetConfig+0x7a>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a16      	ldr	r2, [pc, #88]	; (80084a0 <TIM_OC5_SetConfig+0xb8>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d00b      	beq.n	8008462 <TIM_OC5_SetConfig+0x7a>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a15      	ldr	r2, [pc, #84]	; (80084a4 <TIM_OC5_SetConfig+0xbc>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d007      	beq.n	8008462 <TIM_OC5_SetConfig+0x7a>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a14      	ldr	r2, [pc, #80]	; (80084a8 <TIM_OC5_SetConfig+0xc0>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d003      	beq.n	8008462 <TIM_OC5_SetConfig+0x7a>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a13      	ldr	r2, [pc, #76]	; (80084ac <TIM_OC5_SetConfig+0xc4>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d109      	bne.n	8008476 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008468:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	021b      	lsls	r3, r3, #8
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	4313      	orrs	r3, r2
 8008474:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	621a      	str	r2, [r3, #32]
}
 8008490:	bf00      	nop
 8008492:	371c      	adds	r7, #28
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	40012c00 	.word	0x40012c00
 80084a0:	40013400 	.word	0x40013400
 80084a4:	40014000 	.word	0x40014000
 80084a8:	40014400 	.word	0x40014400
 80084ac:	40014800 	.word	0x40014800

080084b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	021b      	lsls	r3, r3, #8
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	051b      	lsls	r3, r3, #20
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	4313      	orrs	r3, r2
 8008502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a18      	ldr	r2, [pc, #96]	; (8008568 <TIM_OC6_SetConfig+0xb8>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d00f      	beq.n	800852c <TIM_OC6_SetConfig+0x7c>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a17      	ldr	r2, [pc, #92]	; (800856c <TIM_OC6_SetConfig+0xbc>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d00b      	beq.n	800852c <TIM_OC6_SetConfig+0x7c>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a16      	ldr	r2, [pc, #88]	; (8008570 <TIM_OC6_SetConfig+0xc0>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d007      	beq.n	800852c <TIM_OC6_SetConfig+0x7c>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a15      	ldr	r2, [pc, #84]	; (8008574 <TIM_OC6_SetConfig+0xc4>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d003      	beq.n	800852c <TIM_OC6_SetConfig+0x7c>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a14      	ldr	r2, [pc, #80]	; (8008578 <TIM_OC6_SetConfig+0xc8>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d109      	bne.n	8008540 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008532:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	029b      	lsls	r3, r3, #10
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	4313      	orrs	r3, r2
 800853e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685a      	ldr	r2, [r3, #4]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	621a      	str	r2, [r3, #32]
}
 800855a:	bf00      	nop
 800855c:	371c      	adds	r7, #28
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	40012c00 	.word	0x40012c00
 800856c:	40013400 	.word	0x40013400
 8008570:	40014000 	.word	0x40014000
 8008574:	40014400 	.word	0x40014400
 8008578:	40014800 	.word	0x40014800

0800857c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6a1b      	ldr	r3, [r3, #32]
 800858c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	f023 0201 	bic.w	r2, r3, #1
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	011b      	lsls	r3, r3, #4
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f023 030a 	bic.w	r3, r3, #10
 80085b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	4313      	orrs	r3, r2
 80085c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	621a      	str	r2, [r3, #32]
}
 80085ce:	bf00      	nop
 80085d0:	371c      	adds	r7, #28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085da:	b480      	push	{r7}
 80085dc:	b087      	sub	sp, #28
 80085de:	af00      	add	r7, sp, #0
 80085e0:	60f8      	str	r0, [r7, #12]
 80085e2:	60b9      	str	r1, [r7, #8]
 80085e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	f023 0210 	bic.w	r2, r3, #16
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008604:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	031b      	lsls	r3, r3, #12
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	4313      	orrs	r3, r2
 800860e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008616:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	011b      	lsls	r3, r3, #4
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	4313      	orrs	r3, r2
 8008620:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	621a      	str	r2, [r3, #32]
}
 800862e:	bf00      	nop
 8008630:	371c      	adds	r7, #28
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800863a:	b480      	push	{r7}
 800863c:	b085      	sub	sp, #20
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	4313      	orrs	r3, r2
 8008658:	f043 0307 	orr.w	r3, r3, #7
 800865c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	609a      	str	r2, [r3, #8]
}
 8008664:	bf00      	nop
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800868a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	021a      	lsls	r2, r3, #8
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	431a      	orrs	r2, r3
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	4313      	orrs	r3, r2
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	4313      	orrs	r3, r2
 800869c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	609a      	str	r2, [r3, #8]
}
 80086a4:	bf00      	nop
 80086a6:	371c      	adds	r7, #28
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	f003 031f 	and.w	r3, r3, #31
 80086c2:	2201      	movs	r2, #1
 80086c4:	fa02 f303 	lsl.w	r3, r2, r3
 80086c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6a1a      	ldr	r2, [r3, #32]
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	43db      	mvns	r3, r3
 80086d2:	401a      	ands	r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6a1a      	ldr	r2, [r3, #32]
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	f003 031f 	and.w	r3, r3, #31
 80086e2:	6879      	ldr	r1, [r7, #4]
 80086e4:	fa01 f303 	lsl.w	r3, r1, r3
 80086e8:	431a      	orrs	r2, r3
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	621a      	str	r2, [r3, #32]
}
 80086ee:	bf00      	nop
 80086f0:	371c      	adds	r7, #28
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
	...

080086fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800870c:	2b01      	cmp	r3, #1
 800870e:	d101      	bne.n	8008714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008710:	2302      	movs	r3, #2
 8008712:	e068      	b.n	80087e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2202      	movs	r2, #2
 8008720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a2e      	ldr	r2, [pc, #184]	; (80087f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d004      	beq.n	8008748 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a2d      	ldr	r2, [pc, #180]	; (80087f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d108      	bne.n	800875a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800874e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	4313      	orrs	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008760:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	4313      	orrs	r3, r2
 800876a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a1e      	ldr	r2, [pc, #120]	; (80087f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d01d      	beq.n	80087ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008786:	d018      	beq.n	80087ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a1b      	ldr	r2, [pc, #108]	; (80087fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d013      	beq.n	80087ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a1a      	ldr	r2, [pc, #104]	; (8008800 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d00e      	beq.n	80087ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a18      	ldr	r2, [pc, #96]	; (8008804 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d009      	beq.n	80087ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a13      	ldr	r2, [pc, #76]	; (80087f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d004      	beq.n	80087ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a14      	ldr	r2, [pc, #80]	; (8008808 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d10c      	bne.n	80087d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	40012c00 	.word	0x40012c00
 80087f8:	40013400 	.word	0x40013400
 80087fc:	40000400 	.word	0x40000400
 8008800:	40000800 	.word	0x40000800
 8008804:	40000c00 	.word	0x40000c00
 8008808:	40014000 	.word	0x40014000

0800880c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008820:	2b01      	cmp	r3, #1
 8008822:	d101      	bne.n	8008828 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008824:	2302      	movs	r3, #2
 8008826:	e065      	b.n	80088f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	4313      	orrs	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	4313      	orrs	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4313      	orrs	r3, r2
 8008866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	4313      	orrs	r3, r2
 8008874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	4313      	orrs	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888e:	4313      	orrs	r3, r2
 8008890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	041b      	lsls	r3, r3, #16
 800889e:	4313      	orrs	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a16      	ldr	r2, [pc, #88]	; (8008900 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d004      	beq.n	80088b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a14      	ldr	r2, [pc, #80]	; (8008904 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d115      	bne.n	80088e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c0:	051b      	lsls	r3, r3, #20
 80088c2:	4313      	orrs	r3, r2
 80088c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	4313      	orrs	r3, r2
 80088e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	40012c00 	.word	0x40012c00
 8008904:	40013400 	.word	0x40013400

08008908 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e040      	b.n	80089d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800895a:	2b00      	cmp	r3, #0
 800895c:	d106      	bne.n	800896c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7fb f8dc 	bl	8003b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2224      	movs	r2, #36	; 0x24
 8008970:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f022 0201 	bic.w	r2, r2, #1
 8008980:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 faee 	bl	8008f64 <UART_SetConfig>
 8008988:	4603      	mov	r3, r0
 800898a:	2b01      	cmp	r3, #1
 800898c:	d101      	bne.n	8008992 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e022      	b.n	80089d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	2b00      	cmp	r3, #0
 8008998:	d002      	beq.n	80089a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fd6c 	bl	8009478 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f042 0201 	orr.w	r2, r2, #1
 80089ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fdf3 	bl	80095bc <UART_CheckIdleState>
 80089d6:	4603      	mov	r3, r0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	4613      	mov	r3, r2
 80089ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089f2:	2b20      	cmp	r3, #32
 80089f4:	d145      	bne.n	8008a82 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <HAL_UART_Transmit_IT+0x22>
 80089fc:	88fb      	ldrh	r3, [r7, #6]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e03e      	b.n	8008a84 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d101      	bne.n	8008a14 <HAL_UART_Transmit_IT+0x34>
 8008a10:	2302      	movs	r3, #2
 8008a12:	e037      	b.n	8008a84 <HAL_UART_Transmit_IT+0xa4>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	88fa      	ldrh	r2, [r7, #6]
 8008a26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	88fa      	ldrh	r2, [r7, #6]
 8008a2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2221      	movs	r2, #33	; 0x21
 8008a44:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a4e:	d107      	bne.n	8008a60 <HAL_UART_Transmit_IT+0x80>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d103      	bne.n	8008a60 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	4a0d      	ldr	r2, [pc, #52]	; (8008a90 <HAL_UART_Transmit_IT+0xb0>)
 8008a5c:	669a      	str	r2, [r3, #104]	; 0x68
 8008a5e:	e002      	b.n	8008a66 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4a0c      	ldr	r2, [pc, #48]	; (8008a94 <HAL_UART_Transmit_IT+0xb4>)
 8008a64:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008a7c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	e000      	b.n	8008a84 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8008a82:	2302      	movs	r3, #2
  }
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3714      	adds	r7, #20
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr
 8008a90:	08009957 	.word	0x08009957
 8008a94:	080098e3 	.word	0x080098e3

08008a98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aaa:	2b20      	cmp	r3, #32
 8008aac:	d131      	bne.n	8008b12 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <HAL_UART_Receive_IT+0x22>
 8008ab4:	88fb      	ldrh	r3, [r7, #6]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e02a      	b.n	8008b14 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d101      	bne.n	8008acc <HAL_UART_Receive_IT+0x34>
 8008ac8:	2302      	movs	r3, #2
 8008aca:	e023      	b.n	8008b14 <HAL_UART_Receive_IT+0x7c>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a0f      	ldr	r2, [pc, #60]	; (8008b1c <HAL_UART_Receive_IT+0x84>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d00e      	beq.n	8008b02 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d007      	beq.n	8008b02 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008b00:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	461a      	mov	r2, r3
 8008b06:	68b9      	ldr	r1, [r7, #8]
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 fe1d 	bl	8009748 <UART_Start_Receive_IT>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	e000      	b.n	8008b14 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8008b12:	2302      	movs	r3, #2
  }
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	40008000 	.word	0x40008000

08008b20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b40:	69fa      	ldr	r2, [r7, #28]
 8008b42:	f640 030f 	movw	r3, #2063	; 0x80f
 8008b46:	4013      	ands	r3, r2
 8008b48:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d113      	bne.n	8008b78 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	f003 0320 	and.w	r3, r3, #32
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00e      	beq.n	8008b78 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	f003 0320 	and.w	r3, r3, #32
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d009      	beq.n	8008b78 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 81ce 	beq.w	8008f0a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	4798      	blx	r3
      }
      return;
 8008b76:	e1c8      	b.n	8008f0a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f000 80e3 	beq.w	8008d46 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d105      	bne.n	8008b96 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	4ba6      	ldr	r3, [pc, #664]	; (8008e28 <HAL_UART_IRQHandler+0x308>)
 8008b8e:	4013      	ands	r3, r2
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 80d8 	beq.w	8008d46 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d010      	beq.n	8008bc2 <HAL_UART_IRQHandler+0xa2>
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00b      	beq.n	8008bc2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bb8:	f043 0201 	orr.w	r2, r3, #1
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	f003 0302 	and.w	r3, r3, #2
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d010      	beq.n	8008bee <HAL_UART_IRQHandler+0xce>
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00b      	beq.n	8008bee <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008be4:	f043 0204 	orr.w	r2, r3, #4
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	f003 0304 	and.w	r3, r3, #4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d010      	beq.n	8008c1a <HAL_UART_IRQHandler+0xfa>
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2204      	movs	r2, #4
 8008c08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c10:	f043 0202 	orr.w	r2, r3, #2
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	f003 0308 	and.w	r3, r3, #8
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d015      	beq.n	8008c50 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	f003 0320 	and.w	r3, r3, #32
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d104      	bne.n	8008c38 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00b      	beq.n	8008c50 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2208      	movs	r2, #8
 8008c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c46:	f043 0208 	orr.w	r2, r3, #8
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d011      	beq.n	8008c7e <HAL_UART_IRQHandler+0x15e>
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00c      	beq.n	8008c7e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c74:	f043 0220 	orr.w	r2, r3, #32
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f000 8142 	beq.w	8008f0e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	f003 0320 	and.w	r3, r3, #32
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00c      	beq.n	8008cae <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	f003 0320 	and.w	r3, r3, #32
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d007      	beq.n	8008cae <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d003      	beq.n	8008cae <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cb4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc0:	2b40      	cmp	r3, #64	; 0x40
 8008cc2:	d004      	beq.n	8008cce <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d031      	beq.n	8008d32 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fdc2 	bl	8009858 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cde:	2b40      	cmp	r3, #64	; 0x40
 8008ce0:	d123      	bne.n	8008d2a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	689a      	ldr	r2, [r3, #8]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cf0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d013      	beq.n	8008d22 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cfe:	4a4b      	ldr	r2, [pc, #300]	; (8008e2c <HAL_UART_IRQHandler+0x30c>)
 8008d00:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fb fcda 	bl	80046c0 <HAL_DMA_Abort_IT>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d017      	beq.n	8008d42 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d20:	e00f      	b.n	8008d42 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f908 	bl	8008f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d28:	e00b      	b.n	8008d42 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f904 	bl	8008f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d30:	e007      	b.n	8008d42 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f900 	bl	8008f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008d40:	e0e5      	b.n	8008f0e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d42:	bf00      	nop
    return;
 8008d44:	e0e3      	b.n	8008f0e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	f040 80a9 	bne.w	8008ea2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	f003 0310 	and.w	r3, r3, #16
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f000 80a3 	beq.w	8008ea2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	f003 0310 	and.w	r3, r3, #16
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 809d 	beq.w	8008ea2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2210      	movs	r2, #16
 8008d6e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d7a:	2b40      	cmp	r3, #64	; 0x40
 8008d7c:	d158      	bne.n	8008e30 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8008d88:	893b      	ldrh	r3, [r7, #8]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f000 80c1 	beq.w	8008f12 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d96:	893a      	ldrh	r2, [r7, #8]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	f080 80ba 	bcs.w	8008f12 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	893a      	ldrh	r2, [r7, #8]
 8008da2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0320 	and.w	r3, r3, #32
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d12a      	bne.n	8008e0c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dc4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	689a      	ldr	r2, [r3, #8]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f022 0201 	bic.w	r2, r2, #1
 8008dd4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	689a      	ldr	r2, [r3, #8]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008de4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2220      	movs	r2, #32
 8008dea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f022 0210 	bic.w	r2, r2, #16
 8008e00:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fb fc1c 	bl	8004644 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f893 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008e26:	e074      	b.n	8008f12 <HAL_UART_IRQHandler+0x3f2>
 8008e28:	04000120 	.word	0x04000120
 8008e2c:	080098b7 	.word	0x080098b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d063      	beq.n	8008f16 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8008e4e:	897b      	ldrh	r3, [r7, #10]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d060      	beq.n	8008f16 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e62:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	689a      	ldr	r2, [r3, #8]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 0201 	bic.w	r2, r2, #1
 8008e72:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2220      	movs	r2, #32
 8008e78:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f022 0210 	bic.w	r2, r2, #16
 8008e94:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e96:	897b      	ldrh	r3, [r7, #10]
 8008e98:	4619      	mov	r1, r3
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f856 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008ea0:	e039      	b.n	8008f16 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00d      	beq.n	8008ec8 <HAL_UART_IRQHandler+0x3a8>
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d008      	beq.n	8008ec8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008ebe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fe77 	bl	8009bb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ec6:	e029      	b.n	8008f1c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00d      	beq.n	8008eee <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d008      	beq.n	8008eee <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d01a      	beq.n	8008f1a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	4798      	blx	r3
    }
    return;
 8008eec:	e015      	b.n	8008f1a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d011      	beq.n	8008f1c <HAL_UART_IRQHandler+0x3fc>
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00c      	beq.n	8008f1c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fd65 	bl	80099d2 <UART_EndTransmit_IT>
    return;
 8008f08:	e008      	b.n	8008f1c <HAL_UART_IRQHandler+0x3fc>
      return;
 8008f0a:	bf00      	nop
 8008f0c:	e006      	b.n	8008f1c <HAL_UART_IRQHandler+0x3fc>
    return;
 8008f0e:	bf00      	nop
 8008f10:	e004      	b.n	8008f1c <HAL_UART_IRQHandler+0x3fc>
      return;
 8008f12:	bf00      	nop
 8008f14:	e002      	b.n	8008f1c <HAL_UART_IRQHandler+0x3fc>
      return;
 8008f16:	bf00      	nop
 8008f18:	e000      	b.n	8008f1c <HAL_UART_IRQHandler+0x3fc>
    return;
 8008f1a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008f1c:	3720      	adds	r7, #32
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop

08008f24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f64:	b5b0      	push	{r4, r5, r7, lr}
 8008f66:	b088      	sub	sp, #32
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	689a      	ldr	r2, [r3, #8]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	431a      	orrs	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	431a      	orrs	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	4bad      	ldr	r3, [pc, #692]	; (8009244 <UART_SetConfig+0x2e0>)
 8008f90:	4013      	ands	r3, r2
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	6812      	ldr	r2, [r2, #0]
 8008f96:	69f9      	ldr	r1, [r7, #28]
 8008f98:	430b      	orrs	r3, r1
 8008f9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4aa2      	ldr	r2, [pc, #648]	; (8009248 <UART_SetConfig+0x2e4>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d004      	beq.n	8008fcc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	69fa      	ldr	r2, [r7, #28]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	69fa      	ldr	r2, [r7, #28]
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a99      	ldr	r2, [pc, #612]	; (800924c <UART_SetConfig+0x2e8>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d121      	bne.n	800902e <UART_SetConfig+0xca>
 8008fea:	4b99      	ldr	r3, [pc, #612]	; (8009250 <UART_SetConfig+0x2ec>)
 8008fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ff0:	f003 0303 	and.w	r3, r3, #3
 8008ff4:	2b03      	cmp	r3, #3
 8008ff6:	d817      	bhi.n	8009028 <UART_SetConfig+0xc4>
 8008ff8:	a201      	add	r2, pc, #4	; (adr r2, 8009000 <UART_SetConfig+0x9c>)
 8008ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffe:	bf00      	nop
 8009000:	08009011 	.word	0x08009011
 8009004:	0800901d 	.word	0x0800901d
 8009008:	08009017 	.word	0x08009017
 800900c:	08009023 	.word	0x08009023
 8009010:	2301      	movs	r3, #1
 8009012:	76fb      	strb	r3, [r7, #27]
 8009014:	e0e7      	b.n	80091e6 <UART_SetConfig+0x282>
 8009016:	2302      	movs	r3, #2
 8009018:	76fb      	strb	r3, [r7, #27]
 800901a:	e0e4      	b.n	80091e6 <UART_SetConfig+0x282>
 800901c:	2304      	movs	r3, #4
 800901e:	76fb      	strb	r3, [r7, #27]
 8009020:	e0e1      	b.n	80091e6 <UART_SetConfig+0x282>
 8009022:	2308      	movs	r3, #8
 8009024:	76fb      	strb	r3, [r7, #27]
 8009026:	e0de      	b.n	80091e6 <UART_SetConfig+0x282>
 8009028:	2310      	movs	r3, #16
 800902a:	76fb      	strb	r3, [r7, #27]
 800902c:	e0db      	b.n	80091e6 <UART_SetConfig+0x282>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a88      	ldr	r2, [pc, #544]	; (8009254 <UART_SetConfig+0x2f0>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d132      	bne.n	800909e <UART_SetConfig+0x13a>
 8009038:	4b85      	ldr	r3, [pc, #532]	; (8009250 <UART_SetConfig+0x2ec>)
 800903a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800903e:	f003 030c 	and.w	r3, r3, #12
 8009042:	2b0c      	cmp	r3, #12
 8009044:	d828      	bhi.n	8009098 <UART_SetConfig+0x134>
 8009046:	a201      	add	r2, pc, #4	; (adr r2, 800904c <UART_SetConfig+0xe8>)
 8009048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904c:	08009081 	.word	0x08009081
 8009050:	08009099 	.word	0x08009099
 8009054:	08009099 	.word	0x08009099
 8009058:	08009099 	.word	0x08009099
 800905c:	0800908d 	.word	0x0800908d
 8009060:	08009099 	.word	0x08009099
 8009064:	08009099 	.word	0x08009099
 8009068:	08009099 	.word	0x08009099
 800906c:	08009087 	.word	0x08009087
 8009070:	08009099 	.word	0x08009099
 8009074:	08009099 	.word	0x08009099
 8009078:	08009099 	.word	0x08009099
 800907c:	08009093 	.word	0x08009093
 8009080:	2300      	movs	r3, #0
 8009082:	76fb      	strb	r3, [r7, #27]
 8009084:	e0af      	b.n	80091e6 <UART_SetConfig+0x282>
 8009086:	2302      	movs	r3, #2
 8009088:	76fb      	strb	r3, [r7, #27]
 800908a:	e0ac      	b.n	80091e6 <UART_SetConfig+0x282>
 800908c:	2304      	movs	r3, #4
 800908e:	76fb      	strb	r3, [r7, #27]
 8009090:	e0a9      	b.n	80091e6 <UART_SetConfig+0x282>
 8009092:	2308      	movs	r3, #8
 8009094:	76fb      	strb	r3, [r7, #27]
 8009096:	e0a6      	b.n	80091e6 <UART_SetConfig+0x282>
 8009098:	2310      	movs	r3, #16
 800909a:	76fb      	strb	r3, [r7, #27]
 800909c:	e0a3      	b.n	80091e6 <UART_SetConfig+0x282>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a6d      	ldr	r2, [pc, #436]	; (8009258 <UART_SetConfig+0x2f4>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d120      	bne.n	80090ea <UART_SetConfig+0x186>
 80090a8:	4b69      	ldr	r3, [pc, #420]	; (8009250 <UART_SetConfig+0x2ec>)
 80090aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80090b2:	2b30      	cmp	r3, #48	; 0x30
 80090b4:	d013      	beq.n	80090de <UART_SetConfig+0x17a>
 80090b6:	2b30      	cmp	r3, #48	; 0x30
 80090b8:	d814      	bhi.n	80090e4 <UART_SetConfig+0x180>
 80090ba:	2b20      	cmp	r3, #32
 80090bc:	d009      	beq.n	80090d2 <UART_SetConfig+0x16e>
 80090be:	2b20      	cmp	r3, #32
 80090c0:	d810      	bhi.n	80090e4 <UART_SetConfig+0x180>
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d002      	beq.n	80090cc <UART_SetConfig+0x168>
 80090c6:	2b10      	cmp	r3, #16
 80090c8:	d006      	beq.n	80090d8 <UART_SetConfig+0x174>
 80090ca:	e00b      	b.n	80090e4 <UART_SetConfig+0x180>
 80090cc:	2300      	movs	r3, #0
 80090ce:	76fb      	strb	r3, [r7, #27]
 80090d0:	e089      	b.n	80091e6 <UART_SetConfig+0x282>
 80090d2:	2302      	movs	r3, #2
 80090d4:	76fb      	strb	r3, [r7, #27]
 80090d6:	e086      	b.n	80091e6 <UART_SetConfig+0x282>
 80090d8:	2304      	movs	r3, #4
 80090da:	76fb      	strb	r3, [r7, #27]
 80090dc:	e083      	b.n	80091e6 <UART_SetConfig+0x282>
 80090de:	2308      	movs	r3, #8
 80090e0:	76fb      	strb	r3, [r7, #27]
 80090e2:	e080      	b.n	80091e6 <UART_SetConfig+0x282>
 80090e4:	2310      	movs	r3, #16
 80090e6:	76fb      	strb	r3, [r7, #27]
 80090e8:	e07d      	b.n	80091e6 <UART_SetConfig+0x282>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a5b      	ldr	r2, [pc, #364]	; (800925c <UART_SetConfig+0x2f8>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d120      	bne.n	8009136 <UART_SetConfig+0x1d2>
 80090f4:	4b56      	ldr	r3, [pc, #344]	; (8009250 <UART_SetConfig+0x2ec>)
 80090f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80090fe:	2bc0      	cmp	r3, #192	; 0xc0
 8009100:	d013      	beq.n	800912a <UART_SetConfig+0x1c6>
 8009102:	2bc0      	cmp	r3, #192	; 0xc0
 8009104:	d814      	bhi.n	8009130 <UART_SetConfig+0x1cc>
 8009106:	2b80      	cmp	r3, #128	; 0x80
 8009108:	d009      	beq.n	800911e <UART_SetConfig+0x1ba>
 800910a:	2b80      	cmp	r3, #128	; 0x80
 800910c:	d810      	bhi.n	8009130 <UART_SetConfig+0x1cc>
 800910e:	2b00      	cmp	r3, #0
 8009110:	d002      	beq.n	8009118 <UART_SetConfig+0x1b4>
 8009112:	2b40      	cmp	r3, #64	; 0x40
 8009114:	d006      	beq.n	8009124 <UART_SetConfig+0x1c0>
 8009116:	e00b      	b.n	8009130 <UART_SetConfig+0x1cc>
 8009118:	2300      	movs	r3, #0
 800911a:	76fb      	strb	r3, [r7, #27]
 800911c:	e063      	b.n	80091e6 <UART_SetConfig+0x282>
 800911e:	2302      	movs	r3, #2
 8009120:	76fb      	strb	r3, [r7, #27]
 8009122:	e060      	b.n	80091e6 <UART_SetConfig+0x282>
 8009124:	2304      	movs	r3, #4
 8009126:	76fb      	strb	r3, [r7, #27]
 8009128:	e05d      	b.n	80091e6 <UART_SetConfig+0x282>
 800912a:	2308      	movs	r3, #8
 800912c:	76fb      	strb	r3, [r7, #27]
 800912e:	e05a      	b.n	80091e6 <UART_SetConfig+0x282>
 8009130:	2310      	movs	r3, #16
 8009132:	76fb      	strb	r3, [r7, #27]
 8009134:	e057      	b.n	80091e6 <UART_SetConfig+0x282>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a49      	ldr	r2, [pc, #292]	; (8009260 <UART_SetConfig+0x2fc>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d125      	bne.n	800918c <UART_SetConfig+0x228>
 8009140:	4b43      	ldr	r3, [pc, #268]	; (8009250 <UART_SetConfig+0x2ec>)
 8009142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800914a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800914e:	d017      	beq.n	8009180 <UART_SetConfig+0x21c>
 8009150:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009154:	d817      	bhi.n	8009186 <UART_SetConfig+0x222>
 8009156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800915a:	d00b      	beq.n	8009174 <UART_SetConfig+0x210>
 800915c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009160:	d811      	bhi.n	8009186 <UART_SetConfig+0x222>
 8009162:	2b00      	cmp	r3, #0
 8009164:	d003      	beq.n	800916e <UART_SetConfig+0x20a>
 8009166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800916a:	d006      	beq.n	800917a <UART_SetConfig+0x216>
 800916c:	e00b      	b.n	8009186 <UART_SetConfig+0x222>
 800916e:	2300      	movs	r3, #0
 8009170:	76fb      	strb	r3, [r7, #27]
 8009172:	e038      	b.n	80091e6 <UART_SetConfig+0x282>
 8009174:	2302      	movs	r3, #2
 8009176:	76fb      	strb	r3, [r7, #27]
 8009178:	e035      	b.n	80091e6 <UART_SetConfig+0x282>
 800917a:	2304      	movs	r3, #4
 800917c:	76fb      	strb	r3, [r7, #27]
 800917e:	e032      	b.n	80091e6 <UART_SetConfig+0x282>
 8009180:	2308      	movs	r3, #8
 8009182:	76fb      	strb	r3, [r7, #27]
 8009184:	e02f      	b.n	80091e6 <UART_SetConfig+0x282>
 8009186:	2310      	movs	r3, #16
 8009188:	76fb      	strb	r3, [r7, #27]
 800918a:	e02c      	b.n	80091e6 <UART_SetConfig+0x282>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a2d      	ldr	r2, [pc, #180]	; (8009248 <UART_SetConfig+0x2e4>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d125      	bne.n	80091e2 <UART_SetConfig+0x27e>
 8009196:	4b2e      	ldr	r3, [pc, #184]	; (8009250 <UART_SetConfig+0x2ec>)
 8009198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800919c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80091a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091a4:	d017      	beq.n	80091d6 <UART_SetConfig+0x272>
 80091a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091aa:	d817      	bhi.n	80091dc <UART_SetConfig+0x278>
 80091ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091b0:	d00b      	beq.n	80091ca <UART_SetConfig+0x266>
 80091b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091b6:	d811      	bhi.n	80091dc <UART_SetConfig+0x278>
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d003      	beq.n	80091c4 <UART_SetConfig+0x260>
 80091bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091c0:	d006      	beq.n	80091d0 <UART_SetConfig+0x26c>
 80091c2:	e00b      	b.n	80091dc <UART_SetConfig+0x278>
 80091c4:	2300      	movs	r3, #0
 80091c6:	76fb      	strb	r3, [r7, #27]
 80091c8:	e00d      	b.n	80091e6 <UART_SetConfig+0x282>
 80091ca:	2302      	movs	r3, #2
 80091cc:	76fb      	strb	r3, [r7, #27]
 80091ce:	e00a      	b.n	80091e6 <UART_SetConfig+0x282>
 80091d0:	2304      	movs	r3, #4
 80091d2:	76fb      	strb	r3, [r7, #27]
 80091d4:	e007      	b.n	80091e6 <UART_SetConfig+0x282>
 80091d6:	2308      	movs	r3, #8
 80091d8:	76fb      	strb	r3, [r7, #27]
 80091da:	e004      	b.n	80091e6 <UART_SetConfig+0x282>
 80091dc:	2310      	movs	r3, #16
 80091de:	76fb      	strb	r3, [r7, #27]
 80091e0:	e001      	b.n	80091e6 <UART_SetConfig+0x282>
 80091e2:	2310      	movs	r3, #16
 80091e4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a17      	ldr	r2, [pc, #92]	; (8009248 <UART_SetConfig+0x2e4>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	f040 8087 	bne.w	8009300 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80091f2:	7efb      	ldrb	r3, [r7, #27]
 80091f4:	2b08      	cmp	r3, #8
 80091f6:	d837      	bhi.n	8009268 <UART_SetConfig+0x304>
 80091f8:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <UART_SetConfig+0x29c>)
 80091fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fe:	bf00      	nop
 8009200:	08009225 	.word	0x08009225
 8009204:	08009269 	.word	0x08009269
 8009208:	0800922d 	.word	0x0800922d
 800920c:	08009269 	.word	0x08009269
 8009210:	08009233 	.word	0x08009233
 8009214:	08009269 	.word	0x08009269
 8009218:	08009269 	.word	0x08009269
 800921c:	08009269 	.word	0x08009269
 8009220:	0800923b 	.word	0x0800923b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009224:	f7fd fafc 	bl	8006820 <HAL_RCC_GetPCLK1Freq>
 8009228:	6178      	str	r0, [r7, #20]
        break;
 800922a:	e022      	b.n	8009272 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800922c:	4b0d      	ldr	r3, [pc, #52]	; (8009264 <UART_SetConfig+0x300>)
 800922e:	617b      	str	r3, [r7, #20]
        break;
 8009230:	e01f      	b.n	8009272 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009232:	f7fd fa5d 	bl	80066f0 <HAL_RCC_GetSysClockFreq>
 8009236:	6178      	str	r0, [r7, #20]
        break;
 8009238:	e01b      	b.n	8009272 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800923a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800923e:	617b      	str	r3, [r7, #20]
        break;
 8009240:	e017      	b.n	8009272 <UART_SetConfig+0x30e>
 8009242:	bf00      	nop
 8009244:	efff69f3 	.word	0xefff69f3
 8009248:	40008000 	.word	0x40008000
 800924c:	40013800 	.word	0x40013800
 8009250:	40021000 	.word	0x40021000
 8009254:	40004400 	.word	0x40004400
 8009258:	40004800 	.word	0x40004800
 800925c:	40004c00 	.word	0x40004c00
 8009260:	40005000 	.word	0x40005000
 8009264:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009268:	2300      	movs	r3, #0
 800926a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	76bb      	strb	r3, [r7, #26]
        break;
 8009270:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	2b00      	cmp	r3, #0
 8009276:	f000 80f1 	beq.w	800945c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685a      	ldr	r2, [r3, #4]
 800927e:	4613      	mov	r3, r2
 8009280:	005b      	lsls	r3, r3, #1
 8009282:	4413      	add	r3, r2
 8009284:	697a      	ldr	r2, [r7, #20]
 8009286:	429a      	cmp	r2, r3
 8009288:	d305      	bcc.n	8009296 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	429a      	cmp	r2, r3
 8009294:	d902      	bls.n	800929c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	76bb      	strb	r3, [r7, #26]
 800929a:	e0df      	b.n	800945c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	4618      	mov	r0, r3
 80092a0:	f04f 0100 	mov.w	r1, #0
 80092a4:	f04f 0200 	mov.w	r2, #0
 80092a8:	f04f 0300 	mov.w	r3, #0
 80092ac:	020b      	lsls	r3, r1, #8
 80092ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092b2:	0202      	lsls	r2, r0, #8
 80092b4:	6879      	ldr	r1, [r7, #4]
 80092b6:	6849      	ldr	r1, [r1, #4]
 80092b8:	0849      	lsrs	r1, r1, #1
 80092ba:	4608      	mov	r0, r1
 80092bc:	f04f 0100 	mov.w	r1, #0
 80092c0:	1814      	adds	r4, r2, r0
 80092c2:	eb43 0501 	adc.w	r5, r3, r1
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	461a      	mov	r2, r3
 80092cc:	f04f 0300 	mov.w	r3, #0
 80092d0:	4620      	mov	r0, r4
 80092d2:	4629      	mov	r1, r5
 80092d4:	f7f7 fcd8 	bl	8000c88 <__aeabi_uldivmod>
 80092d8:	4602      	mov	r2, r0
 80092da:	460b      	mov	r3, r1
 80092dc:	4613      	mov	r3, r2
 80092de:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092e6:	d308      	bcc.n	80092fa <UART_SetConfig+0x396>
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092ee:	d204      	bcs.n	80092fa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	693a      	ldr	r2, [r7, #16]
 80092f6:	60da      	str	r2, [r3, #12]
 80092f8:	e0b0      	b.n	800945c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	76bb      	strb	r3, [r7, #26]
 80092fe:	e0ad      	b.n	800945c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009308:	d15c      	bne.n	80093c4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800930a:	7efb      	ldrb	r3, [r7, #27]
 800930c:	2b08      	cmp	r3, #8
 800930e:	d828      	bhi.n	8009362 <UART_SetConfig+0x3fe>
 8009310:	a201      	add	r2, pc, #4	; (adr r2, 8009318 <UART_SetConfig+0x3b4>)
 8009312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009316:	bf00      	nop
 8009318:	0800933d 	.word	0x0800933d
 800931c:	08009345 	.word	0x08009345
 8009320:	0800934d 	.word	0x0800934d
 8009324:	08009363 	.word	0x08009363
 8009328:	08009353 	.word	0x08009353
 800932c:	08009363 	.word	0x08009363
 8009330:	08009363 	.word	0x08009363
 8009334:	08009363 	.word	0x08009363
 8009338:	0800935b 	.word	0x0800935b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800933c:	f7fd fa70 	bl	8006820 <HAL_RCC_GetPCLK1Freq>
 8009340:	6178      	str	r0, [r7, #20]
        break;
 8009342:	e013      	b.n	800936c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009344:	f7fd fa82 	bl	800684c <HAL_RCC_GetPCLK2Freq>
 8009348:	6178      	str	r0, [r7, #20]
        break;
 800934a:	e00f      	b.n	800936c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800934c:	4b49      	ldr	r3, [pc, #292]	; (8009474 <UART_SetConfig+0x510>)
 800934e:	617b      	str	r3, [r7, #20]
        break;
 8009350:	e00c      	b.n	800936c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009352:	f7fd f9cd 	bl	80066f0 <HAL_RCC_GetSysClockFreq>
 8009356:	6178      	str	r0, [r7, #20]
        break;
 8009358:	e008      	b.n	800936c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800935a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800935e:	617b      	str	r3, [r7, #20]
        break;
 8009360:	e004      	b.n	800936c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8009362:	2300      	movs	r3, #0
 8009364:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	76bb      	strb	r3, [r7, #26]
        break;
 800936a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d074      	beq.n	800945c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	005a      	lsls	r2, r3, #1
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	085b      	lsrs	r3, r3, #1
 800937c:	441a      	add	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	fbb2 f3f3 	udiv	r3, r2, r3
 8009386:	b29b      	uxth	r3, r3
 8009388:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	2b0f      	cmp	r3, #15
 800938e:	d916      	bls.n	80093be <UART_SetConfig+0x45a>
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009396:	d212      	bcs.n	80093be <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	b29b      	uxth	r3, r3
 800939c:	f023 030f 	bic.w	r3, r3, #15
 80093a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	085b      	lsrs	r3, r3, #1
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	f003 0307 	and.w	r3, r3, #7
 80093ac:	b29a      	uxth	r2, r3
 80093ae:	89fb      	ldrh	r3, [r7, #14]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	89fa      	ldrh	r2, [r7, #14]
 80093ba:	60da      	str	r2, [r3, #12]
 80093bc:	e04e      	b.n	800945c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	76bb      	strb	r3, [r7, #26]
 80093c2:	e04b      	b.n	800945c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80093c4:	7efb      	ldrb	r3, [r7, #27]
 80093c6:	2b08      	cmp	r3, #8
 80093c8:	d827      	bhi.n	800941a <UART_SetConfig+0x4b6>
 80093ca:	a201      	add	r2, pc, #4	; (adr r2, 80093d0 <UART_SetConfig+0x46c>)
 80093cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d0:	080093f5 	.word	0x080093f5
 80093d4:	080093fd 	.word	0x080093fd
 80093d8:	08009405 	.word	0x08009405
 80093dc:	0800941b 	.word	0x0800941b
 80093e0:	0800940b 	.word	0x0800940b
 80093e4:	0800941b 	.word	0x0800941b
 80093e8:	0800941b 	.word	0x0800941b
 80093ec:	0800941b 	.word	0x0800941b
 80093f0:	08009413 	.word	0x08009413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093f4:	f7fd fa14 	bl	8006820 <HAL_RCC_GetPCLK1Freq>
 80093f8:	6178      	str	r0, [r7, #20]
        break;
 80093fa:	e013      	b.n	8009424 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093fc:	f7fd fa26 	bl	800684c <HAL_RCC_GetPCLK2Freq>
 8009400:	6178      	str	r0, [r7, #20]
        break;
 8009402:	e00f      	b.n	8009424 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009404:	4b1b      	ldr	r3, [pc, #108]	; (8009474 <UART_SetConfig+0x510>)
 8009406:	617b      	str	r3, [r7, #20]
        break;
 8009408:	e00c      	b.n	8009424 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800940a:	f7fd f971 	bl	80066f0 <HAL_RCC_GetSysClockFreq>
 800940e:	6178      	str	r0, [r7, #20]
        break;
 8009410:	e008      	b.n	8009424 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009416:	617b      	str	r3, [r7, #20]
        break;
 8009418:	e004      	b.n	8009424 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800941a:	2300      	movs	r3, #0
 800941c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	76bb      	strb	r3, [r7, #26]
        break;
 8009422:	bf00      	nop
    }

    if (pclk != 0U)
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d018      	beq.n	800945c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	085a      	lsrs	r2, r3, #1
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	441a      	add	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	fbb2 f3f3 	udiv	r3, r2, r3
 800943c:	b29b      	uxth	r3, r3
 800943e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	2b0f      	cmp	r3, #15
 8009444:	d908      	bls.n	8009458 <UART_SetConfig+0x4f4>
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800944c:	d204      	bcs.n	8009458 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	60da      	str	r2, [r3, #12]
 8009456:	e001      	b.n	800945c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009468:	7ebb      	ldrb	r3, [r7, #26]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3720      	adds	r7, #32
 800946e:	46bd      	mov	sp, r7
 8009470:	bdb0      	pop	{r4, r5, r7, pc}
 8009472:	bf00      	nop
 8009474:	00f42400 	.word	0x00f42400

08009478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009484:	f003 0301 	and.w	r3, r3, #1
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00a      	beq.n	80094a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	430a      	orrs	r2, r1
 80094a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a6:	f003 0302 	and.w	r3, r3, #2
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00a      	beq.n	80094c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	430a      	orrs	r2, r1
 80094c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c8:	f003 0304 	and.w	r3, r3, #4
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00a      	beq.n	80094e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ea:	f003 0308 	and.w	r3, r3, #8
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00a      	beq.n	8009508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	430a      	orrs	r2, r1
 8009506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950c:	f003 0310 	and.w	r3, r3, #16
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00a      	beq.n	800952a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	430a      	orrs	r2, r1
 8009528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952e:	f003 0320 	and.w	r3, r3, #32
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00a      	beq.n	800954c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	430a      	orrs	r2, r1
 800954a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009554:	2b00      	cmp	r3, #0
 8009556:	d01a      	beq.n	800958e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009576:	d10a      	bne.n	800958e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	430a      	orrs	r2, r1
 800958c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00a      	beq.n	80095b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	430a      	orrs	r2, r1
 80095ae:	605a      	str	r2, [r3, #4]
  }
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af02      	add	r7, sp, #8
 80095c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095cc:	f7fa fdec 	bl	80041a8 <HAL_GetTick>
 80095d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 0308 	and.w	r3, r3, #8
 80095dc:	2b08      	cmp	r3, #8
 80095de:	d10e      	bne.n	80095fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f82d 	bl	800964e <UART_WaitOnFlagUntilTimeout>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d001      	beq.n	80095fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095fa:	2303      	movs	r3, #3
 80095fc:	e023      	b.n	8009646 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b04      	cmp	r3, #4
 800960a:	d10e      	bne.n	800962a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800960c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f817 	bl	800964e <UART_WaitOnFlagUntilTimeout>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d001      	beq.n	800962a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e00d      	b.n	8009646 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2220      	movs	r2, #32
 800962e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2220      	movs	r2, #32
 8009634:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	60f8      	str	r0, [r7, #12]
 8009656:	60b9      	str	r1, [r7, #8]
 8009658:	603b      	str	r3, [r7, #0]
 800965a:	4613      	mov	r3, r2
 800965c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800965e:	e05e      	b.n	800971e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009666:	d05a      	beq.n	800971e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009668:	f7fa fd9e 	bl	80041a8 <HAL_GetTick>
 800966c:	4602      	mov	r2, r0
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	69ba      	ldr	r2, [r7, #24]
 8009674:	429a      	cmp	r2, r3
 8009676:	d302      	bcc.n	800967e <UART_WaitOnFlagUntilTimeout+0x30>
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d11b      	bne.n	80096b6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800968c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	689a      	ldr	r2, [r3, #8]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 0201 	bic.w	r2, r2, #1
 800969c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2220      	movs	r2, #32
 80096a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2220      	movs	r2, #32
 80096a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e043      	b.n	800973e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 0304 	and.w	r3, r3, #4
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d02c      	beq.n	800971e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	69db      	ldr	r3, [r3, #28]
 80096ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096d2:	d124      	bne.n	800971e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096dc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80096ec:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	689a      	ldr	r2, [r3, #8]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0201 	bic.w	r2, r2, #1
 80096fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2220      	movs	r2, #32
 8009702:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2220      	movs	r2, #32
 8009708:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2220      	movs	r2, #32
 800970e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800971a:	2303      	movs	r3, #3
 800971c:	e00f      	b.n	800973e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69da      	ldr	r2, [r3, #28]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	4013      	ands	r3, r2
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	429a      	cmp	r2, r3
 800972c:	bf0c      	ite	eq
 800972e:	2301      	moveq	r3, #1
 8009730:	2300      	movne	r3, #0
 8009732:	b2db      	uxtb	r3, r3
 8009734:	461a      	mov	r2, r3
 8009736:	79fb      	ldrb	r3, [r7, #7]
 8009738:	429a      	cmp	r2, r3
 800973a:	d091      	beq.n	8009660 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
	...

08009748 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	4613      	mov	r3, r2
 8009754:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	88fa      	ldrh	r2, [r7, #6]
 8009760:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	88fa      	ldrh	r2, [r7, #6]
 8009768:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800977a:	d10e      	bne.n	800979a <UART_Start_Receive_IT+0x52>
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d105      	bne.n	8009790 <UART_Start_Receive_IT+0x48>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f240 12ff 	movw	r2, #511	; 0x1ff
 800978a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800978e:	e02d      	b.n	80097ec <UART_Start_Receive_IT+0xa4>
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	22ff      	movs	r2, #255	; 0xff
 8009794:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009798:	e028      	b.n	80097ec <UART_Start_Receive_IT+0xa4>
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10d      	bne.n	80097be <UART_Start_Receive_IT+0x76>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d104      	bne.n	80097b4 <UART_Start_Receive_IT+0x6c>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	22ff      	movs	r2, #255	; 0xff
 80097ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097b2:	e01b      	b.n	80097ec <UART_Start_Receive_IT+0xa4>
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	227f      	movs	r2, #127	; 0x7f
 80097b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097bc:	e016      	b.n	80097ec <UART_Start_Receive_IT+0xa4>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097c6:	d10d      	bne.n	80097e4 <UART_Start_Receive_IT+0x9c>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d104      	bne.n	80097da <UART_Start_Receive_IT+0x92>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	227f      	movs	r2, #127	; 0x7f
 80097d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097d8:	e008      	b.n	80097ec <UART_Start_Receive_IT+0xa4>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	223f      	movs	r2, #63	; 0x3f
 80097de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80097e2:	e003      	b.n	80097ec <UART_Start_Receive_IT+0xa4>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2222      	movs	r2, #34	; 0x22
 80097f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	689a      	ldr	r2, [r3, #8]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f042 0201 	orr.w	r2, r2, #1
 8009808:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009812:	d107      	bne.n	8009824 <UART_Start_Receive_IT+0xdc>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d103      	bne.n	8009824 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	4a0c      	ldr	r2, [pc, #48]	; (8009850 <UART_Start_Receive_IT+0x108>)
 8009820:	665a      	str	r2, [r3, #100]	; 0x64
 8009822:	e002      	b.n	800982a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4a0b      	ldr	r2, [pc, #44]	; (8009854 <UART_Start_Receive_IT+0x10c>)
 8009828:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009840:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	08009add 	.word	0x08009add
 8009854:	08009a05 	.word	0x08009a05

08009858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800986e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689a      	ldr	r2, [r3, #8]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f022 0201 	bic.w	r2, r2, #1
 800987e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009884:	2b01      	cmp	r3, #1
 8009886:	d107      	bne.n	8009898 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f022 0210 	bic.w	r2, r2, #16
 8009896:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2220      	movs	r2, #32
 800989c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80098aa:	bf00      	nop
 80098ac:	370c      	adds	r7, #12
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b084      	sub	sp, #16
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f7ff fb2f 	bl	8008f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098da:	bf00      	nop
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b083      	sub	sp, #12
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098ee:	2b21      	cmp	r3, #33	; 0x21
 80098f0:	d12b      	bne.n	800994a <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d110      	bne.n	8009920 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800990c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800991c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800991e:	e014      	b.n	800994a <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009924:	781a      	ldrb	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	b292      	uxth	r2, r2
 800992c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009932:	1c5a      	adds	r2, r3, #1
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800993e:	b29b      	uxth	r3, r3
 8009940:	3b01      	subs	r3, #1
 8009942:	b29a      	uxth	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800994a:	bf00      	nop
 800994c:	370c      	adds	r7, #12
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009956:	b480      	push	{r7}
 8009958:	b085      	sub	sp, #20
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009962:	2b21      	cmp	r3, #33	; 0x21
 8009964:	d12f      	bne.n	80099c6 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800996c:	b29b      	uxth	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d110      	bne.n	8009994 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009980:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009990:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009992:	e018      	b.n	80099c6 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009998:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	881a      	ldrh	r2, [r3, #0]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099a6:	b292      	uxth	r2, r2
 80099a8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ae:	1c9a      	adds	r2, r3, #2
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	3b01      	subs	r3, #1
 80099be:	b29a      	uxth	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80099c6:	bf00      	nop
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b082      	sub	sp, #8
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099e8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2220      	movs	r2, #32
 80099ee:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7ff fa94 	bl	8008f24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099fc:	bf00      	nop
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a12:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a18:	2b22      	cmp	r3, #34	; 0x22
 8009a1a:	d151      	bne.n	8009ac0 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009a22:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009a24:	89bb      	ldrh	r3, [r7, #12]
 8009a26:	b2d9      	uxtb	r1, r3
 8009a28:	89fb      	ldrh	r3, [r7, #14]
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a30:	400a      	ands	r2, r1
 8009a32:	b2d2      	uxtb	r2, r2
 8009a34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a3a:	1c5a      	adds	r2, r3, #1
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d13a      	bne.n	8009ad4 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009a6c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	689a      	ldr	r2, [r3, #8]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f022 0201 	bic.w	r2, r2, #1
 8009a7c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2220      	movs	r2, #32
 8009a82:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d10f      	bne.n	8009ab2 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f022 0210 	bic.w	r2, r2, #16
 8009aa0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f7ff fa4e 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
 8009ab0:	e002      	b.n	8009ab8 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7f7 fcd0 	bl	8001458 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009abe:	e009      	b.n	8009ad4 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	8b1b      	ldrh	r3, [r3, #24]
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f042 0208 	orr.w	r2, r2, #8
 8009ad0:	b292      	uxth	r2, r2
 8009ad2:	831a      	strh	r2, [r3, #24]
}
 8009ad4:	bf00      	nop
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009aea:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009af0:	2b22      	cmp	r3, #34	; 0x22
 8009af2:	d151      	bne.n	8009b98 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009afa:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b00:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009b02:	89ba      	ldrh	r2, [r7, #12]
 8009b04:	89fb      	ldrh	r3, [r7, #14]
 8009b06:	4013      	ands	r3, r2
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b12:	1c9a      	adds	r2, r3, #2
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	3b01      	subs	r3, #1
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d13a      	bne.n	8009bac <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009b44:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689a      	ldr	r2, [r3, #8]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f022 0201 	bic.w	r2, r2, #1
 8009b54:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2220      	movs	r2, #32
 8009b5a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d10f      	bne.n	8009b8a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 0210 	bic.w	r2, r2, #16
 8009b78:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7ff f9e2 	bl	8008f4c <HAL_UARTEx_RxEventCallback>
 8009b88:	e002      	b.n	8009b90 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7f7 fc64 	bl	8001458 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b96:	e009      	b.n	8009bac <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	8b1b      	ldrh	r3, [r3, #24]
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f042 0208 	orr.w	r2, r2, #8
 8009ba8:	b292      	uxth	r2, r2
 8009baa:	831a      	strh	r2, [r3, #24]
}
 8009bac:	bf00      	nop
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009bc8:	b084      	sub	sp, #16
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b084      	sub	sp, #16
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
 8009bd2:	f107 001c 	add.w	r0, r7, #28
 8009bd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 fa24 	bl	800a034 <USB_CoreReset>
 8009bec:	4603      	mov	r3, r0
 8009bee:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d106      	bne.n	8009c04 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	639a      	str	r2, [r3, #56]	; 0x38
 8009c02:	e005      	b.n	8009c10 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c1c:	b004      	add	sp, #16
 8009c1e:	4770      	bx	lr

08009c20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f023 0201 	bic.w	r2, r3, #1
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009c5a:	78fb      	ldrb	r3, [r7, #3]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d106      	bne.n	8009c6e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	60da      	str	r2, [r3, #12]
 8009c6c:	e00b      	b.n	8009c86 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009c6e:	78fb      	ldrb	r3, [r7, #3]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d106      	bne.n	8009c82 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	60da      	str	r2, [r3, #12]
 8009c80:	e001      	b.n	8009c86 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	e003      	b.n	8009c8e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009c86:	2032      	movs	r0, #50	; 0x32
 8009c88:	f7fa fa9a 	bl	80041c0 <HAL_Delay>

  return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
	...

08009c98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c98:	b084      	sub	sp, #16
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b086      	sub	sp, #24
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
 8009ca2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009caa:	2300      	movs	r3, #0
 8009cac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	613b      	str	r3, [r7, #16]
 8009cb6:	e009      	b.n	8009ccc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	3340      	adds	r3, #64	; 0x40
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	613b      	str	r3, [r7, #16]
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	2b0e      	cmp	r3, #14
 8009cd0:	d9f2      	bls.n	8009cb8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d11c      	bne.n	8009d12 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ce6:	f043 0302 	orr.w	r3, r3, #2
 8009cea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	e005      	b.n	8009d1e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d24:	461a      	mov	r2, r3
 8009d26:	2300      	movs	r3, #0
 8009d28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d30:	4619      	mov	r1, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d38:	461a      	mov	r2, r3
 8009d3a:	680b      	ldr	r3, [r1, #0]
 8009d3c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009d3e:	2103      	movs	r1, #3
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 f93d 	bl	8009fc0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009d46:	2110      	movs	r1, #16
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f8f1 	bl	8009f30 <USB_FlushTxFifo>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d001      	beq.n	8009d58 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 f90f 	bl	8009f7c <USB_FlushRxFifo>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d6e:	461a      	mov	r2, r3
 8009d70:	2300      	movs	r3, #0
 8009d72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d86:	461a      	mov	r2, r3
 8009d88:	2300      	movs	r3, #0
 8009d8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	613b      	str	r3, [r7, #16]
 8009d90:	e043      	b.n	8009e1a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	015a      	lsls	r2, r3, #5
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	4413      	add	r3, r2
 8009d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009da4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009da8:	d118      	bne.n	8009ddc <USB_DevInit+0x144>
    {
      if (i == 0U)
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10a      	bne.n	8009dc6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009dc2:	6013      	str	r3, [r2, #0]
 8009dc4:	e013      	b.n	8009dee <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	015a      	lsls	r2, r3, #5
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	4413      	add	r3, r2
 8009dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009dd8:	6013      	str	r3, [r2, #0]
 8009dda:	e008      	b.n	8009dee <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de8:	461a      	mov	r2, r3
 8009dea:	2300      	movs	r3, #0
 8009dec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	015a      	lsls	r2, r3, #5
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	4413      	add	r3, r2
 8009df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	015a      	lsls	r2, r3, #5
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	4413      	add	r3, r2
 8009e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009e12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	3301      	adds	r3, #1
 8009e18:	613b      	str	r3, [r7, #16]
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d3b7      	bcc.n	8009d92 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e22:	2300      	movs	r3, #0
 8009e24:	613b      	str	r3, [r7, #16]
 8009e26:	e043      	b.n	8009eb0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	015a      	lsls	r2, r3, #5
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	4413      	add	r3, r2
 8009e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e3e:	d118      	bne.n	8009e72 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10a      	bne.n	8009e5c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	015a      	lsls	r2, r3, #5
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e52:	461a      	mov	r2, r3
 8009e54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e58:	6013      	str	r3, [r2, #0]
 8009e5a:	e013      	b.n	8009e84 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	015a      	lsls	r2, r3, #5
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e68:	461a      	mov	r2, r3
 8009e6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	e008      	b.n	8009e84 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	015a      	lsls	r2, r3, #5
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	4413      	add	r3, r2
 8009e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e7e:	461a      	mov	r2, r3
 8009e80:	2300      	movs	r3, #0
 8009e82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	015a      	lsls	r2, r3, #5
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e90:	461a      	mov	r2, r3
 8009e92:	2300      	movs	r3, #0
 8009e94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	015a      	lsls	r2, r3, #5
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ea8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	3301      	adds	r3, #1
 8009eae:	613b      	str	r3, [r7, #16]
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	693a      	ldr	r2, [r7, #16]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d3b7      	bcc.n	8009e28 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ec6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009eca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009ed8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	f043 0210 	orr.w	r2, r3, #16
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	699a      	ldr	r2, [r3, #24]
 8009eea:	4b10      	ldr	r3, [pc, #64]	; (8009f2c <USB_DevInit+0x294>)
 8009eec:	4313      	orrs	r3, r2
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d005      	beq.n	8009f04 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	f043 0208 	orr.w	r2, r3, #8
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d107      	bne.n	8009f1a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f12:	f043 0304 	orr.w	r3, r3, #4
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f26:	b004      	add	sp, #16
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	803c3800 	.word	0x803c3800

08009f30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	019b      	lsls	r3, r3, #6
 8009f42:	f043 0220 	orr.w	r2, r3, #32
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	60fb      	str	r3, [r7, #12]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	4a09      	ldr	r2, [pc, #36]	; (8009f78 <USB_FlushTxFifo+0x48>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d901      	bls.n	8009f5c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	e006      	b.n	8009f6a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	f003 0320 	and.w	r3, r3, #32
 8009f64:	2b20      	cmp	r3, #32
 8009f66:	d0f0      	beq.n	8009f4a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009f68:	2300      	movs	r3, #0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	00030d40 	.word	0x00030d40

08009f7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b085      	sub	sp, #20
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2210      	movs	r2, #16
 8009f8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3301      	adds	r3, #1
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	4a09      	ldr	r2, [pc, #36]	; (8009fbc <USB_FlushRxFifo+0x40>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d901      	bls.n	8009fa0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	e006      	b.n	8009fae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	f003 0310 	and.w	r3, r3, #16
 8009fa8:	2b10      	cmp	r3, #16
 8009faa:	d0f0      	beq.n	8009f8e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3714      	adds	r7, #20
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	00030d40 	.word	0x00030d40

08009fc0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	78fb      	ldrb	r3, [r7, #3]
 8009fda:	68f9      	ldr	r1, [r7, #12]
 8009fdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b085      	sub	sp, #20
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a00c:	f023 0303 	bic.w	r3, r3, #3
 800a010:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a020:	f043 0302 	orr.w	r3, r3, #2
 800a024:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a03c:	2300      	movs	r3, #0
 800a03e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	3301      	adds	r3, #1
 800a044:	60fb      	str	r3, [r7, #12]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	4a13      	ldr	r2, [pc, #76]	; (800a098 <USB_CoreReset+0x64>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d901      	bls.n	800a052 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	e01b      	b.n	800a08a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	2b00      	cmp	r3, #0
 800a058:	daf2      	bge.n	800a040 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a05a:	2300      	movs	r3, #0
 800a05c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	f043 0201 	orr.w	r2, r3, #1
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	3301      	adds	r3, #1
 800a06e:	60fb      	str	r3, [r7, #12]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4a09      	ldr	r2, [pc, #36]	; (800a098 <USB_CoreReset+0x64>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d901      	bls.n	800a07c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a078:	2303      	movs	r3, #3
 800a07a:	e006      	b.n	800a08a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	f003 0301 	and.w	r3, r3, #1
 800a084:	2b01      	cmp	r3, #1
 800a086:	d0f0      	beq.n	800a06a <USB_CoreReset+0x36>

  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	00030d40 	.word	0x00030d40

0800a09c <__errno>:
 800a09c:	4b01      	ldr	r3, [pc, #4]	; (800a0a4 <__errno+0x8>)
 800a09e:	6818      	ldr	r0, [r3, #0]
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	20000084 	.word	0x20000084

0800a0a8 <__libc_init_array>:
 800a0a8:	b570      	push	{r4, r5, r6, lr}
 800a0aa:	4d0d      	ldr	r5, [pc, #52]	; (800a0e0 <__libc_init_array+0x38>)
 800a0ac:	4c0d      	ldr	r4, [pc, #52]	; (800a0e4 <__libc_init_array+0x3c>)
 800a0ae:	1b64      	subs	r4, r4, r5
 800a0b0:	10a4      	asrs	r4, r4, #2
 800a0b2:	2600      	movs	r6, #0
 800a0b4:	42a6      	cmp	r6, r4
 800a0b6:	d109      	bne.n	800a0cc <__libc_init_array+0x24>
 800a0b8:	4d0b      	ldr	r5, [pc, #44]	; (800a0e8 <__libc_init_array+0x40>)
 800a0ba:	4c0c      	ldr	r4, [pc, #48]	; (800a0ec <__libc_init_array+0x44>)
 800a0bc:	f005 fdc2 	bl	800fc44 <_init>
 800a0c0:	1b64      	subs	r4, r4, r5
 800a0c2:	10a4      	asrs	r4, r4, #2
 800a0c4:	2600      	movs	r6, #0
 800a0c6:	42a6      	cmp	r6, r4
 800a0c8:	d105      	bne.n	800a0d6 <__libc_init_array+0x2e>
 800a0ca:	bd70      	pop	{r4, r5, r6, pc}
 800a0cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0d0:	4798      	blx	r3
 800a0d2:	3601      	adds	r6, #1
 800a0d4:	e7ee      	b.n	800a0b4 <__libc_init_array+0xc>
 800a0d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0da:	4798      	blx	r3
 800a0dc:	3601      	adds	r6, #1
 800a0de:	e7f2      	b.n	800a0c6 <__libc_init_array+0x1e>
 800a0e0:	08010220 	.word	0x08010220
 800a0e4:	08010220 	.word	0x08010220
 800a0e8:	08010220 	.word	0x08010220
 800a0ec:	08010224 	.word	0x08010224

0800a0f0 <memset>:
 800a0f0:	4402      	add	r2, r0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d100      	bne.n	800a0fa <memset+0xa>
 800a0f8:	4770      	bx	lr
 800a0fa:	f803 1b01 	strb.w	r1, [r3], #1
 800a0fe:	e7f9      	b.n	800a0f4 <memset+0x4>

0800a100 <__cvt>:
 800a100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a104:	ec55 4b10 	vmov	r4, r5, d0
 800a108:	2d00      	cmp	r5, #0
 800a10a:	460e      	mov	r6, r1
 800a10c:	4619      	mov	r1, r3
 800a10e:	462b      	mov	r3, r5
 800a110:	bfbb      	ittet	lt
 800a112:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a116:	461d      	movlt	r5, r3
 800a118:	2300      	movge	r3, #0
 800a11a:	232d      	movlt	r3, #45	; 0x2d
 800a11c:	700b      	strb	r3, [r1, #0]
 800a11e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a120:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a124:	4691      	mov	r9, r2
 800a126:	f023 0820 	bic.w	r8, r3, #32
 800a12a:	bfbc      	itt	lt
 800a12c:	4622      	movlt	r2, r4
 800a12e:	4614      	movlt	r4, r2
 800a130:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a134:	d005      	beq.n	800a142 <__cvt+0x42>
 800a136:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a13a:	d100      	bne.n	800a13e <__cvt+0x3e>
 800a13c:	3601      	adds	r6, #1
 800a13e:	2102      	movs	r1, #2
 800a140:	e000      	b.n	800a144 <__cvt+0x44>
 800a142:	2103      	movs	r1, #3
 800a144:	ab03      	add	r3, sp, #12
 800a146:	9301      	str	r3, [sp, #4]
 800a148:	ab02      	add	r3, sp, #8
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	ec45 4b10 	vmov	d0, r4, r5
 800a150:	4653      	mov	r3, sl
 800a152:	4632      	mov	r2, r6
 800a154:	f001 fdb4 	bl	800bcc0 <_dtoa_r>
 800a158:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a15c:	4607      	mov	r7, r0
 800a15e:	d102      	bne.n	800a166 <__cvt+0x66>
 800a160:	f019 0f01 	tst.w	r9, #1
 800a164:	d022      	beq.n	800a1ac <__cvt+0xac>
 800a166:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a16a:	eb07 0906 	add.w	r9, r7, r6
 800a16e:	d110      	bne.n	800a192 <__cvt+0x92>
 800a170:	783b      	ldrb	r3, [r7, #0]
 800a172:	2b30      	cmp	r3, #48	; 0x30
 800a174:	d10a      	bne.n	800a18c <__cvt+0x8c>
 800a176:	2200      	movs	r2, #0
 800a178:	2300      	movs	r3, #0
 800a17a:	4620      	mov	r0, r4
 800a17c:	4629      	mov	r1, r5
 800a17e:	f7f6 fca3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a182:	b918      	cbnz	r0, 800a18c <__cvt+0x8c>
 800a184:	f1c6 0601 	rsb	r6, r6, #1
 800a188:	f8ca 6000 	str.w	r6, [sl]
 800a18c:	f8da 3000 	ldr.w	r3, [sl]
 800a190:	4499      	add	r9, r3
 800a192:	2200      	movs	r2, #0
 800a194:	2300      	movs	r3, #0
 800a196:	4620      	mov	r0, r4
 800a198:	4629      	mov	r1, r5
 800a19a:	f7f6 fc95 	bl	8000ac8 <__aeabi_dcmpeq>
 800a19e:	b108      	cbz	r0, 800a1a4 <__cvt+0xa4>
 800a1a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1a4:	2230      	movs	r2, #48	; 0x30
 800a1a6:	9b03      	ldr	r3, [sp, #12]
 800a1a8:	454b      	cmp	r3, r9
 800a1aa:	d307      	bcc.n	800a1bc <__cvt+0xbc>
 800a1ac:	9b03      	ldr	r3, [sp, #12]
 800a1ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1b0:	1bdb      	subs	r3, r3, r7
 800a1b2:	4638      	mov	r0, r7
 800a1b4:	6013      	str	r3, [r2, #0]
 800a1b6:	b004      	add	sp, #16
 800a1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1bc:	1c59      	adds	r1, r3, #1
 800a1be:	9103      	str	r1, [sp, #12]
 800a1c0:	701a      	strb	r2, [r3, #0]
 800a1c2:	e7f0      	b.n	800a1a6 <__cvt+0xa6>

0800a1c4 <__exponent>:
 800a1c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2900      	cmp	r1, #0
 800a1ca:	bfb8      	it	lt
 800a1cc:	4249      	neglt	r1, r1
 800a1ce:	f803 2b02 	strb.w	r2, [r3], #2
 800a1d2:	bfb4      	ite	lt
 800a1d4:	222d      	movlt	r2, #45	; 0x2d
 800a1d6:	222b      	movge	r2, #43	; 0x2b
 800a1d8:	2909      	cmp	r1, #9
 800a1da:	7042      	strb	r2, [r0, #1]
 800a1dc:	dd2a      	ble.n	800a234 <__exponent+0x70>
 800a1de:	f10d 0407 	add.w	r4, sp, #7
 800a1e2:	46a4      	mov	ip, r4
 800a1e4:	270a      	movs	r7, #10
 800a1e6:	46a6      	mov	lr, r4
 800a1e8:	460a      	mov	r2, r1
 800a1ea:	fb91 f6f7 	sdiv	r6, r1, r7
 800a1ee:	fb07 1516 	mls	r5, r7, r6, r1
 800a1f2:	3530      	adds	r5, #48	; 0x30
 800a1f4:	2a63      	cmp	r2, #99	; 0x63
 800a1f6:	f104 34ff 	add.w	r4, r4, #4294967295
 800a1fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a1fe:	4631      	mov	r1, r6
 800a200:	dcf1      	bgt.n	800a1e6 <__exponent+0x22>
 800a202:	3130      	adds	r1, #48	; 0x30
 800a204:	f1ae 0502 	sub.w	r5, lr, #2
 800a208:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a20c:	1c44      	adds	r4, r0, #1
 800a20e:	4629      	mov	r1, r5
 800a210:	4561      	cmp	r1, ip
 800a212:	d30a      	bcc.n	800a22a <__exponent+0x66>
 800a214:	f10d 0209 	add.w	r2, sp, #9
 800a218:	eba2 020e 	sub.w	r2, r2, lr
 800a21c:	4565      	cmp	r5, ip
 800a21e:	bf88      	it	hi
 800a220:	2200      	movhi	r2, #0
 800a222:	4413      	add	r3, r2
 800a224:	1a18      	subs	r0, r3, r0
 800a226:	b003      	add	sp, #12
 800a228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a22a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a22e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a232:	e7ed      	b.n	800a210 <__exponent+0x4c>
 800a234:	2330      	movs	r3, #48	; 0x30
 800a236:	3130      	adds	r1, #48	; 0x30
 800a238:	7083      	strb	r3, [r0, #2]
 800a23a:	70c1      	strb	r1, [r0, #3]
 800a23c:	1d03      	adds	r3, r0, #4
 800a23e:	e7f1      	b.n	800a224 <__exponent+0x60>

0800a240 <_printf_float>:
 800a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a244:	ed2d 8b02 	vpush	{d8}
 800a248:	b08d      	sub	sp, #52	; 0x34
 800a24a:	460c      	mov	r4, r1
 800a24c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a250:	4616      	mov	r6, r2
 800a252:	461f      	mov	r7, r3
 800a254:	4605      	mov	r5, r0
 800a256:	f002 fe8f 	bl	800cf78 <_localeconv_r>
 800a25a:	f8d0 a000 	ldr.w	sl, [r0]
 800a25e:	4650      	mov	r0, sl
 800a260:	f7f5 ffb6 	bl	80001d0 <strlen>
 800a264:	2300      	movs	r3, #0
 800a266:	930a      	str	r3, [sp, #40]	; 0x28
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	9305      	str	r3, [sp, #20]
 800a26c:	f8d8 3000 	ldr.w	r3, [r8]
 800a270:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a274:	3307      	adds	r3, #7
 800a276:	f023 0307 	bic.w	r3, r3, #7
 800a27a:	f103 0208 	add.w	r2, r3, #8
 800a27e:	f8c8 2000 	str.w	r2, [r8]
 800a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a286:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a28a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a28e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a292:	9307      	str	r3, [sp, #28]
 800a294:	f8cd 8018 	str.w	r8, [sp, #24]
 800a298:	ee08 0a10 	vmov	s16, r0
 800a29c:	4b9f      	ldr	r3, [pc, #636]	; (800a51c <_printf_float+0x2dc>)
 800a29e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a6:	f7f6 fc41 	bl	8000b2c <__aeabi_dcmpun>
 800a2aa:	bb88      	cbnz	r0, 800a310 <_printf_float+0xd0>
 800a2ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2b0:	4b9a      	ldr	r3, [pc, #616]	; (800a51c <_printf_float+0x2dc>)
 800a2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b6:	f7f6 fc1b 	bl	8000af0 <__aeabi_dcmple>
 800a2ba:	bb48      	cbnz	r0, 800a310 <_printf_float+0xd0>
 800a2bc:	2200      	movs	r2, #0
 800a2be:	2300      	movs	r3, #0
 800a2c0:	4640      	mov	r0, r8
 800a2c2:	4649      	mov	r1, r9
 800a2c4:	f7f6 fc0a 	bl	8000adc <__aeabi_dcmplt>
 800a2c8:	b110      	cbz	r0, 800a2d0 <_printf_float+0x90>
 800a2ca:	232d      	movs	r3, #45	; 0x2d
 800a2cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2d0:	4b93      	ldr	r3, [pc, #588]	; (800a520 <_printf_float+0x2e0>)
 800a2d2:	4894      	ldr	r0, [pc, #592]	; (800a524 <_printf_float+0x2e4>)
 800a2d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a2d8:	bf94      	ite	ls
 800a2da:	4698      	movls	r8, r3
 800a2dc:	4680      	movhi	r8, r0
 800a2de:	2303      	movs	r3, #3
 800a2e0:	6123      	str	r3, [r4, #16]
 800a2e2:	9b05      	ldr	r3, [sp, #20]
 800a2e4:	f023 0204 	bic.w	r2, r3, #4
 800a2e8:	6022      	str	r2, [r4, #0]
 800a2ea:	f04f 0900 	mov.w	r9, #0
 800a2ee:	9700      	str	r7, [sp, #0]
 800a2f0:	4633      	mov	r3, r6
 800a2f2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	f000 f9d8 	bl	800a6ac <_printf_common>
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	f040 8090 	bne.w	800a422 <_printf_float+0x1e2>
 800a302:	f04f 30ff 	mov.w	r0, #4294967295
 800a306:	b00d      	add	sp, #52	; 0x34
 800a308:	ecbd 8b02 	vpop	{d8}
 800a30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a310:	4642      	mov	r2, r8
 800a312:	464b      	mov	r3, r9
 800a314:	4640      	mov	r0, r8
 800a316:	4649      	mov	r1, r9
 800a318:	f7f6 fc08 	bl	8000b2c <__aeabi_dcmpun>
 800a31c:	b140      	cbz	r0, 800a330 <_printf_float+0xf0>
 800a31e:	464b      	mov	r3, r9
 800a320:	2b00      	cmp	r3, #0
 800a322:	bfbc      	itt	lt
 800a324:	232d      	movlt	r3, #45	; 0x2d
 800a326:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a32a:	487f      	ldr	r0, [pc, #508]	; (800a528 <_printf_float+0x2e8>)
 800a32c:	4b7f      	ldr	r3, [pc, #508]	; (800a52c <_printf_float+0x2ec>)
 800a32e:	e7d1      	b.n	800a2d4 <_printf_float+0x94>
 800a330:	6863      	ldr	r3, [r4, #4]
 800a332:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a336:	9206      	str	r2, [sp, #24]
 800a338:	1c5a      	adds	r2, r3, #1
 800a33a:	d13f      	bne.n	800a3bc <_printf_float+0x17c>
 800a33c:	2306      	movs	r3, #6
 800a33e:	6063      	str	r3, [r4, #4]
 800a340:	9b05      	ldr	r3, [sp, #20]
 800a342:	6861      	ldr	r1, [r4, #4]
 800a344:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a348:	2300      	movs	r3, #0
 800a34a:	9303      	str	r3, [sp, #12]
 800a34c:	ab0a      	add	r3, sp, #40	; 0x28
 800a34e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a352:	ab09      	add	r3, sp, #36	; 0x24
 800a354:	ec49 8b10 	vmov	d0, r8, r9
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	6022      	str	r2, [r4, #0]
 800a35c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a360:	4628      	mov	r0, r5
 800a362:	f7ff fecd 	bl	800a100 <__cvt>
 800a366:	9b06      	ldr	r3, [sp, #24]
 800a368:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a36a:	2b47      	cmp	r3, #71	; 0x47
 800a36c:	4680      	mov	r8, r0
 800a36e:	d108      	bne.n	800a382 <_printf_float+0x142>
 800a370:	1cc8      	adds	r0, r1, #3
 800a372:	db02      	blt.n	800a37a <_printf_float+0x13a>
 800a374:	6863      	ldr	r3, [r4, #4]
 800a376:	4299      	cmp	r1, r3
 800a378:	dd41      	ble.n	800a3fe <_printf_float+0x1be>
 800a37a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a37e:	fa5f fb8b 	uxtb.w	fp, fp
 800a382:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a386:	d820      	bhi.n	800a3ca <_printf_float+0x18a>
 800a388:	3901      	subs	r1, #1
 800a38a:	465a      	mov	r2, fp
 800a38c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a390:	9109      	str	r1, [sp, #36]	; 0x24
 800a392:	f7ff ff17 	bl	800a1c4 <__exponent>
 800a396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a398:	1813      	adds	r3, r2, r0
 800a39a:	2a01      	cmp	r2, #1
 800a39c:	4681      	mov	r9, r0
 800a39e:	6123      	str	r3, [r4, #16]
 800a3a0:	dc02      	bgt.n	800a3a8 <_printf_float+0x168>
 800a3a2:	6822      	ldr	r2, [r4, #0]
 800a3a4:	07d2      	lsls	r2, r2, #31
 800a3a6:	d501      	bpl.n	800a3ac <_printf_float+0x16c>
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	6123      	str	r3, [r4, #16]
 800a3ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d09c      	beq.n	800a2ee <_printf_float+0xae>
 800a3b4:	232d      	movs	r3, #45	; 0x2d
 800a3b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3ba:	e798      	b.n	800a2ee <_printf_float+0xae>
 800a3bc:	9a06      	ldr	r2, [sp, #24]
 800a3be:	2a47      	cmp	r2, #71	; 0x47
 800a3c0:	d1be      	bne.n	800a340 <_printf_float+0x100>
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1bc      	bne.n	800a340 <_printf_float+0x100>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e7b9      	b.n	800a33e <_printf_float+0xfe>
 800a3ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a3ce:	d118      	bne.n	800a402 <_printf_float+0x1c2>
 800a3d0:	2900      	cmp	r1, #0
 800a3d2:	6863      	ldr	r3, [r4, #4]
 800a3d4:	dd0b      	ble.n	800a3ee <_printf_float+0x1ae>
 800a3d6:	6121      	str	r1, [r4, #16]
 800a3d8:	b913      	cbnz	r3, 800a3e0 <_printf_float+0x1a0>
 800a3da:	6822      	ldr	r2, [r4, #0]
 800a3dc:	07d0      	lsls	r0, r2, #31
 800a3de:	d502      	bpl.n	800a3e6 <_printf_float+0x1a6>
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	440b      	add	r3, r1
 800a3e4:	6123      	str	r3, [r4, #16]
 800a3e6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a3e8:	f04f 0900 	mov.w	r9, #0
 800a3ec:	e7de      	b.n	800a3ac <_printf_float+0x16c>
 800a3ee:	b913      	cbnz	r3, 800a3f6 <_printf_float+0x1b6>
 800a3f0:	6822      	ldr	r2, [r4, #0]
 800a3f2:	07d2      	lsls	r2, r2, #31
 800a3f4:	d501      	bpl.n	800a3fa <_printf_float+0x1ba>
 800a3f6:	3302      	adds	r3, #2
 800a3f8:	e7f4      	b.n	800a3e4 <_printf_float+0x1a4>
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e7f2      	b.n	800a3e4 <_printf_float+0x1a4>
 800a3fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a404:	4299      	cmp	r1, r3
 800a406:	db05      	blt.n	800a414 <_printf_float+0x1d4>
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	6121      	str	r1, [r4, #16]
 800a40c:	07d8      	lsls	r0, r3, #31
 800a40e:	d5ea      	bpl.n	800a3e6 <_printf_float+0x1a6>
 800a410:	1c4b      	adds	r3, r1, #1
 800a412:	e7e7      	b.n	800a3e4 <_printf_float+0x1a4>
 800a414:	2900      	cmp	r1, #0
 800a416:	bfd4      	ite	le
 800a418:	f1c1 0202 	rsble	r2, r1, #2
 800a41c:	2201      	movgt	r2, #1
 800a41e:	4413      	add	r3, r2
 800a420:	e7e0      	b.n	800a3e4 <_printf_float+0x1a4>
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	055a      	lsls	r2, r3, #21
 800a426:	d407      	bmi.n	800a438 <_printf_float+0x1f8>
 800a428:	6923      	ldr	r3, [r4, #16]
 800a42a:	4642      	mov	r2, r8
 800a42c:	4631      	mov	r1, r6
 800a42e:	4628      	mov	r0, r5
 800a430:	47b8      	blx	r7
 800a432:	3001      	adds	r0, #1
 800a434:	d12c      	bne.n	800a490 <_printf_float+0x250>
 800a436:	e764      	b.n	800a302 <_printf_float+0xc2>
 800a438:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a43c:	f240 80e0 	bls.w	800a600 <_printf_float+0x3c0>
 800a440:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a444:	2200      	movs	r2, #0
 800a446:	2300      	movs	r3, #0
 800a448:	f7f6 fb3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d034      	beq.n	800a4ba <_printf_float+0x27a>
 800a450:	4a37      	ldr	r2, [pc, #220]	; (800a530 <_printf_float+0x2f0>)
 800a452:	2301      	movs	r3, #1
 800a454:	4631      	mov	r1, r6
 800a456:	4628      	mov	r0, r5
 800a458:	47b8      	blx	r7
 800a45a:	3001      	adds	r0, #1
 800a45c:	f43f af51 	beq.w	800a302 <_printf_float+0xc2>
 800a460:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a464:	429a      	cmp	r2, r3
 800a466:	db02      	blt.n	800a46e <_printf_float+0x22e>
 800a468:	6823      	ldr	r3, [r4, #0]
 800a46a:	07d8      	lsls	r0, r3, #31
 800a46c:	d510      	bpl.n	800a490 <_printf_float+0x250>
 800a46e:	ee18 3a10 	vmov	r3, s16
 800a472:	4652      	mov	r2, sl
 800a474:	4631      	mov	r1, r6
 800a476:	4628      	mov	r0, r5
 800a478:	47b8      	blx	r7
 800a47a:	3001      	adds	r0, #1
 800a47c:	f43f af41 	beq.w	800a302 <_printf_float+0xc2>
 800a480:	f04f 0800 	mov.w	r8, #0
 800a484:	f104 091a 	add.w	r9, r4, #26
 800a488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a48a:	3b01      	subs	r3, #1
 800a48c:	4543      	cmp	r3, r8
 800a48e:	dc09      	bgt.n	800a4a4 <_printf_float+0x264>
 800a490:	6823      	ldr	r3, [r4, #0]
 800a492:	079b      	lsls	r3, r3, #30
 800a494:	f100 8105 	bmi.w	800a6a2 <_printf_float+0x462>
 800a498:	68e0      	ldr	r0, [r4, #12]
 800a49a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a49c:	4298      	cmp	r0, r3
 800a49e:	bfb8      	it	lt
 800a4a0:	4618      	movlt	r0, r3
 800a4a2:	e730      	b.n	800a306 <_printf_float+0xc6>
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	464a      	mov	r2, r9
 800a4a8:	4631      	mov	r1, r6
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	47b8      	blx	r7
 800a4ae:	3001      	adds	r0, #1
 800a4b0:	f43f af27 	beq.w	800a302 <_printf_float+0xc2>
 800a4b4:	f108 0801 	add.w	r8, r8, #1
 800a4b8:	e7e6      	b.n	800a488 <_printf_float+0x248>
 800a4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	dc39      	bgt.n	800a534 <_printf_float+0x2f4>
 800a4c0:	4a1b      	ldr	r2, [pc, #108]	; (800a530 <_printf_float+0x2f0>)
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	4631      	mov	r1, r6
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	47b8      	blx	r7
 800a4ca:	3001      	adds	r0, #1
 800a4cc:	f43f af19 	beq.w	800a302 <_printf_float+0xc2>
 800a4d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	d102      	bne.n	800a4de <_printf_float+0x29e>
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	07d9      	lsls	r1, r3, #31
 800a4dc:	d5d8      	bpl.n	800a490 <_printf_float+0x250>
 800a4de:	ee18 3a10 	vmov	r3, s16
 800a4e2:	4652      	mov	r2, sl
 800a4e4:	4631      	mov	r1, r6
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	47b8      	blx	r7
 800a4ea:	3001      	adds	r0, #1
 800a4ec:	f43f af09 	beq.w	800a302 <_printf_float+0xc2>
 800a4f0:	f04f 0900 	mov.w	r9, #0
 800a4f4:	f104 0a1a 	add.w	sl, r4, #26
 800a4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4fa:	425b      	negs	r3, r3
 800a4fc:	454b      	cmp	r3, r9
 800a4fe:	dc01      	bgt.n	800a504 <_printf_float+0x2c4>
 800a500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a502:	e792      	b.n	800a42a <_printf_float+0x1ea>
 800a504:	2301      	movs	r3, #1
 800a506:	4652      	mov	r2, sl
 800a508:	4631      	mov	r1, r6
 800a50a:	4628      	mov	r0, r5
 800a50c:	47b8      	blx	r7
 800a50e:	3001      	adds	r0, #1
 800a510:	f43f aef7 	beq.w	800a302 <_printf_float+0xc2>
 800a514:	f109 0901 	add.w	r9, r9, #1
 800a518:	e7ee      	b.n	800a4f8 <_printf_float+0x2b8>
 800a51a:	bf00      	nop
 800a51c:	7fefffff 	.word	0x7fefffff
 800a520:	0800fce4 	.word	0x0800fce4
 800a524:	0800fce8 	.word	0x0800fce8
 800a528:	0800fcf0 	.word	0x0800fcf0
 800a52c:	0800fcec 	.word	0x0800fcec
 800a530:	0800fcf4 	.word	0x0800fcf4
 800a534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a536:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a538:	429a      	cmp	r2, r3
 800a53a:	bfa8      	it	ge
 800a53c:	461a      	movge	r2, r3
 800a53e:	2a00      	cmp	r2, #0
 800a540:	4691      	mov	r9, r2
 800a542:	dc37      	bgt.n	800a5b4 <_printf_float+0x374>
 800a544:	f04f 0b00 	mov.w	fp, #0
 800a548:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a54c:	f104 021a 	add.w	r2, r4, #26
 800a550:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a552:	9305      	str	r3, [sp, #20]
 800a554:	eba3 0309 	sub.w	r3, r3, r9
 800a558:	455b      	cmp	r3, fp
 800a55a:	dc33      	bgt.n	800a5c4 <_printf_float+0x384>
 800a55c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a560:	429a      	cmp	r2, r3
 800a562:	db3b      	blt.n	800a5dc <_printf_float+0x39c>
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	07da      	lsls	r2, r3, #31
 800a568:	d438      	bmi.n	800a5dc <_printf_float+0x39c>
 800a56a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a56c:	9b05      	ldr	r3, [sp, #20]
 800a56e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	eba2 0901 	sub.w	r9, r2, r1
 800a576:	4599      	cmp	r9, r3
 800a578:	bfa8      	it	ge
 800a57a:	4699      	movge	r9, r3
 800a57c:	f1b9 0f00 	cmp.w	r9, #0
 800a580:	dc35      	bgt.n	800a5ee <_printf_float+0x3ae>
 800a582:	f04f 0800 	mov.w	r8, #0
 800a586:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a58a:	f104 0a1a 	add.w	sl, r4, #26
 800a58e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a592:	1a9b      	subs	r3, r3, r2
 800a594:	eba3 0309 	sub.w	r3, r3, r9
 800a598:	4543      	cmp	r3, r8
 800a59a:	f77f af79 	ble.w	800a490 <_printf_float+0x250>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	4652      	mov	r2, sl
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	47b8      	blx	r7
 800a5a8:	3001      	adds	r0, #1
 800a5aa:	f43f aeaa 	beq.w	800a302 <_printf_float+0xc2>
 800a5ae:	f108 0801 	add.w	r8, r8, #1
 800a5b2:	e7ec      	b.n	800a58e <_printf_float+0x34e>
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	4642      	mov	r2, r8
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	47b8      	blx	r7
 800a5be:	3001      	adds	r0, #1
 800a5c0:	d1c0      	bne.n	800a544 <_printf_float+0x304>
 800a5c2:	e69e      	b.n	800a302 <_printf_float+0xc2>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	4631      	mov	r1, r6
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	9205      	str	r2, [sp, #20]
 800a5cc:	47b8      	blx	r7
 800a5ce:	3001      	adds	r0, #1
 800a5d0:	f43f ae97 	beq.w	800a302 <_printf_float+0xc2>
 800a5d4:	9a05      	ldr	r2, [sp, #20]
 800a5d6:	f10b 0b01 	add.w	fp, fp, #1
 800a5da:	e7b9      	b.n	800a550 <_printf_float+0x310>
 800a5dc:	ee18 3a10 	vmov	r3, s16
 800a5e0:	4652      	mov	r2, sl
 800a5e2:	4631      	mov	r1, r6
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	47b8      	blx	r7
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	d1be      	bne.n	800a56a <_printf_float+0x32a>
 800a5ec:	e689      	b.n	800a302 <_printf_float+0xc2>
 800a5ee:	9a05      	ldr	r2, [sp, #20]
 800a5f0:	464b      	mov	r3, r9
 800a5f2:	4442      	add	r2, r8
 800a5f4:	4631      	mov	r1, r6
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	47b8      	blx	r7
 800a5fa:	3001      	adds	r0, #1
 800a5fc:	d1c1      	bne.n	800a582 <_printf_float+0x342>
 800a5fe:	e680      	b.n	800a302 <_printf_float+0xc2>
 800a600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a602:	2a01      	cmp	r2, #1
 800a604:	dc01      	bgt.n	800a60a <_printf_float+0x3ca>
 800a606:	07db      	lsls	r3, r3, #31
 800a608:	d538      	bpl.n	800a67c <_printf_float+0x43c>
 800a60a:	2301      	movs	r3, #1
 800a60c:	4642      	mov	r2, r8
 800a60e:	4631      	mov	r1, r6
 800a610:	4628      	mov	r0, r5
 800a612:	47b8      	blx	r7
 800a614:	3001      	adds	r0, #1
 800a616:	f43f ae74 	beq.w	800a302 <_printf_float+0xc2>
 800a61a:	ee18 3a10 	vmov	r3, s16
 800a61e:	4652      	mov	r2, sl
 800a620:	4631      	mov	r1, r6
 800a622:	4628      	mov	r0, r5
 800a624:	47b8      	blx	r7
 800a626:	3001      	adds	r0, #1
 800a628:	f43f ae6b 	beq.w	800a302 <_printf_float+0xc2>
 800a62c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a630:	2200      	movs	r2, #0
 800a632:	2300      	movs	r3, #0
 800a634:	f7f6 fa48 	bl	8000ac8 <__aeabi_dcmpeq>
 800a638:	b9d8      	cbnz	r0, 800a672 <_printf_float+0x432>
 800a63a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a63c:	f108 0201 	add.w	r2, r8, #1
 800a640:	3b01      	subs	r3, #1
 800a642:	4631      	mov	r1, r6
 800a644:	4628      	mov	r0, r5
 800a646:	47b8      	blx	r7
 800a648:	3001      	adds	r0, #1
 800a64a:	d10e      	bne.n	800a66a <_printf_float+0x42a>
 800a64c:	e659      	b.n	800a302 <_printf_float+0xc2>
 800a64e:	2301      	movs	r3, #1
 800a650:	4652      	mov	r2, sl
 800a652:	4631      	mov	r1, r6
 800a654:	4628      	mov	r0, r5
 800a656:	47b8      	blx	r7
 800a658:	3001      	adds	r0, #1
 800a65a:	f43f ae52 	beq.w	800a302 <_printf_float+0xc2>
 800a65e:	f108 0801 	add.w	r8, r8, #1
 800a662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a664:	3b01      	subs	r3, #1
 800a666:	4543      	cmp	r3, r8
 800a668:	dcf1      	bgt.n	800a64e <_printf_float+0x40e>
 800a66a:	464b      	mov	r3, r9
 800a66c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a670:	e6dc      	b.n	800a42c <_printf_float+0x1ec>
 800a672:	f04f 0800 	mov.w	r8, #0
 800a676:	f104 0a1a 	add.w	sl, r4, #26
 800a67a:	e7f2      	b.n	800a662 <_printf_float+0x422>
 800a67c:	2301      	movs	r3, #1
 800a67e:	4642      	mov	r2, r8
 800a680:	e7df      	b.n	800a642 <_printf_float+0x402>
 800a682:	2301      	movs	r3, #1
 800a684:	464a      	mov	r2, r9
 800a686:	4631      	mov	r1, r6
 800a688:	4628      	mov	r0, r5
 800a68a:	47b8      	blx	r7
 800a68c:	3001      	adds	r0, #1
 800a68e:	f43f ae38 	beq.w	800a302 <_printf_float+0xc2>
 800a692:	f108 0801 	add.w	r8, r8, #1
 800a696:	68e3      	ldr	r3, [r4, #12]
 800a698:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a69a:	1a5b      	subs	r3, r3, r1
 800a69c:	4543      	cmp	r3, r8
 800a69e:	dcf0      	bgt.n	800a682 <_printf_float+0x442>
 800a6a0:	e6fa      	b.n	800a498 <_printf_float+0x258>
 800a6a2:	f04f 0800 	mov.w	r8, #0
 800a6a6:	f104 0919 	add.w	r9, r4, #25
 800a6aa:	e7f4      	b.n	800a696 <_printf_float+0x456>

0800a6ac <_printf_common>:
 800a6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b0:	4616      	mov	r6, r2
 800a6b2:	4699      	mov	r9, r3
 800a6b4:	688a      	ldr	r2, [r1, #8]
 800a6b6:	690b      	ldr	r3, [r1, #16]
 800a6b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	bfb8      	it	lt
 800a6c0:	4613      	movlt	r3, r2
 800a6c2:	6033      	str	r3, [r6, #0]
 800a6c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6c8:	4607      	mov	r7, r0
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	b10a      	cbz	r2, 800a6d2 <_printf_common+0x26>
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	6033      	str	r3, [r6, #0]
 800a6d2:	6823      	ldr	r3, [r4, #0]
 800a6d4:	0699      	lsls	r1, r3, #26
 800a6d6:	bf42      	ittt	mi
 800a6d8:	6833      	ldrmi	r3, [r6, #0]
 800a6da:	3302      	addmi	r3, #2
 800a6dc:	6033      	strmi	r3, [r6, #0]
 800a6de:	6825      	ldr	r5, [r4, #0]
 800a6e0:	f015 0506 	ands.w	r5, r5, #6
 800a6e4:	d106      	bne.n	800a6f4 <_printf_common+0x48>
 800a6e6:	f104 0a19 	add.w	sl, r4, #25
 800a6ea:	68e3      	ldr	r3, [r4, #12]
 800a6ec:	6832      	ldr	r2, [r6, #0]
 800a6ee:	1a9b      	subs	r3, r3, r2
 800a6f0:	42ab      	cmp	r3, r5
 800a6f2:	dc26      	bgt.n	800a742 <_printf_common+0x96>
 800a6f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6f8:	1e13      	subs	r3, r2, #0
 800a6fa:	6822      	ldr	r2, [r4, #0]
 800a6fc:	bf18      	it	ne
 800a6fe:	2301      	movne	r3, #1
 800a700:	0692      	lsls	r2, r2, #26
 800a702:	d42b      	bmi.n	800a75c <_printf_common+0xb0>
 800a704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a708:	4649      	mov	r1, r9
 800a70a:	4638      	mov	r0, r7
 800a70c:	47c0      	blx	r8
 800a70e:	3001      	adds	r0, #1
 800a710:	d01e      	beq.n	800a750 <_printf_common+0xa4>
 800a712:	6823      	ldr	r3, [r4, #0]
 800a714:	68e5      	ldr	r5, [r4, #12]
 800a716:	6832      	ldr	r2, [r6, #0]
 800a718:	f003 0306 	and.w	r3, r3, #6
 800a71c:	2b04      	cmp	r3, #4
 800a71e:	bf08      	it	eq
 800a720:	1aad      	subeq	r5, r5, r2
 800a722:	68a3      	ldr	r3, [r4, #8]
 800a724:	6922      	ldr	r2, [r4, #16]
 800a726:	bf0c      	ite	eq
 800a728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a72c:	2500      	movne	r5, #0
 800a72e:	4293      	cmp	r3, r2
 800a730:	bfc4      	itt	gt
 800a732:	1a9b      	subgt	r3, r3, r2
 800a734:	18ed      	addgt	r5, r5, r3
 800a736:	2600      	movs	r6, #0
 800a738:	341a      	adds	r4, #26
 800a73a:	42b5      	cmp	r5, r6
 800a73c:	d11a      	bne.n	800a774 <_printf_common+0xc8>
 800a73e:	2000      	movs	r0, #0
 800a740:	e008      	b.n	800a754 <_printf_common+0xa8>
 800a742:	2301      	movs	r3, #1
 800a744:	4652      	mov	r2, sl
 800a746:	4649      	mov	r1, r9
 800a748:	4638      	mov	r0, r7
 800a74a:	47c0      	blx	r8
 800a74c:	3001      	adds	r0, #1
 800a74e:	d103      	bne.n	800a758 <_printf_common+0xac>
 800a750:	f04f 30ff 	mov.w	r0, #4294967295
 800a754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a758:	3501      	adds	r5, #1
 800a75a:	e7c6      	b.n	800a6ea <_printf_common+0x3e>
 800a75c:	18e1      	adds	r1, r4, r3
 800a75e:	1c5a      	adds	r2, r3, #1
 800a760:	2030      	movs	r0, #48	; 0x30
 800a762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a766:	4422      	add	r2, r4
 800a768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a76c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a770:	3302      	adds	r3, #2
 800a772:	e7c7      	b.n	800a704 <_printf_common+0x58>
 800a774:	2301      	movs	r3, #1
 800a776:	4622      	mov	r2, r4
 800a778:	4649      	mov	r1, r9
 800a77a:	4638      	mov	r0, r7
 800a77c:	47c0      	blx	r8
 800a77e:	3001      	adds	r0, #1
 800a780:	d0e6      	beq.n	800a750 <_printf_common+0xa4>
 800a782:	3601      	adds	r6, #1
 800a784:	e7d9      	b.n	800a73a <_printf_common+0x8e>
	...

0800a788 <_printf_i>:
 800a788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a78c:	460c      	mov	r4, r1
 800a78e:	4691      	mov	r9, r2
 800a790:	7e27      	ldrb	r7, [r4, #24]
 800a792:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a794:	2f78      	cmp	r7, #120	; 0x78
 800a796:	4680      	mov	r8, r0
 800a798:	469a      	mov	sl, r3
 800a79a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a79e:	d807      	bhi.n	800a7b0 <_printf_i+0x28>
 800a7a0:	2f62      	cmp	r7, #98	; 0x62
 800a7a2:	d80a      	bhi.n	800a7ba <_printf_i+0x32>
 800a7a4:	2f00      	cmp	r7, #0
 800a7a6:	f000 80d8 	beq.w	800a95a <_printf_i+0x1d2>
 800a7aa:	2f58      	cmp	r7, #88	; 0x58
 800a7ac:	f000 80a3 	beq.w	800a8f6 <_printf_i+0x16e>
 800a7b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a7b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7b8:	e03a      	b.n	800a830 <_printf_i+0xa8>
 800a7ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7be:	2b15      	cmp	r3, #21
 800a7c0:	d8f6      	bhi.n	800a7b0 <_printf_i+0x28>
 800a7c2:	a001      	add	r0, pc, #4	; (adr r0, 800a7c8 <_printf_i+0x40>)
 800a7c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a7c8:	0800a821 	.word	0x0800a821
 800a7cc:	0800a835 	.word	0x0800a835
 800a7d0:	0800a7b1 	.word	0x0800a7b1
 800a7d4:	0800a7b1 	.word	0x0800a7b1
 800a7d8:	0800a7b1 	.word	0x0800a7b1
 800a7dc:	0800a7b1 	.word	0x0800a7b1
 800a7e0:	0800a835 	.word	0x0800a835
 800a7e4:	0800a7b1 	.word	0x0800a7b1
 800a7e8:	0800a7b1 	.word	0x0800a7b1
 800a7ec:	0800a7b1 	.word	0x0800a7b1
 800a7f0:	0800a7b1 	.word	0x0800a7b1
 800a7f4:	0800a941 	.word	0x0800a941
 800a7f8:	0800a865 	.word	0x0800a865
 800a7fc:	0800a923 	.word	0x0800a923
 800a800:	0800a7b1 	.word	0x0800a7b1
 800a804:	0800a7b1 	.word	0x0800a7b1
 800a808:	0800a963 	.word	0x0800a963
 800a80c:	0800a7b1 	.word	0x0800a7b1
 800a810:	0800a865 	.word	0x0800a865
 800a814:	0800a7b1 	.word	0x0800a7b1
 800a818:	0800a7b1 	.word	0x0800a7b1
 800a81c:	0800a92b 	.word	0x0800a92b
 800a820:	680b      	ldr	r3, [r1, #0]
 800a822:	1d1a      	adds	r2, r3, #4
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	600a      	str	r2, [r1, #0]
 800a828:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a82c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a830:	2301      	movs	r3, #1
 800a832:	e0a3      	b.n	800a97c <_printf_i+0x1f4>
 800a834:	6825      	ldr	r5, [r4, #0]
 800a836:	6808      	ldr	r0, [r1, #0]
 800a838:	062e      	lsls	r6, r5, #24
 800a83a:	f100 0304 	add.w	r3, r0, #4
 800a83e:	d50a      	bpl.n	800a856 <_printf_i+0xce>
 800a840:	6805      	ldr	r5, [r0, #0]
 800a842:	600b      	str	r3, [r1, #0]
 800a844:	2d00      	cmp	r5, #0
 800a846:	da03      	bge.n	800a850 <_printf_i+0xc8>
 800a848:	232d      	movs	r3, #45	; 0x2d
 800a84a:	426d      	negs	r5, r5
 800a84c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a850:	485e      	ldr	r0, [pc, #376]	; (800a9cc <_printf_i+0x244>)
 800a852:	230a      	movs	r3, #10
 800a854:	e019      	b.n	800a88a <_printf_i+0x102>
 800a856:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a85a:	6805      	ldr	r5, [r0, #0]
 800a85c:	600b      	str	r3, [r1, #0]
 800a85e:	bf18      	it	ne
 800a860:	b22d      	sxthne	r5, r5
 800a862:	e7ef      	b.n	800a844 <_printf_i+0xbc>
 800a864:	680b      	ldr	r3, [r1, #0]
 800a866:	6825      	ldr	r5, [r4, #0]
 800a868:	1d18      	adds	r0, r3, #4
 800a86a:	6008      	str	r0, [r1, #0]
 800a86c:	0628      	lsls	r0, r5, #24
 800a86e:	d501      	bpl.n	800a874 <_printf_i+0xec>
 800a870:	681d      	ldr	r5, [r3, #0]
 800a872:	e002      	b.n	800a87a <_printf_i+0xf2>
 800a874:	0669      	lsls	r1, r5, #25
 800a876:	d5fb      	bpl.n	800a870 <_printf_i+0xe8>
 800a878:	881d      	ldrh	r5, [r3, #0]
 800a87a:	4854      	ldr	r0, [pc, #336]	; (800a9cc <_printf_i+0x244>)
 800a87c:	2f6f      	cmp	r7, #111	; 0x6f
 800a87e:	bf0c      	ite	eq
 800a880:	2308      	moveq	r3, #8
 800a882:	230a      	movne	r3, #10
 800a884:	2100      	movs	r1, #0
 800a886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a88a:	6866      	ldr	r6, [r4, #4]
 800a88c:	60a6      	str	r6, [r4, #8]
 800a88e:	2e00      	cmp	r6, #0
 800a890:	bfa2      	ittt	ge
 800a892:	6821      	ldrge	r1, [r4, #0]
 800a894:	f021 0104 	bicge.w	r1, r1, #4
 800a898:	6021      	strge	r1, [r4, #0]
 800a89a:	b90d      	cbnz	r5, 800a8a0 <_printf_i+0x118>
 800a89c:	2e00      	cmp	r6, #0
 800a89e:	d04d      	beq.n	800a93c <_printf_i+0x1b4>
 800a8a0:	4616      	mov	r6, r2
 800a8a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8a6:	fb03 5711 	mls	r7, r3, r1, r5
 800a8aa:	5dc7      	ldrb	r7, [r0, r7]
 800a8ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8b0:	462f      	mov	r7, r5
 800a8b2:	42bb      	cmp	r3, r7
 800a8b4:	460d      	mov	r5, r1
 800a8b6:	d9f4      	bls.n	800a8a2 <_printf_i+0x11a>
 800a8b8:	2b08      	cmp	r3, #8
 800a8ba:	d10b      	bne.n	800a8d4 <_printf_i+0x14c>
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	07df      	lsls	r7, r3, #31
 800a8c0:	d508      	bpl.n	800a8d4 <_printf_i+0x14c>
 800a8c2:	6923      	ldr	r3, [r4, #16]
 800a8c4:	6861      	ldr	r1, [r4, #4]
 800a8c6:	4299      	cmp	r1, r3
 800a8c8:	bfde      	ittt	le
 800a8ca:	2330      	movle	r3, #48	; 0x30
 800a8cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8d4:	1b92      	subs	r2, r2, r6
 800a8d6:	6122      	str	r2, [r4, #16]
 800a8d8:	f8cd a000 	str.w	sl, [sp]
 800a8dc:	464b      	mov	r3, r9
 800a8de:	aa03      	add	r2, sp, #12
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	f7ff fee2 	bl	800a6ac <_printf_common>
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d14c      	bne.n	800a986 <_printf_i+0x1fe>
 800a8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f0:	b004      	add	sp, #16
 800a8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f6:	4835      	ldr	r0, [pc, #212]	; (800a9cc <_printf_i+0x244>)
 800a8f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	680e      	ldr	r6, [r1, #0]
 800a900:	061f      	lsls	r7, r3, #24
 800a902:	f856 5b04 	ldr.w	r5, [r6], #4
 800a906:	600e      	str	r6, [r1, #0]
 800a908:	d514      	bpl.n	800a934 <_printf_i+0x1ac>
 800a90a:	07d9      	lsls	r1, r3, #31
 800a90c:	bf44      	itt	mi
 800a90e:	f043 0320 	orrmi.w	r3, r3, #32
 800a912:	6023      	strmi	r3, [r4, #0]
 800a914:	b91d      	cbnz	r5, 800a91e <_printf_i+0x196>
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	f023 0320 	bic.w	r3, r3, #32
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	2310      	movs	r3, #16
 800a920:	e7b0      	b.n	800a884 <_printf_i+0xfc>
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	f043 0320 	orr.w	r3, r3, #32
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	2378      	movs	r3, #120	; 0x78
 800a92c:	4828      	ldr	r0, [pc, #160]	; (800a9d0 <_printf_i+0x248>)
 800a92e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a932:	e7e3      	b.n	800a8fc <_printf_i+0x174>
 800a934:	065e      	lsls	r6, r3, #25
 800a936:	bf48      	it	mi
 800a938:	b2ad      	uxthmi	r5, r5
 800a93a:	e7e6      	b.n	800a90a <_printf_i+0x182>
 800a93c:	4616      	mov	r6, r2
 800a93e:	e7bb      	b.n	800a8b8 <_printf_i+0x130>
 800a940:	680b      	ldr	r3, [r1, #0]
 800a942:	6826      	ldr	r6, [r4, #0]
 800a944:	6960      	ldr	r0, [r4, #20]
 800a946:	1d1d      	adds	r5, r3, #4
 800a948:	600d      	str	r5, [r1, #0]
 800a94a:	0635      	lsls	r5, r6, #24
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	d501      	bpl.n	800a954 <_printf_i+0x1cc>
 800a950:	6018      	str	r0, [r3, #0]
 800a952:	e002      	b.n	800a95a <_printf_i+0x1d2>
 800a954:	0671      	lsls	r1, r6, #25
 800a956:	d5fb      	bpl.n	800a950 <_printf_i+0x1c8>
 800a958:	8018      	strh	r0, [r3, #0]
 800a95a:	2300      	movs	r3, #0
 800a95c:	6123      	str	r3, [r4, #16]
 800a95e:	4616      	mov	r6, r2
 800a960:	e7ba      	b.n	800a8d8 <_printf_i+0x150>
 800a962:	680b      	ldr	r3, [r1, #0]
 800a964:	1d1a      	adds	r2, r3, #4
 800a966:	600a      	str	r2, [r1, #0]
 800a968:	681e      	ldr	r6, [r3, #0]
 800a96a:	6862      	ldr	r2, [r4, #4]
 800a96c:	2100      	movs	r1, #0
 800a96e:	4630      	mov	r0, r6
 800a970:	f7f5 fc36 	bl	80001e0 <memchr>
 800a974:	b108      	cbz	r0, 800a97a <_printf_i+0x1f2>
 800a976:	1b80      	subs	r0, r0, r6
 800a978:	6060      	str	r0, [r4, #4]
 800a97a:	6863      	ldr	r3, [r4, #4]
 800a97c:	6123      	str	r3, [r4, #16]
 800a97e:	2300      	movs	r3, #0
 800a980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a984:	e7a8      	b.n	800a8d8 <_printf_i+0x150>
 800a986:	6923      	ldr	r3, [r4, #16]
 800a988:	4632      	mov	r2, r6
 800a98a:	4649      	mov	r1, r9
 800a98c:	4640      	mov	r0, r8
 800a98e:	47d0      	blx	sl
 800a990:	3001      	adds	r0, #1
 800a992:	d0ab      	beq.n	800a8ec <_printf_i+0x164>
 800a994:	6823      	ldr	r3, [r4, #0]
 800a996:	079b      	lsls	r3, r3, #30
 800a998:	d413      	bmi.n	800a9c2 <_printf_i+0x23a>
 800a99a:	68e0      	ldr	r0, [r4, #12]
 800a99c:	9b03      	ldr	r3, [sp, #12]
 800a99e:	4298      	cmp	r0, r3
 800a9a0:	bfb8      	it	lt
 800a9a2:	4618      	movlt	r0, r3
 800a9a4:	e7a4      	b.n	800a8f0 <_printf_i+0x168>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	4632      	mov	r2, r6
 800a9aa:	4649      	mov	r1, r9
 800a9ac:	4640      	mov	r0, r8
 800a9ae:	47d0      	blx	sl
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	d09b      	beq.n	800a8ec <_printf_i+0x164>
 800a9b4:	3501      	adds	r5, #1
 800a9b6:	68e3      	ldr	r3, [r4, #12]
 800a9b8:	9903      	ldr	r1, [sp, #12]
 800a9ba:	1a5b      	subs	r3, r3, r1
 800a9bc:	42ab      	cmp	r3, r5
 800a9be:	dcf2      	bgt.n	800a9a6 <_printf_i+0x21e>
 800a9c0:	e7eb      	b.n	800a99a <_printf_i+0x212>
 800a9c2:	2500      	movs	r5, #0
 800a9c4:	f104 0619 	add.w	r6, r4, #25
 800a9c8:	e7f5      	b.n	800a9b6 <_printf_i+0x22e>
 800a9ca:	bf00      	nop
 800a9cc:	0800fcf6 	.word	0x0800fcf6
 800a9d0:	0800fd07 	.word	0x0800fd07

0800a9d4 <_scanf_float>:
 800a9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d8:	b087      	sub	sp, #28
 800a9da:	4617      	mov	r7, r2
 800a9dc:	9303      	str	r3, [sp, #12]
 800a9de:	688b      	ldr	r3, [r1, #8]
 800a9e0:	1e5a      	subs	r2, r3, #1
 800a9e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a9e6:	bf83      	ittte	hi
 800a9e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a9ec:	195b      	addhi	r3, r3, r5
 800a9ee:	9302      	strhi	r3, [sp, #8]
 800a9f0:	2300      	movls	r3, #0
 800a9f2:	bf86      	itte	hi
 800a9f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a9f8:	608b      	strhi	r3, [r1, #8]
 800a9fa:	9302      	strls	r3, [sp, #8]
 800a9fc:	680b      	ldr	r3, [r1, #0]
 800a9fe:	468b      	mov	fp, r1
 800aa00:	2500      	movs	r5, #0
 800aa02:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800aa06:	f84b 3b1c 	str.w	r3, [fp], #28
 800aa0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa0e:	4680      	mov	r8, r0
 800aa10:	460c      	mov	r4, r1
 800aa12:	465e      	mov	r6, fp
 800aa14:	46aa      	mov	sl, r5
 800aa16:	46a9      	mov	r9, r5
 800aa18:	9501      	str	r5, [sp, #4]
 800aa1a:	68a2      	ldr	r2, [r4, #8]
 800aa1c:	b152      	cbz	r2, 800aa34 <_scanf_float+0x60>
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	2b4e      	cmp	r3, #78	; 0x4e
 800aa24:	d864      	bhi.n	800aaf0 <_scanf_float+0x11c>
 800aa26:	2b40      	cmp	r3, #64	; 0x40
 800aa28:	d83c      	bhi.n	800aaa4 <_scanf_float+0xd0>
 800aa2a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800aa2e:	b2c8      	uxtb	r0, r1
 800aa30:	280e      	cmp	r0, #14
 800aa32:	d93a      	bls.n	800aaaa <_scanf_float+0xd6>
 800aa34:	f1b9 0f00 	cmp.w	r9, #0
 800aa38:	d003      	beq.n	800aa42 <_scanf_float+0x6e>
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa46:	f1ba 0f01 	cmp.w	sl, #1
 800aa4a:	f200 8113 	bhi.w	800ac74 <_scanf_float+0x2a0>
 800aa4e:	455e      	cmp	r6, fp
 800aa50:	f200 8105 	bhi.w	800ac5e <_scanf_float+0x28a>
 800aa54:	2501      	movs	r5, #1
 800aa56:	4628      	mov	r0, r5
 800aa58:	b007      	add	sp, #28
 800aa5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800aa62:	2a0d      	cmp	r2, #13
 800aa64:	d8e6      	bhi.n	800aa34 <_scanf_float+0x60>
 800aa66:	a101      	add	r1, pc, #4	; (adr r1, 800aa6c <_scanf_float+0x98>)
 800aa68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aa6c:	0800abab 	.word	0x0800abab
 800aa70:	0800aa35 	.word	0x0800aa35
 800aa74:	0800aa35 	.word	0x0800aa35
 800aa78:	0800aa35 	.word	0x0800aa35
 800aa7c:	0800ac0b 	.word	0x0800ac0b
 800aa80:	0800abe3 	.word	0x0800abe3
 800aa84:	0800aa35 	.word	0x0800aa35
 800aa88:	0800aa35 	.word	0x0800aa35
 800aa8c:	0800abb9 	.word	0x0800abb9
 800aa90:	0800aa35 	.word	0x0800aa35
 800aa94:	0800aa35 	.word	0x0800aa35
 800aa98:	0800aa35 	.word	0x0800aa35
 800aa9c:	0800aa35 	.word	0x0800aa35
 800aaa0:	0800ab71 	.word	0x0800ab71
 800aaa4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800aaa8:	e7db      	b.n	800aa62 <_scanf_float+0x8e>
 800aaaa:	290e      	cmp	r1, #14
 800aaac:	d8c2      	bhi.n	800aa34 <_scanf_float+0x60>
 800aaae:	a001      	add	r0, pc, #4	; (adr r0, 800aab4 <_scanf_float+0xe0>)
 800aab0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aab4:	0800ab63 	.word	0x0800ab63
 800aab8:	0800aa35 	.word	0x0800aa35
 800aabc:	0800ab63 	.word	0x0800ab63
 800aac0:	0800abf7 	.word	0x0800abf7
 800aac4:	0800aa35 	.word	0x0800aa35
 800aac8:	0800ab11 	.word	0x0800ab11
 800aacc:	0800ab4d 	.word	0x0800ab4d
 800aad0:	0800ab4d 	.word	0x0800ab4d
 800aad4:	0800ab4d 	.word	0x0800ab4d
 800aad8:	0800ab4d 	.word	0x0800ab4d
 800aadc:	0800ab4d 	.word	0x0800ab4d
 800aae0:	0800ab4d 	.word	0x0800ab4d
 800aae4:	0800ab4d 	.word	0x0800ab4d
 800aae8:	0800ab4d 	.word	0x0800ab4d
 800aaec:	0800ab4d 	.word	0x0800ab4d
 800aaf0:	2b6e      	cmp	r3, #110	; 0x6e
 800aaf2:	d809      	bhi.n	800ab08 <_scanf_float+0x134>
 800aaf4:	2b60      	cmp	r3, #96	; 0x60
 800aaf6:	d8b2      	bhi.n	800aa5e <_scanf_float+0x8a>
 800aaf8:	2b54      	cmp	r3, #84	; 0x54
 800aafa:	d077      	beq.n	800abec <_scanf_float+0x218>
 800aafc:	2b59      	cmp	r3, #89	; 0x59
 800aafe:	d199      	bne.n	800aa34 <_scanf_float+0x60>
 800ab00:	2d07      	cmp	r5, #7
 800ab02:	d197      	bne.n	800aa34 <_scanf_float+0x60>
 800ab04:	2508      	movs	r5, #8
 800ab06:	e029      	b.n	800ab5c <_scanf_float+0x188>
 800ab08:	2b74      	cmp	r3, #116	; 0x74
 800ab0a:	d06f      	beq.n	800abec <_scanf_float+0x218>
 800ab0c:	2b79      	cmp	r3, #121	; 0x79
 800ab0e:	e7f6      	b.n	800aafe <_scanf_float+0x12a>
 800ab10:	6821      	ldr	r1, [r4, #0]
 800ab12:	05c8      	lsls	r0, r1, #23
 800ab14:	d51a      	bpl.n	800ab4c <_scanf_float+0x178>
 800ab16:	9b02      	ldr	r3, [sp, #8]
 800ab18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ab1c:	6021      	str	r1, [r4, #0]
 800ab1e:	f109 0901 	add.w	r9, r9, #1
 800ab22:	b11b      	cbz	r3, 800ab2c <_scanf_float+0x158>
 800ab24:	3b01      	subs	r3, #1
 800ab26:	3201      	adds	r2, #1
 800ab28:	9302      	str	r3, [sp, #8]
 800ab2a:	60a2      	str	r2, [r4, #8]
 800ab2c:	68a3      	ldr	r3, [r4, #8]
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	60a3      	str	r3, [r4, #8]
 800ab32:	6923      	ldr	r3, [r4, #16]
 800ab34:	3301      	adds	r3, #1
 800ab36:	6123      	str	r3, [r4, #16]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	607b      	str	r3, [r7, #4]
 800ab40:	f340 8084 	ble.w	800ac4c <_scanf_float+0x278>
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	3301      	adds	r3, #1
 800ab48:	603b      	str	r3, [r7, #0]
 800ab4a:	e766      	b.n	800aa1a <_scanf_float+0x46>
 800ab4c:	eb1a 0f05 	cmn.w	sl, r5
 800ab50:	f47f af70 	bne.w	800aa34 <_scanf_float+0x60>
 800ab54:	6822      	ldr	r2, [r4, #0]
 800ab56:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ab5a:	6022      	str	r2, [r4, #0]
 800ab5c:	f806 3b01 	strb.w	r3, [r6], #1
 800ab60:	e7e4      	b.n	800ab2c <_scanf_float+0x158>
 800ab62:	6822      	ldr	r2, [r4, #0]
 800ab64:	0610      	lsls	r0, r2, #24
 800ab66:	f57f af65 	bpl.w	800aa34 <_scanf_float+0x60>
 800ab6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab6e:	e7f4      	b.n	800ab5a <_scanf_float+0x186>
 800ab70:	f1ba 0f00 	cmp.w	sl, #0
 800ab74:	d10e      	bne.n	800ab94 <_scanf_float+0x1c0>
 800ab76:	f1b9 0f00 	cmp.w	r9, #0
 800ab7a:	d10e      	bne.n	800ab9a <_scanf_float+0x1c6>
 800ab7c:	6822      	ldr	r2, [r4, #0]
 800ab7e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ab82:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ab86:	d108      	bne.n	800ab9a <_scanf_float+0x1c6>
 800ab88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ab8c:	6022      	str	r2, [r4, #0]
 800ab8e:	f04f 0a01 	mov.w	sl, #1
 800ab92:	e7e3      	b.n	800ab5c <_scanf_float+0x188>
 800ab94:	f1ba 0f02 	cmp.w	sl, #2
 800ab98:	d055      	beq.n	800ac46 <_scanf_float+0x272>
 800ab9a:	2d01      	cmp	r5, #1
 800ab9c:	d002      	beq.n	800aba4 <_scanf_float+0x1d0>
 800ab9e:	2d04      	cmp	r5, #4
 800aba0:	f47f af48 	bne.w	800aa34 <_scanf_float+0x60>
 800aba4:	3501      	adds	r5, #1
 800aba6:	b2ed      	uxtb	r5, r5
 800aba8:	e7d8      	b.n	800ab5c <_scanf_float+0x188>
 800abaa:	f1ba 0f01 	cmp.w	sl, #1
 800abae:	f47f af41 	bne.w	800aa34 <_scanf_float+0x60>
 800abb2:	f04f 0a02 	mov.w	sl, #2
 800abb6:	e7d1      	b.n	800ab5c <_scanf_float+0x188>
 800abb8:	b97d      	cbnz	r5, 800abda <_scanf_float+0x206>
 800abba:	f1b9 0f00 	cmp.w	r9, #0
 800abbe:	f47f af3c 	bne.w	800aa3a <_scanf_float+0x66>
 800abc2:	6822      	ldr	r2, [r4, #0]
 800abc4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800abc8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800abcc:	f47f af39 	bne.w	800aa42 <_scanf_float+0x6e>
 800abd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800abd4:	6022      	str	r2, [r4, #0]
 800abd6:	2501      	movs	r5, #1
 800abd8:	e7c0      	b.n	800ab5c <_scanf_float+0x188>
 800abda:	2d03      	cmp	r5, #3
 800abdc:	d0e2      	beq.n	800aba4 <_scanf_float+0x1d0>
 800abde:	2d05      	cmp	r5, #5
 800abe0:	e7de      	b.n	800aba0 <_scanf_float+0x1cc>
 800abe2:	2d02      	cmp	r5, #2
 800abe4:	f47f af26 	bne.w	800aa34 <_scanf_float+0x60>
 800abe8:	2503      	movs	r5, #3
 800abea:	e7b7      	b.n	800ab5c <_scanf_float+0x188>
 800abec:	2d06      	cmp	r5, #6
 800abee:	f47f af21 	bne.w	800aa34 <_scanf_float+0x60>
 800abf2:	2507      	movs	r5, #7
 800abf4:	e7b2      	b.n	800ab5c <_scanf_float+0x188>
 800abf6:	6822      	ldr	r2, [r4, #0]
 800abf8:	0591      	lsls	r1, r2, #22
 800abfa:	f57f af1b 	bpl.w	800aa34 <_scanf_float+0x60>
 800abfe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ac02:	6022      	str	r2, [r4, #0]
 800ac04:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac08:	e7a8      	b.n	800ab5c <_scanf_float+0x188>
 800ac0a:	6822      	ldr	r2, [r4, #0]
 800ac0c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ac10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ac14:	d006      	beq.n	800ac24 <_scanf_float+0x250>
 800ac16:	0550      	lsls	r0, r2, #21
 800ac18:	f57f af0c 	bpl.w	800aa34 <_scanf_float+0x60>
 800ac1c:	f1b9 0f00 	cmp.w	r9, #0
 800ac20:	f43f af0f 	beq.w	800aa42 <_scanf_float+0x6e>
 800ac24:	0591      	lsls	r1, r2, #22
 800ac26:	bf58      	it	pl
 800ac28:	9901      	ldrpl	r1, [sp, #4]
 800ac2a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ac2e:	bf58      	it	pl
 800ac30:	eba9 0101 	subpl.w	r1, r9, r1
 800ac34:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ac38:	bf58      	it	pl
 800ac3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ac3e:	6022      	str	r2, [r4, #0]
 800ac40:	f04f 0900 	mov.w	r9, #0
 800ac44:	e78a      	b.n	800ab5c <_scanf_float+0x188>
 800ac46:	f04f 0a03 	mov.w	sl, #3
 800ac4a:	e787      	b.n	800ab5c <_scanf_float+0x188>
 800ac4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ac50:	4639      	mov	r1, r7
 800ac52:	4640      	mov	r0, r8
 800ac54:	4798      	blx	r3
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f43f aedf 	beq.w	800aa1a <_scanf_float+0x46>
 800ac5c:	e6ea      	b.n	800aa34 <_scanf_float+0x60>
 800ac5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac66:	463a      	mov	r2, r7
 800ac68:	4640      	mov	r0, r8
 800ac6a:	4798      	blx	r3
 800ac6c:	6923      	ldr	r3, [r4, #16]
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	6123      	str	r3, [r4, #16]
 800ac72:	e6ec      	b.n	800aa4e <_scanf_float+0x7a>
 800ac74:	1e6b      	subs	r3, r5, #1
 800ac76:	2b06      	cmp	r3, #6
 800ac78:	d825      	bhi.n	800acc6 <_scanf_float+0x2f2>
 800ac7a:	2d02      	cmp	r5, #2
 800ac7c:	d836      	bhi.n	800acec <_scanf_float+0x318>
 800ac7e:	455e      	cmp	r6, fp
 800ac80:	f67f aee8 	bls.w	800aa54 <_scanf_float+0x80>
 800ac84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac8c:	463a      	mov	r2, r7
 800ac8e:	4640      	mov	r0, r8
 800ac90:	4798      	blx	r3
 800ac92:	6923      	ldr	r3, [r4, #16]
 800ac94:	3b01      	subs	r3, #1
 800ac96:	6123      	str	r3, [r4, #16]
 800ac98:	e7f1      	b.n	800ac7e <_scanf_float+0x2aa>
 800ac9a:	9802      	ldr	r0, [sp, #8]
 800ac9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aca0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800aca4:	9002      	str	r0, [sp, #8]
 800aca6:	463a      	mov	r2, r7
 800aca8:	4640      	mov	r0, r8
 800acaa:	4798      	blx	r3
 800acac:	6923      	ldr	r3, [r4, #16]
 800acae:	3b01      	subs	r3, #1
 800acb0:	6123      	str	r3, [r4, #16]
 800acb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acb6:	fa5f fa8a 	uxtb.w	sl, sl
 800acba:	f1ba 0f02 	cmp.w	sl, #2
 800acbe:	d1ec      	bne.n	800ac9a <_scanf_float+0x2c6>
 800acc0:	3d03      	subs	r5, #3
 800acc2:	b2ed      	uxtb	r5, r5
 800acc4:	1b76      	subs	r6, r6, r5
 800acc6:	6823      	ldr	r3, [r4, #0]
 800acc8:	05da      	lsls	r2, r3, #23
 800acca:	d52f      	bpl.n	800ad2c <_scanf_float+0x358>
 800accc:	055b      	lsls	r3, r3, #21
 800acce:	d510      	bpl.n	800acf2 <_scanf_float+0x31e>
 800acd0:	455e      	cmp	r6, fp
 800acd2:	f67f aebf 	bls.w	800aa54 <_scanf_float+0x80>
 800acd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800acde:	463a      	mov	r2, r7
 800ace0:	4640      	mov	r0, r8
 800ace2:	4798      	blx	r3
 800ace4:	6923      	ldr	r3, [r4, #16]
 800ace6:	3b01      	subs	r3, #1
 800ace8:	6123      	str	r3, [r4, #16]
 800acea:	e7f1      	b.n	800acd0 <_scanf_float+0x2fc>
 800acec:	46aa      	mov	sl, r5
 800acee:	9602      	str	r6, [sp, #8]
 800acf0:	e7df      	b.n	800acb2 <_scanf_float+0x2de>
 800acf2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800acf6:	6923      	ldr	r3, [r4, #16]
 800acf8:	2965      	cmp	r1, #101	; 0x65
 800acfa:	f103 33ff 	add.w	r3, r3, #4294967295
 800acfe:	f106 35ff 	add.w	r5, r6, #4294967295
 800ad02:	6123      	str	r3, [r4, #16]
 800ad04:	d00c      	beq.n	800ad20 <_scanf_float+0x34c>
 800ad06:	2945      	cmp	r1, #69	; 0x45
 800ad08:	d00a      	beq.n	800ad20 <_scanf_float+0x34c>
 800ad0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad0e:	463a      	mov	r2, r7
 800ad10:	4640      	mov	r0, r8
 800ad12:	4798      	blx	r3
 800ad14:	6923      	ldr	r3, [r4, #16]
 800ad16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	1eb5      	subs	r5, r6, #2
 800ad1e:	6123      	str	r3, [r4, #16]
 800ad20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad24:	463a      	mov	r2, r7
 800ad26:	4640      	mov	r0, r8
 800ad28:	4798      	blx	r3
 800ad2a:	462e      	mov	r6, r5
 800ad2c:	6825      	ldr	r5, [r4, #0]
 800ad2e:	f015 0510 	ands.w	r5, r5, #16
 800ad32:	d158      	bne.n	800ade6 <_scanf_float+0x412>
 800ad34:	7035      	strb	r5, [r6, #0]
 800ad36:	6823      	ldr	r3, [r4, #0]
 800ad38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad40:	d11c      	bne.n	800ad7c <_scanf_float+0x3a8>
 800ad42:	9b01      	ldr	r3, [sp, #4]
 800ad44:	454b      	cmp	r3, r9
 800ad46:	eba3 0209 	sub.w	r2, r3, r9
 800ad4a:	d124      	bne.n	800ad96 <_scanf_float+0x3c2>
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	4659      	mov	r1, fp
 800ad50:	4640      	mov	r0, r8
 800ad52:	f000 fe9b 	bl	800ba8c <_strtod_r>
 800ad56:	9b03      	ldr	r3, [sp, #12]
 800ad58:	6821      	ldr	r1, [r4, #0]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f011 0f02 	tst.w	r1, #2
 800ad60:	ec57 6b10 	vmov	r6, r7, d0
 800ad64:	f103 0204 	add.w	r2, r3, #4
 800ad68:	d020      	beq.n	800adac <_scanf_float+0x3d8>
 800ad6a:	9903      	ldr	r1, [sp, #12]
 800ad6c:	600a      	str	r2, [r1, #0]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	e9c3 6700 	strd	r6, r7, [r3]
 800ad74:	68e3      	ldr	r3, [r4, #12]
 800ad76:	3301      	adds	r3, #1
 800ad78:	60e3      	str	r3, [r4, #12]
 800ad7a:	e66c      	b.n	800aa56 <_scanf_float+0x82>
 800ad7c:	9b04      	ldr	r3, [sp, #16]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d0e4      	beq.n	800ad4c <_scanf_float+0x378>
 800ad82:	9905      	ldr	r1, [sp, #20]
 800ad84:	230a      	movs	r3, #10
 800ad86:	462a      	mov	r2, r5
 800ad88:	3101      	adds	r1, #1
 800ad8a:	4640      	mov	r0, r8
 800ad8c:	f000 ff08 	bl	800bba0 <_strtol_r>
 800ad90:	9b04      	ldr	r3, [sp, #16]
 800ad92:	9e05      	ldr	r6, [sp, #20]
 800ad94:	1ac2      	subs	r2, r0, r3
 800ad96:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ad9a:	429e      	cmp	r6, r3
 800ad9c:	bf28      	it	cs
 800ad9e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ada2:	4912      	ldr	r1, [pc, #72]	; (800adec <_scanf_float+0x418>)
 800ada4:	4630      	mov	r0, r6
 800ada6:	f000 f82b 	bl	800ae00 <siprintf>
 800adaa:	e7cf      	b.n	800ad4c <_scanf_float+0x378>
 800adac:	f011 0f04 	tst.w	r1, #4
 800adb0:	9903      	ldr	r1, [sp, #12]
 800adb2:	600a      	str	r2, [r1, #0]
 800adb4:	d1db      	bne.n	800ad6e <_scanf_float+0x39a>
 800adb6:	f8d3 8000 	ldr.w	r8, [r3]
 800adba:	ee10 2a10 	vmov	r2, s0
 800adbe:	ee10 0a10 	vmov	r0, s0
 800adc2:	463b      	mov	r3, r7
 800adc4:	4639      	mov	r1, r7
 800adc6:	f7f5 feb1 	bl	8000b2c <__aeabi_dcmpun>
 800adca:	b128      	cbz	r0, 800add8 <_scanf_float+0x404>
 800adcc:	4808      	ldr	r0, [pc, #32]	; (800adf0 <_scanf_float+0x41c>)
 800adce:	f000 f811 	bl	800adf4 <nanf>
 800add2:	ed88 0a00 	vstr	s0, [r8]
 800add6:	e7cd      	b.n	800ad74 <_scanf_float+0x3a0>
 800add8:	4630      	mov	r0, r6
 800adda:	4639      	mov	r1, r7
 800addc:	f7f5 ff04 	bl	8000be8 <__aeabi_d2f>
 800ade0:	f8c8 0000 	str.w	r0, [r8]
 800ade4:	e7c6      	b.n	800ad74 <_scanf_float+0x3a0>
 800ade6:	2500      	movs	r5, #0
 800ade8:	e635      	b.n	800aa56 <_scanf_float+0x82>
 800adea:	bf00      	nop
 800adec:	0800fd18 	.word	0x0800fd18
 800adf0:	08010130 	.word	0x08010130

0800adf4 <nanf>:
 800adf4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800adfc <nanf+0x8>
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	7fc00000 	.word	0x7fc00000

0800ae00 <siprintf>:
 800ae00:	b40e      	push	{r1, r2, r3}
 800ae02:	b500      	push	{lr}
 800ae04:	b09c      	sub	sp, #112	; 0x70
 800ae06:	ab1d      	add	r3, sp, #116	; 0x74
 800ae08:	9002      	str	r0, [sp, #8]
 800ae0a:	9006      	str	r0, [sp, #24]
 800ae0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae10:	4809      	ldr	r0, [pc, #36]	; (800ae38 <siprintf+0x38>)
 800ae12:	9107      	str	r1, [sp, #28]
 800ae14:	9104      	str	r1, [sp, #16]
 800ae16:	4909      	ldr	r1, [pc, #36]	; (800ae3c <siprintf+0x3c>)
 800ae18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae1c:	9105      	str	r1, [sp, #20]
 800ae1e:	6800      	ldr	r0, [r0, #0]
 800ae20:	9301      	str	r3, [sp, #4]
 800ae22:	a902      	add	r1, sp, #8
 800ae24:	f002 fea4 	bl	800db70 <_svfiprintf_r>
 800ae28:	9b02      	ldr	r3, [sp, #8]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	701a      	strb	r2, [r3, #0]
 800ae2e:	b01c      	add	sp, #112	; 0x70
 800ae30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae34:	b003      	add	sp, #12
 800ae36:	4770      	bx	lr
 800ae38:	20000084 	.word	0x20000084
 800ae3c:	ffff0208 	.word	0xffff0208

0800ae40 <sulp>:
 800ae40:	b570      	push	{r4, r5, r6, lr}
 800ae42:	4604      	mov	r4, r0
 800ae44:	460d      	mov	r5, r1
 800ae46:	ec45 4b10 	vmov	d0, r4, r5
 800ae4a:	4616      	mov	r6, r2
 800ae4c:	f002 fc2c 	bl	800d6a8 <__ulp>
 800ae50:	ec51 0b10 	vmov	r0, r1, d0
 800ae54:	b17e      	cbz	r6, 800ae76 <sulp+0x36>
 800ae56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ae5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	dd09      	ble.n	800ae76 <sulp+0x36>
 800ae62:	051b      	lsls	r3, r3, #20
 800ae64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ae68:	2400      	movs	r4, #0
 800ae6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ae6e:	4622      	mov	r2, r4
 800ae70:	462b      	mov	r3, r5
 800ae72:	f7f5 fbc1 	bl	80005f8 <__aeabi_dmul>
 800ae76:	bd70      	pop	{r4, r5, r6, pc}

0800ae78 <_strtod_l>:
 800ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7c:	b0a3      	sub	sp, #140	; 0x8c
 800ae7e:	461f      	mov	r7, r3
 800ae80:	2300      	movs	r3, #0
 800ae82:	931e      	str	r3, [sp, #120]	; 0x78
 800ae84:	4ba4      	ldr	r3, [pc, #656]	; (800b118 <_strtod_l+0x2a0>)
 800ae86:	9219      	str	r2, [sp, #100]	; 0x64
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	9307      	str	r3, [sp, #28]
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	4618      	mov	r0, r3
 800ae90:	4688      	mov	r8, r1
 800ae92:	f7f5 f99d 	bl	80001d0 <strlen>
 800ae96:	f04f 0a00 	mov.w	sl, #0
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	f04f 0b00 	mov.w	fp, #0
 800aea0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800aea4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aea6:	781a      	ldrb	r2, [r3, #0]
 800aea8:	2a2b      	cmp	r2, #43	; 0x2b
 800aeaa:	d04c      	beq.n	800af46 <_strtod_l+0xce>
 800aeac:	d839      	bhi.n	800af22 <_strtod_l+0xaa>
 800aeae:	2a0d      	cmp	r2, #13
 800aeb0:	d832      	bhi.n	800af18 <_strtod_l+0xa0>
 800aeb2:	2a08      	cmp	r2, #8
 800aeb4:	d832      	bhi.n	800af1c <_strtod_l+0xa4>
 800aeb6:	2a00      	cmp	r2, #0
 800aeb8:	d03c      	beq.n	800af34 <_strtod_l+0xbc>
 800aeba:	2300      	movs	r3, #0
 800aebc:	930e      	str	r3, [sp, #56]	; 0x38
 800aebe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800aec0:	7833      	ldrb	r3, [r6, #0]
 800aec2:	2b30      	cmp	r3, #48	; 0x30
 800aec4:	f040 80b4 	bne.w	800b030 <_strtod_l+0x1b8>
 800aec8:	7873      	ldrb	r3, [r6, #1]
 800aeca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aece:	2b58      	cmp	r3, #88	; 0x58
 800aed0:	d16c      	bne.n	800afac <_strtod_l+0x134>
 800aed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aed4:	9301      	str	r3, [sp, #4]
 800aed6:	ab1e      	add	r3, sp, #120	; 0x78
 800aed8:	9702      	str	r7, [sp, #8]
 800aeda:	9300      	str	r3, [sp, #0]
 800aedc:	4a8f      	ldr	r2, [pc, #572]	; (800b11c <_strtod_l+0x2a4>)
 800aede:	ab1f      	add	r3, sp, #124	; 0x7c
 800aee0:	a91d      	add	r1, sp, #116	; 0x74
 800aee2:	4620      	mov	r0, r4
 800aee4:	f001 fd40 	bl	800c968 <__gethex>
 800aee8:	f010 0707 	ands.w	r7, r0, #7
 800aeec:	4605      	mov	r5, r0
 800aeee:	d005      	beq.n	800aefc <_strtod_l+0x84>
 800aef0:	2f06      	cmp	r7, #6
 800aef2:	d12a      	bne.n	800af4a <_strtod_l+0xd2>
 800aef4:	3601      	adds	r6, #1
 800aef6:	2300      	movs	r3, #0
 800aef8:	961d      	str	r6, [sp, #116]	; 0x74
 800aefa:	930e      	str	r3, [sp, #56]	; 0x38
 800aefc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f040 8596 	bne.w	800ba30 <_strtod_l+0xbb8>
 800af04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af06:	b1db      	cbz	r3, 800af40 <_strtod_l+0xc8>
 800af08:	4652      	mov	r2, sl
 800af0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af0e:	ec43 2b10 	vmov	d0, r2, r3
 800af12:	b023      	add	sp, #140	; 0x8c
 800af14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af18:	2a20      	cmp	r2, #32
 800af1a:	d1ce      	bne.n	800aeba <_strtod_l+0x42>
 800af1c:	3301      	adds	r3, #1
 800af1e:	931d      	str	r3, [sp, #116]	; 0x74
 800af20:	e7c0      	b.n	800aea4 <_strtod_l+0x2c>
 800af22:	2a2d      	cmp	r2, #45	; 0x2d
 800af24:	d1c9      	bne.n	800aeba <_strtod_l+0x42>
 800af26:	2201      	movs	r2, #1
 800af28:	920e      	str	r2, [sp, #56]	; 0x38
 800af2a:	1c5a      	adds	r2, r3, #1
 800af2c:	921d      	str	r2, [sp, #116]	; 0x74
 800af2e:	785b      	ldrb	r3, [r3, #1]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d1c4      	bne.n	800aebe <_strtod_l+0x46>
 800af34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af36:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f040 8576 	bne.w	800ba2c <_strtod_l+0xbb4>
 800af40:	4652      	mov	r2, sl
 800af42:	465b      	mov	r3, fp
 800af44:	e7e3      	b.n	800af0e <_strtod_l+0x96>
 800af46:	2200      	movs	r2, #0
 800af48:	e7ee      	b.n	800af28 <_strtod_l+0xb0>
 800af4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800af4c:	b13a      	cbz	r2, 800af5e <_strtod_l+0xe6>
 800af4e:	2135      	movs	r1, #53	; 0x35
 800af50:	a820      	add	r0, sp, #128	; 0x80
 800af52:	f002 fcb4 	bl	800d8be <__copybits>
 800af56:	991e      	ldr	r1, [sp, #120]	; 0x78
 800af58:	4620      	mov	r0, r4
 800af5a:	f002 f879 	bl	800d050 <_Bfree>
 800af5e:	3f01      	subs	r7, #1
 800af60:	2f05      	cmp	r7, #5
 800af62:	d807      	bhi.n	800af74 <_strtod_l+0xfc>
 800af64:	e8df f007 	tbb	[pc, r7]
 800af68:	1d180b0e 	.word	0x1d180b0e
 800af6c:	030e      	.short	0x030e
 800af6e:	f04f 0b00 	mov.w	fp, #0
 800af72:	46da      	mov	sl, fp
 800af74:	0728      	lsls	r0, r5, #28
 800af76:	d5c1      	bpl.n	800aefc <_strtod_l+0x84>
 800af78:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800af7c:	e7be      	b.n	800aefc <_strtod_l+0x84>
 800af7e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800af82:	e7f7      	b.n	800af74 <_strtod_l+0xfc>
 800af84:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800af88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800af8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800af8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800af92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800af96:	e7ed      	b.n	800af74 <_strtod_l+0xfc>
 800af98:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b120 <_strtod_l+0x2a8>
 800af9c:	f04f 0a00 	mov.w	sl, #0
 800afa0:	e7e8      	b.n	800af74 <_strtod_l+0xfc>
 800afa2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800afa6:	f04f 3aff 	mov.w	sl, #4294967295
 800afaa:	e7e3      	b.n	800af74 <_strtod_l+0xfc>
 800afac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800afae:	1c5a      	adds	r2, r3, #1
 800afb0:	921d      	str	r2, [sp, #116]	; 0x74
 800afb2:	785b      	ldrb	r3, [r3, #1]
 800afb4:	2b30      	cmp	r3, #48	; 0x30
 800afb6:	d0f9      	beq.n	800afac <_strtod_l+0x134>
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d09f      	beq.n	800aefc <_strtod_l+0x84>
 800afbc:	2301      	movs	r3, #1
 800afbe:	f04f 0900 	mov.w	r9, #0
 800afc2:	9304      	str	r3, [sp, #16]
 800afc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800afc6:	930a      	str	r3, [sp, #40]	; 0x28
 800afc8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800afcc:	464f      	mov	r7, r9
 800afce:	220a      	movs	r2, #10
 800afd0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800afd2:	7806      	ldrb	r6, [r0, #0]
 800afd4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800afd8:	b2d9      	uxtb	r1, r3
 800afda:	2909      	cmp	r1, #9
 800afdc:	d92a      	bls.n	800b034 <_strtod_l+0x1bc>
 800afde:	9907      	ldr	r1, [sp, #28]
 800afe0:	462a      	mov	r2, r5
 800afe2:	f002 fedd 	bl	800dda0 <strncmp>
 800afe6:	b398      	cbz	r0, 800b050 <_strtod_l+0x1d8>
 800afe8:	2000      	movs	r0, #0
 800afea:	4633      	mov	r3, r6
 800afec:	463d      	mov	r5, r7
 800afee:	9007      	str	r0, [sp, #28]
 800aff0:	4602      	mov	r2, r0
 800aff2:	2b65      	cmp	r3, #101	; 0x65
 800aff4:	d001      	beq.n	800affa <_strtod_l+0x182>
 800aff6:	2b45      	cmp	r3, #69	; 0x45
 800aff8:	d118      	bne.n	800b02c <_strtod_l+0x1b4>
 800affa:	b91d      	cbnz	r5, 800b004 <_strtod_l+0x18c>
 800affc:	9b04      	ldr	r3, [sp, #16]
 800affe:	4303      	orrs	r3, r0
 800b000:	d098      	beq.n	800af34 <_strtod_l+0xbc>
 800b002:	2500      	movs	r5, #0
 800b004:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800b008:	f108 0301 	add.w	r3, r8, #1
 800b00c:	931d      	str	r3, [sp, #116]	; 0x74
 800b00e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b012:	2b2b      	cmp	r3, #43	; 0x2b
 800b014:	d075      	beq.n	800b102 <_strtod_l+0x28a>
 800b016:	2b2d      	cmp	r3, #45	; 0x2d
 800b018:	d07b      	beq.n	800b112 <_strtod_l+0x29a>
 800b01a:	f04f 0c00 	mov.w	ip, #0
 800b01e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b022:	2909      	cmp	r1, #9
 800b024:	f240 8082 	bls.w	800b12c <_strtod_l+0x2b4>
 800b028:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b02c:	2600      	movs	r6, #0
 800b02e:	e09d      	b.n	800b16c <_strtod_l+0x2f4>
 800b030:	2300      	movs	r3, #0
 800b032:	e7c4      	b.n	800afbe <_strtod_l+0x146>
 800b034:	2f08      	cmp	r7, #8
 800b036:	bfd8      	it	le
 800b038:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b03a:	f100 0001 	add.w	r0, r0, #1
 800b03e:	bfda      	itte	le
 800b040:	fb02 3301 	mlale	r3, r2, r1, r3
 800b044:	9309      	strle	r3, [sp, #36]	; 0x24
 800b046:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b04a:	3701      	adds	r7, #1
 800b04c:	901d      	str	r0, [sp, #116]	; 0x74
 800b04e:	e7bf      	b.n	800afd0 <_strtod_l+0x158>
 800b050:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b052:	195a      	adds	r2, r3, r5
 800b054:	921d      	str	r2, [sp, #116]	; 0x74
 800b056:	5d5b      	ldrb	r3, [r3, r5]
 800b058:	2f00      	cmp	r7, #0
 800b05a:	d037      	beq.n	800b0cc <_strtod_l+0x254>
 800b05c:	9007      	str	r0, [sp, #28]
 800b05e:	463d      	mov	r5, r7
 800b060:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b064:	2a09      	cmp	r2, #9
 800b066:	d912      	bls.n	800b08e <_strtod_l+0x216>
 800b068:	2201      	movs	r2, #1
 800b06a:	e7c2      	b.n	800aff2 <_strtod_l+0x17a>
 800b06c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b06e:	1c5a      	adds	r2, r3, #1
 800b070:	921d      	str	r2, [sp, #116]	; 0x74
 800b072:	785b      	ldrb	r3, [r3, #1]
 800b074:	3001      	adds	r0, #1
 800b076:	2b30      	cmp	r3, #48	; 0x30
 800b078:	d0f8      	beq.n	800b06c <_strtod_l+0x1f4>
 800b07a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b07e:	2a08      	cmp	r2, #8
 800b080:	f200 84db 	bhi.w	800ba3a <_strtod_l+0xbc2>
 800b084:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b086:	9007      	str	r0, [sp, #28]
 800b088:	2000      	movs	r0, #0
 800b08a:	920a      	str	r2, [sp, #40]	; 0x28
 800b08c:	4605      	mov	r5, r0
 800b08e:	3b30      	subs	r3, #48	; 0x30
 800b090:	f100 0201 	add.w	r2, r0, #1
 800b094:	d014      	beq.n	800b0c0 <_strtod_l+0x248>
 800b096:	9907      	ldr	r1, [sp, #28]
 800b098:	4411      	add	r1, r2
 800b09a:	9107      	str	r1, [sp, #28]
 800b09c:	462a      	mov	r2, r5
 800b09e:	eb00 0e05 	add.w	lr, r0, r5
 800b0a2:	210a      	movs	r1, #10
 800b0a4:	4572      	cmp	r2, lr
 800b0a6:	d113      	bne.n	800b0d0 <_strtod_l+0x258>
 800b0a8:	182a      	adds	r2, r5, r0
 800b0aa:	2a08      	cmp	r2, #8
 800b0ac:	f105 0501 	add.w	r5, r5, #1
 800b0b0:	4405      	add	r5, r0
 800b0b2:	dc1c      	bgt.n	800b0ee <_strtod_l+0x276>
 800b0b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0b6:	220a      	movs	r2, #10
 800b0b8:	fb02 3301 	mla	r3, r2, r1, r3
 800b0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b0be:	2200      	movs	r2, #0
 800b0c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0c2:	1c59      	adds	r1, r3, #1
 800b0c4:	911d      	str	r1, [sp, #116]	; 0x74
 800b0c6:	785b      	ldrb	r3, [r3, #1]
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	e7c9      	b.n	800b060 <_strtod_l+0x1e8>
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	e7d2      	b.n	800b076 <_strtod_l+0x1fe>
 800b0d0:	2a08      	cmp	r2, #8
 800b0d2:	dc04      	bgt.n	800b0de <_strtod_l+0x266>
 800b0d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b0d6:	434e      	muls	r6, r1
 800b0d8:	9609      	str	r6, [sp, #36]	; 0x24
 800b0da:	3201      	adds	r2, #1
 800b0dc:	e7e2      	b.n	800b0a4 <_strtod_l+0x22c>
 800b0de:	f102 0c01 	add.w	ip, r2, #1
 800b0e2:	f1bc 0f10 	cmp.w	ip, #16
 800b0e6:	bfd8      	it	le
 800b0e8:	fb01 f909 	mulle.w	r9, r1, r9
 800b0ec:	e7f5      	b.n	800b0da <_strtod_l+0x262>
 800b0ee:	2d10      	cmp	r5, #16
 800b0f0:	bfdc      	itt	le
 800b0f2:	220a      	movle	r2, #10
 800b0f4:	fb02 3909 	mlale	r9, r2, r9, r3
 800b0f8:	e7e1      	b.n	800b0be <_strtod_l+0x246>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	9307      	str	r3, [sp, #28]
 800b0fe:	2201      	movs	r2, #1
 800b100:	e77c      	b.n	800affc <_strtod_l+0x184>
 800b102:	f04f 0c00 	mov.w	ip, #0
 800b106:	f108 0302 	add.w	r3, r8, #2
 800b10a:	931d      	str	r3, [sp, #116]	; 0x74
 800b10c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b110:	e785      	b.n	800b01e <_strtod_l+0x1a6>
 800b112:	f04f 0c01 	mov.w	ip, #1
 800b116:	e7f6      	b.n	800b106 <_strtod_l+0x28e>
 800b118:	0800ff70 	.word	0x0800ff70
 800b11c:	0800fd20 	.word	0x0800fd20
 800b120:	7ff00000 	.word	0x7ff00000
 800b124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b126:	1c59      	adds	r1, r3, #1
 800b128:	911d      	str	r1, [sp, #116]	; 0x74
 800b12a:	785b      	ldrb	r3, [r3, #1]
 800b12c:	2b30      	cmp	r3, #48	; 0x30
 800b12e:	d0f9      	beq.n	800b124 <_strtod_l+0x2ac>
 800b130:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800b134:	2908      	cmp	r1, #8
 800b136:	f63f af79 	bhi.w	800b02c <_strtod_l+0x1b4>
 800b13a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b13e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b140:	9308      	str	r3, [sp, #32]
 800b142:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b144:	1c59      	adds	r1, r3, #1
 800b146:	911d      	str	r1, [sp, #116]	; 0x74
 800b148:	785b      	ldrb	r3, [r3, #1]
 800b14a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800b14e:	2e09      	cmp	r6, #9
 800b150:	d937      	bls.n	800b1c2 <_strtod_l+0x34a>
 800b152:	9e08      	ldr	r6, [sp, #32]
 800b154:	1b89      	subs	r1, r1, r6
 800b156:	2908      	cmp	r1, #8
 800b158:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b15c:	dc02      	bgt.n	800b164 <_strtod_l+0x2ec>
 800b15e:	4576      	cmp	r6, lr
 800b160:	bfa8      	it	ge
 800b162:	4676      	movge	r6, lr
 800b164:	f1bc 0f00 	cmp.w	ip, #0
 800b168:	d000      	beq.n	800b16c <_strtod_l+0x2f4>
 800b16a:	4276      	negs	r6, r6
 800b16c:	2d00      	cmp	r5, #0
 800b16e:	d14f      	bne.n	800b210 <_strtod_l+0x398>
 800b170:	9904      	ldr	r1, [sp, #16]
 800b172:	4301      	orrs	r1, r0
 800b174:	f47f aec2 	bne.w	800aefc <_strtod_l+0x84>
 800b178:	2a00      	cmp	r2, #0
 800b17a:	f47f aedb 	bne.w	800af34 <_strtod_l+0xbc>
 800b17e:	2b69      	cmp	r3, #105	; 0x69
 800b180:	d027      	beq.n	800b1d2 <_strtod_l+0x35a>
 800b182:	dc24      	bgt.n	800b1ce <_strtod_l+0x356>
 800b184:	2b49      	cmp	r3, #73	; 0x49
 800b186:	d024      	beq.n	800b1d2 <_strtod_l+0x35a>
 800b188:	2b4e      	cmp	r3, #78	; 0x4e
 800b18a:	f47f aed3 	bne.w	800af34 <_strtod_l+0xbc>
 800b18e:	499e      	ldr	r1, [pc, #632]	; (800b408 <_strtod_l+0x590>)
 800b190:	a81d      	add	r0, sp, #116	; 0x74
 800b192:	f001 fe41 	bl	800ce18 <__match>
 800b196:	2800      	cmp	r0, #0
 800b198:	f43f aecc 	beq.w	800af34 <_strtod_l+0xbc>
 800b19c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	2b28      	cmp	r3, #40	; 0x28
 800b1a2:	d12d      	bne.n	800b200 <_strtod_l+0x388>
 800b1a4:	4999      	ldr	r1, [pc, #612]	; (800b40c <_strtod_l+0x594>)
 800b1a6:	aa20      	add	r2, sp, #128	; 0x80
 800b1a8:	a81d      	add	r0, sp, #116	; 0x74
 800b1aa:	f001 fe49 	bl	800ce40 <__hexnan>
 800b1ae:	2805      	cmp	r0, #5
 800b1b0:	d126      	bne.n	800b200 <_strtod_l+0x388>
 800b1b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1b4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800b1b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b1bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b1c0:	e69c      	b.n	800aefc <_strtod_l+0x84>
 800b1c2:	210a      	movs	r1, #10
 800b1c4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b1c8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b1cc:	e7b9      	b.n	800b142 <_strtod_l+0x2ca>
 800b1ce:	2b6e      	cmp	r3, #110	; 0x6e
 800b1d0:	e7db      	b.n	800b18a <_strtod_l+0x312>
 800b1d2:	498f      	ldr	r1, [pc, #572]	; (800b410 <_strtod_l+0x598>)
 800b1d4:	a81d      	add	r0, sp, #116	; 0x74
 800b1d6:	f001 fe1f 	bl	800ce18 <__match>
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	f43f aeaa 	beq.w	800af34 <_strtod_l+0xbc>
 800b1e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1e2:	498c      	ldr	r1, [pc, #560]	; (800b414 <_strtod_l+0x59c>)
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	a81d      	add	r0, sp, #116	; 0x74
 800b1e8:	931d      	str	r3, [sp, #116]	; 0x74
 800b1ea:	f001 fe15 	bl	800ce18 <__match>
 800b1ee:	b910      	cbnz	r0, 800b1f6 <_strtod_l+0x37e>
 800b1f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	931d      	str	r3, [sp, #116]	; 0x74
 800b1f6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800b424 <_strtod_l+0x5ac>
 800b1fa:	f04f 0a00 	mov.w	sl, #0
 800b1fe:	e67d      	b.n	800aefc <_strtod_l+0x84>
 800b200:	4885      	ldr	r0, [pc, #532]	; (800b418 <_strtod_l+0x5a0>)
 800b202:	f002 fdb5 	bl	800dd70 <nan>
 800b206:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b20a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b20e:	e675      	b.n	800aefc <_strtod_l+0x84>
 800b210:	9b07      	ldr	r3, [sp, #28]
 800b212:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b214:	1af3      	subs	r3, r6, r3
 800b216:	2f00      	cmp	r7, #0
 800b218:	bf08      	it	eq
 800b21a:	462f      	moveq	r7, r5
 800b21c:	2d10      	cmp	r5, #16
 800b21e:	9308      	str	r3, [sp, #32]
 800b220:	46a8      	mov	r8, r5
 800b222:	bfa8      	it	ge
 800b224:	f04f 0810 	movge.w	r8, #16
 800b228:	f7f5 f96c 	bl	8000504 <__aeabi_ui2d>
 800b22c:	2d09      	cmp	r5, #9
 800b22e:	4682      	mov	sl, r0
 800b230:	468b      	mov	fp, r1
 800b232:	dd13      	ble.n	800b25c <_strtod_l+0x3e4>
 800b234:	4b79      	ldr	r3, [pc, #484]	; (800b41c <_strtod_l+0x5a4>)
 800b236:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b23a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b23e:	f7f5 f9db 	bl	80005f8 <__aeabi_dmul>
 800b242:	4682      	mov	sl, r0
 800b244:	4648      	mov	r0, r9
 800b246:	468b      	mov	fp, r1
 800b248:	f7f5 f95c 	bl	8000504 <__aeabi_ui2d>
 800b24c:	4602      	mov	r2, r0
 800b24e:	460b      	mov	r3, r1
 800b250:	4650      	mov	r0, sl
 800b252:	4659      	mov	r1, fp
 800b254:	f7f5 f81a 	bl	800028c <__adddf3>
 800b258:	4682      	mov	sl, r0
 800b25a:	468b      	mov	fp, r1
 800b25c:	2d0f      	cmp	r5, #15
 800b25e:	dc38      	bgt.n	800b2d2 <_strtod_l+0x45a>
 800b260:	9b08      	ldr	r3, [sp, #32]
 800b262:	2b00      	cmp	r3, #0
 800b264:	f43f ae4a 	beq.w	800aefc <_strtod_l+0x84>
 800b268:	dd24      	ble.n	800b2b4 <_strtod_l+0x43c>
 800b26a:	2b16      	cmp	r3, #22
 800b26c:	dc0b      	bgt.n	800b286 <_strtod_l+0x40e>
 800b26e:	4d6b      	ldr	r5, [pc, #428]	; (800b41c <_strtod_l+0x5a4>)
 800b270:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800b274:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b278:	4652      	mov	r2, sl
 800b27a:	465b      	mov	r3, fp
 800b27c:	f7f5 f9bc 	bl	80005f8 <__aeabi_dmul>
 800b280:	4682      	mov	sl, r0
 800b282:	468b      	mov	fp, r1
 800b284:	e63a      	b.n	800aefc <_strtod_l+0x84>
 800b286:	9a08      	ldr	r2, [sp, #32]
 800b288:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b28c:	4293      	cmp	r3, r2
 800b28e:	db20      	blt.n	800b2d2 <_strtod_l+0x45a>
 800b290:	4c62      	ldr	r4, [pc, #392]	; (800b41c <_strtod_l+0x5a4>)
 800b292:	f1c5 050f 	rsb	r5, r5, #15
 800b296:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b29a:	4652      	mov	r2, sl
 800b29c:	465b      	mov	r3, fp
 800b29e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2a2:	f7f5 f9a9 	bl	80005f8 <__aeabi_dmul>
 800b2a6:	9b08      	ldr	r3, [sp, #32]
 800b2a8:	1b5d      	subs	r5, r3, r5
 800b2aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b2ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b2b2:	e7e3      	b.n	800b27c <_strtod_l+0x404>
 800b2b4:	9b08      	ldr	r3, [sp, #32]
 800b2b6:	3316      	adds	r3, #22
 800b2b8:	db0b      	blt.n	800b2d2 <_strtod_l+0x45a>
 800b2ba:	9b07      	ldr	r3, [sp, #28]
 800b2bc:	4a57      	ldr	r2, [pc, #348]	; (800b41c <_strtod_l+0x5a4>)
 800b2be:	1b9e      	subs	r6, r3, r6
 800b2c0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b2c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2c8:	4650      	mov	r0, sl
 800b2ca:	4659      	mov	r1, fp
 800b2cc:	f7f5 fabe 	bl	800084c <__aeabi_ddiv>
 800b2d0:	e7d6      	b.n	800b280 <_strtod_l+0x408>
 800b2d2:	9b08      	ldr	r3, [sp, #32]
 800b2d4:	eba5 0808 	sub.w	r8, r5, r8
 800b2d8:	4498      	add	r8, r3
 800b2da:	f1b8 0f00 	cmp.w	r8, #0
 800b2de:	dd71      	ble.n	800b3c4 <_strtod_l+0x54c>
 800b2e0:	f018 030f 	ands.w	r3, r8, #15
 800b2e4:	d00a      	beq.n	800b2fc <_strtod_l+0x484>
 800b2e6:	494d      	ldr	r1, [pc, #308]	; (800b41c <_strtod_l+0x5a4>)
 800b2e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2ec:	4652      	mov	r2, sl
 800b2ee:	465b      	mov	r3, fp
 800b2f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2f4:	f7f5 f980 	bl	80005f8 <__aeabi_dmul>
 800b2f8:	4682      	mov	sl, r0
 800b2fa:	468b      	mov	fp, r1
 800b2fc:	f038 080f 	bics.w	r8, r8, #15
 800b300:	d04d      	beq.n	800b39e <_strtod_l+0x526>
 800b302:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b306:	dd22      	ble.n	800b34e <_strtod_l+0x4d6>
 800b308:	2500      	movs	r5, #0
 800b30a:	462e      	mov	r6, r5
 800b30c:	9509      	str	r5, [sp, #36]	; 0x24
 800b30e:	9507      	str	r5, [sp, #28]
 800b310:	2322      	movs	r3, #34	; 0x22
 800b312:	f8df b110 	ldr.w	fp, [pc, #272]	; 800b424 <_strtod_l+0x5ac>
 800b316:	6023      	str	r3, [r4, #0]
 800b318:	f04f 0a00 	mov.w	sl, #0
 800b31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f43f adec 	beq.w	800aefc <_strtod_l+0x84>
 800b324:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b326:	4620      	mov	r0, r4
 800b328:	f001 fe92 	bl	800d050 <_Bfree>
 800b32c:	9907      	ldr	r1, [sp, #28]
 800b32e:	4620      	mov	r0, r4
 800b330:	f001 fe8e 	bl	800d050 <_Bfree>
 800b334:	4631      	mov	r1, r6
 800b336:	4620      	mov	r0, r4
 800b338:	f001 fe8a 	bl	800d050 <_Bfree>
 800b33c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b33e:	4620      	mov	r0, r4
 800b340:	f001 fe86 	bl	800d050 <_Bfree>
 800b344:	4629      	mov	r1, r5
 800b346:	4620      	mov	r0, r4
 800b348:	f001 fe82 	bl	800d050 <_Bfree>
 800b34c:	e5d6      	b.n	800aefc <_strtod_l+0x84>
 800b34e:	2300      	movs	r3, #0
 800b350:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b354:	4650      	mov	r0, sl
 800b356:	4659      	mov	r1, fp
 800b358:	4699      	mov	r9, r3
 800b35a:	f1b8 0f01 	cmp.w	r8, #1
 800b35e:	dc21      	bgt.n	800b3a4 <_strtod_l+0x52c>
 800b360:	b10b      	cbz	r3, 800b366 <_strtod_l+0x4ee>
 800b362:	4682      	mov	sl, r0
 800b364:	468b      	mov	fp, r1
 800b366:	4b2e      	ldr	r3, [pc, #184]	; (800b420 <_strtod_l+0x5a8>)
 800b368:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b36c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b370:	4652      	mov	r2, sl
 800b372:	465b      	mov	r3, fp
 800b374:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b378:	f7f5 f93e 	bl	80005f8 <__aeabi_dmul>
 800b37c:	4b29      	ldr	r3, [pc, #164]	; (800b424 <_strtod_l+0x5ac>)
 800b37e:	460a      	mov	r2, r1
 800b380:	400b      	ands	r3, r1
 800b382:	4929      	ldr	r1, [pc, #164]	; (800b428 <_strtod_l+0x5b0>)
 800b384:	428b      	cmp	r3, r1
 800b386:	4682      	mov	sl, r0
 800b388:	d8be      	bhi.n	800b308 <_strtod_l+0x490>
 800b38a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b38e:	428b      	cmp	r3, r1
 800b390:	bf86      	itte	hi
 800b392:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b42c <_strtod_l+0x5b4>
 800b396:	f04f 3aff 	movhi.w	sl, #4294967295
 800b39a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b39e:	2300      	movs	r3, #0
 800b3a0:	9304      	str	r3, [sp, #16]
 800b3a2:	e081      	b.n	800b4a8 <_strtod_l+0x630>
 800b3a4:	f018 0f01 	tst.w	r8, #1
 800b3a8:	d007      	beq.n	800b3ba <_strtod_l+0x542>
 800b3aa:	4b1d      	ldr	r3, [pc, #116]	; (800b420 <_strtod_l+0x5a8>)
 800b3ac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b4:	f7f5 f920 	bl	80005f8 <__aeabi_dmul>
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	f109 0901 	add.w	r9, r9, #1
 800b3be:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b3c2:	e7ca      	b.n	800b35a <_strtod_l+0x4e2>
 800b3c4:	d0eb      	beq.n	800b39e <_strtod_l+0x526>
 800b3c6:	f1c8 0800 	rsb	r8, r8, #0
 800b3ca:	f018 020f 	ands.w	r2, r8, #15
 800b3ce:	d00a      	beq.n	800b3e6 <_strtod_l+0x56e>
 800b3d0:	4b12      	ldr	r3, [pc, #72]	; (800b41c <_strtod_l+0x5a4>)
 800b3d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3d6:	4650      	mov	r0, sl
 800b3d8:	4659      	mov	r1, fp
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	f7f5 fa35 	bl	800084c <__aeabi_ddiv>
 800b3e2:	4682      	mov	sl, r0
 800b3e4:	468b      	mov	fp, r1
 800b3e6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b3ea:	d0d8      	beq.n	800b39e <_strtod_l+0x526>
 800b3ec:	f1b8 0f1f 	cmp.w	r8, #31
 800b3f0:	dd1e      	ble.n	800b430 <_strtod_l+0x5b8>
 800b3f2:	2500      	movs	r5, #0
 800b3f4:	462e      	mov	r6, r5
 800b3f6:	9509      	str	r5, [sp, #36]	; 0x24
 800b3f8:	9507      	str	r5, [sp, #28]
 800b3fa:	2322      	movs	r3, #34	; 0x22
 800b3fc:	f04f 0a00 	mov.w	sl, #0
 800b400:	f04f 0b00 	mov.w	fp, #0
 800b404:	6023      	str	r3, [r4, #0]
 800b406:	e789      	b.n	800b31c <_strtod_l+0x4a4>
 800b408:	0800fcf1 	.word	0x0800fcf1
 800b40c:	0800fd34 	.word	0x0800fd34
 800b410:	0800fce9 	.word	0x0800fce9
 800b414:	0800fe74 	.word	0x0800fe74
 800b418:	08010130 	.word	0x08010130
 800b41c:	08010010 	.word	0x08010010
 800b420:	0800ffe8 	.word	0x0800ffe8
 800b424:	7ff00000 	.word	0x7ff00000
 800b428:	7ca00000 	.word	0x7ca00000
 800b42c:	7fefffff 	.word	0x7fefffff
 800b430:	f018 0310 	ands.w	r3, r8, #16
 800b434:	bf18      	it	ne
 800b436:	236a      	movne	r3, #106	; 0x6a
 800b438:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800b7f0 <_strtod_l+0x978>
 800b43c:	9304      	str	r3, [sp, #16]
 800b43e:	4650      	mov	r0, sl
 800b440:	4659      	mov	r1, fp
 800b442:	2300      	movs	r3, #0
 800b444:	f018 0f01 	tst.w	r8, #1
 800b448:	d004      	beq.n	800b454 <_strtod_l+0x5dc>
 800b44a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b44e:	f7f5 f8d3 	bl	80005f8 <__aeabi_dmul>
 800b452:	2301      	movs	r3, #1
 800b454:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b458:	f109 0908 	add.w	r9, r9, #8
 800b45c:	d1f2      	bne.n	800b444 <_strtod_l+0x5cc>
 800b45e:	b10b      	cbz	r3, 800b464 <_strtod_l+0x5ec>
 800b460:	4682      	mov	sl, r0
 800b462:	468b      	mov	fp, r1
 800b464:	9b04      	ldr	r3, [sp, #16]
 800b466:	b1bb      	cbz	r3, 800b498 <_strtod_l+0x620>
 800b468:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b46c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b470:	2b00      	cmp	r3, #0
 800b472:	4659      	mov	r1, fp
 800b474:	dd10      	ble.n	800b498 <_strtod_l+0x620>
 800b476:	2b1f      	cmp	r3, #31
 800b478:	f340 8128 	ble.w	800b6cc <_strtod_l+0x854>
 800b47c:	2b34      	cmp	r3, #52	; 0x34
 800b47e:	bfde      	ittt	le
 800b480:	3b20      	suble	r3, #32
 800b482:	f04f 32ff 	movle.w	r2, #4294967295
 800b486:	fa02 f303 	lslle.w	r3, r2, r3
 800b48a:	f04f 0a00 	mov.w	sl, #0
 800b48e:	bfcc      	ite	gt
 800b490:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b494:	ea03 0b01 	andle.w	fp, r3, r1
 800b498:	2200      	movs	r2, #0
 800b49a:	2300      	movs	r3, #0
 800b49c:	4650      	mov	r0, sl
 800b49e:	4659      	mov	r1, fp
 800b4a0:	f7f5 fb12 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d1a4      	bne.n	800b3f2 <_strtod_l+0x57a>
 800b4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4aa:	9300      	str	r3, [sp, #0]
 800b4ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b4ae:	462b      	mov	r3, r5
 800b4b0:	463a      	mov	r2, r7
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f001 fe38 	bl	800d128 <__s2b>
 800b4b8:	9009      	str	r0, [sp, #36]	; 0x24
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	f43f af24 	beq.w	800b308 <_strtod_l+0x490>
 800b4c0:	9b07      	ldr	r3, [sp, #28]
 800b4c2:	1b9e      	subs	r6, r3, r6
 800b4c4:	9b08      	ldr	r3, [sp, #32]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	bfb4      	ite	lt
 800b4ca:	4633      	movlt	r3, r6
 800b4cc:	2300      	movge	r3, #0
 800b4ce:	9310      	str	r3, [sp, #64]	; 0x40
 800b4d0:	9b08      	ldr	r3, [sp, #32]
 800b4d2:	2500      	movs	r5, #0
 800b4d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b4d8:	9318      	str	r3, [sp, #96]	; 0x60
 800b4da:	462e      	mov	r6, r5
 800b4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4de:	4620      	mov	r0, r4
 800b4e0:	6859      	ldr	r1, [r3, #4]
 800b4e2:	f001 fd75 	bl	800cfd0 <_Balloc>
 800b4e6:	9007      	str	r0, [sp, #28]
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	f43f af11 	beq.w	800b310 <_strtod_l+0x498>
 800b4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4f0:	691a      	ldr	r2, [r3, #16]
 800b4f2:	3202      	adds	r2, #2
 800b4f4:	f103 010c 	add.w	r1, r3, #12
 800b4f8:	0092      	lsls	r2, r2, #2
 800b4fa:	300c      	adds	r0, #12
 800b4fc:	f001 fd5a 	bl	800cfb4 <memcpy>
 800b500:	ec4b ab10 	vmov	d0, sl, fp
 800b504:	aa20      	add	r2, sp, #128	; 0x80
 800b506:	a91f      	add	r1, sp, #124	; 0x7c
 800b508:	4620      	mov	r0, r4
 800b50a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b50e:	f002 f947 	bl	800d7a0 <__d2b>
 800b512:	901e      	str	r0, [sp, #120]	; 0x78
 800b514:	2800      	cmp	r0, #0
 800b516:	f43f aefb 	beq.w	800b310 <_strtod_l+0x498>
 800b51a:	2101      	movs	r1, #1
 800b51c:	4620      	mov	r0, r4
 800b51e:	f001 fe9d 	bl	800d25c <__i2b>
 800b522:	4606      	mov	r6, r0
 800b524:	2800      	cmp	r0, #0
 800b526:	f43f aef3 	beq.w	800b310 <_strtod_l+0x498>
 800b52a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b52c:	9904      	ldr	r1, [sp, #16]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	bfab      	itete	ge
 800b532:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800b534:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800b536:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800b538:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800b53c:	bfac      	ite	ge
 800b53e:	eb03 0902 	addge.w	r9, r3, r2
 800b542:	1ad7      	sublt	r7, r2, r3
 800b544:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b546:	eba3 0801 	sub.w	r8, r3, r1
 800b54a:	4490      	add	r8, r2
 800b54c:	4ba3      	ldr	r3, [pc, #652]	; (800b7dc <_strtod_l+0x964>)
 800b54e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b552:	4598      	cmp	r8, r3
 800b554:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b558:	f280 80cc 	bge.w	800b6f4 <_strtod_l+0x87c>
 800b55c:	eba3 0308 	sub.w	r3, r3, r8
 800b560:	2b1f      	cmp	r3, #31
 800b562:	eba2 0203 	sub.w	r2, r2, r3
 800b566:	f04f 0101 	mov.w	r1, #1
 800b56a:	f300 80b6 	bgt.w	800b6da <_strtod_l+0x862>
 800b56e:	fa01 f303 	lsl.w	r3, r1, r3
 800b572:	9311      	str	r3, [sp, #68]	; 0x44
 800b574:	2300      	movs	r3, #0
 800b576:	930c      	str	r3, [sp, #48]	; 0x30
 800b578:	eb09 0802 	add.w	r8, r9, r2
 800b57c:	9b04      	ldr	r3, [sp, #16]
 800b57e:	45c1      	cmp	r9, r8
 800b580:	4417      	add	r7, r2
 800b582:	441f      	add	r7, r3
 800b584:	464b      	mov	r3, r9
 800b586:	bfa8      	it	ge
 800b588:	4643      	movge	r3, r8
 800b58a:	42bb      	cmp	r3, r7
 800b58c:	bfa8      	it	ge
 800b58e:	463b      	movge	r3, r7
 800b590:	2b00      	cmp	r3, #0
 800b592:	bfc2      	ittt	gt
 800b594:	eba8 0803 	subgt.w	r8, r8, r3
 800b598:	1aff      	subgt	r7, r7, r3
 800b59a:	eba9 0903 	subgt.w	r9, r9, r3
 800b59e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	dd17      	ble.n	800b5d4 <_strtod_l+0x75c>
 800b5a4:	4631      	mov	r1, r6
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f001 ff13 	bl	800d3d4 <__pow5mult>
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	f43f aead 	beq.w	800b310 <_strtod_l+0x498>
 800b5b6:	4601      	mov	r1, r0
 800b5b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f001 fe64 	bl	800d288 <__multiply>
 800b5c0:	900f      	str	r0, [sp, #60]	; 0x3c
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	f43f aea4 	beq.w	800b310 <_strtod_l+0x498>
 800b5c8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f001 fd40 	bl	800d050 <_Bfree>
 800b5d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5d2:	931e      	str	r3, [sp, #120]	; 0x78
 800b5d4:	f1b8 0f00 	cmp.w	r8, #0
 800b5d8:	f300 8091 	bgt.w	800b6fe <_strtod_l+0x886>
 800b5dc:	9b08      	ldr	r3, [sp, #32]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	dd08      	ble.n	800b5f4 <_strtod_l+0x77c>
 800b5e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b5e4:	9907      	ldr	r1, [sp, #28]
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	f001 fef4 	bl	800d3d4 <__pow5mult>
 800b5ec:	9007      	str	r0, [sp, #28]
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	f43f ae8e 	beq.w	800b310 <_strtod_l+0x498>
 800b5f4:	2f00      	cmp	r7, #0
 800b5f6:	dd08      	ble.n	800b60a <_strtod_l+0x792>
 800b5f8:	9907      	ldr	r1, [sp, #28]
 800b5fa:	463a      	mov	r2, r7
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f001 ff43 	bl	800d488 <__lshift>
 800b602:	9007      	str	r0, [sp, #28]
 800b604:	2800      	cmp	r0, #0
 800b606:	f43f ae83 	beq.w	800b310 <_strtod_l+0x498>
 800b60a:	f1b9 0f00 	cmp.w	r9, #0
 800b60e:	dd08      	ble.n	800b622 <_strtod_l+0x7aa>
 800b610:	4631      	mov	r1, r6
 800b612:	464a      	mov	r2, r9
 800b614:	4620      	mov	r0, r4
 800b616:	f001 ff37 	bl	800d488 <__lshift>
 800b61a:	4606      	mov	r6, r0
 800b61c:	2800      	cmp	r0, #0
 800b61e:	f43f ae77 	beq.w	800b310 <_strtod_l+0x498>
 800b622:	9a07      	ldr	r2, [sp, #28]
 800b624:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b626:	4620      	mov	r0, r4
 800b628:	f001 ffb6 	bl	800d598 <__mdiff>
 800b62c:	4605      	mov	r5, r0
 800b62e:	2800      	cmp	r0, #0
 800b630:	f43f ae6e 	beq.w	800b310 <_strtod_l+0x498>
 800b634:	68c3      	ldr	r3, [r0, #12]
 800b636:	930f      	str	r3, [sp, #60]	; 0x3c
 800b638:	2300      	movs	r3, #0
 800b63a:	60c3      	str	r3, [r0, #12]
 800b63c:	4631      	mov	r1, r6
 800b63e:	f001 ff8f 	bl	800d560 <__mcmp>
 800b642:	2800      	cmp	r0, #0
 800b644:	da65      	bge.n	800b712 <_strtod_l+0x89a>
 800b646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b648:	ea53 030a 	orrs.w	r3, r3, sl
 800b64c:	f040 8087 	bne.w	800b75e <_strtod_l+0x8e6>
 800b650:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b654:	2b00      	cmp	r3, #0
 800b656:	f040 8082 	bne.w	800b75e <_strtod_l+0x8e6>
 800b65a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b65e:	0d1b      	lsrs	r3, r3, #20
 800b660:	051b      	lsls	r3, r3, #20
 800b662:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b666:	d97a      	bls.n	800b75e <_strtod_l+0x8e6>
 800b668:	696b      	ldr	r3, [r5, #20]
 800b66a:	b913      	cbnz	r3, 800b672 <_strtod_l+0x7fa>
 800b66c:	692b      	ldr	r3, [r5, #16]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	dd75      	ble.n	800b75e <_strtod_l+0x8e6>
 800b672:	4629      	mov	r1, r5
 800b674:	2201      	movs	r2, #1
 800b676:	4620      	mov	r0, r4
 800b678:	f001 ff06 	bl	800d488 <__lshift>
 800b67c:	4631      	mov	r1, r6
 800b67e:	4605      	mov	r5, r0
 800b680:	f001 ff6e 	bl	800d560 <__mcmp>
 800b684:	2800      	cmp	r0, #0
 800b686:	dd6a      	ble.n	800b75e <_strtod_l+0x8e6>
 800b688:	9904      	ldr	r1, [sp, #16]
 800b68a:	4a55      	ldr	r2, [pc, #340]	; (800b7e0 <_strtod_l+0x968>)
 800b68c:	465b      	mov	r3, fp
 800b68e:	2900      	cmp	r1, #0
 800b690:	f000 8085 	beq.w	800b79e <_strtod_l+0x926>
 800b694:	ea02 010b 	and.w	r1, r2, fp
 800b698:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b69c:	dc7f      	bgt.n	800b79e <_strtod_l+0x926>
 800b69e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b6a2:	f77f aeaa 	ble.w	800b3fa <_strtod_l+0x582>
 800b6a6:	4a4f      	ldr	r2, [pc, #316]	; (800b7e4 <_strtod_l+0x96c>)
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800b6ae:	4650      	mov	r0, sl
 800b6b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800b6b4:	4659      	mov	r1, fp
 800b6b6:	f7f4 ff9f 	bl	80005f8 <__aeabi_dmul>
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4303      	orrs	r3, r0
 800b6be:	bf08      	it	eq
 800b6c0:	2322      	moveq	r3, #34	; 0x22
 800b6c2:	4682      	mov	sl, r0
 800b6c4:	468b      	mov	fp, r1
 800b6c6:	bf08      	it	eq
 800b6c8:	6023      	streq	r3, [r4, #0]
 800b6ca:	e62b      	b.n	800b324 <_strtod_l+0x4ac>
 800b6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b6d4:	ea03 0a0a 	and.w	sl, r3, sl
 800b6d8:	e6de      	b.n	800b498 <_strtod_l+0x620>
 800b6da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b6de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b6e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b6e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b6ea:	fa01 f308 	lsl.w	r3, r1, r8
 800b6ee:	930c      	str	r3, [sp, #48]	; 0x30
 800b6f0:	9111      	str	r1, [sp, #68]	; 0x44
 800b6f2:	e741      	b.n	800b578 <_strtod_l+0x700>
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	930c      	str	r3, [sp, #48]	; 0x30
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	9311      	str	r3, [sp, #68]	; 0x44
 800b6fc:	e73c      	b.n	800b578 <_strtod_l+0x700>
 800b6fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b700:	4642      	mov	r2, r8
 800b702:	4620      	mov	r0, r4
 800b704:	f001 fec0 	bl	800d488 <__lshift>
 800b708:	901e      	str	r0, [sp, #120]	; 0x78
 800b70a:	2800      	cmp	r0, #0
 800b70c:	f47f af66 	bne.w	800b5dc <_strtod_l+0x764>
 800b710:	e5fe      	b.n	800b310 <_strtod_l+0x498>
 800b712:	465f      	mov	r7, fp
 800b714:	d16e      	bne.n	800b7f4 <_strtod_l+0x97c>
 800b716:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b718:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b71c:	b342      	cbz	r2, 800b770 <_strtod_l+0x8f8>
 800b71e:	4a32      	ldr	r2, [pc, #200]	; (800b7e8 <_strtod_l+0x970>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d128      	bne.n	800b776 <_strtod_l+0x8fe>
 800b724:	9b04      	ldr	r3, [sp, #16]
 800b726:	4650      	mov	r0, sl
 800b728:	b1eb      	cbz	r3, 800b766 <_strtod_l+0x8ee>
 800b72a:	4a2d      	ldr	r2, [pc, #180]	; (800b7e0 <_strtod_l+0x968>)
 800b72c:	403a      	ands	r2, r7
 800b72e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b732:	f04f 31ff 	mov.w	r1, #4294967295
 800b736:	d819      	bhi.n	800b76c <_strtod_l+0x8f4>
 800b738:	0d12      	lsrs	r2, r2, #20
 800b73a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b73e:	fa01 f303 	lsl.w	r3, r1, r3
 800b742:	4298      	cmp	r0, r3
 800b744:	d117      	bne.n	800b776 <_strtod_l+0x8fe>
 800b746:	4b29      	ldr	r3, [pc, #164]	; (800b7ec <_strtod_l+0x974>)
 800b748:	429f      	cmp	r7, r3
 800b74a:	d102      	bne.n	800b752 <_strtod_l+0x8da>
 800b74c:	3001      	adds	r0, #1
 800b74e:	f43f addf 	beq.w	800b310 <_strtod_l+0x498>
 800b752:	4b23      	ldr	r3, [pc, #140]	; (800b7e0 <_strtod_l+0x968>)
 800b754:	403b      	ands	r3, r7
 800b756:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b75a:	f04f 0a00 	mov.w	sl, #0
 800b75e:	9b04      	ldr	r3, [sp, #16]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1a0      	bne.n	800b6a6 <_strtod_l+0x82e>
 800b764:	e5de      	b.n	800b324 <_strtod_l+0x4ac>
 800b766:	f04f 33ff 	mov.w	r3, #4294967295
 800b76a:	e7ea      	b.n	800b742 <_strtod_l+0x8ca>
 800b76c:	460b      	mov	r3, r1
 800b76e:	e7e8      	b.n	800b742 <_strtod_l+0x8ca>
 800b770:	ea53 030a 	orrs.w	r3, r3, sl
 800b774:	d088      	beq.n	800b688 <_strtod_l+0x810>
 800b776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b778:	b1db      	cbz	r3, 800b7b2 <_strtod_l+0x93a>
 800b77a:	423b      	tst	r3, r7
 800b77c:	d0ef      	beq.n	800b75e <_strtod_l+0x8e6>
 800b77e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b780:	9a04      	ldr	r2, [sp, #16]
 800b782:	4650      	mov	r0, sl
 800b784:	4659      	mov	r1, fp
 800b786:	b1c3      	cbz	r3, 800b7ba <_strtod_l+0x942>
 800b788:	f7ff fb5a 	bl	800ae40 <sulp>
 800b78c:	4602      	mov	r2, r0
 800b78e:	460b      	mov	r3, r1
 800b790:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b794:	f7f4 fd7a 	bl	800028c <__adddf3>
 800b798:	4682      	mov	sl, r0
 800b79a:	468b      	mov	fp, r1
 800b79c:	e7df      	b.n	800b75e <_strtod_l+0x8e6>
 800b79e:	4013      	ands	r3, r2
 800b7a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b7a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b7a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b7ac:	f04f 3aff 	mov.w	sl, #4294967295
 800b7b0:	e7d5      	b.n	800b75e <_strtod_l+0x8e6>
 800b7b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b7b4:	ea13 0f0a 	tst.w	r3, sl
 800b7b8:	e7e0      	b.n	800b77c <_strtod_l+0x904>
 800b7ba:	f7ff fb41 	bl	800ae40 <sulp>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b7c6:	f7f4 fd5f 	bl	8000288 <__aeabi_dsub>
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	4682      	mov	sl, r0
 800b7d0:	468b      	mov	fp, r1
 800b7d2:	f7f5 f979 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d0c1      	beq.n	800b75e <_strtod_l+0x8e6>
 800b7da:	e60e      	b.n	800b3fa <_strtod_l+0x582>
 800b7dc:	fffffc02 	.word	0xfffffc02
 800b7e0:	7ff00000 	.word	0x7ff00000
 800b7e4:	39500000 	.word	0x39500000
 800b7e8:	000fffff 	.word	0x000fffff
 800b7ec:	7fefffff 	.word	0x7fefffff
 800b7f0:	0800fd48 	.word	0x0800fd48
 800b7f4:	4631      	mov	r1, r6
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	f002 f82e 	bl	800d858 <__ratio>
 800b7fc:	ec59 8b10 	vmov	r8, r9, d0
 800b800:	ee10 0a10 	vmov	r0, s0
 800b804:	2200      	movs	r2, #0
 800b806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b80a:	4649      	mov	r1, r9
 800b80c:	f7f5 f970 	bl	8000af0 <__aeabi_dcmple>
 800b810:	2800      	cmp	r0, #0
 800b812:	d07c      	beq.n	800b90e <_strtod_l+0xa96>
 800b814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b816:	2b00      	cmp	r3, #0
 800b818:	d04c      	beq.n	800b8b4 <_strtod_l+0xa3c>
 800b81a:	4b95      	ldr	r3, [pc, #596]	; (800ba70 <_strtod_l+0xbf8>)
 800b81c:	2200      	movs	r2, #0
 800b81e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b822:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ba70 <_strtod_l+0xbf8>
 800b826:	f04f 0800 	mov.w	r8, #0
 800b82a:	4b92      	ldr	r3, [pc, #584]	; (800ba74 <_strtod_l+0xbfc>)
 800b82c:	403b      	ands	r3, r7
 800b82e:	9311      	str	r3, [sp, #68]	; 0x44
 800b830:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b832:	4b91      	ldr	r3, [pc, #580]	; (800ba78 <_strtod_l+0xc00>)
 800b834:	429a      	cmp	r2, r3
 800b836:	f040 80b2 	bne.w	800b99e <_strtod_l+0xb26>
 800b83a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b83e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b842:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b846:	ec4b ab10 	vmov	d0, sl, fp
 800b84a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800b84e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b852:	f001 ff29 	bl	800d6a8 <__ulp>
 800b856:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b85a:	ec53 2b10 	vmov	r2, r3, d0
 800b85e:	f7f4 fecb 	bl	80005f8 <__aeabi_dmul>
 800b862:	4652      	mov	r2, sl
 800b864:	465b      	mov	r3, fp
 800b866:	f7f4 fd11 	bl	800028c <__adddf3>
 800b86a:	460b      	mov	r3, r1
 800b86c:	4981      	ldr	r1, [pc, #516]	; (800ba74 <_strtod_l+0xbfc>)
 800b86e:	4a83      	ldr	r2, [pc, #524]	; (800ba7c <_strtod_l+0xc04>)
 800b870:	4019      	ands	r1, r3
 800b872:	4291      	cmp	r1, r2
 800b874:	4682      	mov	sl, r0
 800b876:	d95e      	bls.n	800b936 <_strtod_l+0xabe>
 800b878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b87a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b87e:	4293      	cmp	r3, r2
 800b880:	d103      	bne.n	800b88a <_strtod_l+0xa12>
 800b882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b884:	3301      	adds	r3, #1
 800b886:	f43f ad43 	beq.w	800b310 <_strtod_l+0x498>
 800b88a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800ba88 <_strtod_l+0xc10>
 800b88e:	f04f 3aff 	mov.w	sl, #4294967295
 800b892:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b894:	4620      	mov	r0, r4
 800b896:	f001 fbdb 	bl	800d050 <_Bfree>
 800b89a:	9907      	ldr	r1, [sp, #28]
 800b89c:	4620      	mov	r0, r4
 800b89e:	f001 fbd7 	bl	800d050 <_Bfree>
 800b8a2:	4631      	mov	r1, r6
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f001 fbd3 	bl	800d050 <_Bfree>
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	f001 fbcf 	bl	800d050 <_Bfree>
 800b8b2:	e613      	b.n	800b4dc <_strtod_l+0x664>
 800b8b4:	f1ba 0f00 	cmp.w	sl, #0
 800b8b8:	d11b      	bne.n	800b8f2 <_strtod_l+0xa7a>
 800b8ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8be:	b9f3      	cbnz	r3, 800b8fe <_strtod_l+0xa86>
 800b8c0:	4b6b      	ldr	r3, [pc, #428]	; (800ba70 <_strtod_l+0xbf8>)
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	4640      	mov	r0, r8
 800b8c6:	4649      	mov	r1, r9
 800b8c8:	f7f5 f908 	bl	8000adc <__aeabi_dcmplt>
 800b8cc:	b9d0      	cbnz	r0, 800b904 <_strtod_l+0xa8c>
 800b8ce:	4640      	mov	r0, r8
 800b8d0:	4649      	mov	r1, r9
 800b8d2:	4b6b      	ldr	r3, [pc, #428]	; (800ba80 <_strtod_l+0xc08>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f7f4 fe8f 	bl	80005f8 <__aeabi_dmul>
 800b8da:	4680      	mov	r8, r0
 800b8dc:	4689      	mov	r9, r1
 800b8de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b8e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b8e6:	931b      	str	r3, [sp, #108]	; 0x6c
 800b8e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b8ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b8f0:	e79b      	b.n	800b82a <_strtod_l+0x9b2>
 800b8f2:	f1ba 0f01 	cmp.w	sl, #1
 800b8f6:	d102      	bne.n	800b8fe <_strtod_l+0xa86>
 800b8f8:	2f00      	cmp	r7, #0
 800b8fa:	f43f ad7e 	beq.w	800b3fa <_strtod_l+0x582>
 800b8fe:	4b61      	ldr	r3, [pc, #388]	; (800ba84 <_strtod_l+0xc0c>)
 800b900:	2200      	movs	r2, #0
 800b902:	e78c      	b.n	800b81e <_strtod_l+0x9a6>
 800b904:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ba80 <_strtod_l+0xc08>
 800b908:	f04f 0800 	mov.w	r8, #0
 800b90c:	e7e7      	b.n	800b8de <_strtod_l+0xa66>
 800b90e:	4b5c      	ldr	r3, [pc, #368]	; (800ba80 <_strtod_l+0xc08>)
 800b910:	4640      	mov	r0, r8
 800b912:	4649      	mov	r1, r9
 800b914:	2200      	movs	r2, #0
 800b916:	f7f4 fe6f 	bl	80005f8 <__aeabi_dmul>
 800b91a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b91c:	4680      	mov	r8, r0
 800b91e:	4689      	mov	r9, r1
 800b920:	b933      	cbnz	r3, 800b930 <_strtod_l+0xab8>
 800b922:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b926:	9012      	str	r0, [sp, #72]	; 0x48
 800b928:	9313      	str	r3, [sp, #76]	; 0x4c
 800b92a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b92e:	e7dd      	b.n	800b8ec <_strtod_l+0xa74>
 800b930:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b934:	e7f9      	b.n	800b92a <_strtod_l+0xab2>
 800b936:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b93a:	9b04      	ldr	r3, [sp, #16]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1a8      	bne.n	800b892 <_strtod_l+0xa1a>
 800b940:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b944:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b946:	0d1b      	lsrs	r3, r3, #20
 800b948:	051b      	lsls	r3, r3, #20
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d1a1      	bne.n	800b892 <_strtod_l+0xa1a>
 800b94e:	4640      	mov	r0, r8
 800b950:	4649      	mov	r1, r9
 800b952:	f7f5 f9b1 	bl	8000cb8 <__aeabi_d2lz>
 800b956:	f7f4 fe21 	bl	800059c <__aeabi_l2d>
 800b95a:	4602      	mov	r2, r0
 800b95c:	460b      	mov	r3, r1
 800b95e:	4640      	mov	r0, r8
 800b960:	4649      	mov	r1, r9
 800b962:	f7f4 fc91 	bl	8000288 <__aeabi_dsub>
 800b966:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b968:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b96c:	ea43 030a 	orr.w	r3, r3, sl
 800b970:	4313      	orrs	r3, r2
 800b972:	4680      	mov	r8, r0
 800b974:	4689      	mov	r9, r1
 800b976:	d053      	beq.n	800ba20 <_strtod_l+0xba8>
 800b978:	a335      	add	r3, pc, #212	; (adr r3, 800ba50 <_strtod_l+0xbd8>)
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	f7f5 f8ad 	bl	8000adc <__aeabi_dcmplt>
 800b982:	2800      	cmp	r0, #0
 800b984:	f47f acce 	bne.w	800b324 <_strtod_l+0x4ac>
 800b988:	a333      	add	r3, pc, #204	; (adr r3, 800ba58 <_strtod_l+0xbe0>)
 800b98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98e:	4640      	mov	r0, r8
 800b990:	4649      	mov	r1, r9
 800b992:	f7f5 f8c1 	bl	8000b18 <__aeabi_dcmpgt>
 800b996:	2800      	cmp	r0, #0
 800b998:	f43f af7b 	beq.w	800b892 <_strtod_l+0xa1a>
 800b99c:	e4c2      	b.n	800b324 <_strtod_l+0x4ac>
 800b99e:	9b04      	ldr	r3, [sp, #16]
 800b9a0:	b333      	cbz	r3, 800b9f0 <_strtod_l+0xb78>
 800b9a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b9a8:	d822      	bhi.n	800b9f0 <_strtod_l+0xb78>
 800b9aa:	a32d      	add	r3, pc, #180	; (adr r3, 800ba60 <_strtod_l+0xbe8>)
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	4640      	mov	r0, r8
 800b9b2:	4649      	mov	r1, r9
 800b9b4:	f7f5 f89c 	bl	8000af0 <__aeabi_dcmple>
 800b9b8:	b1a0      	cbz	r0, 800b9e4 <_strtod_l+0xb6c>
 800b9ba:	4649      	mov	r1, r9
 800b9bc:	4640      	mov	r0, r8
 800b9be:	f7f5 f8f3 	bl	8000ba8 <__aeabi_d2uiz>
 800b9c2:	2801      	cmp	r0, #1
 800b9c4:	bf38      	it	cc
 800b9c6:	2001      	movcc	r0, #1
 800b9c8:	f7f4 fd9c 	bl	8000504 <__aeabi_ui2d>
 800b9cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9ce:	4680      	mov	r8, r0
 800b9d0:	4689      	mov	r9, r1
 800b9d2:	bb13      	cbnz	r3, 800ba1a <_strtod_l+0xba2>
 800b9d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9d8:	9014      	str	r0, [sp, #80]	; 0x50
 800b9da:	9315      	str	r3, [sp, #84]	; 0x54
 800b9dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b9e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b9e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b9e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b9ec:	1a9b      	subs	r3, r3, r2
 800b9ee:	930d      	str	r3, [sp, #52]	; 0x34
 800b9f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b9f4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b9f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b9fc:	f001 fe54 	bl	800d6a8 <__ulp>
 800ba00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba04:	ec53 2b10 	vmov	r2, r3, d0
 800ba08:	f7f4 fdf6 	bl	80005f8 <__aeabi_dmul>
 800ba0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ba10:	f7f4 fc3c 	bl	800028c <__adddf3>
 800ba14:	4682      	mov	sl, r0
 800ba16:	468b      	mov	fp, r1
 800ba18:	e78f      	b.n	800b93a <_strtod_l+0xac2>
 800ba1a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800ba1e:	e7dd      	b.n	800b9dc <_strtod_l+0xb64>
 800ba20:	a311      	add	r3, pc, #68	; (adr r3, 800ba68 <_strtod_l+0xbf0>)
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	f7f5 f859 	bl	8000adc <__aeabi_dcmplt>
 800ba2a:	e7b4      	b.n	800b996 <_strtod_l+0xb1e>
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	930e      	str	r3, [sp, #56]	; 0x38
 800ba30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ba32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ba34:	6013      	str	r3, [r2, #0]
 800ba36:	f7ff ba65 	b.w	800af04 <_strtod_l+0x8c>
 800ba3a:	2b65      	cmp	r3, #101	; 0x65
 800ba3c:	f43f ab5d 	beq.w	800b0fa <_strtod_l+0x282>
 800ba40:	2b45      	cmp	r3, #69	; 0x45
 800ba42:	f43f ab5a 	beq.w	800b0fa <_strtod_l+0x282>
 800ba46:	2201      	movs	r2, #1
 800ba48:	f7ff bb92 	b.w	800b170 <_strtod_l+0x2f8>
 800ba4c:	f3af 8000 	nop.w
 800ba50:	94a03595 	.word	0x94a03595
 800ba54:	3fdfffff 	.word	0x3fdfffff
 800ba58:	35afe535 	.word	0x35afe535
 800ba5c:	3fe00000 	.word	0x3fe00000
 800ba60:	ffc00000 	.word	0xffc00000
 800ba64:	41dfffff 	.word	0x41dfffff
 800ba68:	94a03595 	.word	0x94a03595
 800ba6c:	3fcfffff 	.word	0x3fcfffff
 800ba70:	3ff00000 	.word	0x3ff00000
 800ba74:	7ff00000 	.word	0x7ff00000
 800ba78:	7fe00000 	.word	0x7fe00000
 800ba7c:	7c9fffff 	.word	0x7c9fffff
 800ba80:	3fe00000 	.word	0x3fe00000
 800ba84:	bff00000 	.word	0xbff00000
 800ba88:	7fefffff 	.word	0x7fefffff

0800ba8c <_strtod_r>:
 800ba8c:	4b01      	ldr	r3, [pc, #4]	; (800ba94 <_strtod_r+0x8>)
 800ba8e:	f7ff b9f3 	b.w	800ae78 <_strtod_l>
 800ba92:	bf00      	nop
 800ba94:	200000ec 	.word	0x200000ec

0800ba98 <_strtol_l.isra.0>:
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba9e:	d001      	beq.n	800baa4 <_strtol_l.isra.0+0xc>
 800baa0:	2b24      	cmp	r3, #36	; 0x24
 800baa2:	d906      	bls.n	800bab2 <_strtol_l.isra.0+0x1a>
 800baa4:	f7fe fafa 	bl	800a09c <__errno>
 800baa8:	2316      	movs	r3, #22
 800baaa:	6003      	str	r3, [r0, #0]
 800baac:	2000      	movs	r0, #0
 800baae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bab2:	4f3a      	ldr	r7, [pc, #232]	; (800bb9c <_strtol_l.isra.0+0x104>)
 800bab4:	468e      	mov	lr, r1
 800bab6:	4676      	mov	r6, lr
 800bab8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800babc:	5de5      	ldrb	r5, [r4, r7]
 800babe:	f015 0508 	ands.w	r5, r5, #8
 800bac2:	d1f8      	bne.n	800bab6 <_strtol_l.isra.0+0x1e>
 800bac4:	2c2d      	cmp	r4, #45	; 0x2d
 800bac6:	d134      	bne.n	800bb32 <_strtol_l.isra.0+0x9a>
 800bac8:	f89e 4000 	ldrb.w	r4, [lr]
 800bacc:	f04f 0801 	mov.w	r8, #1
 800bad0:	f106 0e02 	add.w	lr, r6, #2
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d05c      	beq.n	800bb92 <_strtol_l.isra.0+0xfa>
 800bad8:	2b10      	cmp	r3, #16
 800bada:	d10c      	bne.n	800baf6 <_strtol_l.isra.0+0x5e>
 800badc:	2c30      	cmp	r4, #48	; 0x30
 800bade:	d10a      	bne.n	800baf6 <_strtol_l.isra.0+0x5e>
 800bae0:	f89e 4000 	ldrb.w	r4, [lr]
 800bae4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bae8:	2c58      	cmp	r4, #88	; 0x58
 800baea:	d14d      	bne.n	800bb88 <_strtol_l.isra.0+0xf0>
 800baec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800baf0:	2310      	movs	r3, #16
 800baf2:	f10e 0e02 	add.w	lr, lr, #2
 800baf6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800bafa:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bafe:	2600      	movs	r6, #0
 800bb00:	fbbc f9f3 	udiv	r9, ip, r3
 800bb04:	4635      	mov	r5, r6
 800bb06:	fb03 ca19 	mls	sl, r3, r9, ip
 800bb0a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800bb0e:	2f09      	cmp	r7, #9
 800bb10:	d818      	bhi.n	800bb44 <_strtol_l.isra.0+0xac>
 800bb12:	463c      	mov	r4, r7
 800bb14:	42a3      	cmp	r3, r4
 800bb16:	dd24      	ble.n	800bb62 <_strtol_l.isra.0+0xca>
 800bb18:	2e00      	cmp	r6, #0
 800bb1a:	db1f      	blt.n	800bb5c <_strtol_l.isra.0+0xc4>
 800bb1c:	45a9      	cmp	r9, r5
 800bb1e:	d31d      	bcc.n	800bb5c <_strtol_l.isra.0+0xc4>
 800bb20:	d101      	bne.n	800bb26 <_strtol_l.isra.0+0x8e>
 800bb22:	45a2      	cmp	sl, r4
 800bb24:	db1a      	blt.n	800bb5c <_strtol_l.isra.0+0xc4>
 800bb26:	fb05 4503 	mla	r5, r5, r3, r4
 800bb2a:	2601      	movs	r6, #1
 800bb2c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bb30:	e7eb      	b.n	800bb0a <_strtol_l.isra.0+0x72>
 800bb32:	2c2b      	cmp	r4, #43	; 0x2b
 800bb34:	bf08      	it	eq
 800bb36:	f89e 4000 	ldrbeq.w	r4, [lr]
 800bb3a:	46a8      	mov	r8, r5
 800bb3c:	bf08      	it	eq
 800bb3e:	f106 0e02 	addeq.w	lr, r6, #2
 800bb42:	e7c7      	b.n	800bad4 <_strtol_l.isra.0+0x3c>
 800bb44:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800bb48:	2f19      	cmp	r7, #25
 800bb4a:	d801      	bhi.n	800bb50 <_strtol_l.isra.0+0xb8>
 800bb4c:	3c37      	subs	r4, #55	; 0x37
 800bb4e:	e7e1      	b.n	800bb14 <_strtol_l.isra.0+0x7c>
 800bb50:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800bb54:	2f19      	cmp	r7, #25
 800bb56:	d804      	bhi.n	800bb62 <_strtol_l.isra.0+0xca>
 800bb58:	3c57      	subs	r4, #87	; 0x57
 800bb5a:	e7db      	b.n	800bb14 <_strtol_l.isra.0+0x7c>
 800bb5c:	f04f 36ff 	mov.w	r6, #4294967295
 800bb60:	e7e4      	b.n	800bb2c <_strtol_l.isra.0+0x94>
 800bb62:	2e00      	cmp	r6, #0
 800bb64:	da05      	bge.n	800bb72 <_strtol_l.isra.0+0xda>
 800bb66:	2322      	movs	r3, #34	; 0x22
 800bb68:	6003      	str	r3, [r0, #0]
 800bb6a:	4665      	mov	r5, ip
 800bb6c:	b942      	cbnz	r2, 800bb80 <_strtol_l.isra.0+0xe8>
 800bb6e:	4628      	mov	r0, r5
 800bb70:	e79d      	b.n	800baae <_strtol_l.isra.0+0x16>
 800bb72:	f1b8 0f00 	cmp.w	r8, #0
 800bb76:	d000      	beq.n	800bb7a <_strtol_l.isra.0+0xe2>
 800bb78:	426d      	negs	r5, r5
 800bb7a:	2a00      	cmp	r2, #0
 800bb7c:	d0f7      	beq.n	800bb6e <_strtol_l.isra.0+0xd6>
 800bb7e:	b10e      	cbz	r6, 800bb84 <_strtol_l.isra.0+0xec>
 800bb80:	f10e 31ff 	add.w	r1, lr, #4294967295
 800bb84:	6011      	str	r1, [r2, #0]
 800bb86:	e7f2      	b.n	800bb6e <_strtol_l.isra.0+0xd6>
 800bb88:	2430      	movs	r4, #48	; 0x30
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1b3      	bne.n	800baf6 <_strtol_l.isra.0+0x5e>
 800bb8e:	2308      	movs	r3, #8
 800bb90:	e7b1      	b.n	800baf6 <_strtol_l.isra.0+0x5e>
 800bb92:	2c30      	cmp	r4, #48	; 0x30
 800bb94:	d0a4      	beq.n	800bae0 <_strtol_l.isra.0+0x48>
 800bb96:	230a      	movs	r3, #10
 800bb98:	e7ad      	b.n	800baf6 <_strtol_l.isra.0+0x5e>
 800bb9a:	bf00      	nop
 800bb9c:	0800fd71 	.word	0x0800fd71

0800bba0 <_strtol_r>:
 800bba0:	f7ff bf7a 	b.w	800ba98 <_strtol_l.isra.0>

0800bba4 <quorem>:
 800bba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba8:	6903      	ldr	r3, [r0, #16]
 800bbaa:	690c      	ldr	r4, [r1, #16]
 800bbac:	42a3      	cmp	r3, r4
 800bbae:	4607      	mov	r7, r0
 800bbb0:	f2c0 8081 	blt.w	800bcb6 <quorem+0x112>
 800bbb4:	3c01      	subs	r4, #1
 800bbb6:	f101 0814 	add.w	r8, r1, #20
 800bbba:	f100 0514 	add.w	r5, r0, #20
 800bbbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbc2:	9301      	str	r3, [sp, #4]
 800bbc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bbc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bbd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bbd8:	fbb2 f6f3 	udiv	r6, r2, r3
 800bbdc:	d331      	bcc.n	800bc42 <quorem+0x9e>
 800bbde:	f04f 0e00 	mov.w	lr, #0
 800bbe2:	4640      	mov	r0, r8
 800bbe4:	46ac      	mov	ip, r5
 800bbe6:	46f2      	mov	sl, lr
 800bbe8:	f850 2b04 	ldr.w	r2, [r0], #4
 800bbec:	b293      	uxth	r3, r2
 800bbee:	fb06 e303 	mla	r3, r6, r3, lr
 800bbf2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	ebaa 0303 	sub.w	r3, sl, r3
 800bbfc:	0c12      	lsrs	r2, r2, #16
 800bbfe:	f8dc a000 	ldr.w	sl, [ip]
 800bc02:	fb06 e202 	mla	r2, r6, r2, lr
 800bc06:	fa13 f38a 	uxtah	r3, r3, sl
 800bc0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc0e:	fa1f fa82 	uxth.w	sl, r2
 800bc12:	f8dc 2000 	ldr.w	r2, [ip]
 800bc16:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bc1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc24:	4581      	cmp	r9, r0
 800bc26:	f84c 3b04 	str.w	r3, [ip], #4
 800bc2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bc2e:	d2db      	bcs.n	800bbe8 <quorem+0x44>
 800bc30:	f855 300b 	ldr.w	r3, [r5, fp]
 800bc34:	b92b      	cbnz	r3, 800bc42 <quorem+0x9e>
 800bc36:	9b01      	ldr	r3, [sp, #4]
 800bc38:	3b04      	subs	r3, #4
 800bc3a:	429d      	cmp	r5, r3
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	d32e      	bcc.n	800bc9e <quorem+0xfa>
 800bc40:	613c      	str	r4, [r7, #16]
 800bc42:	4638      	mov	r0, r7
 800bc44:	f001 fc8c 	bl	800d560 <__mcmp>
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	db24      	blt.n	800bc96 <quorem+0xf2>
 800bc4c:	3601      	adds	r6, #1
 800bc4e:	4628      	mov	r0, r5
 800bc50:	f04f 0c00 	mov.w	ip, #0
 800bc54:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc58:	f8d0 e000 	ldr.w	lr, [r0]
 800bc5c:	b293      	uxth	r3, r2
 800bc5e:	ebac 0303 	sub.w	r3, ip, r3
 800bc62:	0c12      	lsrs	r2, r2, #16
 800bc64:	fa13 f38e 	uxtah	r3, r3, lr
 800bc68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bc6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc76:	45c1      	cmp	r9, r8
 800bc78:	f840 3b04 	str.w	r3, [r0], #4
 800bc7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bc80:	d2e8      	bcs.n	800bc54 <quorem+0xb0>
 800bc82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc8a:	b922      	cbnz	r2, 800bc96 <quorem+0xf2>
 800bc8c:	3b04      	subs	r3, #4
 800bc8e:	429d      	cmp	r5, r3
 800bc90:	461a      	mov	r2, r3
 800bc92:	d30a      	bcc.n	800bcaa <quorem+0x106>
 800bc94:	613c      	str	r4, [r7, #16]
 800bc96:	4630      	mov	r0, r6
 800bc98:	b003      	add	sp, #12
 800bc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9e:	6812      	ldr	r2, [r2, #0]
 800bca0:	3b04      	subs	r3, #4
 800bca2:	2a00      	cmp	r2, #0
 800bca4:	d1cc      	bne.n	800bc40 <quorem+0x9c>
 800bca6:	3c01      	subs	r4, #1
 800bca8:	e7c7      	b.n	800bc3a <quorem+0x96>
 800bcaa:	6812      	ldr	r2, [r2, #0]
 800bcac:	3b04      	subs	r3, #4
 800bcae:	2a00      	cmp	r2, #0
 800bcb0:	d1f0      	bne.n	800bc94 <quorem+0xf0>
 800bcb2:	3c01      	subs	r4, #1
 800bcb4:	e7eb      	b.n	800bc8e <quorem+0xea>
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	e7ee      	b.n	800bc98 <quorem+0xf4>
 800bcba:	0000      	movs	r0, r0
 800bcbc:	0000      	movs	r0, r0
	...

0800bcc0 <_dtoa_r>:
 800bcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc4:	ed2d 8b02 	vpush	{d8}
 800bcc8:	ec57 6b10 	vmov	r6, r7, d0
 800bccc:	b095      	sub	sp, #84	; 0x54
 800bcce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bcd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bcd4:	9105      	str	r1, [sp, #20]
 800bcd6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bcda:	4604      	mov	r4, r0
 800bcdc:	9209      	str	r2, [sp, #36]	; 0x24
 800bcde:	930f      	str	r3, [sp, #60]	; 0x3c
 800bce0:	b975      	cbnz	r5, 800bd00 <_dtoa_r+0x40>
 800bce2:	2010      	movs	r0, #16
 800bce4:	f001 f94c 	bl	800cf80 <malloc>
 800bce8:	4602      	mov	r2, r0
 800bcea:	6260      	str	r0, [r4, #36]	; 0x24
 800bcec:	b920      	cbnz	r0, 800bcf8 <_dtoa_r+0x38>
 800bcee:	4bb2      	ldr	r3, [pc, #712]	; (800bfb8 <_dtoa_r+0x2f8>)
 800bcf0:	21ea      	movs	r1, #234	; 0xea
 800bcf2:	48b2      	ldr	r0, [pc, #712]	; (800bfbc <_dtoa_r+0x2fc>)
 800bcf4:	f002 f874 	bl	800dde0 <__assert_func>
 800bcf8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bcfc:	6005      	str	r5, [r0, #0]
 800bcfe:	60c5      	str	r5, [r0, #12]
 800bd00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd02:	6819      	ldr	r1, [r3, #0]
 800bd04:	b151      	cbz	r1, 800bd1c <_dtoa_r+0x5c>
 800bd06:	685a      	ldr	r2, [r3, #4]
 800bd08:	604a      	str	r2, [r1, #4]
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	4093      	lsls	r3, r2
 800bd0e:	608b      	str	r3, [r1, #8]
 800bd10:	4620      	mov	r0, r4
 800bd12:	f001 f99d 	bl	800d050 <_Bfree>
 800bd16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd18:	2200      	movs	r2, #0
 800bd1a:	601a      	str	r2, [r3, #0]
 800bd1c:	1e3b      	subs	r3, r7, #0
 800bd1e:	bfb9      	ittee	lt
 800bd20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bd24:	9303      	strlt	r3, [sp, #12]
 800bd26:	2300      	movge	r3, #0
 800bd28:	f8c8 3000 	strge.w	r3, [r8]
 800bd2c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800bd30:	4ba3      	ldr	r3, [pc, #652]	; (800bfc0 <_dtoa_r+0x300>)
 800bd32:	bfbc      	itt	lt
 800bd34:	2201      	movlt	r2, #1
 800bd36:	f8c8 2000 	strlt.w	r2, [r8]
 800bd3a:	ea33 0309 	bics.w	r3, r3, r9
 800bd3e:	d11b      	bne.n	800bd78 <_dtoa_r+0xb8>
 800bd40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bd42:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd46:	6013      	str	r3, [r2, #0]
 800bd48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd4c:	4333      	orrs	r3, r6
 800bd4e:	f000 857a 	beq.w	800c846 <_dtoa_r+0xb86>
 800bd52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd54:	b963      	cbnz	r3, 800bd70 <_dtoa_r+0xb0>
 800bd56:	4b9b      	ldr	r3, [pc, #620]	; (800bfc4 <_dtoa_r+0x304>)
 800bd58:	e024      	b.n	800bda4 <_dtoa_r+0xe4>
 800bd5a:	4b9b      	ldr	r3, [pc, #620]	; (800bfc8 <_dtoa_r+0x308>)
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	3308      	adds	r3, #8
 800bd60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd62:	6013      	str	r3, [r2, #0]
 800bd64:	9800      	ldr	r0, [sp, #0]
 800bd66:	b015      	add	sp, #84	; 0x54
 800bd68:	ecbd 8b02 	vpop	{d8}
 800bd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd70:	4b94      	ldr	r3, [pc, #592]	; (800bfc4 <_dtoa_r+0x304>)
 800bd72:	9300      	str	r3, [sp, #0]
 800bd74:	3303      	adds	r3, #3
 800bd76:	e7f3      	b.n	800bd60 <_dtoa_r+0xa0>
 800bd78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	ec51 0b17 	vmov	r0, r1, d7
 800bd82:	2300      	movs	r3, #0
 800bd84:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bd88:	f7f4 fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd8c:	4680      	mov	r8, r0
 800bd8e:	b158      	cbz	r0, 800bda8 <_dtoa_r+0xe8>
 800bd90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bd92:	2301      	movs	r3, #1
 800bd94:	6013      	str	r3, [r2, #0]
 800bd96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f000 8551 	beq.w	800c840 <_dtoa_r+0xb80>
 800bd9e:	488b      	ldr	r0, [pc, #556]	; (800bfcc <_dtoa_r+0x30c>)
 800bda0:	6018      	str	r0, [r3, #0]
 800bda2:	1e43      	subs	r3, r0, #1
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	e7dd      	b.n	800bd64 <_dtoa_r+0xa4>
 800bda8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bdac:	aa12      	add	r2, sp, #72	; 0x48
 800bdae:	a913      	add	r1, sp, #76	; 0x4c
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f001 fcf5 	bl	800d7a0 <__d2b>
 800bdb6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bdba:	4683      	mov	fp, r0
 800bdbc:	2d00      	cmp	r5, #0
 800bdbe:	d07c      	beq.n	800beba <_dtoa_r+0x1fa>
 800bdc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdc2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800bdc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800bdce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bdd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bdd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bdda:	4b7d      	ldr	r3, [pc, #500]	; (800bfd0 <_dtoa_r+0x310>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	4630      	mov	r0, r6
 800bde0:	4639      	mov	r1, r7
 800bde2:	f7f4 fa51 	bl	8000288 <__aeabi_dsub>
 800bde6:	a36e      	add	r3, pc, #440	; (adr r3, 800bfa0 <_dtoa_r+0x2e0>)
 800bde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdec:	f7f4 fc04 	bl	80005f8 <__aeabi_dmul>
 800bdf0:	a36d      	add	r3, pc, #436	; (adr r3, 800bfa8 <_dtoa_r+0x2e8>)
 800bdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf6:	f7f4 fa49 	bl	800028c <__adddf3>
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	460f      	mov	r7, r1
 800be00:	f7f4 fb90 	bl	8000524 <__aeabi_i2d>
 800be04:	a36a      	add	r3, pc, #424	; (adr r3, 800bfb0 <_dtoa_r+0x2f0>)
 800be06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0a:	f7f4 fbf5 	bl	80005f8 <__aeabi_dmul>
 800be0e:	4602      	mov	r2, r0
 800be10:	460b      	mov	r3, r1
 800be12:	4630      	mov	r0, r6
 800be14:	4639      	mov	r1, r7
 800be16:	f7f4 fa39 	bl	800028c <__adddf3>
 800be1a:	4606      	mov	r6, r0
 800be1c:	460f      	mov	r7, r1
 800be1e:	f7f4 fe9b 	bl	8000b58 <__aeabi_d2iz>
 800be22:	2200      	movs	r2, #0
 800be24:	4682      	mov	sl, r0
 800be26:	2300      	movs	r3, #0
 800be28:	4630      	mov	r0, r6
 800be2a:	4639      	mov	r1, r7
 800be2c:	f7f4 fe56 	bl	8000adc <__aeabi_dcmplt>
 800be30:	b148      	cbz	r0, 800be46 <_dtoa_r+0x186>
 800be32:	4650      	mov	r0, sl
 800be34:	f7f4 fb76 	bl	8000524 <__aeabi_i2d>
 800be38:	4632      	mov	r2, r6
 800be3a:	463b      	mov	r3, r7
 800be3c:	f7f4 fe44 	bl	8000ac8 <__aeabi_dcmpeq>
 800be40:	b908      	cbnz	r0, 800be46 <_dtoa_r+0x186>
 800be42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be46:	f1ba 0f16 	cmp.w	sl, #22
 800be4a:	d854      	bhi.n	800bef6 <_dtoa_r+0x236>
 800be4c:	4b61      	ldr	r3, [pc, #388]	; (800bfd4 <_dtoa_r+0x314>)
 800be4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800be52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800be5a:	f7f4 fe3f 	bl	8000adc <__aeabi_dcmplt>
 800be5e:	2800      	cmp	r0, #0
 800be60:	d04b      	beq.n	800befa <_dtoa_r+0x23a>
 800be62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be66:	2300      	movs	r3, #0
 800be68:	930e      	str	r3, [sp, #56]	; 0x38
 800be6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be6c:	1b5d      	subs	r5, r3, r5
 800be6e:	1e6b      	subs	r3, r5, #1
 800be70:	9304      	str	r3, [sp, #16]
 800be72:	bf43      	ittte	mi
 800be74:	2300      	movmi	r3, #0
 800be76:	f1c5 0801 	rsbmi	r8, r5, #1
 800be7a:	9304      	strmi	r3, [sp, #16]
 800be7c:	f04f 0800 	movpl.w	r8, #0
 800be80:	f1ba 0f00 	cmp.w	sl, #0
 800be84:	db3b      	blt.n	800befe <_dtoa_r+0x23e>
 800be86:	9b04      	ldr	r3, [sp, #16]
 800be88:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800be8c:	4453      	add	r3, sl
 800be8e:	9304      	str	r3, [sp, #16]
 800be90:	2300      	movs	r3, #0
 800be92:	9306      	str	r3, [sp, #24]
 800be94:	9b05      	ldr	r3, [sp, #20]
 800be96:	2b09      	cmp	r3, #9
 800be98:	d869      	bhi.n	800bf6e <_dtoa_r+0x2ae>
 800be9a:	2b05      	cmp	r3, #5
 800be9c:	bfc4      	itt	gt
 800be9e:	3b04      	subgt	r3, #4
 800bea0:	9305      	strgt	r3, [sp, #20]
 800bea2:	9b05      	ldr	r3, [sp, #20]
 800bea4:	f1a3 0302 	sub.w	r3, r3, #2
 800bea8:	bfcc      	ite	gt
 800beaa:	2500      	movgt	r5, #0
 800beac:	2501      	movle	r5, #1
 800beae:	2b03      	cmp	r3, #3
 800beb0:	d869      	bhi.n	800bf86 <_dtoa_r+0x2c6>
 800beb2:	e8df f003 	tbb	[pc, r3]
 800beb6:	4e2c      	.short	0x4e2c
 800beb8:	5a4c      	.short	0x5a4c
 800beba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800bebe:	441d      	add	r5, r3
 800bec0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bec4:	2b20      	cmp	r3, #32
 800bec6:	bfc1      	itttt	gt
 800bec8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800becc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bed0:	fa09 f303 	lslgt.w	r3, r9, r3
 800bed4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bed8:	bfda      	itte	le
 800beda:	f1c3 0320 	rsble	r3, r3, #32
 800bede:	fa06 f003 	lslle.w	r0, r6, r3
 800bee2:	4318      	orrgt	r0, r3
 800bee4:	f7f4 fb0e 	bl	8000504 <__aeabi_ui2d>
 800bee8:	2301      	movs	r3, #1
 800beea:	4606      	mov	r6, r0
 800beec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bef0:	3d01      	subs	r5, #1
 800bef2:	9310      	str	r3, [sp, #64]	; 0x40
 800bef4:	e771      	b.n	800bdda <_dtoa_r+0x11a>
 800bef6:	2301      	movs	r3, #1
 800bef8:	e7b6      	b.n	800be68 <_dtoa_r+0x1a8>
 800befa:	900e      	str	r0, [sp, #56]	; 0x38
 800befc:	e7b5      	b.n	800be6a <_dtoa_r+0x1aa>
 800befe:	f1ca 0300 	rsb	r3, sl, #0
 800bf02:	9306      	str	r3, [sp, #24]
 800bf04:	2300      	movs	r3, #0
 800bf06:	eba8 080a 	sub.w	r8, r8, sl
 800bf0a:	930d      	str	r3, [sp, #52]	; 0x34
 800bf0c:	e7c2      	b.n	800be94 <_dtoa_r+0x1d4>
 800bf0e:	2300      	movs	r3, #0
 800bf10:	9308      	str	r3, [sp, #32]
 800bf12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	dc39      	bgt.n	800bf8c <_dtoa_r+0x2cc>
 800bf18:	f04f 0901 	mov.w	r9, #1
 800bf1c:	f8cd 9004 	str.w	r9, [sp, #4]
 800bf20:	464b      	mov	r3, r9
 800bf22:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800bf26:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bf28:	2200      	movs	r2, #0
 800bf2a:	6042      	str	r2, [r0, #4]
 800bf2c:	2204      	movs	r2, #4
 800bf2e:	f102 0614 	add.w	r6, r2, #20
 800bf32:	429e      	cmp	r6, r3
 800bf34:	6841      	ldr	r1, [r0, #4]
 800bf36:	d92f      	bls.n	800bf98 <_dtoa_r+0x2d8>
 800bf38:	4620      	mov	r0, r4
 800bf3a:	f001 f849 	bl	800cfd0 <_Balloc>
 800bf3e:	9000      	str	r0, [sp, #0]
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d14b      	bne.n	800bfdc <_dtoa_r+0x31c>
 800bf44:	4b24      	ldr	r3, [pc, #144]	; (800bfd8 <_dtoa_r+0x318>)
 800bf46:	4602      	mov	r2, r0
 800bf48:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bf4c:	e6d1      	b.n	800bcf2 <_dtoa_r+0x32>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e7de      	b.n	800bf10 <_dtoa_r+0x250>
 800bf52:	2300      	movs	r3, #0
 800bf54:	9308      	str	r3, [sp, #32]
 800bf56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf58:	eb0a 0903 	add.w	r9, sl, r3
 800bf5c:	f109 0301 	add.w	r3, r9, #1
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	9301      	str	r3, [sp, #4]
 800bf64:	bfb8      	it	lt
 800bf66:	2301      	movlt	r3, #1
 800bf68:	e7dd      	b.n	800bf26 <_dtoa_r+0x266>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	e7f2      	b.n	800bf54 <_dtoa_r+0x294>
 800bf6e:	2501      	movs	r5, #1
 800bf70:	2300      	movs	r3, #0
 800bf72:	9305      	str	r3, [sp, #20]
 800bf74:	9508      	str	r5, [sp, #32]
 800bf76:	f04f 39ff 	mov.w	r9, #4294967295
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f8cd 9004 	str.w	r9, [sp, #4]
 800bf80:	2312      	movs	r3, #18
 800bf82:	9209      	str	r2, [sp, #36]	; 0x24
 800bf84:	e7cf      	b.n	800bf26 <_dtoa_r+0x266>
 800bf86:	2301      	movs	r3, #1
 800bf88:	9308      	str	r3, [sp, #32]
 800bf8a:	e7f4      	b.n	800bf76 <_dtoa_r+0x2b6>
 800bf8c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bf90:	f8cd 9004 	str.w	r9, [sp, #4]
 800bf94:	464b      	mov	r3, r9
 800bf96:	e7c6      	b.n	800bf26 <_dtoa_r+0x266>
 800bf98:	3101      	adds	r1, #1
 800bf9a:	6041      	str	r1, [r0, #4]
 800bf9c:	0052      	lsls	r2, r2, #1
 800bf9e:	e7c6      	b.n	800bf2e <_dtoa_r+0x26e>
 800bfa0:	636f4361 	.word	0x636f4361
 800bfa4:	3fd287a7 	.word	0x3fd287a7
 800bfa8:	8b60c8b3 	.word	0x8b60c8b3
 800bfac:	3fc68a28 	.word	0x3fc68a28
 800bfb0:	509f79fb 	.word	0x509f79fb
 800bfb4:	3fd34413 	.word	0x3fd34413
 800bfb8:	0800fe7e 	.word	0x0800fe7e
 800bfbc:	0800fe95 	.word	0x0800fe95
 800bfc0:	7ff00000 	.word	0x7ff00000
 800bfc4:	0800fe7a 	.word	0x0800fe7a
 800bfc8:	0800fe71 	.word	0x0800fe71
 800bfcc:	0800fcf5 	.word	0x0800fcf5
 800bfd0:	3ff80000 	.word	0x3ff80000
 800bfd4:	08010010 	.word	0x08010010
 800bfd8:	0800fef4 	.word	0x0800fef4
 800bfdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfde:	9a00      	ldr	r2, [sp, #0]
 800bfe0:	601a      	str	r2, [r3, #0]
 800bfe2:	9b01      	ldr	r3, [sp, #4]
 800bfe4:	2b0e      	cmp	r3, #14
 800bfe6:	f200 80ad 	bhi.w	800c144 <_dtoa_r+0x484>
 800bfea:	2d00      	cmp	r5, #0
 800bfec:	f000 80aa 	beq.w	800c144 <_dtoa_r+0x484>
 800bff0:	f1ba 0f00 	cmp.w	sl, #0
 800bff4:	dd36      	ble.n	800c064 <_dtoa_r+0x3a4>
 800bff6:	4ac3      	ldr	r2, [pc, #780]	; (800c304 <_dtoa_r+0x644>)
 800bff8:	f00a 030f 	and.w	r3, sl, #15
 800bffc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c000:	ed93 7b00 	vldr	d7, [r3]
 800c004:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c008:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c00c:	eeb0 8a47 	vmov.f32	s16, s14
 800c010:	eef0 8a67 	vmov.f32	s17, s15
 800c014:	d016      	beq.n	800c044 <_dtoa_r+0x384>
 800c016:	4bbc      	ldr	r3, [pc, #752]	; (800c308 <_dtoa_r+0x648>)
 800c018:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c01c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c020:	f7f4 fc14 	bl	800084c <__aeabi_ddiv>
 800c024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c028:	f007 070f 	and.w	r7, r7, #15
 800c02c:	2503      	movs	r5, #3
 800c02e:	4eb6      	ldr	r6, [pc, #728]	; (800c308 <_dtoa_r+0x648>)
 800c030:	b957      	cbnz	r7, 800c048 <_dtoa_r+0x388>
 800c032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c036:	ec53 2b18 	vmov	r2, r3, d8
 800c03a:	f7f4 fc07 	bl	800084c <__aeabi_ddiv>
 800c03e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c042:	e029      	b.n	800c098 <_dtoa_r+0x3d8>
 800c044:	2502      	movs	r5, #2
 800c046:	e7f2      	b.n	800c02e <_dtoa_r+0x36e>
 800c048:	07f9      	lsls	r1, r7, #31
 800c04a:	d508      	bpl.n	800c05e <_dtoa_r+0x39e>
 800c04c:	ec51 0b18 	vmov	r0, r1, d8
 800c050:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c054:	f7f4 fad0 	bl	80005f8 <__aeabi_dmul>
 800c058:	ec41 0b18 	vmov	d8, r0, r1
 800c05c:	3501      	adds	r5, #1
 800c05e:	107f      	asrs	r7, r7, #1
 800c060:	3608      	adds	r6, #8
 800c062:	e7e5      	b.n	800c030 <_dtoa_r+0x370>
 800c064:	f000 80a6 	beq.w	800c1b4 <_dtoa_r+0x4f4>
 800c068:	f1ca 0600 	rsb	r6, sl, #0
 800c06c:	4ba5      	ldr	r3, [pc, #660]	; (800c304 <_dtoa_r+0x644>)
 800c06e:	4fa6      	ldr	r7, [pc, #664]	; (800c308 <_dtoa_r+0x648>)
 800c070:	f006 020f 	and.w	r2, r6, #15
 800c074:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c080:	f7f4 faba 	bl	80005f8 <__aeabi_dmul>
 800c084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c088:	1136      	asrs	r6, r6, #4
 800c08a:	2300      	movs	r3, #0
 800c08c:	2502      	movs	r5, #2
 800c08e:	2e00      	cmp	r6, #0
 800c090:	f040 8085 	bne.w	800c19e <_dtoa_r+0x4de>
 800c094:	2b00      	cmp	r3, #0
 800c096:	d1d2      	bne.n	800c03e <_dtoa_r+0x37e>
 800c098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	f000 808c 	beq.w	800c1b8 <_dtoa_r+0x4f8>
 800c0a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c0a4:	4b99      	ldr	r3, [pc, #612]	; (800c30c <_dtoa_r+0x64c>)
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	4639      	mov	r1, r7
 800c0ac:	f7f4 fd16 	bl	8000adc <__aeabi_dcmplt>
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	f000 8081 	beq.w	800c1b8 <_dtoa_r+0x4f8>
 800c0b6:	9b01      	ldr	r3, [sp, #4]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d07d      	beq.n	800c1b8 <_dtoa_r+0x4f8>
 800c0bc:	f1b9 0f00 	cmp.w	r9, #0
 800c0c0:	dd3c      	ble.n	800c13c <_dtoa_r+0x47c>
 800c0c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c0c6:	9307      	str	r3, [sp, #28]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	4b91      	ldr	r3, [pc, #580]	; (800c310 <_dtoa_r+0x650>)
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	4639      	mov	r1, r7
 800c0d0:	f7f4 fa92 	bl	80005f8 <__aeabi_dmul>
 800c0d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0d8:	3501      	adds	r5, #1
 800c0da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c0de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	f7f4 fa1e 	bl	8000524 <__aeabi_i2d>
 800c0e8:	4632      	mov	r2, r6
 800c0ea:	463b      	mov	r3, r7
 800c0ec:	f7f4 fa84 	bl	80005f8 <__aeabi_dmul>
 800c0f0:	4b88      	ldr	r3, [pc, #544]	; (800c314 <_dtoa_r+0x654>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f7f4 f8ca 	bl	800028c <__adddf3>
 800c0f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c0fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c100:	9303      	str	r3, [sp, #12]
 800c102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c104:	2b00      	cmp	r3, #0
 800c106:	d15c      	bne.n	800c1c2 <_dtoa_r+0x502>
 800c108:	4b83      	ldr	r3, [pc, #524]	; (800c318 <_dtoa_r+0x658>)
 800c10a:	2200      	movs	r2, #0
 800c10c:	4630      	mov	r0, r6
 800c10e:	4639      	mov	r1, r7
 800c110:	f7f4 f8ba 	bl	8000288 <__aeabi_dsub>
 800c114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c118:	4606      	mov	r6, r0
 800c11a:	460f      	mov	r7, r1
 800c11c:	f7f4 fcfc 	bl	8000b18 <__aeabi_dcmpgt>
 800c120:	2800      	cmp	r0, #0
 800c122:	f040 8296 	bne.w	800c652 <_dtoa_r+0x992>
 800c126:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c12a:	4630      	mov	r0, r6
 800c12c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c130:	4639      	mov	r1, r7
 800c132:	f7f4 fcd3 	bl	8000adc <__aeabi_dcmplt>
 800c136:	2800      	cmp	r0, #0
 800c138:	f040 8288 	bne.w	800c64c <_dtoa_r+0x98c>
 800c13c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c140:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c144:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c146:	2b00      	cmp	r3, #0
 800c148:	f2c0 8158 	blt.w	800c3fc <_dtoa_r+0x73c>
 800c14c:	f1ba 0f0e 	cmp.w	sl, #14
 800c150:	f300 8154 	bgt.w	800c3fc <_dtoa_r+0x73c>
 800c154:	4b6b      	ldr	r3, [pc, #428]	; (800c304 <_dtoa_r+0x644>)
 800c156:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c15a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c160:	2b00      	cmp	r3, #0
 800c162:	f280 80e3 	bge.w	800c32c <_dtoa_r+0x66c>
 800c166:	9b01      	ldr	r3, [sp, #4]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f300 80df 	bgt.w	800c32c <_dtoa_r+0x66c>
 800c16e:	f040 826d 	bne.w	800c64c <_dtoa_r+0x98c>
 800c172:	4b69      	ldr	r3, [pc, #420]	; (800c318 <_dtoa_r+0x658>)
 800c174:	2200      	movs	r2, #0
 800c176:	4640      	mov	r0, r8
 800c178:	4649      	mov	r1, r9
 800c17a:	f7f4 fa3d 	bl	80005f8 <__aeabi_dmul>
 800c17e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c182:	f7f4 fcbf 	bl	8000b04 <__aeabi_dcmpge>
 800c186:	9e01      	ldr	r6, [sp, #4]
 800c188:	4637      	mov	r7, r6
 800c18a:	2800      	cmp	r0, #0
 800c18c:	f040 8243 	bne.w	800c616 <_dtoa_r+0x956>
 800c190:	9d00      	ldr	r5, [sp, #0]
 800c192:	2331      	movs	r3, #49	; 0x31
 800c194:	f805 3b01 	strb.w	r3, [r5], #1
 800c198:	f10a 0a01 	add.w	sl, sl, #1
 800c19c:	e23f      	b.n	800c61e <_dtoa_r+0x95e>
 800c19e:	07f2      	lsls	r2, r6, #31
 800c1a0:	d505      	bpl.n	800c1ae <_dtoa_r+0x4ee>
 800c1a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1a6:	f7f4 fa27 	bl	80005f8 <__aeabi_dmul>
 800c1aa:	3501      	adds	r5, #1
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	1076      	asrs	r6, r6, #1
 800c1b0:	3708      	adds	r7, #8
 800c1b2:	e76c      	b.n	800c08e <_dtoa_r+0x3ce>
 800c1b4:	2502      	movs	r5, #2
 800c1b6:	e76f      	b.n	800c098 <_dtoa_r+0x3d8>
 800c1b8:	9b01      	ldr	r3, [sp, #4]
 800c1ba:	f8cd a01c 	str.w	sl, [sp, #28]
 800c1be:	930c      	str	r3, [sp, #48]	; 0x30
 800c1c0:	e78d      	b.n	800c0de <_dtoa_r+0x41e>
 800c1c2:	9900      	ldr	r1, [sp, #0]
 800c1c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c1c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1c8:	4b4e      	ldr	r3, [pc, #312]	; (800c304 <_dtoa_r+0x644>)
 800c1ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1ce:	4401      	add	r1, r0
 800c1d0:	9102      	str	r1, [sp, #8]
 800c1d2:	9908      	ldr	r1, [sp, #32]
 800c1d4:	eeb0 8a47 	vmov.f32	s16, s14
 800c1d8:	eef0 8a67 	vmov.f32	s17, s15
 800c1dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c1e4:	2900      	cmp	r1, #0
 800c1e6:	d045      	beq.n	800c274 <_dtoa_r+0x5b4>
 800c1e8:	494c      	ldr	r1, [pc, #304]	; (800c31c <_dtoa_r+0x65c>)
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	f7f4 fb2e 	bl	800084c <__aeabi_ddiv>
 800c1f0:	ec53 2b18 	vmov	r2, r3, d8
 800c1f4:	f7f4 f848 	bl	8000288 <__aeabi_dsub>
 800c1f8:	9d00      	ldr	r5, [sp, #0]
 800c1fa:	ec41 0b18 	vmov	d8, r0, r1
 800c1fe:	4639      	mov	r1, r7
 800c200:	4630      	mov	r0, r6
 800c202:	f7f4 fca9 	bl	8000b58 <__aeabi_d2iz>
 800c206:	900c      	str	r0, [sp, #48]	; 0x30
 800c208:	f7f4 f98c 	bl	8000524 <__aeabi_i2d>
 800c20c:	4602      	mov	r2, r0
 800c20e:	460b      	mov	r3, r1
 800c210:	4630      	mov	r0, r6
 800c212:	4639      	mov	r1, r7
 800c214:	f7f4 f838 	bl	8000288 <__aeabi_dsub>
 800c218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c21a:	3330      	adds	r3, #48	; 0x30
 800c21c:	f805 3b01 	strb.w	r3, [r5], #1
 800c220:	ec53 2b18 	vmov	r2, r3, d8
 800c224:	4606      	mov	r6, r0
 800c226:	460f      	mov	r7, r1
 800c228:	f7f4 fc58 	bl	8000adc <__aeabi_dcmplt>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d165      	bne.n	800c2fc <_dtoa_r+0x63c>
 800c230:	4632      	mov	r2, r6
 800c232:	463b      	mov	r3, r7
 800c234:	4935      	ldr	r1, [pc, #212]	; (800c30c <_dtoa_r+0x64c>)
 800c236:	2000      	movs	r0, #0
 800c238:	f7f4 f826 	bl	8000288 <__aeabi_dsub>
 800c23c:	ec53 2b18 	vmov	r2, r3, d8
 800c240:	f7f4 fc4c 	bl	8000adc <__aeabi_dcmplt>
 800c244:	2800      	cmp	r0, #0
 800c246:	f040 80b9 	bne.w	800c3bc <_dtoa_r+0x6fc>
 800c24a:	9b02      	ldr	r3, [sp, #8]
 800c24c:	429d      	cmp	r5, r3
 800c24e:	f43f af75 	beq.w	800c13c <_dtoa_r+0x47c>
 800c252:	4b2f      	ldr	r3, [pc, #188]	; (800c310 <_dtoa_r+0x650>)
 800c254:	ec51 0b18 	vmov	r0, r1, d8
 800c258:	2200      	movs	r2, #0
 800c25a:	f7f4 f9cd 	bl	80005f8 <__aeabi_dmul>
 800c25e:	4b2c      	ldr	r3, [pc, #176]	; (800c310 <_dtoa_r+0x650>)
 800c260:	ec41 0b18 	vmov	d8, r0, r1
 800c264:	2200      	movs	r2, #0
 800c266:	4630      	mov	r0, r6
 800c268:	4639      	mov	r1, r7
 800c26a:	f7f4 f9c5 	bl	80005f8 <__aeabi_dmul>
 800c26e:	4606      	mov	r6, r0
 800c270:	460f      	mov	r7, r1
 800c272:	e7c4      	b.n	800c1fe <_dtoa_r+0x53e>
 800c274:	ec51 0b17 	vmov	r0, r1, d7
 800c278:	f7f4 f9be 	bl	80005f8 <__aeabi_dmul>
 800c27c:	9b02      	ldr	r3, [sp, #8]
 800c27e:	9d00      	ldr	r5, [sp, #0]
 800c280:	930c      	str	r3, [sp, #48]	; 0x30
 800c282:	ec41 0b18 	vmov	d8, r0, r1
 800c286:	4639      	mov	r1, r7
 800c288:	4630      	mov	r0, r6
 800c28a:	f7f4 fc65 	bl	8000b58 <__aeabi_d2iz>
 800c28e:	9011      	str	r0, [sp, #68]	; 0x44
 800c290:	f7f4 f948 	bl	8000524 <__aeabi_i2d>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	4630      	mov	r0, r6
 800c29a:	4639      	mov	r1, r7
 800c29c:	f7f3 fff4 	bl	8000288 <__aeabi_dsub>
 800c2a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2a2:	3330      	adds	r3, #48	; 0x30
 800c2a4:	f805 3b01 	strb.w	r3, [r5], #1
 800c2a8:	9b02      	ldr	r3, [sp, #8]
 800c2aa:	429d      	cmp	r5, r3
 800c2ac:	4606      	mov	r6, r0
 800c2ae:	460f      	mov	r7, r1
 800c2b0:	f04f 0200 	mov.w	r2, #0
 800c2b4:	d134      	bne.n	800c320 <_dtoa_r+0x660>
 800c2b6:	4b19      	ldr	r3, [pc, #100]	; (800c31c <_dtoa_r+0x65c>)
 800c2b8:	ec51 0b18 	vmov	r0, r1, d8
 800c2bc:	f7f3 ffe6 	bl	800028c <__adddf3>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	4639      	mov	r1, r7
 800c2c8:	f7f4 fc26 	bl	8000b18 <__aeabi_dcmpgt>
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	d175      	bne.n	800c3bc <_dtoa_r+0x6fc>
 800c2d0:	ec53 2b18 	vmov	r2, r3, d8
 800c2d4:	4911      	ldr	r1, [pc, #68]	; (800c31c <_dtoa_r+0x65c>)
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	f7f3 ffd6 	bl	8000288 <__aeabi_dsub>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	460b      	mov	r3, r1
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	4639      	mov	r1, r7
 800c2e4:	f7f4 fbfa 	bl	8000adc <__aeabi_dcmplt>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	f43f af27 	beq.w	800c13c <_dtoa_r+0x47c>
 800c2ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c2f0:	1e6b      	subs	r3, r5, #1
 800c2f2:	930c      	str	r3, [sp, #48]	; 0x30
 800c2f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c2f8:	2b30      	cmp	r3, #48	; 0x30
 800c2fa:	d0f8      	beq.n	800c2ee <_dtoa_r+0x62e>
 800c2fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c300:	e04a      	b.n	800c398 <_dtoa_r+0x6d8>
 800c302:	bf00      	nop
 800c304:	08010010 	.word	0x08010010
 800c308:	0800ffe8 	.word	0x0800ffe8
 800c30c:	3ff00000 	.word	0x3ff00000
 800c310:	40240000 	.word	0x40240000
 800c314:	401c0000 	.word	0x401c0000
 800c318:	40140000 	.word	0x40140000
 800c31c:	3fe00000 	.word	0x3fe00000
 800c320:	4baf      	ldr	r3, [pc, #700]	; (800c5e0 <_dtoa_r+0x920>)
 800c322:	f7f4 f969 	bl	80005f8 <__aeabi_dmul>
 800c326:	4606      	mov	r6, r0
 800c328:	460f      	mov	r7, r1
 800c32a:	e7ac      	b.n	800c286 <_dtoa_r+0x5c6>
 800c32c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c330:	9d00      	ldr	r5, [sp, #0]
 800c332:	4642      	mov	r2, r8
 800c334:	464b      	mov	r3, r9
 800c336:	4630      	mov	r0, r6
 800c338:	4639      	mov	r1, r7
 800c33a:	f7f4 fa87 	bl	800084c <__aeabi_ddiv>
 800c33e:	f7f4 fc0b 	bl	8000b58 <__aeabi_d2iz>
 800c342:	9002      	str	r0, [sp, #8]
 800c344:	f7f4 f8ee 	bl	8000524 <__aeabi_i2d>
 800c348:	4642      	mov	r2, r8
 800c34a:	464b      	mov	r3, r9
 800c34c:	f7f4 f954 	bl	80005f8 <__aeabi_dmul>
 800c350:	4602      	mov	r2, r0
 800c352:	460b      	mov	r3, r1
 800c354:	4630      	mov	r0, r6
 800c356:	4639      	mov	r1, r7
 800c358:	f7f3 ff96 	bl	8000288 <__aeabi_dsub>
 800c35c:	9e02      	ldr	r6, [sp, #8]
 800c35e:	9f01      	ldr	r7, [sp, #4]
 800c360:	3630      	adds	r6, #48	; 0x30
 800c362:	f805 6b01 	strb.w	r6, [r5], #1
 800c366:	9e00      	ldr	r6, [sp, #0]
 800c368:	1bae      	subs	r6, r5, r6
 800c36a:	42b7      	cmp	r7, r6
 800c36c:	4602      	mov	r2, r0
 800c36e:	460b      	mov	r3, r1
 800c370:	d137      	bne.n	800c3e2 <_dtoa_r+0x722>
 800c372:	f7f3 ff8b 	bl	800028c <__adddf3>
 800c376:	4642      	mov	r2, r8
 800c378:	464b      	mov	r3, r9
 800c37a:	4606      	mov	r6, r0
 800c37c:	460f      	mov	r7, r1
 800c37e:	f7f4 fbcb 	bl	8000b18 <__aeabi_dcmpgt>
 800c382:	b9c8      	cbnz	r0, 800c3b8 <_dtoa_r+0x6f8>
 800c384:	4642      	mov	r2, r8
 800c386:	464b      	mov	r3, r9
 800c388:	4630      	mov	r0, r6
 800c38a:	4639      	mov	r1, r7
 800c38c:	f7f4 fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c390:	b110      	cbz	r0, 800c398 <_dtoa_r+0x6d8>
 800c392:	9b02      	ldr	r3, [sp, #8]
 800c394:	07d9      	lsls	r1, r3, #31
 800c396:	d40f      	bmi.n	800c3b8 <_dtoa_r+0x6f8>
 800c398:	4620      	mov	r0, r4
 800c39a:	4659      	mov	r1, fp
 800c39c:	f000 fe58 	bl	800d050 <_Bfree>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	702b      	strb	r3, [r5, #0]
 800c3a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3a6:	f10a 0001 	add.w	r0, sl, #1
 800c3aa:	6018      	str	r0, [r3, #0]
 800c3ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f43f acd8 	beq.w	800bd64 <_dtoa_r+0xa4>
 800c3b4:	601d      	str	r5, [r3, #0]
 800c3b6:	e4d5      	b.n	800bd64 <_dtoa_r+0xa4>
 800c3b8:	f8cd a01c 	str.w	sl, [sp, #28]
 800c3bc:	462b      	mov	r3, r5
 800c3be:	461d      	mov	r5, r3
 800c3c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3c4:	2a39      	cmp	r2, #57	; 0x39
 800c3c6:	d108      	bne.n	800c3da <_dtoa_r+0x71a>
 800c3c8:	9a00      	ldr	r2, [sp, #0]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d1f7      	bne.n	800c3be <_dtoa_r+0x6fe>
 800c3ce:	9a07      	ldr	r2, [sp, #28]
 800c3d0:	9900      	ldr	r1, [sp, #0]
 800c3d2:	3201      	adds	r2, #1
 800c3d4:	9207      	str	r2, [sp, #28]
 800c3d6:	2230      	movs	r2, #48	; 0x30
 800c3d8:	700a      	strb	r2, [r1, #0]
 800c3da:	781a      	ldrb	r2, [r3, #0]
 800c3dc:	3201      	adds	r2, #1
 800c3de:	701a      	strb	r2, [r3, #0]
 800c3e0:	e78c      	b.n	800c2fc <_dtoa_r+0x63c>
 800c3e2:	4b7f      	ldr	r3, [pc, #508]	; (800c5e0 <_dtoa_r+0x920>)
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f7f4 f907 	bl	80005f8 <__aeabi_dmul>
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	4606      	mov	r6, r0
 800c3f0:	460f      	mov	r7, r1
 800c3f2:	f7f4 fb69 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	d09b      	beq.n	800c332 <_dtoa_r+0x672>
 800c3fa:	e7cd      	b.n	800c398 <_dtoa_r+0x6d8>
 800c3fc:	9a08      	ldr	r2, [sp, #32]
 800c3fe:	2a00      	cmp	r2, #0
 800c400:	f000 80c4 	beq.w	800c58c <_dtoa_r+0x8cc>
 800c404:	9a05      	ldr	r2, [sp, #20]
 800c406:	2a01      	cmp	r2, #1
 800c408:	f300 80a8 	bgt.w	800c55c <_dtoa_r+0x89c>
 800c40c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c40e:	2a00      	cmp	r2, #0
 800c410:	f000 80a0 	beq.w	800c554 <_dtoa_r+0x894>
 800c414:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c418:	9e06      	ldr	r6, [sp, #24]
 800c41a:	4645      	mov	r5, r8
 800c41c:	9a04      	ldr	r2, [sp, #16]
 800c41e:	2101      	movs	r1, #1
 800c420:	441a      	add	r2, r3
 800c422:	4620      	mov	r0, r4
 800c424:	4498      	add	r8, r3
 800c426:	9204      	str	r2, [sp, #16]
 800c428:	f000 ff18 	bl	800d25c <__i2b>
 800c42c:	4607      	mov	r7, r0
 800c42e:	2d00      	cmp	r5, #0
 800c430:	dd0b      	ble.n	800c44a <_dtoa_r+0x78a>
 800c432:	9b04      	ldr	r3, [sp, #16]
 800c434:	2b00      	cmp	r3, #0
 800c436:	dd08      	ble.n	800c44a <_dtoa_r+0x78a>
 800c438:	42ab      	cmp	r3, r5
 800c43a:	9a04      	ldr	r2, [sp, #16]
 800c43c:	bfa8      	it	ge
 800c43e:	462b      	movge	r3, r5
 800c440:	eba8 0803 	sub.w	r8, r8, r3
 800c444:	1aed      	subs	r5, r5, r3
 800c446:	1ad3      	subs	r3, r2, r3
 800c448:	9304      	str	r3, [sp, #16]
 800c44a:	9b06      	ldr	r3, [sp, #24]
 800c44c:	b1fb      	cbz	r3, 800c48e <_dtoa_r+0x7ce>
 800c44e:	9b08      	ldr	r3, [sp, #32]
 800c450:	2b00      	cmp	r3, #0
 800c452:	f000 809f 	beq.w	800c594 <_dtoa_r+0x8d4>
 800c456:	2e00      	cmp	r6, #0
 800c458:	dd11      	ble.n	800c47e <_dtoa_r+0x7be>
 800c45a:	4639      	mov	r1, r7
 800c45c:	4632      	mov	r2, r6
 800c45e:	4620      	mov	r0, r4
 800c460:	f000 ffb8 	bl	800d3d4 <__pow5mult>
 800c464:	465a      	mov	r2, fp
 800c466:	4601      	mov	r1, r0
 800c468:	4607      	mov	r7, r0
 800c46a:	4620      	mov	r0, r4
 800c46c:	f000 ff0c 	bl	800d288 <__multiply>
 800c470:	4659      	mov	r1, fp
 800c472:	9007      	str	r0, [sp, #28]
 800c474:	4620      	mov	r0, r4
 800c476:	f000 fdeb 	bl	800d050 <_Bfree>
 800c47a:	9b07      	ldr	r3, [sp, #28]
 800c47c:	469b      	mov	fp, r3
 800c47e:	9b06      	ldr	r3, [sp, #24]
 800c480:	1b9a      	subs	r2, r3, r6
 800c482:	d004      	beq.n	800c48e <_dtoa_r+0x7ce>
 800c484:	4659      	mov	r1, fp
 800c486:	4620      	mov	r0, r4
 800c488:	f000 ffa4 	bl	800d3d4 <__pow5mult>
 800c48c:	4683      	mov	fp, r0
 800c48e:	2101      	movs	r1, #1
 800c490:	4620      	mov	r0, r4
 800c492:	f000 fee3 	bl	800d25c <__i2b>
 800c496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c498:	2b00      	cmp	r3, #0
 800c49a:	4606      	mov	r6, r0
 800c49c:	dd7c      	ble.n	800c598 <_dtoa_r+0x8d8>
 800c49e:	461a      	mov	r2, r3
 800c4a0:	4601      	mov	r1, r0
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f000 ff96 	bl	800d3d4 <__pow5mult>
 800c4a8:	9b05      	ldr	r3, [sp, #20]
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	4606      	mov	r6, r0
 800c4ae:	dd76      	ble.n	800c59e <_dtoa_r+0x8de>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	9306      	str	r3, [sp, #24]
 800c4b4:	6933      	ldr	r3, [r6, #16]
 800c4b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c4ba:	6918      	ldr	r0, [r3, #16]
 800c4bc:	f000 fe7e 	bl	800d1bc <__hi0bits>
 800c4c0:	f1c0 0020 	rsb	r0, r0, #32
 800c4c4:	9b04      	ldr	r3, [sp, #16]
 800c4c6:	4418      	add	r0, r3
 800c4c8:	f010 001f 	ands.w	r0, r0, #31
 800c4cc:	f000 8086 	beq.w	800c5dc <_dtoa_r+0x91c>
 800c4d0:	f1c0 0320 	rsb	r3, r0, #32
 800c4d4:	2b04      	cmp	r3, #4
 800c4d6:	dd7f      	ble.n	800c5d8 <_dtoa_r+0x918>
 800c4d8:	f1c0 001c 	rsb	r0, r0, #28
 800c4dc:	9b04      	ldr	r3, [sp, #16]
 800c4de:	4403      	add	r3, r0
 800c4e0:	4480      	add	r8, r0
 800c4e2:	4405      	add	r5, r0
 800c4e4:	9304      	str	r3, [sp, #16]
 800c4e6:	f1b8 0f00 	cmp.w	r8, #0
 800c4ea:	dd05      	ble.n	800c4f8 <_dtoa_r+0x838>
 800c4ec:	4659      	mov	r1, fp
 800c4ee:	4642      	mov	r2, r8
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	f000 ffc9 	bl	800d488 <__lshift>
 800c4f6:	4683      	mov	fp, r0
 800c4f8:	9b04      	ldr	r3, [sp, #16]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	dd05      	ble.n	800c50a <_dtoa_r+0x84a>
 800c4fe:	4631      	mov	r1, r6
 800c500:	461a      	mov	r2, r3
 800c502:	4620      	mov	r0, r4
 800c504:	f000 ffc0 	bl	800d488 <__lshift>
 800c508:	4606      	mov	r6, r0
 800c50a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d069      	beq.n	800c5e4 <_dtoa_r+0x924>
 800c510:	4631      	mov	r1, r6
 800c512:	4658      	mov	r0, fp
 800c514:	f001 f824 	bl	800d560 <__mcmp>
 800c518:	2800      	cmp	r0, #0
 800c51a:	da63      	bge.n	800c5e4 <_dtoa_r+0x924>
 800c51c:	2300      	movs	r3, #0
 800c51e:	4659      	mov	r1, fp
 800c520:	220a      	movs	r2, #10
 800c522:	4620      	mov	r0, r4
 800c524:	f000 fdb6 	bl	800d094 <__multadd>
 800c528:	9b08      	ldr	r3, [sp, #32]
 800c52a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c52e:	4683      	mov	fp, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	f000 818f 	beq.w	800c854 <_dtoa_r+0xb94>
 800c536:	4639      	mov	r1, r7
 800c538:	2300      	movs	r3, #0
 800c53a:	220a      	movs	r2, #10
 800c53c:	4620      	mov	r0, r4
 800c53e:	f000 fda9 	bl	800d094 <__multadd>
 800c542:	f1b9 0f00 	cmp.w	r9, #0
 800c546:	4607      	mov	r7, r0
 800c548:	f300 808e 	bgt.w	800c668 <_dtoa_r+0x9a8>
 800c54c:	9b05      	ldr	r3, [sp, #20]
 800c54e:	2b02      	cmp	r3, #2
 800c550:	dc50      	bgt.n	800c5f4 <_dtoa_r+0x934>
 800c552:	e089      	b.n	800c668 <_dtoa_r+0x9a8>
 800c554:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c556:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c55a:	e75d      	b.n	800c418 <_dtoa_r+0x758>
 800c55c:	9b01      	ldr	r3, [sp, #4]
 800c55e:	1e5e      	subs	r6, r3, #1
 800c560:	9b06      	ldr	r3, [sp, #24]
 800c562:	42b3      	cmp	r3, r6
 800c564:	bfbf      	itttt	lt
 800c566:	9b06      	ldrlt	r3, [sp, #24]
 800c568:	9606      	strlt	r6, [sp, #24]
 800c56a:	1af2      	sublt	r2, r6, r3
 800c56c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c56e:	bfb6      	itet	lt
 800c570:	189b      	addlt	r3, r3, r2
 800c572:	1b9e      	subge	r6, r3, r6
 800c574:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c576:	9b01      	ldr	r3, [sp, #4]
 800c578:	bfb8      	it	lt
 800c57a:	2600      	movlt	r6, #0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	bfb5      	itete	lt
 800c580:	eba8 0503 	sublt.w	r5, r8, r3
 800c584:	9b01      	ldrge	r3, [sp, #4]
 800c586:	2300      	movlt	r3, #0
 800c588:	4645      	movge	r5, r8
 800c58a:	e747      	b.n	800c41c <_dtoa_r+0x75c>
 800c58c:	9e06      	ldr	r6, [sp, #24]
 800c58e:	9f08      	ldr	r7, [sp, #32]
 800c590:	4645      	mov	r5, r8
 800c592:	e74c      	b.n	800c42e <_dtoa_r+0x76e>
 800c594:	9a06      	ldr	r2, [sp, #24]
 800c596:	e775      	b.n	800c484 <_dtoa_r+0x7c4>
 800c598:	9b05      	ldr	r3, [sp, #20]
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	dc18      	bgt.n	800c5d0 <_dtoa_r+0x910>
 800c59e:	9b02      	ldr	r3, [sp, #8]
 800c5a0:	b9b3      	cbnz	r3, 800c5d0 <_dtoa_r+0x910>
 800c5a2:	9b03      	ldr	r3, [sp, #12]
 800c5a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5a8:	b9a3      	cbnz	r3, 800c5d4 <_dtoa_r+0x914>
 800c5aa:	9b03      	ldr	r3, [sp, #12]
 800c5ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5b0:	0d1b      	lsrs	r3, r3, #20
 800c5b2:	051b      	lsls	r3, r3, #20
 800c5b4:	b12b      	cbz	r3, 800c5c2 <_dtoa_r+0x902>
 800c5b6:	9b04      	ldr	r3, [sp, #16]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	9304      	str	r3, [sp, #16]
 800c5bc:	f108 0801 	add.w	r8, r8, #1
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	9306      	str	r3, [sp, #24]
 800c5c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	f47f af74 	bne.w	800c4b4 <_dtoa_r+0x7f4>
 800c5cc:	2001      	movs	r0, #1
 800c5ce:	e779      	b.n	800c4c4 <_dtoa_r+0x804>
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	e7f6      	b.n	800c5c2 <_dtoa_r+0x902>
 800c5d4:	9b02      	ldr	r3, [sp, #8]
 800c5d6:	e7f4      	b.n	800c5c2 <_dtoa_r+0x902>
 800c5d8:	d085      	beq.n	800c4e6 <_dtoa_r+0x826>
 800c5da:	4618      	mov	r0, r3
 800c5dc:	301c      	adds	r0, #28
 800c5de:	e77d      	b.n	800c4dc <_dtoa_r+0x81c>
 800c5e0:	40240000 	.word	0x40240000
 800c5e4:	9b01      	ldr	r3, [sp, #4]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	dc38      	bgt.n	800c65c <_dtoa_r+0x99c>
 800c5ea:	9b05      	ldr	r3, [sp, #20]
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	dd35      	ble.n	800c65c <_dtoa_r+0x99c>
 800c5f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c5f4:	f1b9 0f00 	cmp.w	r9, #0
 800c5f8:	d10d      	bne.n	800c616 <_dtoa_r+0x956>
 800c5fa:	4631      	mov	r1, r6
 800c5fc:	464b      	mov	r3, r9
 800c5fe:	2205      	movs	r2, #5
 800c600:	4620      	mov	r0, r4
 800c602:	f000 fd47 	bl	800d094 <__multadd>
 800c606:	4601      	mov	r1, r0
 800c608:	4606      	mov	r6, r0
 800c60a:	4658      	mov	r0, fp
 800c60c:	f000 ffa8 	bl	800d560 <__mcmp>
 800c610:	2800      	cmp	r0, #0
 800c612:	f73f adbd 	bgt.w	800c190 <_dtoa_r+0x4d0>
 800c616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c618:	9d00      	ldr	r5, [sp, #0]
 800c61a:	ea6f 0a03 	mvn.w	sl, r3
 800c61e:	f04f 0800 	mov.w	r8, #0
 800c622:	4631      	mov	r1, r6
 800c624:	4620      	mov	r0, r4
 800c626:	f000 fd13 	bl	800d050 <_Bfree>
 800c62a:	2f00      	cmp	r7, #0
 800c62c:	f43f aeb4 	beq.w	800c398 <_dtoa_r+0x6d8>
 800c630:	f1b8 0f00 	cmp.w	r8, #0
 800c634:	d005      	beq.n	800c642 <_dtoa_r+0x982>
 800c636:	45b8      	cmp	r8, r7
 800c638:	d003      	beq.n	800c642 <_dtoa_r+0x982>
 800c63a:	4641      	mov	r1, r8
 800c63c:	4620      	mov	r0, r4
 800c63e:	f000 fd07 	bl	800d050 <_Bfree>
 800c642:	4639      	mov	r1, r7
 800c644:	4620      	mov	r0, r4
 800c646:	f000 fd03 	bl	800d050 <_Bfree>
 800c64a:	e6a5      	b.n	800c398 <_dtoa_r+0x6d8>
 800c64c:	2600      	movs	r6, #0
 800c64e:	4637      	mov	r7, r6
 800c650:	e7e1      	b.n	800c616 <_dtoa_r+0x956>
 800c652:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c654:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c658:	4637      	mov	r7, r6
 800c65a:	e599      	b.n	800c190 <_dtoa_r+0x4d0>
 800c65c:	9b08      	ldr	r3, [sp, #32]
 800c65e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	f000 80fd 	beq.w	800c862 <_dtoa_r+0xba2>
 800c668:	2d00      	cmp	r5, #0
 800c66a:	dd05      	ble.n	800c678 <_dtoa_r+0x9b8>
 800c66c:	4639      	mov	r1, r7
 800c66e:	462a      	mov	r2, r5
 800c670:	4620      	mov	r0, r4
 800c672:	f000 ff09 	bl	800d488 <__lshift>
 800c676:	4607      	mov	r7, r0
 800c678:	9b06      	ldr	r3, [sp, #24]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d05c      	beq.n	800c738 <_dtoa_r+0xa78>
 800c67e:	6879      	ldr	r1, [r7, #4]
 800c680:	4620      	mov	r0, r4
 800c682:	f000 fca5 	bl	800cfd0 <_Balloc>
 800c686:	4605      	mov	r5, r0
 800c688:	b928      	cbnz	r0, 800c696 <_dtoa_r+0x9d6>
 800c68a:	4b80      	ldr	r3, [pc, #512]	; (800c88c <_dtoa_r+0xbcc>)
 800c68c:	4602      	mov	r2, r0
 800c68e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c692:	f7ff bb2e 	b.w	800bcf2 <_dtoa_r+0x32>
 800c696:	693a      	ldr	r2, [r7, #16]
 800c698:	3202      	adds	r2, #2
 800c69a:	0092      	lsls	r2, r2, #2
 800c69c:	f107 010c 	add.w	r1, r7, #12
 800c6a0:	300c      	adds	r0, #12
 800c6a2:	f000 fc87 	bl	800cfb4 <memcpy>
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	f000 feec 	bl	800d488 <__lshift>
 800c6b0:	9b00      	ldr	r3, [sp, #0]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	9301      	str	r3, [sp, #4]
 800c6b6:	9b00      	ldr	r3, [sp, #0]
 800c6b8:	444b      	add	r3, r9
 800c6ba:	9307      	str	r3, [sp, #28]
 800c6bc:	9b02      	ldr	r3, [sp, #8]
 800c6be:	f003 0301 	and.w	r3, r3, #1
 800c6c2:	46b8      	mov	r8, r7
 800c6c4:	9306      	str	r3, [sp, #24]
 800c6c6:	4607      	mov	r7, r0
 800c6c8:	9b01      	ldr	r3, [sp, #4]
 800c6ca:	4631      	mov	r1, r6
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	4658      	mov	r0, fp
 800c6d0:	9302      	str	r3, [sp, #8]
 800c6d2:	f7ff fa67 	bl	800bba4 <quorem>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	3330      	adds	r3, #48	; 0x30
 800c6da:	9004      	str	r0, [sp, #16]
 800c6dc:	4641      	mov	r1, r8
 800c6de:	4658      	mov	r0, fp
 800c6e0:	9308      	str	r3, [sp, #32]
 800c6e2:	f000 ff3d 	bl	800d560 <__mcmp>
 800c6e6:	463a      	mov	r2, r7
 800c6e8:	4681      	mov	r9, r0
 800c6ea:	4631      	mov	r1, r6
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f000 ff53 	bl	800d598 <__mdiff>
 800c6f2:	68c2      	ldr	r2, [r0, #12]
 800c6f4:	9b08      	ldr	r3, [sp, #32]
 800c6f6:	4605      	mov	r5, r0
 800c6f8:	bb02      	cbnz	r2, 800c73c <_dtoa_r+0xa7c>
 800c6fa:	4601      	mov	r1, r0
 800c6fc:	4658      	mov	r0, fp
 800c6fe:	f000 ff2f 	bl	800d560 <__mcmp>
 800c702:	9b08      	ldr	r3, [sp, #32]
 800c704:	4602      	mov	r2, r0
 800c706:	4629      	mov	r1, r5
 800c708:	4620      	mov	r0, r4
 800c70a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c70e:	f000 fc9f 	bl	800d050 <_Bfree>
 800c712:	9b05      	ldr	r3, [sp, #20]
 800c714:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c716:	9d01      	ldr	r5, [sp, #4]
 800c718:	ea43 0102 	orr.w	r1, r3, r2
 800c71c:	9b06      	ldr	r3, [sp, #24]
 800c71e:	430b      	orrs	r3, r1
 800c720:	9b08      	ldr	r3, [sp, #32]
 800c722:	d10d      	bne.n	800c740 <_dtoa_r+0xa80>
 800c724:	2b39      	cmp	r3, #57	; 0x39
 800c726:	d029      	beq.n	800c77c <_dtoa_r+0xabc>
 800c728:	f1b9 0f00 	cmp.w	r9, #0
 800c72c:	dd01      	ble.n	800c732 <_dtoa_r+0xa72>
 800c72e:	9b04      	ldr	r3, [sp, #16]
 800c730:	3331      	adds	r3, #49	; 0x31
 800c732:	9a02      	ldr	r2, [sp, #8]
 800c734:	7013      	strb	r3, [r2, #0]
 800c736:	e774      	b.n	800c622 <_dtoa_r+0x962>
 800c738:	4638      	mov	r0, r7
 800c73a:	e7b9      	b.n	800c6b0 <_dtoa_r+0x9f0>
 800c73c:	2201      	movs	r2, #1
 800c73e:	e7e2      	b.n	800c706 <_dtoa_r+0xa46>
 800c740:	f1b9 0f00 	cmp.w	r9, #0
 800c744:	db06      	blt.n	800c754 <_dtoa_r+0xa94>
 800c746:	9905      	ldr	r1, [sp, #20]
 800c748:	ea41 0909 	orr.w	r9, r1, r9
 800c74c:	9906      	ldr	r1, [sp, #24]
 800c74e:	ea59 0101 	orrs.w	r1, r9, r1
 800c752:	d120      	bne.n	800c796 <_dtoa_r+0xad6>
 800c754:	2a00      	cmp	r2, #0
 800c756:	ddec      	ble.n	800c732 <_dtoa_r+0xa72>
 800c758:	4659      	mov	r1, fp
 800c75a:	2201      	movs	r2, #1
 800c75c:	4620      	mov	r0, r4
 800c75e:	9301      	str	r3, [sp, #4]
 800c760:	f000 fe92 	bl	800d488 <__lshift>
 800c764:	4631      	mov	r1, r6
 800c766:	4683      	mov	fp, r0
 800c768:	f000 fefa 	bl	800d560 <__mcmp>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	9b01      	ldr	r3, [sp, #4]
 800c770:	dc02      	bgt.n	800c778 <_dtoa_r+0xab8>
 800c772:	d1de      	bne.n	800c732 <_dtoa_r+0xa72>
 800c774:	07da      	lsls	r2, r3, #31
 800c776:	d5dc      	bpl.n	800c732 <_dtoa_r+0xa72>
 800c778:	2b39      	cmp	r3, #57	; 0x39
 800c77a:	d1d8      	bne.n	800c72e <_dtoa_r+0xa6e>
 800c77c:	9a02      	ldr	r2, [sp, #8]
 800c77e:	2339      	movs	r3, #57	; 0x39
 800c780:	7013      	strb	r3, [r2, #0]
 800c782:	462b      	mov	r3, r5
 800c784:	461d      	mov	r5, r3
 800c786:	3b01      	subs	r3, #1
 800c788:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c78c:	2a39      	cmp	r2, #57	; 0x39
 800c78e:	d050      	beq.n	800c832 <_dtoa_r+0xb72>
 800c790:	3201      	adds	r2, #1
 800c792:	701a      	strb	r2, [r3, #0]
 800c794:	e745      	b.n	800c622 <_dtoa_r+0x962>
 800c796:	2a00      	cmp	r2, #0
 800c798:	dd03      	ble.n	800c7a2 <_dtoa_r+0xae2>
 800c79a:	2b39      	cmp	r3, #57	; 0x39
 800c79c:	d0ee      	beq.n	800c77c <_dtoa_r+0xabc>
 800c79e:	3301      	adds	r3, #1
 800c7a0:	e7c7      	b.n	800c732 <_dtoa_r+0xa72>
 800c7a2:	9a01      	ldr	r2, [sp, #4]
 800c7a4:	9907      	ldr	r1, [sp, #28]
 800c7a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c7aa:	428a      	cmp	r2, r1
 800c7ac:	d02a      	beq.n	800c804 <_dtoa_r+0xb44>
 800c7ae:	4659      	mov	r1, fp
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	220a      	movs	r2, #10
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	f000 fc6d 	bl	800d094 <__multadd>
 800c7ba:	45b8      	cmp	r8, r7
 800c7bc:	4683      	mov	fp, r0
 800c7be:	f04f 0300 	mov.w	r3, #0
 800c7c2:	f04f 020a 	mov.w	r2, #10
 800c7c6:	4641      	mov	r1, r8
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	d107      	bne.n	800c7dc <_dtoa_r+0xb1c>
 800c7cc:	f000 fc62 	bl	800d094 <__multadd>
 800c7d0:	4680      	mov	r8, r0
 800c7d2:	4607      	mov	r7, r0
 800c7d4:	9b01      	ldr	r3, [sp, #4]
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	9301      	str	r3, [sp, #4]
 800c7da:	e775      	b.n	800c6c8 <_dtoa_r+0xa08>
 800c7dc:	f000 fc5a 	bl	800d094 <__multadd>
 800c7e0:	4639      	mov	r1, r7
 800c7e2:	4680      	mov	r8, r0
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	220a      	movs	r2, #10
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f000 fc53 	bl	800d094 <__multadd>
 800c7ee:	4607      	mov	r7, r0
 800c7f0:	e7f0      	b.n	800c7d4 <_dtoa_r+0xb14>
 800c7f2:	f1b9 0f00 	cmp.w	r9, #0
 800c7f6:	9a00      	ldr	r2, [sp, #0]
 800c7f8:	bfcc      	ite	gt
 800c7fa:	464d      	movgt	r5, r9
 800c7fc:	2501      	movle	r5, #1
 800c7fe:	4415      	add	r5, r2
 800c800:	f04f 0800 	mov.w	r8, #0
 800c804:	4659      	mov	r1, fp
 800c806:	2201      	movs	r2, #1
 800c808:	4620      	mov	r0, r4
 800c80a:	9301      	str	r3, [sp, #4]
 800c80c:	f000 fe3c 	bl	800d488 <__lshift>
 800c810:	4631      	mov	r1, r6
 800c812:	4683      	mov	fp, r0
 800c814:	f000 fea4 	bl	800d560 <__mcmp>
 800c818:	2800      	cmp	r0, #0
 800c81a:	dcb2      	bgt.n	800c782 <_dtoa_r+0xac2>
 800c81c:	d102      	bne.n	800c824 <_dtoa_r+0xb64>
 800c81e:	9b01      	ldr	r3, [sp, #4]
 800c820:	07db      	lsls	r3, r3, #31
 800c822:	d4ae      	bmi.n	800c782 <_dtoa_r+0xac2>
 800c824:	462b      	mov	r3, r5
 800c826:	461d      	mov	r5, r3
 800c828:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c82c:	2a30      	cmp	r2, #48	; 0x30
 800c82e:	d0fa      	beq.n	800c826 <_dtoa_r+0xb66>
 800c830:	e6f7      	b.n	800c622 <_dtoa_r+0x962>
 800c832:	9a00      	ldr	r2, [sp, #0]
 800c834:	429a      	cmp	r2, r3
 800c836:	d1a5      	bne.n	800c784 <_dtoa_r+0xac4>
 800c838:	f10a 0a01 	add.w	sl, sl, #1
 800c83c:	2331      	movs	r3, #49	; 0x31
 800c83e:	e779      	b.n	800c734 <_dtoa_r+0xa74>
 800c840:	4b13      	ldr	r3, [pc, #76]	; (800c890 <_dtoa_r+0xbd0>)
 800c842:	f7ff baaf 	b.w	800bda4 <_dtoa_r+0xe4>
 800c846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f47f aa86 	bne.w	800bd5a <_dtoa_r+0x9a>
 800c84e:	4b11      	ldr	r3, [pc, #68]	; (800c894 <_dtoa_r+0xbd4>)
 800c850:	f7ff baa8 	b.w	800bda4 <_dtoa_r+0xe4>
 800c854:	f1b9 0f00 	cmp.w	r9, #0
 800c858:	dc03      	bgt.n	800c862 <_dtoa_r+0xba2>
 800c85a:	9b05      	ldr	r3, [sp, #20]
 800c85c:	2b02      	cmp	r3, #2
 800c85e:	f73f aec9 	bgt.w	800c5f4 <_dtoa_r+0x934>
 800c862:	9d00      	ldr	r5, [sp, #0]
 800c864:	4631      	mov	r1, r6
 800c866:	4658      	mov	r0, fp
 800c868:	f7ff f99c 	bl	800bba4 <quorem>
 800c86c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c870:	f805 3b01 	strb.w	r3, [r5], #1
 800c874:	9a00      	ldr	r2, [sp, #0]
 800c876:	1aaa      	subs	r2, r5, r2
 800c878:	4591      	cmp	r9, r2
 800c87a:	ddba      	ble.n	800c7f2 <_dtoa_r+0xb32>
 800c87c:	4659      	mov	r1, fp
 800c87e:	2300      	movs	r3, #0
 800c880:	220a      	movs	r2, #10
 800c882:	4620      	mov	r0, r4
 800c884:	f000 fc06 	bl	800d094 <__multadd>
 800c888:	4683      	mov	fp, r0
 800c88a:	e7eb      	b.n	800c864 <_dtoa_r+0xba4>
 800c88c:	0800fef4 	.word	0x0800fef4
 800c890:	0800fcf4 	.word	0x0800fcf4
 800c894:	0800fe71 	.word	0x0800fe71

0800c898 <rshift>:
 800c898:	6903      	ldr	r3, [r0, #16]
 800c89a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c89e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c8a6:	f100 0414 	add.w	r4, r0, #20
 800c8aa:	dd45      	ble.n	800c938 <rshift+0xa0>
 800c8ac:	f011 011f 	ands.w	r1, r1, #31
 800c8b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c8b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c8b8:	d10c      	bne.n	800c8d4 <rshift+0x3c>
 800c8ba:	f100 0710 	add.w	r7, r0, #16
 800c8be:	4629      	mov	r1, r5
 800c8c0:	42b1      	cmp	r1, r6
 800c8c2:	d334      	bcc.n	800c92e <rshift+0x96>
 800c8c4:	1a9b      	subs	r3, r3, r2
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	1eea      	subs	r2, r5, #3
 800c8ca:	4296      	cmp	r6, r2
 800c8cc:	bf38      	it	cc
 800c8ce:	2300      	movcc	r3, #0
 800c8d0:	4423      	add	r3, r4
 800c8d2:	e015      	b.n	800c900 <rshift+0x68>
 800c8d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c8d8:	f1c1 0820 	rsb	r8, r1, #32
 800c8dc:	40cf      	lsrs	r7, r1
 800c8de:	f105 0e04 	add.w	lr, r5, #4
 800c8e2:	46a1      	mov	r9, r4
 800c8e4:	4576      	cmp	r6, lr
 800c8e6:	46f4      	mov	ip, lr
 800c8e8:	d815      	bhi.n	800c916 <rshift+0x7e>
 800c8ea:	1a9b      	subs	r3, r3, r2
 800c8ec:	009a      	lsls	r2, r3, #2
 800c8ee:	3a04      	subs	r2, #4
 800c8f0:	3501      	adds	r5, #1
 800c8f2:	42ae      	cmp	r6, r5
 800c8f4:	bf38      	it	cc
 800c8f6:	2200      	movcc	r2, #0
 800c8f8:	18a3      	adds	r3, r4, r2
 800c8fa:	50a7      	str	r7, [r4, r2]
 800c8fc:	b107      	cbz	r7, 800c900 <rshift+0x68>
 800c8fe:	3304      	adds	r3, #4
 800c900:	1b1a      	subs	r2, r3, r4
 800c902:	42a3      	cmp	r3, r4
 800c904:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c908:	bf08      	it	eq
 800c90a:	2300      	moveq	r3, #0
 800c90c:	6102      	str	r2, [r0, #16]
 800c90e:	bf08      	it	eq
 800c910:	6143      	streq	r3, [r0, #20]
 800c912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c916:	f8dc c000 	ldr.w	ip, [ip]
 800c91a:	fa0c fc08 	lsl.w	ip, ip, r8
 800c91e:	ea4c 0707 	orr.w	r7, ip, r7
 800c922:	f849 7b04 	str.w	r7, [r9], #4
 800c926:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c92a:	40cf      	lsrs	r7, r1
 800c92c:	e7da      	b.n	800c8e4 <rshift+0x4c>
 800c92e:	f851 cb04 	ldr.w	ip, [r1], #4
 800c932:	f847 cf04 	str.w	ip, [r7, #4]!
 800c936:	e7c3      	b.n	800c8c0 <rshift+0x28>
 800c938:	4623      	mov	r3, r4
 800c93a:	e7e1      	b.n	800c900 <rshift+0x68>

0800c93c <__hexdig_fun>:
 800c93c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c940:	2b09      	cmp	r3, #9
 800c942:	d802      	bhi.n	800c94a <__hexdig_fun+0xe>
 800c944:	3820      	subs	r0, #32
 800c946:	b2c0      	uxtb	r0, r0
 800c948:	4770      	bx	lr
 800c94a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c94e:	2b05      	cmp	r3, #5
 800c950:	d801      	bhi.n	800c956 <__hexdig_fun+0x1a>
 800c952:	3847      	subs	r0, #71	; 0x47
 800c954:	e7f7      	b.n	800c946 <__hexdig_fun+0xa>
 800c956:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c95a:	2b05      	cmp	r3, #5
 800c95c:	d801      	bhi.n	800c962 <__hexdig_fun+0x26>
 800c95e:	3827      	subs	r0, #39	; 0x27
 800c960:	e7f1      	b.n	800c946 <__hexdig_fun+0xa>
 800c962:	2000      	movs	r0, #0
 800c964:	4770      	bx	lr
	...

0800c968 <__gethex>:
 800c968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c96c:	ed2d 8b02 	vpush	{d8}
 800c970:	b089      	sub	sp, #36	; 0x24
 800c972:	ee08 0a10 	vmov	s16, r0
 800c976:	9304      	str	r3, [sp, #16]
 800c978:	4bbc      	ldr	r3, [pc, #752]	; (800cc6c <__gethex+0x304>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	9301      	str	r3, [sp, #4]
 800c97e:	4618      	mov	r0, r3
 800c980:	468b      	mov	fp, r1
 800c982:	4690      	mov	r8, r2
 800c984:	f7f3 fc24 	bl	80001d0 <strlen>
 800c988:	9b01      	ldr	r3, [sp, #4]
 800c98a:	f8db 2000 	ldr.w	r2, [fp]
 800c98e:	4403      	add	r3, r0
 800c990:	4682      	mov	sl, r0
 800c992:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c996:	9305      	str	r3, [sp, #20]
 800c998:	1c93      	adds	r3, r2, #2
 800c99a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c99e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c9a2:	32fe      	adds	r2, #254	; 0xfe
 800c9a4:	18d1      	adds	r1, r2, r3
 800c9a6:	461f      	mov	r7, r3
 800c9a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c9ac:	9100      	str	r1, [sp, #0]
 800c9ae:	2830      	cmp	r0, #48	; 0x30
 800c9b0:	d0f8      	beq.n	800c9a4 <__gethex+0x3c>
 800c9b2:	f7ff ffc3 	bl	800c93c <__hexdig_fun>
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	d13a      	bne.n	800ca32 <__gethex+0xca>
 800c9bc:	9901      	ldr	r1, [sp, #4]
 800c9be:	4652      	mov	r2, sl
 800c9c0:	4638      	mov	r0, r7
 800c9c2:	f001 f9ed 	bl	800dda0 <strncmp>
 800c9c6:	4605      	mov	r5, r0
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	d168      	bne.n	800ca9e <__gethex+0x136>
 800c9cc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c9d0:	eb07 060a 	add.w	r6, r7, sl
 800c9d4:	f7ff ffb2 	bl	800c93c <__hexdig_fun>
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	d062      	beq.n	800caa2 <__gethex+0x13a>
 800c9dc:	4633      	mov	r3, r6
 800c9de:	7818      	ldrb	r0, [r3, #0]
 800c9e0:	2830      	cmp	r0, #48	; 0x30
 800c9e2:	461f      	mov	r7, r3
 800c9e4:	f103 0301 	add.w	r3, r3, #1
 800c9e8:	d0f9      	beq.n	800c9de <__gethex+0x76>
 800c9ea:	f7ff ffa7 	bl	800c93c <__hexdig_fun>
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	fab0 f480 	clz	r4, r0
 800c9f4:	0964      	lsrs	r4, r4, #5
 800c9f6:	4635      	mov	r5, r6
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	463a      	mov	r2, r7
 800c9fc:	4616      	mov	r6, r2
 800c9fe:	3201      	adds	r2, #1
 800ca00:	7830      	ldrb	r0, [r6, #0]
 800ca02:	f7ff ff9b 	bl	800c93c <__hexdig_fun>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d1f8      	bne.n	800c9fc <__gethex+0x94>
 800ca0a:	9901      	ldr	r1, [sp, #4]
 800ca0c:	4652      	mov	r2, sl
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f001 f9c6 	bl	800dda0 <strncmp>
 800ca14:	b980      	cbnz	r0, 800ca38 <__gethex+0xd0>
 800ca16:	b94d      	cbnz	r5, 800ca2c <__gethex+0xc4>
 800ca18:	eb06 050a 	add.w	r5, r6, sl
 800ca1c:	462a      	mov	r2, r5
 800ca1e:	4616      	mov	r6, r2
 800ca20:	3201      	adds	r2, #1
 800ca22:	7830      	ldrb	r0, [r6, #0]
 800ca24:	f7ff ff8a 	bl	800c93c <__hexdig_fun>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	d1f8      	bne.n	800ca1e <__gethex+0xb6>
 800ca2c:	1bad      	subs	r5, r5, r6
 800ca2e:	00ad      	lsls	r5, r5, #2
 800ca30:	e004      	b.n	800ca3c <__gethex+0xd4>
 800ca32:	2400      	movs	r4, #0
 800ca34:	4625      	mov	r5, r4
 800ca36:	e7e0      	b.n	800c9fa <__gethex+0x92>
 800ca38:	2d00      	cmp	r5, #0
 800ca3a:	d1f7      	bne.n	800ca2c <__gethex+0xc4>
 800ca3c:	7833      	ldrb	r3, [r6, #0]
 800ca3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ca42:	2b50      	cmp	r3, #80	; 0x50
 800ca44:	d13b      	bne.n	800cabe <__gethex+0x156>
 800ca46:	7873      	ldrb	r3, [r6, #1]
 800ca48:	2b2b      	cmp	r3, #43	; 0x2b
 800ca4a:	d02c      	beq.n	800caa6 <__gethex+0x13e>
 800ca4c:	2b2d      	cmp	r3, #45	; 0x2d
 800ca4e:	d02e      	beq.n	800caae <__gethex+0x146>
 800ca50:	1c71      	adds	r1, r6, #1
 800ca52:	f04f 0900 	mov.w	r9, #0
 800ca56:	7808      	ldrb	r0, [r1, #0]
 800ca58:	f7ff ff70 	bl	800c93c <__hexdig_fun>
 800ca5c:	1e43      	subs	r3, r0, #1
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	2b18      	cmp	r3, #24
 800ca62:	d82c      	bhi.n	800cabe <__gethex+0x156>
 800ca64:	f1a0 0210 	sub.w	r2, r0, #16
 800ca68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ca6c:	f7ff ff66 	bl	800c93c <__hexdig_fun>
 800ca70:	1e43      	subs	r3, r0, #1
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	2b18      	cmp	r3, #24
 800ca76:	d91d      	bls.n	800cab4 <__gethex+0x14c>
 800ca78:	f1b9 0f00 	cmp.w	r9, #0
 800ca7c:	d000      	beq.n	800ca80 <__gethex+0x118>
 800ca7e:	4252      	negs	r2, r2
 800ca80:	4415      	add	r5, r2
 800ca82:	f8cb 1000 	str.w	r1, [fp]
 800ca86:	b1e4      	cbz	r4, 800cac2 <__gethex+0x15a>
 800ca88:	9b00      	ldr	r3, [sp, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	bf14      	ite	ne
 800ca8e:	2700      	movne	r7, #0
 800ca90:	2706      	moveq	r7, #6
 800ca92:	4638      	mov	r0, r7
 800ca94:	b009      	add	sp, #36	; 0x24
 800ca96:	ecbd 8b02 	vpop	{d8}
 800ca9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca9e:	463e      	mov	r6, r7
 800caa0:	4625      	mov	r5, r4
 800caa2:	2401      	movs	r4, #1
 800caa4:	e7ca      	b.n	800ca3c <__gethex+0xd4>
 800caa6:	f04f 0900 	mov.w	r9, #0
 800caaa:	1cb1      	adds	r1, r6, #2
 800caac:	e7d3      	b.n	800ca56 <__gethex+0xee>
 800caae:	f04f 0901 	mov.w	r9, #1
 800cab2:	e7fa      	b.n	800caaa <__gethex+0x142>
 800cab4:	230a      	movs	r3, #10
 800cab6:	fb03 0202 	mla	r2, r3, r2, r0
 800caba:	3a10      	subs	r2, #16
 800cabc:	e7d4      	b.n	800ca68 <__gethex+0x100>
 800cabe:	4631      	mov	r1, r6
 800cac0:	e7df      	b.n	800ca82 <__gethex+0x11a>
 800cac2:	1bf3      	subs	r3, r6, r7
 800cac4:	3b01      	subs	r3, #1
 800cac6:	4621      	mov	r1, r4
 800cac8:	2b07      	cmp	r3, #7
 800caca:	dc0b      	bgt.n	800cae4 <__gethex+0x17c>
 800cacc:	ee18 0a10 	vmov	r0, s16
 800cad0:	f000 fa7e 	bl	800cfd0 <_Balloc>
 800cad4:	4604      	mov	r4, r0
 800cad6:	b940      	cbnz	r0, 800caea <__gethex+0x182>
 800cad8:	4b65      	ldr	r3, [pc, #404]	; (800cc70 <__gethex+0x308>)
 800cada:	4602      	mov	r2, r0
 800cadc:	21de      	movs	r1, #222	; 0xde
 800cade:	4865      	ldr	r0, [pc, #404]	; (800cc74 <__gethex+0x30c>)
 800cae0:	f001 f97e 	bl	800dde0 <__assert_func>
 800cae4:	3101      	adds	r1, #1
 800cae6:	105b      	asrs	r3, r3, #1
 800cae8:	e7ee      	b.n	800cac8 <__gethex+0x160>
 800caea:	f100 0914 	add.w	r9, r0, #20
 800caee:	f04f 0b00 	mov.w	fp, #0
 800caf2:	f1ca 0301 	rsb	r3, sl, #1
 800caf6:	f8cd 9008 	str.w	r9, [sp, #8]
 800cafa:	f8cd b000 	str.w	fp, [sp]
 800cafe:	9306      	str	r3, [sp, #24]
 800cb00:	42b7      	cmp	r7, r6
 800cb02:	d340      	bcc.n	800cb86 <__gethex+0x21e>
 800cb04:	9802      	ldr	r0, [sp, #8]
 800cb06:	9b00      	ldr	r3, [sp, #0]
 800cb08:	f840 3b04 	str.w	r3, [r0], #4
 800cb0c:	eba0 0009 	sub.w	r0, r0, r9
 800cb10:	1080      	asrs	r0, r0, #2
 800cb12:	0146      	lsls	r6, r0, #5
 800cb14:	6120      	str	r0, [r4, #16]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f000 fb50 	bl	800d1bc <__hi0bits>
 800cb1c:	1a30      	subs	r0, r6, r0
 800cb1e:	f8d8 6000 	ldr.w	r6, [r8]
 800cb22:	42b0      	cmp	r0, r6
 800cb24:	dd63      	ble.n	800cbee <__gethex+0x286>
 800cb26:	1b87      	subs	r7, r0, r6
 800cb28:	4639      	mov	r1, r7
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f000 feea 	bl	800d904 <__any_on>
 800cb30:	4682      	mov	sl, r0
 800cb32:	b1a8      	cbz	r0, 800cb60 <__gethex+0x1f8>
 800cb34:	1e7b      	subs	r3, r7, #1
 800cb36:	1159      	asrs	r1, r3, #5
 800cb38:	f003 021f 	and.w	r2, r3, #31
 800cb3c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cb40:	f04f 0a01 	mov.w	sl, #1
 800cb44:	fa0a f202 	lsl.w	r2, sl, r2
 800cb48:	420a      	tst	r2, r1
 800cb4a:	d009      	beq.n	800cb60 <__gethex+0x1f8>
 800cb4c:	4553      	cmp	r3, sl
 800cb4e:	dd05      	ble.n	800cb5c <__gethex+0x1f4>
 800cb50:	1eb9      	subs	r1, r7, #2
 800cb52:	4620      	mov	r0, r4
 800cb54:	f000 fed6 	bl	800d904 <__any_on>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	d145      	bne.n	800cbe8 <__gethex+0x280>
 800cb5c:	f04f 0a02 	mov.w	sl, #2
 800cb60:	4639      	mov	r1, r7
 800cb62:	4620      	mov	r0, r4
 800cb64:	f7ff fe98 	bl	800c898 <rshift>
 800cb68:	443d      	add	r5, r7
 800cb6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb6e:	42ab      	cmp	r3, r5
 800cb70:	da4c      	bge.n	800cc0c <__gethex+0x2a4>
 800cb72:	ee18 0a10 	vmov	r0, s16
 800cb76:	4621      	mov	r1, r4
 800cb78:	f000 fa6a 	bl	800d050 <_Bfree>
 800cb7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb7e:	2300      	movs	r3, #0
 800cb80:	6013      	str	r3, [r2, #0]
 800cb82:	27a3      	movs	r7, #163	; 0xa3
 800cb84:	e785      	b.n	800ca92 <__gethex+0x12a>
 800cb86:	1e73      	subs	r3, r6, #1
 800cb88:	9a05      	ldr	r2, [sp, #20]
 800cb8a:	9303      	str	r3, [sp, #12]
 800cb8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d019      	beq.n	800cbc8 <__gethex+0x260>
 800cb94:	f1bb 0f20 	cmp.w	fp, #32
 800cb98:	d107      	bne.n	800cbaa <__gethex+0x242>
 800cb9a:	9b02      	ldr	r3, [sp, #8]
 800cb9c:	9a00      	ldr	r2, [sp, #0]
 800cb9e:	f843 2b04 	str.w	r2, [r3], #4
 800cba2:	9302      	str	r3, [sp, #8]
 800cba4:	2300      	movs	r3, #0
 800cba6:	9300      	str	r3, [sp, #0]
 800cba8:	469b      	mov	fp, r3
 800cbaa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cbae:	f7ff fec5 	bl	800c93c <__hexdig_fun>
 800cbb2:	9b00      	ldr	r3, [sp, #0]
 800cbb4:	f000 000f 	and.w	r0, r0, #15
 800cbb8:	fa00 f00b 	lsl.w	r0, r0, fp
 800cbbc:	4303      	orrs	r3, r0
 800cbbe:	9300      	str	r3, [sp, #0]
 800cbc0:	f10b 0b04 	add.w	fp, fp, #4
 800cbc4:	9b03      	ldr	r3, [sp, #12]
 800cbc6:	e00d      	b.n	800cbe4 <__gethex+0x27c>
 800cbc8:	9b03      	ldr	r3, [sp, #12]
 800cbca:	9a06      	ldr	r2, [sp, #24]
 800cbcc:	4413      	add	r3, r2
 800cbce:	42bb      	cmp	r3, r7
 800cbd0:	d3e0      	bcc.n	800cb94 <__gethex+0x22c>
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	9901      	ldr	r1, [sp, #4]
 800cbd6:	9307      	str	r3, [sp, #28]
 800cbd8:	4652      	mov	r2, sl
 800cbda:	f001 f8e1 	bl	800dda0 <strncmp>
 800cbde:	9b07      	ldr	r3, [sp, #28]
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	d1d7      	bne.n	800cb94 <__gethex+0x22c>
 800cbe4:	461e      	mov	r6, r3
 800cbe6:	e78b      	b.n	800cb00 <__gethex+0x198>
 800cbe8:	f04f 0a03 	mov.w	sl, #3
 800cbec:	e7b8      	b.n	800cb60 <__gethex+0x1f8>
 800cbee:	da0a      	bge.n	800cc06 <__gethex+0x29e>
 800cbf0:	1a37      	subs	r7, r6, r0
 800cbf2:	4621      	mov	r1, r4
 800cbf4:	ee18 0a10 	vmov	r0, s16
 800cbf8:	463a      	mov	r2, r7
 800cbfa:	f000 fc45 	bl	800d488 <__lshift>
 800cbfe:	1bed      	subs	r5, r5, r7
 800cc00:	4604      	mov	r4, r0
 800cc02:	f100 0914 	add.w	r9, r0, #20
 800cc06:	f04f 0a00 	mov.w	sl, #0
 800cc0a:	e7ae      	b.n	800cb6a <__gethex+0x202>
 800cc0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cc10:	42a8      	cmp	r0, r5
 800cc12:	dd72      	ble.n	800ccfa <__gethex+0x392>
 800cc14:	1b45      	subs	r5, r0, r5
 800cc16:	42ae      	cmp	r6, r5
 800cc18:	dc36      	bgt.n	800cc88 <__gethex+0x320>
 800cc1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	d02a      	beq.n	800cc78 <__gethex+0x310>
 800cc22:	2b03      	cmp	r3, #3
 800cc24:	d02c      	beq.n	800cc80 <__gethex+0x318>
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d115      	bne.n	800cc56 <__gethex+0x2ee>
 800cc2a:	42ae      	cmp	r6, r5
 800cc2c:	d113      	bne.n	800cc56 <__gethex+0x2ee>
 800cc2e:	2e01      	cmp	r6, #1
 800cc30:	d10b      	bne.n	800cc4a <__gethex+0x2e2>
 800cc32:	9a04      	ldr	r2, [sp, #16]
 800cc34:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cc38:	6013      	str	r3, [r2, #0]
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	6123      	str	r3, [r4, #16]
 800cc3e:	f8c9 3000 	str.w	r3, [r9]
 800cc42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc44:	2762      	movs	r7, #98	; 0x62
 800cc46:	601c      	str	r4, [r3, #0]
 800cc48:	e723      	b.n	800ca92 <__gethex+0x12a>
 800cc4a:	1e71      	subs	r1, r6, #1
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f000 fe59 	bl	800d904 <__any_on>
 800cc52:	2800      	cmp	r0, #0
 800cc54:	d1ed      	bne.n	800cc32 <__gethex+0x2ca>
 800cc56:	ee18 0a10 	vmov	r0, s16
 800cc5a:	4621      	mov	r1, r4
 800cc5c:	f000 f9f8 	bl	800d050 <_Bfree>
 800cc60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cc62:	2300      	movs	r3, #0
 800cc64:	6013      	str	r3, [r2, #0]
 800cc66:	2750      	movs	r7, #80	; 0x50
 800cc68:	e713      	b.n	800ca92 <__gethex+0x12a>
 800cc6a:	bf00      	nop
 800cc6c:	0800ff70 	.word	0x0800ff70
 800cc70:	0800fef4 	.word	0x0800fef4
 800cc74:	0800ff05 	.word	0x0800ff05
 800cc78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d1eb      	bne.n	800cc56 <__gethex+0x2ee>
 800cc7e:	e7d8      	b.n	800cc32 <__gethex+0x2ca>
 800cc80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d1d5      	bne.n	800cc32 <__gethex+0x2ca>
 800cc86:	e7e6      	b.n	800cc56 <__gethex+0x2ee>
 800cc88:	1e6f      	subs	r7, r5, #1
 800cc8a:	f1ba 0f00 	cmp.w	sl, #0
 800cc8e:	d131      	bne.n	800ccf4 <__gethex+0x38c>
 800cc90:	b127      	cbz	r7, 800cc9c <__gethex+0x334>
 800cc92:	4639      	mov	r1, r7
 800cc94:	4620      	mov	r0, r4
 800cc96:	f000 fe35 	bl	800d904 <__any_on>
 800cc9a:	4682      	mov	sl, r0
 800cc9c:	117b      	asrs	r3, r7, #5
 800cc9e:	2101      	movs	r1, #1
 800cca0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cca4:	f007 071f 	and.w	r7, r7, #31
 800cca8:	fa01 f707 	lsl.w	r7, r1, r7
 800ccac:	421f      	tst	r7, r3
 800ccae:	4629      	mov	r1, r5
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	bf18      	it	ne
 800ccb4:	f04a 0a02 	orrne.w	sl, sl, #2
 800ccb8:	1b76      	subs	r6, r6, r5
 800ccba:	f7ff fded 	bl	800c898 <rshift>
 800ccbe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ccc2:	2702      	movs	r7, #2
 800ccc4:	f1ba 0f00 	cmp.w	sl, #0
 800ccc8:	d048      	beq.n	800cd5c <__gethex+0x3f4>
 800ccca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ccce:	2b02      	cmp	r3, #2
 800ccd0:	d015      	beq.n	800ccfe <__gethex+0x396>
 800ccd2:	2b03      	cmp	r3, #3
 800ccd4:	d017      	beq.n	800cd06 <__gethex+0x39e>
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d109      	bne.n	800ccee <__gethex+0x386>
 800ccda:	f01a 0f02 	tst.w	sl, #2
 800ccde:	d006      	beq.n	800ccee <__gethex+0x386>
 800cce0:	f8d9 0000 	ldr.w	r0, [r9]
 800cce4:	ea4a 0a00 	orr.w	sl, sl, r0
 800cce8:	f01a 0f01 	tst.w	sl, #1
 800ccec:	d10e      	bne.n	800cd0c <__gethex+0x3a4>
 800ccee:	f047 0710 	orr.w	r7, r7, #16
 800ccf2:	e033      	b.n	800cd5c <__gethex+0x3f4>
 800ccf4:	f04f 0a01 	mov.w	sl, #1
 800ccf8:	e7d0      	b.n	800cc9c <__gethex+0x334>
 800ccfa:	2701      	movs	r7, #1
 800ccfc:	e7e2      	b.n	800ccc4 <__gethex+0x35c>
 800ccfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd00:	f1c3 0301 	rsb	r3, r3, #1
 800cd04:	9315      	str	r3, [sp, #84]	; 0x54
 800cd06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d0f0      	beq.n	800ccee <__gethex+0x386>
 800cd0c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cd10:	f104 0314 	add.w	r3, r4, #20
 800cd14:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cd18:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cd1c:	f04f 0c00 	mov.w	ip, #0
 800cd20:	4618      	mov	r0, r3
 800cd22:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd26:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cd2a:	d01c      	beq.n	800cd66 <__gethex+0x3fe>
 800cd2c:	3201      	adds	r2, #1
 800cd2e:	6002      	str	r2, [r0, #0]
 800cd30:	2f02      	cmp	r7, #2
 800cd32:	f104 0314 	add.w	r3, r4, #20
 800cd36:	d13f      	bne.n	800cdb8 <__gethex+0x450>
 800cd38:	f8d8 2000 	ldr.w	r2, [r8]
 800cd3c:	3a01      	subs	r2, #1
 800cd3e:	42b2      	cmp	r2, r6
 800cd40:	d10a      	bne.n	800cd58 <__gethex+0x3f0>
 800cd42:	1171      	asrs	r1, r6, #5
 800cd44:	2201      	movs	r2, #1
 800cd46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd4a:	f006 061f 	and.w	r6, r6, #31
 800cd4e:	fa02 f606 	lsl.w	r6, r2, r6
 800cd52:	421e      	tst	r6, r3
 800cd54:	bf18      	it	ne
 800cd56:	4617      	movne	r7, r2
 800cd58:	f047 0720 	orr.w	r7, r7, #32
 800cd5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd5e:	601c      	str	r4, [r3, #0]
 800cd60:	9b04      	ldr	r3, [sp, #16]
 800cd62:	601d      	str	r5, [r3, #0]
 800cd64:	e695      	b.n	800ca92 <__gethex+0x12a>
 800cd66:	4299      	cmp	r1, r3
 800cd68:	f843 cc04 	str.w	ip, [r3, #-4]
 800cd6c:	d8d8      	bhi.n	800cd20 <__gethex+0x3b8>
 800cd6e:	68a3      	ldr	r3, [r4, #8]
 800cd70:	459b      	cmp	fp, r3
 800cd72:	db19      	blt.n	800cda8 <__gethex+0x440>
 800cd74:	6861      	ldr	r1, [r4, #4]
 800cd76:	ee18 0a10 	vmov	r0, s16
 800cd7a:	3101      	adds	r1, #1
 800cd7c:	f000 f928 	bl	800cfd0 <_Balloc>
 800cd80:	4681      	mov	r9, r0
 800cd82:	b918      	cbnz	r0, 800cd8c <__gethex+0x424>
 800cd84:	4b1a      	ldr	r3, [pc, #104]	; (800cdf0 <__gethex+0x488>)
 800cd86:	4602      	mov	r2, r0
 800cd88:	2184      	movs	r1, #132	; 0x84
 800cd8a:	e6a8      	b.n	800cade <__gethex+0x176>
 800cd8c:	6922      	ldr	r2, [r4, #16]
 800cd8e:	3202      	adds	r2, #2
 800cd90:	f104 010c 	add.w	r1, r4, #12
 800cd94:	0092      	lsls	r2, r2, #2
 800cd96:	300c      	adds	r0, #12
 800cd98:	f000 f90c 	bl	800cfb4 <memcpy>
 800cd9c:	4621      	mov	r1, r4
 800cd9e:	ee18 0a10 	vmov	r0, s16
 800cda2:	f000 f955 	bl	800d050 <_Bfree>
 800cda6:	464c      	mov	r4, r9
 800cda8:	6923      	ldr	r3, [r4, #16]
 800cdaa:	1c5a      	adds	r2, r3, #1
 800cdac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cdb0:	6122      	str	r2, [r4, #16]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	615a      	str	r2, [r3, #20]
 800cdb6:	e7bb      	b.n	800cd30 <__gethex+0x3c8>
 800cdb8:	6922      	ldr	r2, [r4, #16]
 800cdba:	455a      	cmp	r2, fp
 800cdbc:	dd0b      	ble.n	800cdd6 <__gethex+0x46e>
 800cdbe:	2101      	movs	r1, #1
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f7ff fd69 	bl	800c898 <rshift>
 800cdc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cdca:	3501      	adds	r5, #1
 800cdcc:	42ab      	cmp	r3, r5
 800cdce:	f6ff aed0 	blt.w	800cb72 <__gethex+0x20a>
 800cdd2:	2701      	movs	r7, #1
 800cdd4:	e7c0      	b.n	800cd58 <__gethex+0x3f0>
 800cdd6:	f016 061f 	ands.w	r6, r6, #31
 800cdda:	d0fa      	beq.n	800cdd2 <__gethex+0x46a>
 800cddc:	449a      	add	sl, r3
 800cdde:	f1c6 0620 	rsb	r6, r6, #32
 800cde2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cde6:	f000 f9e9 	bl	800d1bc <__hi0bits>
 800cdea:	42b0      	cmp	r0, r6
 800cdec:	dbe7      	blt.n	800cdbe <__gethex+0x456>
 800cdee:	e7f0      	b.n	800cdd2 <__gethex+0x46a>
 800cdf0:	0800fef4 	.word	0x0800fef4

0800cdf4 <L_shift>:
 800cdf4:	f1c2 0208 	rsb	r2, r2, #8
 800cdf8:	0092      	lsls	r2, r2, #2
 800cdfa:	b570      	push	{r4, r5, r6, lr}
 800cdfc:	f1c2 0620 	rsb	r6, r2, #32
 800ce00:	6843      	ldr	r3, [r0, #4]
 800ce02:	6804      	ldr	r4, [r0, #0]
 800ce04:	fa03 f506 	lsl.w	r5, r3, r6
 800ce08:	432c      	orrs	r4, r5
 800ce0a:	40d3      	lsrs	r3, r2
 800ce0c:	6004      	str	r4, [r0, #0]
 800ce0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ce12:	4288      	cmp	r0, r1
 800ce14:	d3f4      	bcc.n	800ce00 <L_shift+0xc>
 800ce16:	bd70      	pop	{r4, r5, r6, pc}

0800ce18 <__match>:
 800ce18:	b530      	push	{r4, r5, lr}
 800ce1a:	6803      	ldr	r3, [r0, #0]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce22:	b914      	cbnz	r4, 800ce2a <__match+0x12>
 800ce24:	6003      	str	r3, [r0, #0]
 800ce26:	2001      	movs	r0, #1
 800ce28:	bd30      	pop	{r4, r5, pc}
 800ce2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ce32:	2d19      	cmp	r5, #25
 800ce34:	bf98      	it	ls
 800ce36:	3220      	addls	r2, #32
 800ce38:	42a2      	cmp	r2, r4
 800ce3a:	d0f0      	beq.n	800ce1e <__match+0x6>
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	e7f3      	b.n	800ce28 <__match+0x10>

0800ce40 <__hexnan>:
 800ce40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	680b      	ldr	r3, [r1, #0]
 800ce46:	6801      	ldr	r1, [r0, #0]
 800ce48:	115e      	asrs	r6, r3, #5
 800ce4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ce4e:	f013 031f 	ands.w	r3, r3, #31
 800ce52:	b087      	sub	sp, #28
 800ce54:	bf18      	it	ne
 800ce56:	3604      	addne	r6, #4
 800ce58:	2500      	movs	r5, #0
 800ce5a:	1f37      	subs	r7, r6, #4
 800ce5c:	4682      	mov	sl, r0
 800ce5e:	4690      	mov	r8, r2
 800ce60:	9301      	str	r3, [sp, #4]
 800ce62:	f846 5c04 	str.w	r5, [r6, #-4]
 800ce66:	46b9      	mov	r9, r7
 800ce68:	463c      	mov	r4, r7
 800ce6a:	9502      	str	r5, [sp, #8]
 800ce6c:	46ab      	mov	fp, r5
 800ce6e:	784a      	ldrb	r2, [r1, #1]
 800ce70:	1c4b      	adds	r3, r1, #1
 800ce72:	9303      	str	r3, [sp, #12]
 800ce74:	b342      	cbz	r2, 800cec8 <__hexnan+0x88>
 800ce76:	4610      	mov	r0, r2
 800ce78:	9105      	str	r1, [sp, #20]
 800ce7a:	9204      	str	r2, [sp, #16]
 800ce7c:	f7ff fd5e 	bl	800c93c <__hexdig_fun>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	d14f      	bne.n	800cf24 <__hexnan+0xe4>
 800ce84:	9a04      	ldr	r2, [sp, #16]
 800ce86:	9905      	ldr	r1, [sp, #20]
 800ce88:	2a20      	cmp	r2, #32
 800ce8a:	d818      	bhi.n	800cebe <__hexnan+0x7e>
 800ce8c:	9b02      	ldr	r3, [sp, #8]
 800ce8e:	459b      	cmp	fp, r3
 800ce90:	dd13      	ble.n	800ceba <__hexnan+0x7a>
 800ce92:	454c      	cmp	r4, r9
 800ce94:	d206      	bcs.n	800cea4 <__hexnan+0x64>
 800ce96:	2d07      	cmp	r5, #7
 800ce98:	dc04      	bgt.n	800cea4 <__hexnan+0x64>
 800ce9a:	462a      	mov	r2, r5
 800ce9c:	4649      	mov	r1, r9
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f7ff ffa8 	bl	800cdf4 <L_shift>
 800cea4:	4544      	cmp	r4, r8
 800cea6:	d950      	bls.n	800cf4a <__hexnan+0x10a>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	f1a4 0904 	sub.w	r9, r4, #4
 800ceae:	f844 3c04 	str.w	r3, [r4, #-4]
 800ceb2:	f8cd b008 	str.w	fp, [sp, #8]
 800ceb6:	464c      	mov	r4, r9
 800ceb8:	461d      	mov	r5, r3
 800ceba:	9903      	ldr	r1, [sp, #12]
 800cebc:	e7d7      	b.n	800ce6e <__hexnan+0x2e>
 800cebe:	2a29      	cmp	r2, #41	; 0x29
 800cec0:	d156      	bne.n	800cf70 <__hexnan+0x130>
 800cec2:	3102      	adds	r1, #2
 800cec4:	f8ca 1000 	str.w	r1, [sl]
 800cec8:	f1bb 0f00 	cmp.w	fp, #0
 800cecc:	d050      	beq.n	800cf70 <__hexnan+0x130>
 800cece:	454c      	cmp	r4, r9
 800ced0:	d206      	bcs.n	800cee0 <__hexnan+0xa0>
 800ced2:	2d07      	cmp	r5, #7
 800ced4:	dc04      	bgt.n	800cee0 <__hexnan+0xa0>
 800ced6:	462a      	mov	r2, r5
 800ced8:	4649      	mov	r1, r9
 800ceda:	4620      	mov	r0, r4
 800cedc:	f7ff ff8a 	bl	800cdf4 <L_shift>
 800cee0:	4544      	cmp	r4, r8
 800cee2:	d934      	bls.n	800cf4e <__hexnan+0x10e>
 800cee4:	f1a8 0204 	sub.w	r2, r8, #4
 800cee8:	4623      	mov	r3, r4
 800ceea:	f853 1b04 	ldr.w	r1, [r3], #4
 800ceee:	f842 1f04 	str.w	r1, [r2, #4]!
 800cef2:	429f      	cmp	r7, r3
 800cef4:	d2f9      	bcs.n	800ceea <__hexnan+0xaa>
 800cef6:	1b3b      	subs	r3, r7, r4
 800cef8:	f023 0303 	bic.w	r3, r3, #3
 800cefc:	3304      	adds	r3, #4
 800cefe:	3401      	adds	r4, #1
 800cf00:	3e03      	subs	r6, #3
 800cf02:	42b4      	cmp	r4, r6
 800cf04:	bf88      	it	hi
 800cf06:	2304      	movhi	r3, #4
 800cf08:	4443      	add	r3, r8
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	f843 2b04 	str.w	r2, [r3], #4
 800cf10:	429f      	cmp	r7, r3
 800cf12:	d2fb      	bcs.n	800cf0c <__hexnan+0xcc>
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	b91b      	cbnz	r3, 800cf20 <__hexnan+0xe0>
 800cf18:	4547      	cmp	r7, r8
 800cf1a:	d127      	bne.n	800cf6c <__hexnan+0x12c>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	603b      	str	r3, [r7, #0]
 800cf20:	2005      	movs	r0, #5
 800cf22:	e026      	b.n	800cf72 <__hexnan+0x132>
 800cf24:	3501      	adds	r5, #1
 800cf26:	2d08      	cmp	r5, #8
 800cf28:	f10b 0b01 	add.w	fp, fp, #1
 800cf2c:	dd06      	ble.n	800cf3c <__hexnan+0xfc>
 800cf2e:	4544      	cmp	r4, r8
 800cf30:	d9c3      	bls.n	800ceba <__hexnan+0x7a>
 800cf32:	2300      	movs	r3, #0
 800cf34:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf38:	2501      	movs	r5, #1
 800cf3a:	3c04      	subs	r4, #4
 800cf3c:	6822      	ldr	r2, [r4, #0]
 800cf3e:	f000 000f 	and.w	r0, r0, #15
 800cf42:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cf46:	6022      	str	r2, [r4, #0]
 800cf48:	e7b7      	b.n	800ceba <__hexnan+0x7a>
 800cf4a:	2508      	movs	r5, #8
 800cf4c:	e7b5      	b.n	800ceba <__hexnan+0x7a>
 800cf4e:	9b01      	ldr	r3, [sp, #4]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d0df      	beq.n	800cf14 <__hexnan+0xd4>
 800cf54:	f04f 32ff 	mov.w	r2, #4294967295
 800cf58:	f1c3 0320 	rsb	r3, r3, #32
 800cf5c:	fa22 f303 	lsr.w	r3, r2, r3
 800cf60:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cf64:	401a      	ands	r2, r3
 800cf66:	f846 2c04 	str.w	r2, [r6, #-4]
 800cf6a:	e7d3      	b.n	800cf14 <__hexnan+0xd4>
 800cf6c:	3f04      	subs	r7, #4
 800cf6e:	e7d1      	b.n	800cf14 <__hexnan+0xd4>
 800cf70:	2004      	movs	r0, #4
 800cf72:	b007      	add	sp, #28
 800cf74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf78 <_localeconv_r>:
 800cf78:	4800      	ldr	r0, [pc, #0]	; (800cf7c <_localeconv_r+0x4>)
 800cf7a:	4770      	bx	lr
 800cf7c:	200001dc 	.word	0x200001dc

0800cf80 <malloc>:
 800cf80:	4b02      	ldr	r3, [pc, #8]	; (800cf8c <malloc+0xc>)
 800cf82:	4601      	mov	r1, r0
 800cf84:	6818      	ldr	r0, [r3, #0]
 800cf86:	f000 bd3d 	b.w	800da04 <_malloc_r>
 800cf8a:	bf00      	nop
 800cf8c:	20000084 	.word	0x20000084

0800cf90 <__ascii_mbtowc>:
 800cf90:	b082      	sub	sp, #8
 800cf92:	b901      	cbnz	r1, 800cf96 <__ascii_mbtowc+0x6>
 800cf94:	a901      	add	r1, sp, #4
 800cf96:	b142      	cbz	r2, 800cfaa <__ascii_mbtowc+0x1a>
 800cf98:	b14b      	cbz	r3, 800cfae <__ascii_mbtowc+0x1e>
 800cf9a:	7813      	ldrb	r3, [r2, #0]
 800cf9c:	600b      	str	r3, [r1, #0]
 800cf9e:	7812      	ldrb	r2, [r2, #0]
 800cfa0:	1e10      	subs	r0, r2, #0
 800cfa2:	bf18      	it	ne
 800cfa4:	2001      	movne	r0, #1
 800cfa6:	b002      	add	sp, #8
 800cfa8:	4770      	bx	lr
 800cfaa:	4610      	mov	r0, r2
 800cfac:	e7fb      	b.n	800cfa6 <__ascii_mbtowc+0x16>
 800cfae:	f06f 0001 	mvn.w	r0, #1
 800cfb2:	e7f8      	b.n	800cfa6 <__ascii_mbtowc+0x16>

0800cfb4 <memcpy>:
 800cfb4:	440a      	add	r2, r1
 800cfb6:	4291      	cmp	r1, r2
 800cfb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfbc:	d100      	bne.n	800cfc0 <memcpy+0xc>
 800cfbe:	4770      	bx	lr
 800cfc0:	b510      	push	{r4, lr}
 800cfc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfca:	4291      	cmp	r1, r2
 800cfcc:	d1f9      	bne.n	800cfc2 <memcpy+0xe>
 800cfce:	bd10      	pop	{r4, pc}

0800cfd0 <_Balloc>:
 800cfd0:	b570      	push	{r4, r5, r6, lr}
 800cfd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	460d      	mov	r5, r1
 800cfd8:	b976      	cbnz	r6, 800cff8 <_Balloc+0x28>
 800cfda:	2010      	movs	r0, #16
 800cfdc:	f7ff ffd0 	bl	800cf80 <malloc>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	6260      	str	r0, [r4, #36]	; 0x24
 800cfe4:	b920      	cbnz	r0, 800cff0 <_Balloc+0x20>
 800cfe6:	4b18      	ldr	r3, [pc, #96]	; (800d048 <_Balloc+0x78>)
 800cfe8:	4818      	ldr	r0, [pc, #96]	; (800d04c <_Balloc+0x7c>)
 800cfea:	2166      	movs	r1, #102	; 0x66
 800cfec:	f000 fef8 	bl	800dde0 <__assert_func>
 800cff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cff4:	6006      	str	r6, [r0, #0]
 800cff6:	60c6      	str	r6, [r0, #12]
 800cff8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cffa:	68f3      	ldr	r3, [r6, #12]
 800cffc:	b183      	cbz	r3, 800d020 <_Balloc+0x50>
 800cffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d006:	b9b8      	cbnz	r0, 800d038 <_Balloc+0x68>
 800d008:	2101      	movs	r1, #1
 800d00a:	fa01 f605 	lsl.w	r6, r1, r5
 800d00e:	1d72      	adds	r2, r6, #5
 800d010:	0092      	lsls	r2, r2, #2
 800d012:	4620      	mov	r0, r4
 800d014:	f000 fc97 	bl	800d946 <_calloc_r>
 800d018:	b160      	cbz	r0, 800d034 <_Balloc+0x64>
 800d01a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d01e:	e00e      	b.n	800d03e <_Balloc+0x6e>
 800d020:	2221      	movs	r2, #33	; 0x21
 800d022:	2104      	movs	r1, #4
 800d024:	4620      	mov	r0, r4
 800d026:	f000 fc8e 	bl	800d946 <_calloc_r>
 800d02a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d02c:	60f0      	str	r0, [r6, #12]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d1e4      	bne.n	800cffe <_Balloc+0x2e>
 800d034:	2000      	movs	r0, #0
 800d036:	bd70      	pop	{r4, r5, r6, pc}
 800d038:	6802      	ldr	r2, [r0, #0]
 800d03a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d03e:	2300      	movs	r3, #0
 800d040:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d044:	e7f7      	b.n	800d036 <_Balloc+0x66>
 800d046:	bf00      	nop
 800d048:	0800fe7e 	.word	0x0800fe7e
 800d04c:	0800ff84 	.word	0x0800ff84

0800d050 <_Bfree>:
 800d050:	b570      	push	{r4, r5, r6, lr}
 800d052:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d054:	4605      	mov	r5, r0
 800d056:	460c      	mov	r4, r1
 800d058:	b976      	cbnz	r6, 800d078 <_Bfree+0x28>
 800d05a:	2010      	movs	r0, #16
 800d05c:	f7ff ff90 	bl	800cf80 <malloc>
 800d060:	4602      	mov	r2, r0
 800d062:	6268      	str	r0, [r5, #36]	; 0x24
 800d064:	b920      	cbnz	r0, 800d070 <_Bfree+0x20>
 800d066:	4b09      	ldr	r3, [pc, #36]	; (800d08c <_Bfree+0x3c>)
 800d068:	4809      	ldr	r0, [pc, #36]	; (800d090 <_Bfree+0x40>)
 800d06a:	218a      	movs	r1, #138	; 0x8a
 800d06c:	f000 feb8 	bl	800dde0 <__assert_func>
 800d070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d074:	6006      	str	r6, [r0, #0]
 800d076:	60c6      	str	r6, [r0, #12]
 800d078:	b13c      	cbz	r4, 800d08a <_Bfree+0x3a>
 800d07a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d07c:	6862      	ldr	r2, [r4, #4]
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d084:	6021      	str	r1, [r4, #0]
 800d086:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d08a:	bd70      	pop	{r4, r5, r6, pc}
 800d08c:	0800fe7e 	.word	0x0800fe7e
 800d090:	0800ff84 	.word	0x0800ff84

0800d094 <__multadd>:
 800d094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d098:	690e      	ldr	r6, [r1, #16]
 800d09a:	4607      	mov	r7, r0
 800d09c:	4698      	mov	r8, r3
 800d09e:	460c      	mov	r4, r1
 800d0a0:	f101 0014 	add.w	r0, r1, #20
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	6805      	ldr	r5, [r0, #0]
 800d0a8:	b2a9      	uxth	r1, r5
 800d0aa:	fb02 8101 	mla	r1, r2, r1, r8
 800d0ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d0b2:	0c2d      	lsrs	r5, r5, #16
 800d0b4:	fb02 c505 	mla	r5, r2, r5, ip
 800d0b8:	b289      	uxth	r1, r1
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d0c0:	429e      	cmp	r6, r3
 800d0c2:	f840 1b04 	str.w	r1, [r0], #4
 800d0c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d0ca:	dcec      	bgt.n	800d0a6 <__multadd+0x12>
 800d0cc:	f1b8 0f00 	cmp.w	r8, #0
 800d0d0:	d022      	beq.n	800d118 <__multadd+0x84>
 800d0d2:	68a3      	ldr	r3, [r4, #8]
 800d0d4:	42b3      	cmp	r3, r6
 800d0d6:	dc19      	bgt.n	800d10c <__multadd+0x78>
 800d0d8:	6861      	ldr	r1, [r4, #4]
 800d0da:	4638      	mov	r0, r7
 800d0dc:	3101      	adds	r1, #1
 800d0de:	f7ff ff77 	bl	800cfd0 <_Balloc>
 800d0e2:	4605      	mov	r5, r0
 800d0e4:	b928      	cbnz	r0, 800d0f2 <__multadd+0x5e>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	4b0d      	ldr	r3, [pc, #52]	; (800d120 <__multadd+0x8c>)
 800d0ea:	480e      	ldr	r0, [pc, #56]	; (800d124 <__multadd+0x90>)
 800d0ec:	21b5      	movs	r1, #181	; 0xb5
 800d0ee:	f000 fe77 	bl	800dde0 <__assert_func>
 800d0f2:	6922      	ldr	r2, [r4, #16]
 800d0f4:	3202      	adds	r2, #2
 800d0f6:	f104 010c 	add.w	r1, r4, #12
 800d0fa:	0092      	lsls	r2, r2, #2
 800d0fc:	300c      	adds	r0, #12
 800d0fe:	f7ff ff59 	bl	800cfb4 <memcpy>
 800d102:	4621      	mov	r1, r4
 800d104:	4638      	mov	r0, r7
 800d106:	f7ff ffa3 	bl	800d050 <_Bfree>
 800d10a:	462c      	mov	r4, r5
 800d10c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d110:	3601      	adds	r6, #1
 800d112:	f8c3 8014 	str.w	r8, [r3, #20]
 800d116:	6126      	str	r6, [r4, #16]
 800d118:	4620      	mov	r0, r4
 800d11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d11e:	bf00      	nop
 800d120:	0800fef4 	.word	0x0800fef4
 800d124:	0800ff84 	.word	0x0800ff84

0800d128 <__s2b>:
 800d128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d12c:	460c      	mov	r4, r1
 800d12e:	4615      	mov	r5, r2
 800d130:	461f      	mov	r7, r3
 800d132:	2209      	movs	r2, #9
 800d134:	3308      	adds	r3, #8
 800d136:	4606      	mov	r6, r0
 800d138:	fb93 f3f2 	sdiv	r3, r3, r2
 800d13c:	2100      	movs	r1, #0
 800d13e:	2201      	movs	r2, #1
 800d140:	429a      	cmp	r2, r3
 800d142:	db09      	blt.n	800d158 <__s2b+0x30>
 800d144:	4630      	mov	r0, r6
 800d146:	f7ff ff43 	bl	800cfd0 <_Balloc>
 800d14a:	b940      	cbnz	r0, 800d15e <__s2b+0x36>
 800d14c:	4602      	mov	r2, r0
 800d14e:	4b19      	ldr	r3, [pc, #100]	; (800d1b4 <__s2b+0x8c>)
 800d150:	4819      	ldr	r0, [pc, #100]	; (800d1b8 <__s2b+0x90>)
 800d152:	21ce      	movs	r1, #206	; 0xce
 800d154:	f000 fe44 	bl	800dde0 <__assert_func>
 800d158:	0052      	lsls	r2, r2, #1
 800d15a:	3101      	adds	r1, #1
 800d15c:	e7f0      	b.n	800d140 <__s2b+0x18>
 800d15e:	9b08      	ldr	r3, [sp, #32]
 800d160:	6143      	str	r3, [r0, #20]
 800d162:	2d09      	cmp	r5, #9
 800d164:	f04f 0301 	mov.w	r3, #1
 800d168:	6103      	str	r3, [r0, #16]
 800d16a:	dd16      	ble.n	800d19a <__s2b+0x72>
 800d16c:	f104 0909 	add.w	r9, r4, #9
 800d170:	46c8      	mov	r8, r9
 800d172:	442c      	add	r4, r5
 800d174:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d178:	4601      	mov	r1, r0
 800d17a:	3b30      	subs	r3, #48	; 0x30
 800d17c:	220a      	movs	r2, #10
 800d17e:	4630      	mov	r0, r6
 800d180:	f7ff ff88 	bl	800d094 <__multadd>
 800d184:	45a0      	cmp	r8, r4
 800d186:	d1f5      	bne.n	800d174 <__s2b+0x4c>
 800d188:	f1a5 0408 	sub.w	r4, r5, #8
 800d18c:	444c      	add	r4, r9
 800d18e:	1b2d      	subs	r5, r5, r4
 800d190:	1963      	adds	r3, r4, r5
 800d192:	42bb      	cmp	r3, r7
 800d194:	db04      	blt.n	800d1a0 <__s2b+0x78>
 800d196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d19a:	340a      	adds	r4, #10
 800d19c:	2509      	movs	r5, #9
 800d19e:	e7f6      	b.n	800d18e <__s2b+0x66>
 800d1a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d1a4:	4601      	mov	r1, r0
 800d1a6:	3b30      	subs	r3, #48	; 0x30
 800d1a8:	220a      	movs	r2, #10
 800d1aa:	4630      	mov	r0, r6
 800d1ac:	f7ff ff72 	bl	800d094 <__multadd>
 800d1b0:	e7ee      	b.n	800d190 <__s2b+0x68>
 800d1b2:	bf00      	nop
 800d1b4:	0800fef4 	.word	0x0800fef4
 800d1b8:	0800ff84 	.word	0x0800ff84

0800d1bc <__hi0bits>:
 800d1bc:	0c03      	lsrs	r3, r0, #16
 800d1be:	041b      	lsls	r3, r3, #16
 800d1c0:	b9d3      	cbnz	r3, 800d1f8 <__hi0bits+0x3c>
 800d1c2:	0400      	lsls	r0, r0, #16
 800d1c4:	2310      	movs	r3, #16
 800d1c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d1ca:	bf04      	itt	eq
 800d1cc:	0200      	lsleq	r0, r0, #8
 800d1ce:	3308      	addeq	r3, #8
 800d1d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d1d4:	bf04      	itt	eq
 800d1d6:	0100      	lsleq	r0, r0, #4
 800d1d8:	3304      	addeq	r3, #4
 800d1da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d1de:	bf04      	itt	eq
 800d1e0:	0080      	lsleq	r0, r0, #2
 800d1e2:	3302      	addeq	r3, #2
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	db05      	blt.n	800d1f4 <__hi0bits+0x38>
 800d1e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d1ec:	f103 0301 	add.w	r3, r3, #1
 800d1f0:	bf08      	it	eq
 800d1f2:	2320      	moveq	r3, #32
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	4770      	bx	lr
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	e7e4      	b.n	800d1c6 <__hi0bits+0xa>

0800d1fc <__lo0bits>:
 800d1fc:	6803      	ldr	r3, [r0, #0]
 800d1fe:	f013 0207 	ands.w	r2, r3, #7
 800d202:	4601      	mov	r1, r0
 800d204:	d00b      	beq.n	800d21e <__lo0bits+0x22>
 800d206:	07da      	lsls	r2, r3, #31
 800d208:	d424      	bmi.n	800d254 <__lo0bits+0x58>
 800d20a:	0798      	lsls	r0, r3, #30
 800d20c:	bf49      	itett	mi
 800d20e:	085b      	lsrmi	r3, r3, #1
 800d210:	089b      	lsrpl	r3, r3, #2
 800d212:	2001      	movmi	r0, #1
 800d214:	600b      	strmi	r3, [r1, #0]
 800d216:	bf5c      	itt	pl
 800d218:	600b      	strpl	r3, [r1, #0]
 800d21a:	2002      	movpl	r0, #2
 800d21c:	4770      	bx	lr
 800d21e:	b298      	uxth	r0, r3
 800d220:	b9b0      	cbnz	r0, 800d250 <__lo0bits+0x54>
 800d222:	0c1b      	lsrs	r3, r3, #16
 800d224:	2010      	movs	r0, #16
 800d226:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d22a:	bf04      	itt	eq
 800d22c:	0a1b      	lsreq	r3, r3, #8
 800d22e:	3008      	addeq	r0, #8
 800d230:	071a      	lsls	r2, r3, #28
 800d232:	bf04      	itt	eq
 800d234:	091b      	lsreq	r3, r3, #4
 800d236:	3004      	addeq	r0, #4
 800d238:	079a      	lsls	r2, r3, #30
 800d23a:	bf04      	itt	eq
 800d23c:	089b      	lsreq	r3, r3, #2
 800d23e:	3002      	addeq	r0, #2
 800d240:	07da      	lsls	r2, r3, #31
 800d242:	d403      	bmi.n	800d24c <__lo0bits+0x50>
 800d244:	085b      	lsrs	r3, r3, #1
 800d246:	f100 0001 	add.w	r0, r0, #1
 800d24a:	d005      	beq.n	800d258 <__lo0bits+0x5c>
 800d24c:	600b      	str	r3, [r1, #0]
 800d24e:	4770      	bx	lr
 800d250:	4610      	mov	r0, r2
 800d252:	e7e8      	b.n	800d226 <__lo0bits+0x2a>
 800d254:	2000      	movs	r0, #0
 800d256:	4770      	bx	lr
 800d258:	2020      	movs	r0, #32
 800d25a:	4770      	bx	lr

0800d25c <__i2b>:
 800d25c:	b510      	push	{r4, lr}
 800d25e:	460c      	mov	r4, r1
 800d260:	2101      	movs	r1, #1
 800d262:	f7ff feb5 	bl	800cfd0 <_Balloc>
 800d266:	4602      	mov	r2, r0
 800d268:	b928      	cbnz	r0, 800d276 <__i2b+0x1a>
 800d26a:	4b05      	ldr	r3, [pc, #20]	; (800d280 <__i2b+0x24>)
 800d26c:	4805      	ldr	r0, [pc, #20]	; (800d284 <__i2b+0x28>)
 800d26e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d272:	f000 fdb5 	bl	800dde0 <__assert_func>
 800d276:	2301      	movs	r3, #1
 800d278:	6144      	str	r4, [r0, #20]
 800d27a:	6103      	str	r3, [r0, #16]
 800d27c:	bd10      	pop	{r4, pc}
 800d27e:	bf00      	nop
 800d280:	0800fef4 	.word	0x0800fef4
 800d284:	0800ff84 	.word	0x0800ff84

0800d288 <__multiply>:
 800d288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d28c:	4614      	mov	r4, r2
 800d28e:	690a      	ldr	r2, [r1, #16]
 800d290:	6923      	ldr	r3, [r4, #16]
 800d292:	429a      	cmp	r2, r3
 800d294:	bfb8      	it	lt
 800d296:	460b      	movlt	r3, r1
 800d298:	460d      	mov	r5, r1
 800d29a:	bfbc      	itt	lt
 800d29c:	4625      	movlt	r5, r4
 800d29e:	461c      	movlt	r4, r3
 800d2a0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d2a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d2a8:	68ab      	ldr	r3, [r5, #8]
 800d2aa:	6869      	ldr	r1, [r5, #4]
 800d2ac:	eb0a 0709 	add.w	r7, sl, r9
 800d2b0:	42bb      	cmp	r3, r7
 800d2b2:	b085      	sub	sp, #20
 800d2b4:	bfb8      	it	lt
 800d2b6:	3101      	addlt	r1, #1
 800d2b8:	f7ff fe8a 	bl	800cfd0 <_Balloc>
 800d2bc:	b930      	cbnz	r0, 800d2cc <__multiply+0x44>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	4b42      	ldr	r3, [pc, #264]	; (800d3cc <__multiply+0x144>)
 800d2c2:	4843      	ldr	r0, [pc, #268]	; (800d3d0 <__multiply+0x148>)
 800d2c4:	f240 115d 	movw	r1, #349	; 0x15d
 800d2c8:	f000 fd8a 	bl	800dde0 <__assert_func>
 800d2cc:	f100 0614 	add.w	r6, r0, #20
 800d2d0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d2d4:	4633      	mov	r3, r6
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	4543      	cmp	r3, r8
 800d2da:	d31e      	bcc.n	800d31a <__multiply+0x92>
 800d2dc:	f105 0c14 	add.w	ip, r5, #20
 800d2e0:	f104 0314 	add.w	r3, r4, #20
 800d2e4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d2e8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d2ec:	9202      	str	r2, [sp, #8]
 800d2ee:	ebac 0205 	sub.w	r2, ip, r5
 800d2f2:	3a15      	subs	r2, #21
 800d2f4:	f022 0203 	bic.w	r2, r2, #3
 800d2f8:	3204      	adds	r2, #4
 800d2fa:	f105 0115 	add.w	r1, r5, #21
 800d2fe:	458c      	cmp	ip, r1
 800d300:	bf38      	it	cc
 800d302:	2204      	movcc	r2, #4
 800d304:	9201      	str	r2, [sp, #4]
 800d306:	9a02      	ldr	r2, [sp, #8]
 800d308:	9303      	str	r3, [sp, #12]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d808      	bhi.n	800d320 <__multiply+0x98>
 800d30e:	2f00      	cmp	r7, #0
 800d310:	dc55      	bgt.n	800d3be <__multiply+0x136>
 800d312:	6107      	str	r7, [r0, #16]
 800d314:	b005      	add	sp, #20
 800d316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d31a:	f843 2b04 	str.w	r2, [r3], #4
 800d31e:	e7db      	b.n	800d2d8 <__multiply+0x50>
 800d320:	f8b3 a000 	ldrh.w	sl, [r3]
 800d324:	f1ba 0f00 	cmp.w	sl, #0
 800d328:	d020      	beq.n	800d36c <__multiply+0xe4>
 800d32a:	f105 0e14 	add.w	lr, r5, #20
 800d32e:	46b1      	mov	r9, r6
 800d330:	2200      	movs	r2, #0
 800d332:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d336:	f8d9 b000 	ldr.w	fp, [r9]
 800d33a:	b2a1      	uxth	r1, r4
 800d33c:	fa1f fb8b 	uxth.w	fp, fp
 800d340:	fb0a b101 	mla	r1, sl, r1, fp
 800d344:	4411      	add	r1, r2
 800d346:	f8d9 2000 	ldr.w	r2, [r9]
 800d34a:	0c24      	lsrs	r4, r4, #16
 800d34c:	0c12      	lsrs	r2, r2, #16
 800d34e:	fb0a 2404 	mla	r4, sl, r4, r2
 800d352:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d356:	b289      	uxth	r1, r1
 800d358:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d35c:	45f4      	cmp	ip, lr
 800d35e:	f849 1b04 	str.w	r1, [r9], #4
 800d362:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d366:	d8e4      	bhi.n	800d332 <__multiply+0xaa>
 800d368:	9901      	ldr	r1, [sp, #4]
 800d36a:	5072      	str	r2, [r6, r1]
 800d36c:	9a03      	ldr	r2, [sp, #12]
 800d36e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d372:	3304      	adds	r3, #4
 800d374:	f1b9 0f00 	cmp.w	r9, #0
 800d378:	d01f      	beq.n	800d3ba <__multiply+0x132>
 800d37a:	6834      	ldr	r4, [r6, #0]
 800d37c:	f105 0114 	add.w	r1, r5, #20
 800d380:	46b6      	mov	lr, r6
 800d382:	f04f 0a00 	mov.w	sl, #0
 800d386:	880a      	ldrh	r2, [r1, #0]
 800d388:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d38c:	fb09 b202 	mla	r2, r9, r2, fp
 800d390:	4492      	add	sl, r2
 800d392:	b2a4      	uxth	r4, r4
 800d394:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d398:	f84e 4b04 	str.w	r4, [lr], #4
 800d39c:	f851 4b04 	ldr.w	r4, [r1], #4
 800d3a0:	f8be 2000 	ldrh.w	r2, [lr]
 800d3a4:	0c24      	lsrs	r4, r4, #16
 800d3a6:	fb09 2404 	mla	r4, r9, r4, r2
 800d3aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d3ae:	458c      	cmp	ip, r1
 800d3b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d3b4:	d8e7      	bhi.n	800d386 <__multiply+0xfe>
 800d3b6:	9a01      	ldr	r2, [sp, #4]
 800d3b8:	50b4      	str	r4, [r6, r2]
 800d3ba:	3604      	adds	r6, #4
 800d3bc:	e7a3      	b.n	800d306 <__multiply+0x7e>
 800d3be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d1a5      	bne.n	800d312 <__multiply+0x8a>
 800d3c6:	3f01      	subs	r7, #1
 800d3c8:	e7a1      	b.n	800d30e <__multiply+0x86>
 800d3ca:	bf00      	nop
 800d3cc:	0800fef4 	.word	0x0800fef4
 800d3d0:	0800ff84 	.word	0x0800ff84

0800d3d4 <__pow5mult>:
 800d3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3d8:	4615      	mov	r5, r2
 800d3da:	f012 0203 	ands.w	r2, r2, #3
 800d3de:	4606      	mov	r6, r0
 800d3e0:	460f      	mov	r7, r1
 800d3e2:	d007      	beq.n	800d3f4 <__pow5mult+0x20>
 800d3e4:	4c25      	ldr	r4, [pc, #148]	; (800d47c <__pow5mult+0xa8>)
 800d3e6:	3a01      	subs	r2, #1
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3ee:	f7ff fe51 	bl	800d094 <__multadd>
 800d3f2:	4607      	mov	r7, r0
 800d3f4:	10ad      	asrs	r5, r5, #2
 800d3f6:	d03d      	beq.n	800d474 <__pow5mult+0xa0>
 800d3f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d3fa:	b97c      	cbnz	r4, 800d41c <__pow5mult+0x48>
 800d3fc:	2010      	movs	r0, #16
 800d3fe:	f7ff fdbf 	bl	800cf80 <malloc>
 800d402:	4602      	mov	r2, r0
 800d404:	6270      	str	r0, [r6, #36]	; 0x24
 800d406:	b928      	cbnz	r0, 800d414 <__pow5mult+0x40>
 800d408:	4b1d      	ldr	r3, [pc, #116]	; (800d480 <__pow5mult+0xac>)
 800d40a:	481e      	ldr	r0, [pc, #120]	; (800d484 <__pow5mult+0xb0>)
 800d40c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d410:	f000 fce6 	bl	800dde0 <__assert_func>
 800d414:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d418:	6004      	str	r4, [r0, #0]
 800d41a:	60c4      	str	r4, [r0, #12]
 800d41c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d420:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d424:	b94c      	cbnz	r4, 800d43a <__pow5mult+0x66>
 800d426:	f240 2171 	movw	r1, #625	; 0x271
 800d42a:	4630      	mov	r0, r6
 800d42c:	f7ff ff16 	bl	800d25c <__i2b>
 800d430:	2300      	movs	r3, #0
 800d432:	f8c8 0008 	str.w	r0, [r8, #8]
 800d436:	4604      	mov	r4, r0
 800d438:	6003      	str	r3, [r0, #0]
 800d43a:	f04f 0900 	mov.w	r9, #0
 800d43e:	07eb      	lsls	r3, r5, #31
 800d440:	d50a      	bpl.n	800d458 <__pow5mult+0x84>
 800d442:	4639      	mov	r1, r7
 800d444:	4622      	mov	r2, r4
 800d446:	4630      	mov	r0, r6
 800d448:	f7ff ff1e 	bl	800d288 <__multiply>
 800d44c:	4639      	mov	r1, r7
 800d44e:	4680      	mov	r8, r0
 800d450:	4630      	mov	r0, r6
 800d452:	f7ff fdfd 	bl	800d050 <_Bfree>
 800d456:	4647      	mov	r7, r8
 800d458:	106d      	asrs	r5, r5, #1
 800d45a:	d00b      	beq.n	800d474 <__pow5mult+0xa0>
 800d45c:	6820      	ldr	r0, [r4, #0]
 800d45e:	b938      	cbnz	r0, 800d470 <__pow5mult+0x9c>
 800d460:	4622      	mov	r2, r4
 800d462:	4621      	mov	r1, r4
 800d464:	4630      	mov	r0, r6
 800d466:	f7ff ff0f 	bl	800d288 <__multiply>
 800d46a:	6020      	str	r0, [r4, #0]
 800d46c:	f8c0 9000 	str.w	r9, [r0]
 800d470:	4604      	mov	r4, r0
 800d472:	e7e4      	b.n	800d43e <__pow5mult+0x6a>
 800d474:	4638      	mov	r0, r7
 800d476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d47a:	bf00      	nop
 800d47c:	080100d8 	.word	0x080100d8
 800d480:	0800fe7e 	.word	0x0800fe7e
 800d484:	0800ff84 	.word	0x0800ff84

0800d488 <__lshift>:
 800d488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d48c:	460c      	mov	r4, r1
 800d48e:	6849      	ldr	r1, [r1, #4]
 800d490:	6923      	ldr	r3, [r4, #16]
 800d492:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d496:	68a3      	ldr	r3, [r4, #8]
 800d498:	4607      	mov	r7, r0
 800d49a:	4691      	mov	r9, r2
 800d49c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d4a0:	f108 0601 	add.w	r6, r8, #1
 800d4a4:	42b3      	cmp	r3, r6
 800d4a6:	db0b      	blt.n	800d4c0 <__lshift+0x38>
 800d4a8:	4638      	mov	r0, r7
 800d4aa:	f7ff fd91 	bl	800cfd0 <_Balloc>
 800d4ae:	4605      	mov	r5, r0
 800d4b0:	b948      	cbnz	r0, 800d4c6 <__lshift+0x3e>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	4b28      	ldr	r3, [pc, #160]	; (800d558 <__lshift+0xd0>)
 800d4b6:	4829      	ldr	r0, [pc, #164]	; (800d55c <__lshift+0xd4>)
 800d4b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d4bc:	f000 fc90 	bl	800dde0 <__assert_func>
 800d4c0:	3101      	adds	r1, #1
 800d4c2:	005b      	lsls	r3, r3, #1
 800d4c4:	e7ee      	b.n	800d4a4 <__lshift+0x1c>
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	f100 0114 	add.w	r1, r0, #20
 800d4cc:	f100 0210 	add.w	r2, r0, #16
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	4553      	cmp	r3, sl
 800d4d4:	db33      	blt.n	800d53e <__lshift+0xb6>
 800d4d6:	6920      	ldr	r0, [r4, #16]
 800d4d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d4dc:	f104 0314 	add.w	r3, r4, #20
 800d4e0:	f019 091f 	ands.w	r9, r9, #31
 800d4e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d4ec:	d02b      	beq.n	800d546 <__lshift+0xbe>
 800d4ee:	f1c9 0e20 	rsb	lr, r9, #32
 800d4f2:	468a      	mov	sl, r1
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	6818      	ldr	r0, [r3, #0]
 800d4f8:	fa00 f009 	lsl.w	r0, r0, r9
 800d4fc:	4302      	orrs	r2, r0
 800d4fe:	f84a 2b04 	str.w	r2, [sl], #4
 800d502:	f853 2b04 	ldr.w	r2, [r3], #4
 800d506:	459c      	cmp	ip, r3
 800d508:	fa22 f20e 	lsr.w	r2, r2, lr
 800d50c:	d8f3      	bhi.n	800d4f6 <__lshift+0x6e>
 800d50e:	ebac 0304 	sub.w	r3, ip, r4
 800d512:	3b15      	subs	r3, #21
 800d514:	f023 0303 	bic.w	r3, r3, #3
 800d518:	3304      	adds	r3, #4
 800d51a:	f104 0015 	add.w	r0, r4, #21
 800d51e:	4584      	cmp	ip, r0
 800d520:	bf38      	it	cc
 800d522:	2304      	movcc	r3, #4
 800d524:	50ca      	str	r2, [r1, r3]
 800d526:	b10a      	cbz	r2, 800d52c <__lshift+0xa4>
 800d528:	f108 0602 	add.w	r6, r8, #2
 800d52c:	3e01      	subs	r6, #1
 800d52e:	4638      	mov	r0, r7
 800d530:	612e      	str	r6, [r5, #16]
 800d532:	4621      	mov	r1, r4
 800d534:	f7ff fd8c 	bl	800d050 <_Bfree>
 800d538:	4628      	mov	r0, r5
 800d53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d53e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d542:	3301      	adds	r3, #1
 800d544:	e7c5      	b.n	800d4d2 <__lshift+0x4a>
 800d546:	3904      	subs	r1, #4
 800d548:	f853 2b04 	ldr.w	r2, [r3], #4
 800d54c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d550:	459c      	cmp	ip, r3
 800d552:	d8f9      	bhi.n	800d548 <__lshift+0xc0>
 800d554:	e7ea      	b.n	800d52c <__lshift+0xa4>
 800d556:	bf00      	nop
 800d558:	0800fef4 	.word	0x0800fef4
 800d55c:	0800ff84 	.word	0x0800ff84

0800d560 <__mcmp>:
 800d560:	b530      	push	{r4, r5, lr}
 800d562:	6902      	ldr	r2, [r0, #16]
 800d564:	690c      	ldr	r4, [r1, #16]
 800d566:	1b12      	subs	r2, r2, r4
 800d568:	d10e      	bne.n	800d588 <__mcmp+0x28>
 800d56a:	f100 0314 	add.w	r3, r0, #20
 800d56e:	3114      	adds	r1, #20
 800d570:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d574:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d578:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d57c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d580:	42a5      	cmp	r5, r4
 800d582:	d003      	beq.n	800d58c <__mcmp+0x2c>
 800d584:	d305      	bcc.n	800d592 <__mcmp+0x32>
 800d586:	2201      	movs	r2, #1
 800d588:	4610      	mov	r0, r2
 800d58a:	bd30      	pop	{r4, r5, pc}
 800d58c:	4283      	cmp	r3, r0
 800d58e:	d3f3      	bcc.n	800d578 <__mcmp+0x18>
 800d590:	e7fa      	b.n	800d588 <__mcmp+0x28>
 800d592:	f04f 32ff 	mov.w	r2, #4294967295
 800d596:	e7f7      	b.n	800d588 <__mcmp+0x28>

0800d598 <__mdiff>:
 800d598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d59c:	460c      	mov	r4, r1
 800d59e:	4606      	mov	r6, r0
 800d5a0:	4611      	mov	r1, r2
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	4617      	mov	r7, r2
 800d5a6:	f7ff ffdb 	bl	800d560 <__mcmp>
 800d5aa:	1e05      	subs	r5, r0, #0
 800d5ac:	d110      	bne.n	800d5d0 <__mdiff+0x38>
 800d5ae:	4629      	mov	r1, r5
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	f7ff fd0d 	bl	800cfd0 <_Balloc>
 800d5b6:	b930      	cbnz	r0, 800d5c6 <__mdiff+0x2e>
 800d5b8:	4b39      	ldr	r3, [pc, #228]	; (800d6a0 <__mdiff+0x108>)
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	f240 2132 	movw	r1, #562	; 0x232
 800d5c0:	4838      	ldr	r0, [pc, #224]	; (800d6a4 <__mdiff+0x10c>)
 800d5c2:	f000 fc0d 	bl	800dde0 <__assert_func>
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d5cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5d0:	bfa4      	itt	ge
 800d5d2:	463b      	movge	r3, r7
 800d5d4:	4627      	movge	r7, r4
 800d5d6:	4630      	mov	r0, r6
 800d5d8:	6879      	ldr	r1, [r7, #4]
 800d5da:	bfa6      	itte	ge
 800d5dc:	461c      	movge	r4, r3
 800d5de:	2500      	movge	r5, #0
 800d5e0:	2501      	movlt	r5, #1
 800d5e2:	f7ff fcf5 	bl	800cfd0 <_Balloc>
 800d5e6:	b920      	cbnz	r0, 800d5f2 <__mdiff+0x5a>
 800d5e8:	4b2d      	ldr	r3, [pc, #180]	; (800d6a0 <__mdiff+0x108>)
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d5f0:	e7e6      	b.n	800d5c0 <__mdiff+0x28>
 800d5f2:	693e      	ldr	r6, [r7, #16]
 800d5f4:	60c5      	str	r5, [r0, #12]
 800d5f6:	6925      	ldr	r5, [r4, #16]
 800d5f8:	f107 0114 	add.w	r1, r7, #20
 800d5fc:	f104 0914 	add.w	r9, r4, #20
 800d600:	f100 0e14 	add.w	lr, r0, #20
 800d604:	f107 0210 	add.w	r2, r7, #16
 800d608:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d60c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d610:	46f2      	mov	sl, lr
 800d612:	2700      	movs	r7, #0
 800d614:	f859 3b04 	ldr.w	r3, [r9], #4
 800d618:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d61c:	fa1f f883 	uxth.w	r8, r3
 800d620:	fa17 f78b 	uxtah	r7, r7, fp
 800d624:	0c1b      	lsrs	r3, r3, #16
 800d626:	eba7 0808 	sub.w	r8, r7, r8
 800d62a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d62e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d632:	fa1f f888 	uxth.w	r8, r8
 800d636:	141f      	asrs	r7, r3, #16
 800d638:	454d      	cmp	r5, r9
 800d63a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d63e:	f84a 3b04 	str.w	r3, [sl], #4
 800d642:	d8e7      	bhi.n	800d614 <__mdiff+0x7c>
 800d644:	1b2b      	subs	r3, r5, r4
 800d646:	3b15      	subs	r3, #21
 800d648:	f023 0303 	bic.w	r3, r3, #3
 800d64c:	3304      	adds	r3, #4
 800d64e:	3415      	adds	r4, #21
 800d650:	42a5      	cmp	r5, r4
 800d652:	bf38      	it	cc
 800d654:	2304      	movcc	r3, #4
 800d656:	4419      	add	r1, r3
 800d658:	4473      	add	r3, lr
 800d65a:	469e      	mov	lr, r3
 800d65c:	460d      	mov	r5, r1
 800d65e:	4565      	cmp	r5, ip
 800d660:	d30e      	bcc.n	800d680 <__mdiff+0xe8>
 800d662:	f10c 0203 	add.w	r2, ip, #3
 800d666:	1a52      	subs	r2, r2, r1
 800d668:	f022 0203 	bic.w	r2, r2, #3
 800d66c:	3903      	subs	r1, #3
 800d66e:	458c      	cmp	ip, r1
 800d670:	bf38      	it	cc
 800d672:	2200      	movcc	r2, #0
 800d674:	441a      	add	r2, r3
 800d676:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d67a:	b17b      	cbz	r3, 800d69c <__mdiff+0x104>
 800d67c:	6106      	str	r6, [r0, #16]
 800d67e:	e7a5      	b.n	800d5cc <__mdiff+0x34>
 800d680:	f855 8b04 	ldr.w	r8, [r5], #4
 800d684:	fa17 f488 	uxtah	r4, r7, r8
 800d688:	1422      	asrs	r2, r4, #16
 800d68a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d68e:	b2a4      	uxth	r4, r4
 800d690:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d694:	f84e 4b04 	str.w	r4, [lr], #4
 800d698:	1417      	asrs	r7, r2, #16
 800d69a:	e7e0      	b.n	800d65e <__mdiff+0xc6>
 800d69c:	3e01      	subs	r6, #1
 800d69e:	e7ea      	b.n	800d676 <__mdiff+0xde>
 800d6a0:	0800fef4 	.word	0x0800fef4
 800d6a4:	0800ff84 	.word	0x0800ff84

0800d6a8 <__ulp>:
 800d6a8:	b082      	sub	sp, #8
 800d6aa:	ed8d 0b00 	vstr	d0, [sp]
 800d6ae:	9b01      	ldr	r3, [sp, #4]
 800d6b0:	4912      	ldr	r1, [pc, #72]	; (800d6fc <__ulp+0x54>)
 800d6b2:	4019      	ands	r1, r3
 800d6b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d6b8:	2900      	cmp	r1, #0
 800d6ba:	dd05      	ble.n	800d6c8 <__ulp+0x20>
 800d6bc:	2200      	movs	r2, #0
 800d6be:	460b      	mov	r3, r1
 800d6c0:	ec43 2b10 	vmov	d0, r2, r3
 800d6c4:	b002      	add	sp, #8
 800d6c6:	4770      	bx	lr
 800d6c8:	4249      	negs	r1, r1
 800d6ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d6ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d6d2:	f04f 0200 	mov.w	r2, #0
 800d6d6:	f04f 0300 	mov.w	r3, #0
 800d6da:	da04      	bge.n	800d6e6 <__ulp+0x3e>
 800d6dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d6e0:	fa41 f300 	asr.w	r3, r1, r0
 800d6e4:	e7ec      	b.n	800d6c0 <__ulp+0x18>
 800d6e6:	f1a0 0114 	sub.w	r1, r0, #20
 800d6ea:	291e      	cmp	r1, #30
 800d6ec:	bfda      	itte	le
 800d6ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d6f2:	fa20 f101 	lsrle.w	r1, r0, r1
 800d6f6:	2101      	movgt	r1, #1
 800d6f8:	460a      	mov	r2, r1
 800d6fa:	e7e1      	b.n	800d6c0 <__ulp+0x18>
 800d6fc:	7ff00000 	.word	0x7ff00000

0800d700 <__b2d>:
 800d700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d702:	6905      	ldr	r5, [r0, #16]
 800d704:	f100 0714 	add.w	r7, r0, #20
 800d708:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d70c:	1f2e      	subs	r6, r5, #4
 800d70e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d712:	4620      	mov	r0, r4
 800d714:	f7ff fd52 	bl	800d1bc <__hi0bits>
 800d718:	f1c0 0320 	rsb	r3, r0, #32
 800d71c:	280a      	cmp	r0, #10
 800d71e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d79c <__b2d+0x9c>
 800d722:	600b      	str	r3, [r1, #0]
 800d724:	dc14      	bgt.n	800d750 <__b2d+0x50>
 800d726:	f1c0 0e0b 	rsb	lr, r0, #11
 800d72a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d72e:	42b7      	cmp	r7, r6
 800d730:	ea41 030c 	orr.w	r3, r1, ip
 800d734:	bf34      	ite	cc
 800d736:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d73a:	2100      	movcs	r1, #0
 800d73c:	3015      	adds	r0, #21
 800d73e:	fa04 f000 	lsl.w	r0, r4, r0
 800d742:	fa21 f10e 	lsr.w	r1, r1, lr
 800d746:	ea40 0201 	orr.w	r2, r0, r1
 800d74a:	ec43 2b10 	vmov	d0, r2, r3
 800d74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d750:	42b7      	cmp	r7, r6
 800d752:	bf3a      	itte	cc
 800d754:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d758:	f1a5 0608 	subcc.w	r6, r5, #8
 800d75c:	2100      	movcs	r1, #0
 800d75e:	380b      	subs	r0, #11
 800d760:	d017      	beq.n	800d792 <__b2d+0x92>
 800d762:	f1c0 0c20 	rsb	ip, r0, #32
 800d766:	fa04 f500 	lsl.w	r5, r4, r0
 800d76a:	42be      	cmp	r6, r7
 800d76c:	fa21 f40c 	lsr.w	r4, r1, ip
 800d770:	ea45 0504 	orr.w	r5, r5, r4
 800d774:	bf8c      	ite	hi
 800d776:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d77a:	2400      	movls	r4, #0
 800d77c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d780:	fa01 f000 	lsl.w	r0, r1, r0
 800d784:	fa24 f40c 	lsr.w	r4, r4, ip
 800d788:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d78c:	ea40 0204 	orr.w	r2, r0, r4
 800d790:	e7db      	b.n	800d74a <__b2d+0x4a>
 800d792:	ea44 030c 	orr.w	r3, r4, ip
 800d796:	460a      	mov	r2, r1
 800d798:	e7d7      	b.n	800d74a <__b2d+0x4a>
 800d79a:	bf00      	nop
 800d79c:	3ff00000 	.word	0x3ff00000

0800d7a0 <__d2b>:
 800d7a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d7a4:	4689      	mov	r9, r1
 800d7a6:	2101      	movs	r1, #1
 800d7a8:	ec57 6b10 	vmov	r6, r7, d0
 800d7ac:	4690      	mov	r8, r2
 800d7ae:	f7ff fc0f 	bl	800cfd0 <_Balloc>
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	b930      	cbnz	r0, 800d7c4 <__d2b+0x24>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	4b25      	ldr	r3, [pc, #148]	; (800d850 <__d2b+0xb0>)
 800d7ba:	4826      	ldr	r0, [pc, #152]	; (800d854 <__d2b+0xb4>)
 800d7bc:	f240 310a 	movw	r1, #778	; 0x30a
 800d7c0:	f000 fb0e 	bl	800dde0 <__assert_func>
 800d7c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d7c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d7cc:	bb35      	cbnz	r5, 800d81c <__d2b+0x7c>
 800d7ce:	2e00      	cmp	r6, #0
 800d7d0:	9301      	str	r3, [sp, #4]
 800d7d2:	d028      	beq.n	800d826 <__d2b+0x86>
 800d7d4:	4668      	mov	r0, sp
 800d7d6:	9600      	str	r6, [sp, #0]
 800d7d8:	f7ff fd10 	bl	800d1fc <__lo0bits>
 800d7dc:	9900      	ldr	r1, [sp, #0]
 800d7de:	b300      	cbz	r0, 800d822 <__d2b+0x82>
 800d7e0:	9a01      	ldr	r2, [sp, #4]
 800d7e2:	f1c0 0320 	rsb	r3, r0, #32
 800d7e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d7ea:	430b      	orrs	r3, r1
 800d7ec:	40c2      	lsrs	r2, r0
 800d7ee:	6163      	str	r3, [r4, #20]
 800d7f0:	9201      	str	r2, [sp, #4]
 800d7f2:	9b01      	ldr	r3, [sp, #4]
 800d7f4:	61a3      	str	r3, [r4, #24]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	bf14      	ite	ne
 800d7fa:	2202      	movne	r2, #2
 800d7fc:	2201      	moveq	r2, #1
 800d7fe:	6122      	str	r2, [r4, #16]
 800d800:	b1d5      	cbz	r5, 800d838 <__d2b+0x98>
 800d802:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d806:	4405      	add	r5, r0
 800d808:	f8c9 5000 	str.w	r5, [r9]
 800d80c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d810:	f8c8 0000 	str.w	r0, [r8]
 800d814:	4620      	mov	r0, r4
 800d816:	b003      	add	sp, #12
 800d818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d81c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d820:	e7d5      	b.n	800d7ce <__d2b+0x2e>
 800d822:	6161      	str	r1, [r4, #20]
 800d824:	e7e5      	b.n	800d7f2 <__d2b+0x52>
 800d826:	a801      	add	r0, sp, #4
 800d828:	f7ff fce8 	bl	800d1fc <__lo0bits>
 800d82c:	9b01      	ldr	r3, [sp, #4]
 800d82e:	6163      	str	r3, [r4, #20]
 800d830:	2201      	movs	r2, #1
 800d832:	6122      	str	r2, [r4, #16]
 800d834:	3020      	adds	r0, #32
 800d836:	e7e3      	b.n	800d800 <__d2b+0x60>
 800d838:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d83c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d840:	f8c9 0000 	str.w	r0, [r9]
 800d844:	6918      	ldr	r0, [r3, #16]
 800d846:	f7ff fcb9 	bl	800d1bc <__hi0bits>
 800d84a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d84e:	e7df      	b.n	800d810 <__d2b+0x70>
 800d850:	0800fef4 	.word	0x0800fef4
 800d854:	0800ff84 	.word	0x0800ff84

0800d858 <__ratio>:
 800d858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d85c:	4688      	mov	r8, r1
 800d85e:	4669      	mov	r1, sp
 800d860:	4681      	mov	r9, r0
 800d862:	f7ff ff4d 	bl	800d700 <__b2d>
 800d866:	a901      	add	r1, sp, #4
 800d868:	4640      	mov	r0, r8
 800d86a:	ec55 4b10 	vmov	r4, r5, d0
 800d86e:	f7ff ff47 	bl	800d700 <__b2d>
 800d872:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d876:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d87a:	eba3 0c02 	sub.w	ip, r3, r2
 800d87e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d882:	1a9b      	subs	r3, r3, r2
 800d884:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d888:	ec51 0b10 	vmov	r0, r1, d0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	bfd6      	itet	le
 800d890:	460a      	movle	r2, r1
 800d892:	462a      	movgt	r2, r5
 800d894:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d898:	468b      	mov	fp, r1
 800d89a:	462f      	mov	r7, r5
 800d89c:	bfd4      	ite	le
 800d89e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d8a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	ee10 2a10 	vmov	r2, s0
 800d8ac:	465b      	mov	r3, fp
 800d8ae:	4639      	mov	r1, r7
 800d8b0:	f7f2 ffcc 	bl	800084c <__aeabi_ddiv>
 800d8b4:	ec41 0b10 	vmov	d0, r0, r1
 800d8b8:	b003      	add	sp, #12
 800d8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d8be <__copybits>:
 800d8be:	3901      	subs	r1, #1
 800d8c0:	b570      	push	{r4, r5, r6, lr}
 800d8c2:	1149      	asrs	r1, r1, #5
 800d8c4:	6914      	ldr	r4, [r2, #16]
 800d8c6:	3101      	adds	r1, #1
 800d8c8:	f102 0314 	add.w	r3, r2, #20
 800d8cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d8d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d8d4:	1f05      	subs	r5, r0, #4
 800d8d6:	42a3      	cmp	r3, r4
 800d8d8:	d30c      	bcc.n	800d8f4 <__copybits+0x36>
 800d8da:	1aa3      	subs	r3, r4, r2
 800d8dc:	3b11      	subs	r3, #17
 800d8de:	f023 0303 	bic.w	r3, r3, #3
 800d8e2:	3211      	adds	r2, #17
 800d8e4:	42a2      	cmp	r2, r4
 800d8e6:	bf88      	it	hi
 800d8e8:	2300      	movhi	r3, #0
 800d8ea:	4418      	add	r0, r3
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	4288      	cmp	r0, r1
 800d8f0:	d305      	bcc.n	800d8fe <__copybits+0x40>
 800d8f2:	bd70      	pop	{r4, r5, r6, pc}
 800d8f4:	f853 6b04 	ldr.w	r6, [r3], #4
 800d8f8:	f845 6f04 	str.w	r6, [r5, #4]!
 800d8fc:	e7eb      	b.n	800d8d6 <__copybits+0x18>
 800d8fe:	f840 3b04 	str.w	r3, [r0], #4
 800d902:	e7f4      	b.n	800d8ee <__copybits+0x30>

0800d904 <__any_on>:
 800d904:	f100 0214 	add.w	r2, r0, #20
 800d908:	6900      	ldr	r0, [r0, #16]
 800d90a:	114b      	asrs	r3, r1, #5
 800d90c:	4298      	cmp	r0, r3
 800d90e:	b510      	push	{r4, lr}
 800d910:	db11      	blt.n	800d936 <__any_on+0x32>
 800d912:	dd0a      	ble.n	800d92a <__any_on+0x26>
 800d914:	f011 011f 	ands.w	r1, r1, #31
 800d918:	d007      	beq.n	800d92a <__any_on+0x26>
 800d91a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d91e:	fa24 f001 	lsr.w	r0, r4, r1
 800d922:	fa00 f101 	lsl.w	r1, r0, r1
 800d926:	428c      	cmp	r4, r1
 800d928:	d10b      	bne.n	800d942 <__any_on+0x3e>
 800d92a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d92e:	4293      	cmp	r3, r2
 800d930:	d803      	bhi.n	800d93a <__any_on+0x36>
 800d932:	2000      	movs	r0, #0
 800d934:	bd10      	pop	{r4, pc}
 800d936:	4603      	mov	r3, r0
 800d938:	e7f7      	b.n	800d92a <__any_on+0x26>
 800d93a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d93e:	2900      	cmp	r1, #0
 800d940:	d0f5      	beq.n	800d92e <__any_on+0x2a>
 800d942:	2001      	movs	r0, #1
 800d944:	e7f6      	b.n	800d934 <__any_on+0x30>

0800d946 <_calloc_r>:
 800d946:	b513      	push	{r0, r1, r4, lr}
 800d948:	434a      	muls	r2, r1
 800d94a:	4611      	mov	r1, r2
 800d94c:	9201      	str	r2, [sp, #4]
 800d94e:	f000 f859 	bl	800da04 <_malloc_r>
 800d952:	4604      	mov	r4, r0
 800d954:	b118      	cbz	r0, 800d95e <_calloc_r+0x18>
 800d956:	9a01      	ldr	r2, [sp, #4]
 800d958:	2100      	movs	r1, #0
 800d95a:	f7fc fbc9 	bl	800a0f0 <memset>
 800d95e:	4620      	mov	r0, r4
 800d960:	b002      	add	sp, #8
 800d962:	bd10      	pop	{r4, pc}

0800d964 <_free_r>:
 800d964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d966:	2900      	cmp	r1, #0
 800d968:	d048      	beq.n	800d9fc <_free_r+0x98>
 800d96a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d96e:	9001      	str	r0, [sp, #4]
 800d970:	2b00      	cmp	r3, #0
 800d972:	f1a1 0404 	sub.w	r4, r1, #4
 800d976:	bfb8      	it	lt
 800d978:	18e4      	addlt	r4, r4, r3
 800d97a:	f000 fa7b 	bl	800de74 <__malloc_lock>
 800d97e:	4a20      	ldr	r2, [pc, #128]	; (800da00 <_free_r+0x9c>)
 800d980:	9801      	ldr	r0, [sp, #4]
 800d982:	6813      	ldr	r3, [r2, #0]
 800d984:	4615      	mov	r5, r2
 800d986:	b933      	cbnz	r3, 800d996 <_free_r+0x32>
 800d988:	6063      	str	r3, [r4, #4]
 800d98a:	6014      	str	r4, [r2, #0]
 800d98c:	b003      	add	sp, #12
 800d98e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d992:	f000 ba75 	b.w	800de80 <__malloc_unlock>
 800d996:	42a3      	cmp	r3, r4
 800d998:	d90b      	bls.n	800d9b2 <_free_r+0x4e>
 800d99a:	6821      	ldr	r1, [r4, #0]
 800d99c:	1862      	adds	r2, r4, r1
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	bf04      	itt	eq
 800d9a2:	681a      	ldreq	r2, [r3, #0]
 800d9a4:	685b      	ldreq	r3, [r3, #4]
 800d9a6:	6063      	str	r3, [r4, #4]
 800d9a8:	bf04      	itt	eq
 800d9aa:	1852      	addeq	r2, r2, r1
 800d9ac:	6022      	streq	r2, [r4, #0]
 800d9ae:	602c      	str	r4, [r5, #0]
 800d9b0:	e7ec      	b.n	800d98c <_free_r+0x28>
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	b10b      	cbz	r3, 800d9bc <_free_r+0x58>
 800d9b8:	42a3      	cmp	r3, r4
 800d9ba:	d9fa      	bls.n	800d9b2 <_free_r+0x4e>
 800d9bc:	6811      	ldr	r1, [r2, #0]
 800d9be:	1855      	adds	r5, r2, r1
 800d9c0:	42a5      	cmp	r5, r4
 800d9c2:	d10b      	bne.n	800d9dc <_free_r+0x78>
 800d9c4:	6824      	ldr	r4, [r4, #0]
 800d9c6:	4421      	add	r1, r4
 800d9c8:	1854      	adds	r4, r2, r1
 800d9ca:	42a3      	cmp	r3, r4
 800d9cc:	6011      	str	r1, [r2, #0]
 800d9ce:	d1dd      	bne.n	800d98c <_free_r+0x28>
 800d9d0:	681c      	ldr	r4, [r3, #0]
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	6053      	str	r3, [r2, #4]
 800d9d6:	4421      	add	r1, r4
 800d9d8:	6011      	str	r1, [r2, #0]
 800d9da:	e7d7      	b.n	800d98c <_free_r+0x28>
 800d9dc:	d902      	bls.n	800d9e4 <_free_r+0x80>
 800d9de:	230c      	movs	r3, #12
 800d9e0:	6003      	str	r3, [r0, #0]
 800d9e2:	e7d3      	b.n	800d98c <_free_r+0x28>
 800d9e4:	6825      	ldr	r5, [r4, #0]
 800d9e6:	1961      	adds	r1, r4, r5
 800d9e8:	428b      	cmp	r3, r1
 800d9ea:	bf04      	itt	eq
 800d9ec:	6819      	ldreq	r1, [r3, #0]
 800d9ee:	685b      	ldreq	r3, [r3, #4]
 800d9f0:	6063      	str	r3, [r4, #4]
 800d9f2:	bf04      	itt	eq
 800d9f4:	1949      	addeq	r1, r1, r5
 800d9f6:	6021      	streq	r1, [r4, #0]
 800d9f8:	6054      	str	r4, [r2, #4]
 800d9fa:	e7c7      	b.n	800d98c <_free_r+0x28>
 800d9fc:	b003      	add	sp, #12
 800d9fe:	bd30      	pop	{r4, r5, pc}
 800da00:	200003e8 	.word	0x200003e8

0800da04 <_malloc_r>:
 800da04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da06:	1ccd      	adds	r5, r1, #3
 800da08:	f025 0503 	bic.w	r5, r5, #3
 800da0c:	3508      	adds	r5, #8
 800da0e:	2d0c      	cmp	r5, #12
 800da10:	bf38      	it	cc
 800da12:	250c      	movcc	r5, #12
 800da14:	2d00      	cmp	r5, #0
 800da16:	4606      	mov	r6, r0
 800da18:	db01      	blt.n	800da1e <_malloc_r+0x1a>
 800da1a:	42a9      	cmp	r1, r5
 800da1c:	d903      	bls.n	800da26 <_malloc_r+0x22>
 800da1e:	230c      	movs	r3, #12
 800da20:	6033      	str	r3, [r6, #0]
 800da22:	2000      	movs	r0, #0
 800da24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da26:	f000 fa25 	bl	800de74 <__malloc_lock>
 800da2a:	4921      	ldr	r1, [pc, #132]	; (800dab0 <_malloc_r+0xac>)
 800da2c:	680a      	ldr	r2, [r1, #0]
 800da2e:	4614      	mov	r4, r2
 800da30:	b99c      	cbnz	r4, 800da5a <_malloc_r+0x56>
 800da32:	4f20      	ldr	r7, [pc, #128]	; (800dab4 <_malloc_r+0xb0>)
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	b923      	cbnz	r3, 800da42 <_malloc_r+0x3e>
 800da38:	4621      	mov	r1, r4
 800da3a:	4630      	mov	r0, r6
 800da3c:	f000 f9a0 	bl	800dd80 <_sbrk_r>
 800da40:	6038      	str	r0, [r7, #0]
 800da42:	4629      	mov	r1, r5
 800da44:	4630      	mov	r0, r6
 800da46:	f000 f99b 	bl	800dd80 <_sbrk_r>
 800da4a:	1c43      	adds	r3, r0, #1
 800da4c:	d123      	bne.n	800da96 <_malloc_r+0x92>
 800da4e:	230c      	movs	r3, #12
 800da50:	6033      	str	r3, [r6, #0]
 800da52:	4630      	mov	r0, r6
 800da54:	f000 fa14 	bl	800de80 <__malloc_unlock>
 800da58:	e7e3      	b.n	800da22 <_malloc_r+0x1e>
 800da5a:	6823      	ldr	r3, [r4, #0]
 800da5c:	1b5b      	subs	r3, r3, r5
 800da5e:	d417      	bmi.n	800da90 <_malloc_r+0x8c>
 800da60:	2b0b      	cmp	r3, #11
 800da62:	d903      	bls.n	800da6c <_malloc_r+0x68>
 800da64:	6023      	str	r3, [r4, #0]
 800da66:	441c      	add	r4, r3
 800da68:	6025      	str	r5, [r4, #0]
 800da6a:	e004      	b.n	800da76 <_malloc_r+0x72>
 800da6c:	6863      	ldr	r3, [r4, #4]
 800da6e:	42a2      	cmp	r2, r4
 800da70:	bf0c      	ite	eq
 800da72:	600b      	streq	r3, [r1, #0]
 800da74:	6053      	strne	r3, [r2, #4]
 800da76:	4630      	mov	r0, r6
 800da78:	f000 fa02 	bl	800de80 <__malloc_unlock>
 800da7c:	f104 000b 	add.w	r0, r4, #11
 800da80:	1d23      	adds	r3, r4, #4
 800da82:	f020 0007 	bic.w	r0, r0, #7
 800da86:	1ac2      	subs	r2, r0, r3
 800da88:	d0cc      	beq.n	800da24 <_malloc_r+0x20>
 800da8a:	1a1b      	subs	r3, r3, r0
 800da8c:	50a3      	str	r3, [r4, r2]
 800da8e:	e7c9      	b.n	800da24 <_malloc_r+0x20>
 800da90:	4622      	mov	r2, r4
 800da92:	6864      	ldr	r4, [r4, #4]
 800da94:	e7cc      	b.n	800da30 <_malloc_r+0x2c>
 800da96:	1cc4      	adds	r4, r0, #3
 800da98:	f024 0403 	bic.w	r4, r4, #3
 800da9c:	42a0      	cmp	r0, r4
 800da9e:	d0e3      	beq.n	800da68 <_malloc_r+0x64>
 800daa0:	1a21      	subs	r1, r4, r0
 800daa2:	4630      	mov	r0, r6
 800daa4:	f000 f96c 	bl	800dd80 <_sbrk_r>
 800daa8:	3001      	adds	r0, #1
 800daaa:	d1dd      	bne.n	800da68 <_malloc_r+0x64>
 800daac:	e7cf      	b.n	800da4e <_malloc_r+0x4a>
 800daae:	bf00      	nop
 800dab0:	200003e8 	.word	0x200003e8
 800dab4:	200003ec 	.word	0x200003ec

0800dab8 <__ssputs_r>:
 800dab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dabc:	688e      	ldr	r6, [r1, #8]
 800dabe:	429e      	cmp	r6, r3
 800dac0:	4682      	mov	sl, r0
 800dac2:	460c      	mov	r4, r1
 800dac4:	4690      	mov	r8, r2
 800dac6:	461f      	mov	r7, r3
 800dac8:	d838      	bhi.n	800db3c <__ssputs_r+0x84>
 800daca:	898a      	ldrh	r2, [r1, #12]
 800dacc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dad0:	d032      	beq.n	800db38 <__ssputs_r+0x80>
 800dad2:	6825      	ldr	r5, [r4, #0]
 800dad4:	6909      	ldr	r1, [r1, #16]
 800dad6:	eba5 0901 	sub.w	r9, r5, r1
 800dada:	6965      	ldr	r5, [r4, #20]
 800dadc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dae0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dae4:	3301      	adds	r3, #1
 800dae6:	444b      	add	r3, r9
 800dae8:	106d      	asrs	r5, r5, #1
 800daea:	429d      	cmp	r5, r3
 800daec:	bf38      	it	cc
 800daee:	461d      	movcc	r5, r3
 800daf0:	0553      	lsls	r3, r2, #21
 800daf2:	d531      	bpl.n	800db58 <__ssputs_r+0xa0>
 800daf4:	4629      	mov	r1, r5
 800daf6:	f7ff ff85 	bl	800da04 <_malloc_r>
 800dafa:	4606      	mov	r6, r0
 800dafc:	b950      	cbnz	r0, 800db14 <__ssputs_r+0x5c>
 800dafe:	230c      	movs	r3, #12
 800db00:	f8ca 3000 	str.w	r3, [sl]
 800db04:	89a3      	ldrh	r3, [r4, #12]
 800db06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db0a:	81a3      	strh	r3, [r4, #12]
 800db0c:	f04f 30ff 	mov.w	r0, #4294967295
 800db10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db14:	6921      	ldr	r1, [r4, #16]
 800db16:	464a      	mov	r2, r9
 800db18:	f7ff fa4c 	bl	800cfb4 <memcpy>
 800db1c:	89a3      	ldrh	r3, [r4, #12]
 800db1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db26:	81a3      	strh	r3, [r4, #12]
 800db28:	6126      	str	r6, [r4, #16]
 800db2a:	6165      	str	r5, [r4, #20]
 800db2c:	444e      	add	r6, r9
 800db2e:	eba5 0509 	sub.w	r5, r5, r9
 800db32:	6026      	str	r6, [r4, #0]
 800db34:	60a5      	str	r5, [r4, #8]
 800db36:	463e      	mov	r6, r7
 800db38:	42be      	cmp	r6, r7
 800db3a:	d900      	bls.n	800db3e <__ssputs_r+0x86>
 800db3c:	463e      	mov	r6, r7
 800db3e:	4632      	mov	r2, r6
 800db40:	6820      	ldr	r0, [r4, #0]
 800db42:	4641      	mov	r1, r8
 800db44:	f000 f97c 	bl	800de40 <memmove>
 800db48:	68a3      	ldr	r3, [r4, #8]
 800db4a:	6822      	ldr	r2, [r4, #0]
 800db4c:	1b9b      	subs	r3, r3, r6
 800db4e:	4432      	add	r2, r6
 800db50:	60a3      	str	r3, [r4, #8]
 800db52:	6022      	str	r2, [r4, #0]
 800db54:	2000      	movs	r0, #0
 800db56:	e7db      	b.n	800db10 <__ssputs_r+0x58>
 800db58:	462a      	mov	r2, r5
 800db5a:	f000 f997 	bl	800de8c <_realloc_r>
 800db5e:	4606      	mov	r6, r0
 800db60:	2800      	cmp	r0, #0
 800db62:	d1e1      	bne.n	800db28 <__ssputs_r+0x70>
 800db64:	6921      	ldr	r1, [r4, #16]
 800db66:	4650      	mov	r0, sl
 800db68:	f7ff fefc 	bl	800d964 <_free_r>
 800db6c:	e7c7      	b.n	800dafe <__ssputs_r+0x46>
	...

0800db70 <_svfiprintf_r>:
 800db70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db74:	4698      	mov	r8, r3
 800db76:	898b      	ldrh	r3, [r1, #12]
 800db78:	061b      	lsls	r3, r3, #24
 800db7a:	b09d      	sub	sp, #116	; 0x74
 800db7c:	4607      	mov	r7, r0
 800db7e:	460d      	mov	r5, r1
 800db80:	4614      	mov	r4, r2
 800db82:	d50e      	bpl.n	800dba2 <_svfiprintf_r+0x32>
 800db84:	690b      	ldr	r3, [r1, #16]
 800db86:	b963      	cbnz	r3, 800dba2 <_svfiprintf_r+0x32>
 800db88:	2140      	movs	r1, #64	; 0x40
 800db8a:	f7ff ff3b 	bl	800da04 <_malloc_r>
 800db8e:	6028      	str	r0, [r5, #0]
 800db90:	6128      	str	r0, [r5, #16]
 800db92:	b920      	cbnz	r0, 800db9e <_svfiprintf_r+0x2e>
 800db94:	230c      	movs	r3, #12
 800db96:	603b      	str	r3, [r7, #0]
 800db98:	f04f 30ff 	mov.w	r0, #4294967295
 800db9c:	e0d1      	b.n	800dd42 <_svfiprintf_r+0x1d2>
 800db9e:	2340      	movs	r3, #64	; 0x40
 800dba0:	616b      	str	r3, [r5, #20]
 800dba2:	2300      	movs	r3, #0
 800dba4:	9309      	str	r3, [sp, #36]	; 0x24
 800dba6:	2320      	movs	r3, #32
 800dba8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbac:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbb0:	2330      	movs	r3, #48	; 0x30
 800dbb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd5c <_svfiprintf_r+0x1ec>
 800dbb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbba:	f04f 0901 	mov.w	r9, #1
 800dbbe:	4623      	mov	r3, r4
 800dbc0:	469a      	mov	sl, r3
 800dbc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbc6:	b10a      	cbz	r2, 800dbcc <_svfiprintf_r+0x5c>
 800dbc8:	2a25      	cmp	r2, #37	; 0x25
 800dbca:	d1f9      	bne.n	800dbc0 <_svfiprintf_r+0x50>
 800dbcc:	ebba 0b04 	subs.w	fp, sl, r4
 800dbd0:	d00b      	beq.n	800dbea <_svfiprintf_r+0x7a>
 800dbd2:	465b      	mov	r3, fp
 800dbd4:	4622      	mov	r2, r4
 800dbd6:	4629      	mov	r1, r5
 800dbd8:	4638      	mov	r0, r7
 800dbda:	f7ff ff6d 	bl	800dab8 <__ssputs_r>
 800dbde:	3001      	adds	r0, #1
 800dbe0:	f000 80aa 	beq.w	800dd38 <_svfiprintf_r+0x1c8>
 800dbe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbe6:	445a      	add	r2, fp
 800dbe8:	9209      	str	r2, [sp, #36]	; 0x24
 800dbea:	f89a 3000 	ldrb.w	r3, [sl]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	f000 80a2 	beq.w	800dd38 <_svfiprintf_r+0x1c8>
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbfe:	f10a 0a01 	add.w	sl, sl, #1
 800dc02:	9304      	str	r3, [sp, #16]
 800dc04:	9307      	str	r3, [sp, #28]
 800dc06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc0a:	931a      	str	r3, [sp, #104]	; 0x68
 800dc0c:	4654      	mov	r4, sl
 800dc0e:	2205      	movs	r2, #5
 800dc10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc14:	4851      	ldr	r0, [pc, #324]	; (800dd5c <_svfiprintf_r+0x1ec>)
 800dc16:	f7f2 fae3 	bl	80001e0 <memchr>
 800dc1a:	9a04      	ldr	r2, [sp, #16]
 800dc1c:	b9d8      	cbnz	r0, 800dc56 <_svfiprintf_r+0xe6>
 800dc1e:	06d0      	lsls	r0, r2, #27
 800dc20:	bf44      	itt	mi
 800dc22:	2320      	movmi	r3, #32
 800dc24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc28:	0711      	lsls	r1, r2, #28
 800dc2a:	bf44      	itt	mi
 800dc2c:	232b      	movmi	r3, #43	; 0x2b
 800dc2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc32:	f89a 3000 	ldrb.w	r3, [sl]
 800dc36:	2b2a      	cmp	r3, #42	; 0x2a
 800dc38:	d015      	beq.n	800dc66 <_svfiprintf_r+0xf6>
 800dc3a:	9a07      	ldr	r2, [sp, #28]
 800dc3c:	4654      	mov	r4, sl
 800dc3e:	2000      	movs	r0, #0
 800dc40:	f04f 0c0a 	mov.w	ip, #10
 800dc44:	4621      	mov	r1, r4
 800dc46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc4a:	3b30      	subs	r3, #48	; 0x30
 800dc4c:	2b09      	cmp	r3, #9
 800dc4e:	d94e      	bls.n	800dcee <_svfiprintf_r+0x17e>
 800dc50:	b1b0      	cbz	r0, 800dc80 <_svfiprintf_r+0x110>
 800dc52:	9207      	str	r2, [sp, #28]
 800dc54:	e014      	b.n	800dc80 <_svfiprintf_r+0x110>
 800dc56:	eba0 0308 	sub.w	r3, r0, r8
 800dc5a:	fa09 f303 	lsl.w	r3, r9, r3
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	9304      	str	r3, [sp, #16]
 800dc62:	46a2      	mov	sl, r4
 800dc64:	e7d2      	b.n	800dc0c <_svfiprintf_r+0x9c>
 800dc66:	9b03      	ldr	r3, [sp, #12]
 800dc68:	1d19      	adds	r1, r3, #4
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	9103      	str	r1, [sp, #12]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	bfbb      	ittet	lt
 800dc72:	425b      	neglt	r3, r3
 800dc74:	f042 0202 	orrlt.w	r2, r2, #2
 800dc78:	9307      	strge	r3, [sp, #28]
 800dc7a:	9307      	strlt	r3, [sp, #28]
 800dc7c:	bfb8      	it	lt
 800dc7e:	9204      	strlt	r2, [sp, #16]
 800dc80:	7823      	ldrb	r3, [r4, #0]
 800dc82:	2b2e      	cmp	r3, #46	; 0x2e
 800dc84:	d10c      	bne.n	800dca0 <_svfiprintf_r+0x130>
 800dc86:	7863      	ldrb	r3, [r4, #1]
 800dc88:	2b2a      	cmp	r3, #42	; 0x2a
 800dc8a:	d135      	bne.n	800dcf8 <_svfiprintf_r+0x188>
 800dc8c:	9b03      	ldr	r3, [sp, #12]
 800dc8e:	1d1a      	adds	r2, r3, #4
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	9203      	str	r2, [sp, #12]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	bfb8      	it	lt
 800dc98:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc9c:	3402      	adds	r4, #2
 800dc9e:	9305      	str	r3, [sp, #20]
 800dca0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dd6c <_svfiprintf_r+0x1fc>
 800dca4:	7821      	ldrb	r1, [r4, #0]
 800dca6:	2203      	movs	r2, #3
 800dca8:	4650      	mov	r0, sl
 800dcaa:	f7f2 fa99 	bl	80001e0 <memchr>
 800dcae:	b140      	cbz	r0, 800dcc2 <_svfiprintf_r+0x152>
 800dcb0:	2340      	movs	r3, #64	; 0x40
 800dcb2:	eba0 000a 	sub.w	r0, r0, sl
 800dcb6:	fa03 f000 	lsl.w	r0, r3, r0
 800dcba:	9b04      	ldr	r3, [sp, #16]
 800dcbc:	4303      	orrs	r3, r0
 800dcbe:	3401      	adds	r4, #1
 800dcc0:	9304      	str	r3, [sp, #16]
 800dcc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcc6:	4826      	ldr	r0, [pc, #152]	; (800dd60 <_svfiprintf_r+0x1f0>)
 800dcc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dccc:	2206      	movs	r2, #6
 800dcce:	f7f2 fa87 	bl	80001e0 <memchr>
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	d038      	beq.n	800dd48 <_svfiprintf_r+0x1d8>
 800dcd6:	4b23      	ldr	r3, [pc, #140]	; (800dd64 <_svfiprintf_r+0x1f4>)
 800dcd8:	bb1b      	cbnz	r3, 800dd22 <_svfiprintf_r+0x1b2>
 800dcda:	9b03      	ldr	r3, [sp, #12]
 800dcdc:	3307      	adds	r3, #7
 800dcde:	f023 0307 	bic.w	r3, r3, #7
 800dce2:	3308      	adds	r3, #8
 800dce4:	9303      	str	r3, [sp, #12]
 800dce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dce8:	4433      	add	r3, r6
 800dcea:	9309      	str	r3, [sp, #36]	; 0x24
 800dcec:	e767      	b.n	800dbbe <_svfiprintf_r+0x4e>
 800dcee:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcf2:	460c      	mov	r4, r1
 800dcf4:	2001      	movs	r0, #1
 800dcf6:	e7a5      	b.n	800dc44 <_svfiprintf_r+0xd4>
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	3401      	adds	r4, #1
 800dcfc:	9305      	str	r3, [sp, #20]
 800dcfe:	4619      	mov	r1, r3
 800dd00:	f04f 0c0a 	mov.w	ip, #10
 800dd04:	4620      	mov	r0, r4
 800dd06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd0a:	3a30      	subs	r2, #48	; 0x30
 800dd0c:	2a09      	cmp	r2, #9
 800dd0e:	d903      	bls.n	800dd18 <_svfiprintf_r+0x1a8>
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d0c5      	beq.n	800dca0 <_svfiprintf_r+0x130>
 800dd14:	9105      	str	r1, [sp, #20]
 800dd16:	e7c3      	b.n	800dca0 <_svfiprintf_r+0x130>
 800dd18:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd1c:	4604      	mov	r4, r0
 800dd1e:	2301      	movs	r3, #1
 800dd20:	e7f0      	b.n	800dd04 <_svfiprintf_r+0x194>
 800dd22:	ab03      	add	r3, sp, #12
 800dd24:	9300      	str	r3, [sp, #0]
 800dd26:	462a      	mov	r2, r5
 800dd28:	4b0f      	ldr	r3, [pc, #60]	; (800dd68 <_svfiprintf_r+0x1f8>)
 800dd2a:	a904      	add	r1, sp, #16
 800dd2c:	4638      	mov	r0, r7
 800dd2e:	f7fc fa87 	bl	800a240 <_printf_float>
 800dd32:	1c42      	adds	r2, r0, #1
 800dd34:	4606      	mov	r6, r0
 800dd36:	d1d6      	bne.n	800dce6 <_svfiprintf_r+0x176>
 800dd38:	89ab      	ldrh	r3, [r5, #12]
 800dd3a:	065b      	lsls	r3, r3, #25
 800dd3c:	f53f af2c 	bmi.w	800db98 <_svfiprintf_r+0x28>
 800dd40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd42:	b01d      	add	sp, #116	; 0x74
 800dd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd48:	ab03      	add	r3, sp, #12
 800dd4a:	9300      	str	r3, [sp, #0]
 800dd4c:	462a      	mov	r2, r5
 800dd4e:	4b06      	ldr	r3, [pc, #24]	; (800dd68 <_svfiprintf_r+0x1f8>)
 800dd50:	a904      	add	r1, sp, #16
 800dd52:	4638      	mov	r0, r7
 800dd54:	f7fc fd18 	bl	800a788 <_printf_i>
 800dd58:	e7eb      	b.n	800dd32 <_svfiprintf_r+0x1c2>
 800dd5a:	bf00      	nop
 800dd5c:	080100e4 	.word	0x080100e4
 800dd60:	080100ee 	.word	0x080100ee
 800dd64:	0800a241 	.word	0x0800a241
 800dd68:	0800dab9 	.word	0x0800dab9
 800dd6c:	080100ea 	.word	0x080100ea

0800dd70 <nan>:
 800dd70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dd78 <nan+0x8>
 800dd74:	4770      	bx	lr
 800dd76:	bf00      	nop
 800dd78:	00000000 	.word	0x00000000
 800dd7c:	7ff80000 	.word	0x7ff80000

0800dd80 <_sbrk_r>:
 800dd80:	b538      	push	{r3, r4, r5, lr}
 800dd82:	4d06      	ldr	r5, [pc, #24]	; (800dd9c <_sbrk_r+0x1c>)
 800dd84:	2300      	movs	r3, #0
 800dd86:	4604      	mov	r4, r0
 800dd88:	4608      	mov	r0, r1
 800dd8a:	602b      	str	r3, [r5, #0]
 800dd8c:	f7f6 f90e 	bl	8003fac <_sbrk>
 800dd90:	1c43      	adds	r3, r0, #1
 800dd92:	d102      	bne.n	800dd9a <_sbrk_r+0x1a>
 800dd94:	682b      	ldr	r3, [r5, #0]
 800dd96:	b103      	cbz	r3, 800dd9a <_sbrk_r+0x1a>
 800dd98:	6023      	str	r3, [r4, #0]
 800dd9a:	bd38      	pop	{r3, r4, r5, pc}
 800dd9c:	20000dc4 	.word	0x20000dc4

0800dda0 <strncmp>:
 800dda0:	b510      	push	{r4, lr}
 800dda2:	b16a      	cbz	r2, 800ddc0 <strncmp+0x20>
 800dda4:	3901      	subs	r1, #1
 800dda6:	1884      	adds	r4, r0, r2
 800dda8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ddac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d103      	bne.n	800ddbc <strncmp+0x1c>
 800ddb4:	42a0      	cmp	r0, r4
 800ddb6:	d001      	beq.n	800ddbc <strncmp+0x1c>
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d1f5      	bne.n	800dda8 <strncmp+0x8>
 800ddbc:	1a98      	subs	r0, r3, r2
 800ddbe:	bd10      	pop	{r4, pc}
 800ddc0:	4610      	mov	r0, r2
 800ddc2:	e7fc      	b.n	800ddbe <strncmp+0x1e>

0800ddc4 <__ascii_wctomb>:
 800ddc4:	b149      	cbz	r1, 800ddda <__ascii_wctomb+0x16>
 800ddc6:	2aff      	cmp	r2, #255	; 0xff
 800ddc8:	bf85      	ittet	hi
 800ddca:	238a      	movhi	r3, #138	; 0x8a
 800ddcc:	6003      	strhi	r3, [r0, #0]
 800ddce:	700a      	strbls	r2, [r1, #0]
 800ddd0:	f04f 30ff 	movhi.w	r0, #4294967295
 800ddd4:	bf98      	it	ls
 800ddd6:	2001      	movls	r0, #1
 800ddd8:	4770      	bx	lr
 800ddda:	4608      	mov	r0, r1
 800dddc:	4770      	bx	lr
	...

0800dde0 <__assert_func>:
 800dde0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dde2:	4614      	mov	r4, r2
 800dde4:	461a      	mov	r2, r3
 800dde6:	4b09      	ldr	r3, [pc, #36]	; (800de0c <__assert_func+0x2c>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4605      	mov	r5, r0
 800ddec:	68d8      	ldr	r0, [r3, #12]
 800ddee:	b14c      	cbz	r4, 800de04 <__assert_func+0x24>
 800ddf0:	4b07      	ldr	r3, [pc, #28]	; (800de10 <__assert_func+0x30>)
 800ddf2:	9100      	str	r1, [sp, #0]
 800ddf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddf8:	4906      	ldr	r1, [pc, #24]	; (800de14 <__assert_func+0x34>)
 800ddfa:	462b      	mov	r3, r5
 800ddfc:	f000 f80e 	bl	800de1c <fiprintf>
 800de00:	f000 fa84 	bl	800e30c <abort>
 800de04:	4b04      	ldr	r3, [pc, #16]	; (800de18 <__assert_func+0x38>)
 800de06:	461c      	mov	r4, r3
 800de08:	e7f3      	b.n	800ddf2 <__assert_func+0x12>
 800de0a:	bf00      	nop
 800de0c:	20000084 	.word	0x20000084
 800de10:	080100f5 	.word	0x080100f5
 800de14:	08010102 	.word	0x08010102
 800de18:	08010130 	.word	0x08010130

0800de1c <fiprintf>:
 800de1c:	b40e      	push	{r1, r2, r3}
 800de1e:	b503      	push	{r0, r1, lr}
 800de20:	4601      	mov	r1, r0
 800de22:	ab03      	add	r3, sp, #12
 800de24:	4805      	ldr	r0, [pc, #20]	; (800de3c <fiprintf+0x20>)
 800de26:	f853 2b04 	ldr.w	r2, [r3], #4
 800de2a:	6800      	ldr	r0, [r0, #0]
 800de2c:	9301      	str	r3, [sp, #4]
 800de2e:	f000 f87d 	bl	800df2c <_vfiprintf_r>
 800de32:	b002      	add	sp, #8
 800de34:	f85d eb04 	ldr.w	lr, [sp], #4
 800de38:	b003      	add	sp, #12
 800de3a:	4770      	bx	lr
 800de3c:	20000084 	.word	0x20000084

0800de40 <memmove>:
 800de40:	4288      	cmp	r0, r1
 800de42:	b510      	push	{r4, lr}
 800de44:	eb01 0402 	add.w	r4, r1, r2
 800de48:	d902      	bls.n	800de50 <memmove+0x10>
 800de4a:	4284      	cmp	r4, r0
 800de4c:	4623      	mov	r3, r4
 800de4e:	d807      	bhi.n	800de60 <memmove+0x20>
 800de50:	1e43      	subs	r3, r0, #1
 800de52:	42a1      	cmp	r1, r4
 800de54:	d008      	beq.n	800de68 <memmove+0x28>
 800de56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de5e:	e7f8      	b.n	800de52 <memmove+0x12>
 800de60:	4402      	add	r2, r0
 800de62:	4601      	mov	r1, r0
 800de64:	428a      	cmp	r2, r1
 800de66:	d100      	bne.n	800de6a <memmove+0x2a>
 800de68:	bd10      	pop	{r4, pc}
 800de6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de72:	e7f7      	b.n	800de64 <memmove+0x24>

0800de74 <__malloc_lock>:
 800de74:	4801      	ldr	r0, [pc, #4]	; (800de7c <__malloc_lock+0x8>)
 800de76:	f000 bc09 	b.w	800e68c <__retarget_lock_acquire_recursive>
 800de7a:	bf00      	nop
 800de7c:	20000dcc 	.word	0x20000dcc

0800de80 <__malloc_unlock>:
 800de80:	4801      	ldr	r0, [pc, #4]	; (800de88 <__malloc_unlock+0x8>)
 800de82:	f000 bc04 	b.w	800e68e <__retarget_lock_release_recursive>
 800de86:	bf00      	nop
 800de88:	20000dcc 	.word	0x20000dcc

0800de8c <_realloc_r>:
 800de8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8e:	4607      	mov	r7, r0
 800de90:	4614      	mov	r4, r2
 800de92:	460e      	mov	r6, r1
 800de94:	b921      	cbnz	r1, 800dea0 <_realloc_r+0x14>
 800de96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800de9a:	4611      	mov	r1, r2
 800de9c:	f7ff bdb2 	b.w	800da04 <_malloc_r>
 800dea0:	b922      	cbnz	r2, 800deac <_realloc_r+0x20>
 800dea2:	f7ff fd5f 	bl	800d964 <_free_r>
 800dea6:	4625      	mov	r5, r4
 800dea8:	4628      	mov	r0, r5
 800deaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deac:	f000 fc54 	bl	800e758 <_malloc_usable_size_r>
 800deb0:	42a0      	cmp	r0, r4
 800deb2:	d20f      	bcs.n	800ded4 <_realloc_r+0x48>
 800deb4:	4621      	mov	r1, r4
 800deb6:	4638      	mov	r0, r7
 800deb8:	f7ff fda4 	bl	800da04 <_malloc_r>
 800debc:	4605      	mov	r5, r0
 800debe:	2800      	cmp	r0, #0
 800dec0:	d0f2      	beq.n	800dea8 <_realloc_r+0x1c>
 800dec2:	4631      	mov	r1, r6
 800dec4:	4622      	mov	r2, r4
 800dec6:	f7ff f875 	bl	800cfb4 <memcpy>
 800deca:	4631      	mov	r1, r6
 800decc:	4638      	mov	r0, r7
 800dece:	f7ff fd49 	bl	800d964 <_free_r>
 800ded2:	e7e9      	b.n	800dea8 <_realloc_r+0x1c>
 800ded4:	4635      	mov	r5, r6
 800ded6:	e7e7      	b.n	800dea8 <_realloc_r+0x1c>

0800ded8 <__sfputc_r>:
 800ded8:	6893      	ldr	r3, [r2, #8]
 800deda:	3b01      	subs	r3, #1
 800dedc:	2b00      	cmp	r3, #0
 800dede:	b410      	push	{r4}
 800dee0:	6093      	str	r3, [r2, #8]
 800dee2:	da08      	bge.n	800def6 <__sfputc_r+0x1e>
 800dee4:	6994      	ldr	r4, [r2, #24]
 800dee6:	42a3      	cmp	r3, r4
 800dee8:	db01      	blt.n	800deee <__sfputc_r+0x16>
 800deea:	290a      	cmp	r1, #10
 800deec:	d103      	bne.n	800def6 <__sfputc_r+0x1e>
 800deee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800def2:	f000 b94b 	b.w	800e18c <__swbuf_r>
 800def6:	6813      	ldr	r3, [r2, #0]
 800def8:	1c58      	adds	r0, r3, #1
 800defa:	6010      	str	r0, [r2, #0]
 800defc:	7019      	strb	r1, [r3, #0]
 800defe:	4608      	mov	r0, r1
 800df00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df04:	4770      	bx	lr

0800df06 <__sfputs_r>:
 800df06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df08:	4606      	mov	r6, r0
 800df0a:	460f      	mov	r7, r1
 800df0c:	4614      	mov	r4, r2
 800df0e:	18d5      	adds	r5, r2, r3
 800df10:	42ac      	cmp	r4, r5
 800df12:	d101      	bne.n	800df18 <__sfputs_r+0x12>
 800df14:	2000      	movs	r0, #0
 800df16:	e007      	b.n	800df28 <__sfputs_r+0x22>
 800df18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df1c:	463a      	mov	r2, r7
 800df1e:	4630      	mov	r0, r6
 800df20:	f7ff ffda 	bl	800ded8 <__sfputc_r>
 800df24:	1c43      	adds	r3, r0, #1
 800df26:	d1f3      	bne.n	800df10 <__sfputs_r+0xa>
 800df28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df2c <_vfiprintf_r>:
 800df2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df30:	460d      	mov	r5, r1
 800df32:	b09d      	sub	sp, #116	; 0x74
 800df34:	4614      	mov	r4, r2
 800df36:	4698      	mov	r8, r3
 800df38:	4606      	mov	r6, r0
 800df3a:	b118      	cbz	r0, 800df44 <_vfiprintf_r+0x18>
 800df3c:	6983      	ldr	r3, [r0, #24]
 800df3e:	b90b      	cbnz	r3, 800df44 <_vfiprintf_r+0x18>
 800df40:	f000 fb06 	bl	800e550 <__sinit>
 800df44:	4b89      	ldr	r3, [pc, #548]	; (800e16c <_vfiprintf_r+0x240>)
 800df46:	429d      	cmp	r5, r3
 800df48:	d11b      	bne.n	800df82 <_vfiprintf_r+0x56>
 800df4a:	6875      	ldr	r5, [r6, #4]
 800df4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df4e:	07d9      	lsls	r1, r3, #31
 800df50:	d405      	bmi.n	800df5e <_vfiprintf_r+0x32>
 800df52:	89ab      	ldrh	r3, [r5, #12]
 800df54:	059a      	lsls	r2, r3, #22
 800df56:	d402      	bmi.n	800df5e <_vfiprintf_r+0x32>
 800df58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df5a:	f000 fb97 	bl	800e68c <__retarget_lock_acquire_recursive>
 800df5e:	89ab      	ldrh	r3, [r5, #12]
 800df60:	071b      	lsls	r3, r3, #28
 800df62:	d501      	bpl.n	800df68 <_vfiprintf_r+0x3c>
 800df64:	692b      	ldr	r3, [r5, #16]
 800df66:	b9eb      	cbnz	r3, 800dfa4 <_vfiprintf_r+0x78>
 800df68:	4629      	mov	r1, r5
 800df6a:	4630      	mov	r0, r6
 800df6c:	f000 f960 	bl	800e230 <__swsetup_r>
 800df70:	b1c0      	cbz	r0, 800dfa4 <_vfiprintf_r+0x78>
 800df72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df74:	07dc      	lsls	r4, r3, #31
 800df76:	d50e      	bpl.n	800df96 <_vfiprintf_r+0x6a>
 800df78:	f04f 30ff 	mov.w	r0, #4294967295
 800df7c:	b01d      	add	sp, #116	; 0x74
 800df7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df82:	4b7b      	ldr	r3, [pc, #492]	; (800e170 <_vfiprintf_r+0x244>)
 800df84:	429d      	cmp	r5, r3
 800df86:	d101      	bne.n	800df8c <_vfiprintf_r+0x60>
 800df88:	68b5      	ldr	r5, [r6, #8]
 800df8a:	e7df      	b.n	800df4c <_vfiprintf_r+0x20>
 800df8c:	4b79      	ldr	r3, [pc, #484]	; (800e174 <_vfiprintf_r+0x248>)
 800df8e:	429d      	cmp	r5, r3
 800df90:	bf08      	it	eq
 800df92:	68f5      	ldreq	r5, [r6, #12]
 800df94:	e7da      	b.n	800df4c <_vfiprintf_r+0x20>
 800df96:	89ab      	ldrh	r3, [r5, #12]
 800df98:	0598      	lsls	r0, r3, #22
 800df9a:	d4ed      	bmi.n	800df78 <_vfiprintf_r+0x4c>
 800df9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df9e:	f000 fb76 	bl	800e68e <__retarget_lock_release_recursive>
 800dfa2:	e7e9      	b.n	800df78 <_vfiprintf_r+0x4c>
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	9309      	str	r3, [sp, #36]	; 0x24
 800dfa8:	2320      	movs	r3, #32
 800dfaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dfae:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfb2:	2330      	movs	r3, #48	; 0x30
 800dfb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e178 <_vfiprintf_r+0x24c>
 800dfb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dfbc:	f04f 0901 	mov.w	r9, #1
 800dfc0:	4623      	mov	r3, r4
 800dfc2:	469a      	mov	sl, r3
 800dfc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfc8:	b10a      	cbz	r2, 800dfce <_vfiprintf_r+0xa2>
 800dfca:	2a25      	cmp	r2, #37	; 0x25
 800dfcc:	d1f9      	bne.n	800dfc2 <_vfiprintf_r+0x96>
 800dfce:	ebba 0b04 	subs.w	fp, sl, r4
 800dfd2:	d00b      	beq.n	800dfec <_vfiprintf_r+0xc0>
 800dfd4:	465b      	mov	r3, fp
 800dfd6:	4622      	mov	r2, r4
 800dfd8:	4629      	mov	r1, r5
 800dfda:	4630      	mov	r0, r6
 800dfdc:	f7ff ff93 	bl	800df06 <__sfputs_r>
 800dfe0:	3001      	adds	r0, #1
 800dfe2:	f000 80aa 	beq.w	800e13a <_vfiprintf_r+0x20e>
 800dfe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfe8:	445a      	add	r2, fp
 800dfea:	9209      	str	r2, [sp, #36]	; 0x24
 800dfec:	f89a 3000 	ldrb.w	r3, [sl]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	f000 80a2 	beq.w	800e13a <_vfiprintf_r+0x20e>
 800dff6:	2300      	movs	r3, #0
 800dff8:	f04f 32ff 	mov.w	r2, #4294967295
 800dffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e000:	f10a 0a01 	add.w	sl, sl, #1
 800e004:	9304      	str	r3, [sp, #16]
 800e006:	9307      	str	r3, [sp, #28]
 800e008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e00c:	931a      	str	r3, [sp, #104]	; 0x68
 800e00e:	4654      	mov	r4, sl
 800e010:	2205      	movs	r2, #5
 800e012:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e016:	4858      	ldr	r0, [pc, #352]	; (800e178 <_vfiprintf_r+0x24c>)
 800e018:	f7f2 f8e2 	bl	80001e0 <memchr>
 800e01c:	9a04      	ldr	r2, [sp, #16]
 800e01e:	b9d8      	cbnz	r0, 800e058 <_vfiprintf_r+0x12c>
 800e020:	06d1      	lsls	r1, r2, #27
 800e022:	bf44      	itt	mi
 800e024:	2320      	movmi	r3, #32
 800e026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e02a:	0713      	lsls	r3, r2, #28
 800e02c:	bf44      	itt	mi
 800e02e:	232b      	movmi	r3, #43	; 0x2b
 800e030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e034:	f89a 3000 	ldrb.w	r3, [sl]
 800e038:	2b2a      	cmp	r3, #42	; 0x2a
 800e03a:	d015      	beq.n	800e068 <_vfiprintf_r+0x13c>
 800e03c:	9a07      	ldr	r2, [sp, #28]
 800e03e:	4654      	mov	r4, sl
 800e040:	2000      	movs	r0, #0
 800e042:	f04f 0c0a 	mov.w	ip, #10
 800e046:	4621      	mov	r1, r4
 800e048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e04c:	3b30      	subs	r3, #48	; 0x30
 800e04e:	2b09      	cmp	r3, #9
 800e050:	d94e      	bls.n	800e0f0 <_vfiprintf_r+0x1c4>
 800e052:	b1b0      	cbz	r0, 800e082 <_vfiprintf_r+0x156>
 800e054:	9207      	str	r2, [sp, #28]
 800e056:	e014      	b.n	800e082 <_vfiprintf_r+0x156>
 800e058:	eba0 0308 	sub.w	r3, r0, r8
 800e05c:	fa09 f303 	lsl.w	r3, r9, r3
 800e060:	4313      	orrs	r3, r2
 800e062:	9304      	str	r3, [sp, #16]
 800e064:	46a2      	mov	sl, r4
 800e066:	e7d2      	b.n	800e00e <_vfiprintf_r+0xe2>
 800e068:	9b03      	ldr	r3, [sp, #12]
 800e06a:	1d19      	adds	r1, r3, #4
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	9103      	str	r1, [sp, #12]
 800e070:	2b00      	cmp	r3, #0
 800e072:	bfbb      	ittet	lt
 800e074:	425b      	neglt	r3, r3
 800e076:	f042 0202 	orrlt.w	r2, r2, #2
 800e07a:	9307      	strge	r3, [sp, #28]
 800e07c:	9307      	strlt	r3, [sp, #28]
 800e07e:	bfb8      	it	lt
 800e080:	9204      	strlt	r2, [sp, #16]
 800e082:	7823      	ldrb	r3, [r4, #0]
 800e084:	2b2e      	cmp	r3, #46	; 0x2e
 800e086:	d10c      	bne.n	800e0a2 <_vfiprintf_r+0x176>
 800e088:	7863      	ldrb	r3, [r4, #1]
 800e08a:	2b2a      	cmp	r3, #42	; 0x2a
 800e08c:	d135      	bne.n	800e0fa <_vfiprintf_r+0x1ce>
 800e08e:	9b03      	ldr	r3, [sp, #12]
 800e090:	1d1a      	adds	r2, r3, #4
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	9203      	str	r2, [sp, #12]
 800e096:	2b00      	cmp	r3, #0
 800e098:	bfb8      	it	lt
 800e09a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e09e:	3402      	adds	r4, #2
 800e0a0:	9305      	str	r3, [sp, #20]
 800e0a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e188 <_vfiprintf_r+0x25c>
 800e0a6:	7821      	ldrb	r1, [r4, #0]
 800e0a8:	2203      	movs	r2, #3
 800e0aa:	4650      	mov	r0, sl
 800e0ac:	f7f2 f898 	bl	80001e0 <memchr>
 800e0b0:	b140      	cbz	r0, 800e0c4 <_vfiprintf_r+0x198>
 800e0b2:	2340      	movs	r3, #64	; 0x40
 800e0b4:	eba0 000a 	sub.w	r0, r0, sl
 800e0b8:	fa03 f000 	lsl.w	r0, r3, r0
 800e0bc:	9b04      	ldr	r3, [sp, #16]
 800e0be:	4303      	orrs	r3, r0
 800e0c0:	3401      	adds	r4, #1
 800e0c2:	9304      	str	r3, [sp, #16]
 800e0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0c8:	482c      	ldr	r0, [pc, #176]	; (800e17c <_vfiprintf_r+0x250>)
 800e0ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0ce:	2206      	movs	r2, #6
 800e0d0:	f7f2 f886 	bl	80001e0 <memchr>
 800e0d4:	2800      	cmp	r0, #0
 800e0d6:	d03f      	beq.n	800e158 <_vfiprintf_r+0x22c>
 800e0d8:	4b29      	ldr	r3, [pc, #164]	; (800e180 <_vfiprintf_r+0x254>)
 800e0da:	bb1b      	cbnz	r3, 800e124 <_vfiprintf_r+0x1f8>
 800e0dc:	9b03      	ldr	r3, [sp, #12]
 800e0de:	3307      	adds	r3, #7
 800e0e0:	f023 0307 	bic.w	r3, r3, #7
 800e0e4:	3308      	adds	r3, #8
 800e0e6:	9303      	str	r3, [sp, #12]
 800e0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0ea:	443b      	add	r3, r7
 800e0ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e0ee:	e767      	b.n	800dfc0 <_vfiprintf_r+0x94>
 800e0f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0f4:	460c      	mov	r4, r1
 800e0f6:	2001      	movs	r0, #1
 800e0f8:	e7a5      	b.n	800e046 <_vfiprintf_r+0x11a>
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	3401      	adds	r4, #1
 800e0fe:	9305      	str	r3, [sp, #20]
 800e100:	4619      	mov	r1, r3
 800e102:	f04f 0c0a 	mov.w	ip, #10
 800e106:	4620      	mov	r0, r4
 800e108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e10c:	3a30      	subs	r2, #48	; 0x30
 800e10e:	2a09      	cmp	r2, #9
 800e110:	d903      	bls.n	800e11a <_vfiprintf_r+0x1ee>
 800e112:	2b00      	cmp	r3, #0
 800e114:	d0c5      	beq.n	800e0a2 <_vfiprintf_r+0x176>
 800e116:	9105      	str	r1, [sp, #20]
 800e118:	e7c3      	b.n	800e0a2 <_vfiprintf_r+0x176>
 800e11a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e11e:	4604      	mov	r4, r0
 800e120:	2301      	movs	r3, #1
 800e122:	e7f0      	b.n	800e106 <_vfiprintf_r+0x1da>
 800e124:	ab03      	add	r3, sp, #12
 800e126:	9300      	str	r3, [sp, #0]
 800e128:	462a      	mov	r2, r5
 800e12a:	4b16      	ldr	r3, [pc, #88]	; (800e184 <_vfiprintf_r+0x258>)
 800e12c:	a904      	add	r1, sp, #16
 800e12e:	4630      	mov	r0, r6
 800e130:	f7fc f886 	bl	800a240 <_printf_float>
 800e134:	4607      	mov	r7, r0
 800e136:	1c78      	adds	r0, r7, #1
 800e138:	d1d6      	bne.n	800e0e8 <_vfiprintf_r+0x1bc>
 800e13a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e13c:	07d9      	lsls	r1, r3, #31
 800e13e:	d405      	bmi.n	800e14c <_vfiprintf_r+0x220>
 800e140:	89ab      	ldrh	r3, [r5, #12]
 800e142:	059a      	lsls	r2, r3, #22
 800e144:	d402      	bmi.n	800e14c <_vfiprintf_r+0x220>
 800e146:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e148:	f000 faa1 	bl	800e68e <__retarget_lock_release_recursive>
 800e14c:	89ab      	ldrh	r3, [r5, #12]
 800e14e:	065b      	lsls	r3, r3, #25
 800e150:	f53f af12 	bmi.w	800df78 <_vfiprintf_r+0x4c>
 800e154:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e156:	e711      	b.n	800df7c <_vfiprintf_r+0x50>
 800e158:	ab03      	add	r3, sp, #12
 800e15a:	9300      	str	r3, [sp, #0]
 800e15c:	462a      	mov	r2, r5
 800e15e:	4b09      	ldr	r3, [pc, #36]	; (800e184 <_vfiprintf_r+0x258>)
 800e160:	a904      	add	r1, sp, #16
 800e162:	4630      	mov	r0, r6
 800e164:	f7fc fb10 	bl	800a788 <_printf_i>
 800e168:	e7e4      	b.n	800e134 <_vfiprintf_r+0x208>
 800e16a:	bf00      	nop
 800e16c:	08010154 	.word	0x08010154
 800e170:	08010174 	.word	0x08010174
 800e174:	08010134 	.word	0x08010134
 800e178:	080100e4 	.word	0x080100e4
 800e17c:	080100ee 	.word	0x080100ee
 800e180:	0800a241 	.word	0x0800a241
 800e184:	0800df07 	.word	0x0800df07
 800e188:	080100ea 	.word	0x080100ea

0800e18c <__swbuf_r>:
 800e18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e18e:	460e      	mov	r6, r1
 800e190:	4614      	mov	r4, r2
 800e192:	4605      	mov	r5, r0
 800e194:	b118      	cbz	r0, 800e19e <__swbuf_r+0x12>
 800e196:	6983      	ldr	r3, [r0, #24]
 800e198:	b90b      	cbnz	r3, 800e19e <__swbuf_r+0x12>
 800e19a:	f000 f9d9 	bl	800e550 <__sinit>
 800e19e:	4b21      	ldr	r3, [pc, #132]	; (800e224 <__swbuf_r+0x98>)
 800e1a0:	429c      	cmp	r4, r3
 800e1a2:	d12b      	bne.n	800e1fc <__swbuf_r+0x70>
 800e1a4:	686c      	ldr	r4, [r5, #4]
 800e1a6:	69a3      	ldr	r3, [r4, #24]
 800e1a8:	60a3      	str	r3, [r4, #8]
 800e1aa:	89a3      	ldrh	r3, [r4, #12]
 800e1ac:	071a      	lsls	r2, r3, #28
 800e1ae:	d52f      	bpl.n	800e210 <__swbuf_r+0x84>
 800e1b0:	6923      	ldr	r3, [r4, #16]
 800e1b2:	b36b      	cbz	r3, 800e210 <__swbuf_r+0x84>
 800e1b4:	6923      	ldr	r3, [r4, #16]
 800e1b6:	6820      	ldr	r0, [r4, #0]
 800e1b8:	1ac0      	subs	r0, r0, r3
 800e1ba:	6963      	ldr	r3, [r4, #20]
 800e1bc:	b2f6      	uxtb	r6, r6
 800e1be:	4283      	cmp	r3, r0
 800e1c0:	4637      	mov	r7, r6
 800e1c2:	dc04      	bgt.n	800e1ce <__swbuf_r+0x42>
 800e1c4:	4621      	mov	r1, r4
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	f000 f92e 	bl	800e428 <_fflush_r>
 800e1cc:	bb30      	cbnz	r0, 800e21c <__swbuf_r+0x90>
 800e1ce:	68a3      	ldr	r3, [r4, #8]
 800e1d0:	3b01      	subs	r3, #1
 800e1d2:	60a3      	str	r3, [r4, #8]
 800e1d4:	6823      	ldr	r3, [r4, #0]
 800e1d6:	1c5a      	adds	r2, r3, #1
 800e1d8:	6022      	str	r2, [r4, #0]
 800e1da:	701e      	strb	r6, [r3, #0]
 800e1dc:	6963      	ldr	r3, [r4, #20]
 800e1de:	3001      	adds	r0, #1
 800e1e0:	4283      	cmp	r3, r0
 800e1e2:	d004      	beq.n	800e1ee <__swbuf_r+0x62>
 800e1e4:	89a3      	ldrh	r3, [r4, #12]
 800e1e6:	07db      	lsls	r3, r3, #31
 800e1e8:	d506      	bpl.n	800e1f8 <__swbuf_r+0x6c>
 800e1ea:	2e0a      	cmp	r6, #10
 800e1ec:	d104      	bne.n	800e1f8 <__swbuf_r+0x6c>
 800e1ee:	4621      	mov	r1, r4
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	f000 f919 	bl	800e428 <_fflush_r>
 800e1f6:	b988      	cbnz	r0, 800e21c <__swbuf_r+0x90>
 800e1f8:	4638      	mov	r0, r7
 800e1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1fc:	4b0a      	ldr	r3, [pc, #40]	; (800e228 <__swbuf_r+0x9c>)
 800e1fe:	429c      	cmp	r4, r3
 800e200:	d101      	bne.n	800e206 <__swbuf_r+0x7a>
 800e202:	68ac      	ldr	r4, [r5, #8]
 800e204:	e7cf      	b.n	800e1a6 <__swbuf_r+0x1a>
 800e206:	4b09      	ldr	r3, [pc, #36]	; (800e22c <__swbuf_r+0xa0>)
 800e208:	429c      	cmp	r4, r3
 800e20a:	bf08      	it	eq
 800e20c:	68ec      	ldreq	r4, [r5, #12]
 800e20e:	e7ca      	b.n	800e1a6 <__swbuf_r+0x1a>
 800e210:	4621      	mov	r1, r4
 800e212:	4628      	mov	r0, r5
 800e214:	f000 f80c 	bl	800e230 <__swsetup_r>
 800e218:	2800      	cmp	r0, #0
 800e21a:	d0cb      	beq.n	800e1b4 <__swbuf_r+0x28>
 800e21c:	f04f 37ff 	mov.w	r7, #4294967295
 800e220:	e7ea      	b.n	800e1f8 <__swbuf_r+0x6c>
 800e222:	bf00      	nop
 800e224:	08010154 	.word	0x08010154
 800e228:	08010174 	.word	0x08010174
 800e22c:	08010134 	.word	0x08010134

0800e230 <__swsetup_r>:
 800e230:	4b32      	ldr	r3, [pc, #200]	; (800e2fc <__swsetup_r+0xcc>)
 800e232:	b570      	push	{r4, r5, r6, lr}
 800e234:	681d      	ldr	r5, [r3, #0]
 800e236:	4606      	mov	r6, r0
 800e238:	460c      	mov	r4, r1
 800e23a:	b125      	cbz	r5, 800e246 <__swsetup_r+0x16>
 800e23c:	69ab      	ldr	r3, [r5, #24]
 800e23e:	b913      	cbnz	r3, 800e246 <__swsetup_r+0x16>
 800e240:	4628      	mov	r0, r5
 800e242:	f000 f985 	bl	800e550 <__sinit>
 800e246:	4b2e      	ldr	r3, [pc, #184]	; (800e300 <__swsetup_r+0xd0>)
 800e248:	429c      	cmp	r4, r3
 800e24a:	d10f      	bne.n	800e26c <__swsetup_r+0x3c>
 800e24c:	686c      	ldr	r4, [r5, #4]
 800e24e:	89a3      	ldrh	r3, [r4, #12]
 800e250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e254:	0719      	lsls	r1, r3, #28
 800e256:	d42c      	bmi.n	800e2b2 <__swsetup_r+0x82>
 800e258:	06dd      	lsls	r5, r3, #27
 800e25a:	d411      	bmi.n	800e280 <__swsetup_r+0x50>
 800e25c:	2309      	movs	r3, #9
 800e25e:	6033      	str	r3, [r6, #0]
 800e260:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e264:	81a3      	strh	r3, [r4, #12]
 800e266:	f04f 30ff 	mov.w	r0, #4294967295
 800e26a:	e03e      	b.n	800e2ea <__swsetup_r+0xba>
 800e26c:	4b25      	ldr	r3, [pc, #148]	; (800e304 <__swsetup_r+0xd4>)
 800e26e:	429c      	cmp	r4, r3
 800e270:	d101      	bne.n	800e276 <__swsetup_r+0x46>
 800e272:	68ac      	ldr	r4, [r5, #8]
 800e274:	e7eb      	b.n	800e24e <__swsetup_r+0x1e>
 800e276:	4b24      	ldr	r3, [pc, #144]	; (800e308 <__swsetup_r+0xd8>)
 800e278:	429c      	cmp	r4, r3
 800e27a:	bf08      	it	eq
 800e27c:	68ec      	ldreq	r4, [r5, #12]
 800e27e:	e7e6      	b.n	800e24e <__swsetup_r+0x1e>
 800e280:	0758      	lsls	r0, r3, #29
 800e282:	d512      	bpl.n	800e2aa <__swsetup_r+0x7a>
 800e284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e286:	b141      	cbz	r1, 800e29a <__swsetup_r+0x6a>
 800e288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e28c:	4299      	cmp	r1, r3
 800e28e:	d002      	beq.n	800e296 <__swsetup_r+0x66>
 800e290:	4630      	mov	r0, r6
 800e292:	f7ff fb67 	bl	800d964 <_free_r>
 800e296:	2300      	movs	r3, #0
 800e298:	6363      	str	r3, [r4, #52]	; 0x34
 800e29a:	89a3      	ldrh	r3, [r4, #12]
 800e29c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e2a0:	81a3      	strh	r3, [r4, #12]
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	6063      	str	r3, [r4, #4]
 800e2a6:	6923      	ldr	r3, [r4, #16]
 800e2a8:	6023      	str	r3, [r4, #0]
 800e2aa:	89a3      	ldrh	r3, [r4, #12]
 800e2ac:	f043 0308 	orr.w	r3, r3, #8
 800e2b0:	81a3      	strh	r3, [r4, #12]
 800e2b2:	6923      	ldr	r3, [r4, #16]
 800e2b4:	b94b      	cbnz	r3, 800e2ca <__swsetup_r+0x9a>
 800e2b6:	89a3      	ldrh	r3, [r4, #12]
 800e2b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e2bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2c0:	d003      	beq.n	800e2ca <__swsetup_r+0x9a>
 800e2c2:	4621      	mov	r1, r4
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	f000 fa07 	bl	800e6d8 <__smakebuf_r>
 800e2ca:	89a0      	ldrh	r0, [r4, #12]
 800e2cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2d0:	f010 0301 	ands.w	r3, r0, #1
 800e2d4:	d00a      	beq.n	800e2ec <__swsetup_r+0xbc>
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	60a3      	str	r3, [r4, #8]
 800e2da:	6963      	ldr	r3, [r4, #20]
 800e2dc:	425b      	negs	r3, r3
 800e2de:	61a3      	str	r3, [r4, #24]
 800e2e0:	6923      	ldr	r3, [r4, #16]
 800e2e2:	b943      	cbnz	r3, 800e2f6 <__swsetup_r+0xc6>
 800e2e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e2e8:	d1ba      	bne.n	800e260 <__swsetup_r+0x30>
 800e2ea:	bd70      	pop	{r4, r5, r6, pc}
 800e2ec:	0781      	lsls	r1, r0, #30
 800e2ee:	bf58      	it	pl
 800e2f0:	6963      	ldrpl	r3, [r4, #20]
 800e2f2:	60a3      	str	r3, [r4, #8]
 800e2f4:	e7f4      	b.n	800e2e0 <__swsetup_r+0xb0>
 800e2f6:	2000      	movs	r0, #0
 800e2f8:	e7f7      	b.n	800e2ea <__swsetup_r+0xba>
 800e2fa:	bf00      	nop
 800e2fc:	20000084 	.word	0x20000084
 800e300:	08010154 	.word	0x08010154
 800e304:	08010174 	.word	0x08010174
 800e308:	08010134 	.word	0x08010134

0800e30c <abort>:
 800e30c:	b508      	push	{r3, lr}
 800e30e:	2006      	movs	r0, #6
 800e310:	f000 fa52 	bl	800e7b8 <raise>
 800e314:	2001      	movs	r0, #1
 800e316:	f7f5 fdd1 	bl	8003ebc <_exit>
	...

0800e31c <__sflush_r>:
 800e31c:	898a      	ldrh	r2, [r1, #12]
 800e31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e322:	4605      	mov	r5, r0
 800e324:	0710      	lsls	r0, r2, #28
 800e326:	460c      	mov	r4, r1
 800e328:	d458      	bmi.n	800e3dc <__sflush_r+0xc0>
 800e32a:	684b      	ldr	r3, [r1, #4]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	dc05      	bgt.n	800e33c <__sflush_r+0x20>
 800e330:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e332:	2b00      	cmp	r3, #0
 800e334:	dc02      	bgt.n	800e33c <__sflush_r+0x20>
 800e336:	2000      	movs	r0, #0
 800e338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e33c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e33e:	2e00      	cmp	r6, #0
 800e340:	d0f9      	beq.n	800e336 <__sflush_r+0x1a>
 800e342:	2300      	movs	r3, #0
 800e344:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e348:	682f      	ldr	r7, [r5, #0]
 800e34a:	602b      	str	r3, [r5, #0]
 800e34c:	d032      	beq.n	800e3b4 <__sflush_r+0x98>
 800e34e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e350:	89a3      	ldrh	r3, [r4, #12]
 800e352:	075a      	lsls	r2, r3, #29
 800e354:	d505      	bpl.n	800e362 <__sflush_r+0x46>
 800e356:	6863      	ldr	r3, [r4, #4]
 800e358:	1ac0      	subs	r0, r0, r3
 800e35a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e35c:	b10b      	cbz	r3, 800e362 <__sflush_r+0x46>
 800e35e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e360:	1ac0      	subs	r0, r0, r3
 800e362:	2300      	movs	r3, #0
 800e364:	4602      	mov	r2, r0
 800e366:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e368:	6a21      	ldr	r1, [r4, #32]
 800e36a:	4628      	mov	r0, r5
 800e36c:	47b0      	blx	r6
 800e36e:	1c43      	adds	r3, r0, #1
 800e370:	89a3      	ldrh	r3, [r4, #12]
 800e372:	d106      	bne.n	800e382 <__sflush_r+0x66>
 800e374:	6829      	ldr	r1, [r5, #0]
 800e376:	291d      	cmp	r1, #29
 800e378:	d82c      	bhi.n	800e3d4 <__sflush_r+0xb8>
 800e37a:	4a2a      	ldr	r2, [pc, #168]	; (800e424 <__sflush_r+0x108>)
 800e37c:	40ca      	lsrs	r2, r1
 800e37e:	07d6      	lsls	r6, r2, #31
 800e380:	d528      	bpl.n	800e3d4 <__sflush_r+0xb8>
 800e382:	2200      	movs	r2, #0
 800e384:	6062      	str	r2, [r4, #4]
 800e386:	04d9      	lsls	r1, r3, #19
 800e388:	6922      	ldr	r2, [r4, #16]
 800e38a:	6022      	str	r2, [r4, #0]
 800e38c:	d504      	bpl.n	800e398 <__sflush_r+0x7c>
 800e38e:	1c42      	adds	r2, r0, #1
 800e390:	d101      	bne.n	800e396 <__sflush_r+0x7a>
 800e392:	682b      	ldr	r3, [r5, #0]
 800e394:	b903      	cbnz	r3, 800e398 <__sflush_r+0x7c>
 800e396:	6560      	str	r0, [r4, #84]	; 0x54
 800e398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e39a:	602f      	str	r7, [r5, #0]
 800e39c:	2900      	cmp	r1, #0
 800e39e:	d0ca      	beq.n	800e336 <__sflush_r+0x1a>
 800e3a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3a4:	4299      	cmp	r1, r3
 800e3a6:	d002      	beq.n	800e3ae <__sflush_r+0x92>
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	f7ff fadb 	bl	800d964 <_free_r>
 800e3ae:	2000      	movs	r0, #0
 800e3b0:	6360      	str	r0, [r4, #52]	; 0x34
 800e3b2:	e7c1      	b.n	800e338 <__sflush_r+0x1c>
 800e3b4:	6a21      	ldr	r1, [r4, #32]
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	4628      	mov	r0, r5
 800e3ba:	47b0      	blx	r6
 800e3bc:	1c41      	adds	r1, r0, #1
 800e3be:	d1c7      	bne.n	800e350 <__sflush_r+0x34>
 800e3c0:	682b      	ldr	r3, [r5, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d0c4      	beq.n	800e350 <__sflush_r+0x34>
 800e3c6:	2b1d      	cmp	r3, #29
 800e3c8:	d001      	beq.n	800e3ce <__sflush_r+0xb2>
 800e3ca:	2b16      	cmp	r3, #22
 800e3cc:	d101      	bne.n	800e3d2 <__sflush_r+0xb6>
 800e3ce:	602f      	str	r7, [r5, #0]
 800e3d0:	e7b1      	b.n	800e336 <__sflush_r+0x1a>
 800e3d2:	89a3      	ldrh	r3, [r4, #12]
 800e3d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3d8:	81a3      	strh	r3, [r4, #12]
 800e3da:	e7ad      	b.n	800e338 <__sflush_r+0x1c>
 800e3dc:	690f      	ldr	r7, [r1, #16]
 800e3de:	2f00      	cmp	r7, #0
 800e3e0:	d0a9      	beq.n	800e336 <__sflush_r+0x1a>
 800e3e2:	0793      	lsls	r3, r2, #30
 800e3e4:	680e      	ldr	r6, [r1, #0]
 800e3e6:	bf08      	it	eq
 800e3e8:	694b      	ldreq	r3, [r1, #20]
 800e3ea:	600f      	str	r7, [r1, #0]
 800e3ec:	bf18      	it	ne
 800e3ee:	2300      	movne	r3, #0
 800e3f0:	eba6 0807 	sub.w	r8, r6, r7
 800e3f4:	608b      	str	r3, [r1, #8]
 800e3f6:	f1b8 0f00 	cmp.w	r8, #0
 800e3fa:	dd9c      	ble.n	800e336 <__sflush_r+0x1a>
 800e3fc:	6a21      	ldr	r1, [r4, #32]
 800e3fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e400:	4643      	mov	r3, r8
 800e402:	463a      	mov	r2, r7
 800e404:	4628      	mov	r0, r5
 800e406:	47b0      	blx	r6
 800e408:	2800      	cmp	r0, #0
 800e40a:	dc06      	bgt.n	800e41a <__sflush_r+0xfe>
 800e40c:	89a3      	ldrh	r3, [r4, #12]
 800e40e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e412:	81a3      	strh	r3, [r4, #12]
 800e414:	f04f 30ff 	mov.w	r0, #4294967295
 800e418:	e78e      	b.n	800e338 <__sflush_r+0x1c>
 800e41a:	4407      	add	r7, r0
 800e41c:	eba8 0800 	sub.w	r8, r8, r0
 800e420:	e7e9      	b.n	800e3f6 <__sflush_r+0xda>
 800e422:	bf00      	nop
 800e424:	20400001 	.word	0x20400001

0800e428 <_fflush_r>:
 800e428:	b538      	push	{r3, r4, r5, lr}
 800e42a:	690b      	ldr	r3, [r1, #16]
 800e42c:	4605      	mov	r5, r0
 800e42e:	460c      	mov	r4, r1
 800e430:	b913      	cbnz	r3, 800e438 <_fflush_r+0x10>
 800e432:	2500      	movs	r5, #0
 800e434:	4628      	mov	r0, r5
 800e436:	bd38      	pop	{r3, r4, r5, pc}
 800e438:	b118      	cbz	r0, 800e442 <_fflush_r+0x1a>
 800e43a:	6983      	ldr	r3, [r0, #24]
 800e43c:	b90b      	cbnz	r3, 800e442 <_fflush_r+0x1a>
 800e43e:	f000 f887 	bl	800e550 <__sinit>
 800e442:	4b14      	ldr	r3, [pc, #80]	; (800e494 <_fflush_r+0x6c>)
 800e444:	429c      	cmp	r4, r3
 800e446:	d11b      	bne.n	800e480 <_fflush_r+0x58>
 800e448:	686c      	ldr	r4, [r5, #4]
 800e44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d0ef      	beq.n	800e432 <_fflush_r+0xa>
 800e452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e454:	07d0      	lsls	r0, r2, #31
 800e456:	d404      	bmi.n	800e462 <_fflush_r+0x3a>
 800e458:	0599      	lsls	r1, r3, #22
 800e45a:	d402      	bmi.n	800e462 <_fflush_r+0x3a>
 800e45c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e45e:	f000 f915 	bl	800e68c <__retarget_lock_acquire_recursive>
 800e462:	4628      	mov	r0, r5
 800e464:	4621      	mov	r1, r4
 800e466:	f7ff ff59 	bl	800e31c <__sflush_r>
 800e46a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e46c:	07da      	lsls	r2, r3, #31
 800e46e:	4605      	mov	r5, r0
 800e470:	d4e0      	bmi.n	800e434 <_fflush_r+0xc>
 800e472:	89a3      	ldrh	r3, [r4, #12]
 800e474:	059b      	lsls	r3, r3, #22
 800e476:	d4dd      	bmi.n	800e434 <_fflush_r+0xc>
 800e478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e47a:	f000 f908 	bl	800e68e <__retarget_lock_release_recursive>
 800e47e:	e7d9      	b.n	800e434 <_fflush_r+0xc>
 800e480:	4b05      	ldr	r3, [pc, #20]	; (800e498 <_fflush_r+0x70>)
 800e482:	429c      	cmp	r4, r3
 800e484:	d101      	bne.n	800e48a <_fflush_r+0x62>
 800e486:	68ac      	ldr	r4, [r5, #8]
 800e488:	e7df      	b.n	800e44a <_fflush_r+0x22>
 800e48a:	4b04      	ldr	r3, [pc, #16]	; (800e49c <_fflush_r+0x74>)
 800e48c:	429c      	cmp	r4, r3
 800e48e:	bf08      	it	eq
 800e490:	68ec      	ldreq	r4, [r5, #12]
 800e492:	e7da      	b.n	800e44a <_fflush_r+0x22>
 800e494:	08010154 	.word	0x08010154
 800e498:	08010174 	.word	0x08010174
 800e49c:	08010134 	.word	0x08010134

0800e4a0 <std>:
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	b510      	push	{r4, lr}
 800e4a4:	4604      	mov	r4, r0
 800e4a6:	e9c0 3300 	strd	r3, r3, [r0]
 800e4aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4ae:	6083      	str	r3, [r0, #8]
 800e4b0:	8181      	strh	r1, [r0, #12]
 800e4b2:	6643      	str	r3, [r0, #100]	; 0x64
 800e4b4:	81c2      	strh	r2, [r0, #14]
 800e4b6:	6183      	str	r3, [r0, #24]
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	2208      	movs	r2, #8
 800e4bc:	305c      	adds	r0, #92	; 0x5c
 800e4be:	f7fb fe17 	bl	800a0f0 <memset>
 800e4c2:	4b05      	ldr	r3, [pc, #20]	; (800e4d8 <std+0x38>)
 800e4c4:	6263      	str	r3, [r4, #36]	; 0x24
 800e4c6:	4b05      	ldr	r3, [pc, #20]	; (800e4dc <std+0x3c>)
 800e4c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4ca:	4b05      	ldr	r3, [pc, #20]	; (800e4e0 <std+0x40>)
 800e4cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4ce:	4b05      	ldr	r3, [pc, #20]	; (800e4e4 <std+0x44>)
 800e4d0:	6224      	str	r4, [r4, #32]
 800e4d2:	6323      	str	r3, [r4, #48]	; 0x30
 800e4d4:	bd10      	pop	{r4, pc}
 800e4d6:	bf00      	nop
 800e4d8:	0800e7f1 	.word	0x0800e7f1
 800e4dc:	0800e813 	.word	0x0800e813
 800e4e0:	0800e84b 	.word	0x0800e84b
 800e4e4:	0800e86f 	.word	0x0800e86f

0800e4e8 <_cleanup_r>:
 800e4e8:	4901      	ldr	r1, [pc, #4]	; (800e4f0 <_cleanup_r+0x8>)
 800e4ea:	f000 b8af 	b.w	800e64c <_fwalk_reent>
 800e4ee:	bf00      	nop
 800e4f0:	0800e429 	.word	0x0800e429

0800e4f4 <__sfmoreglue>:
 800e4f4:	b570      	push	{r4, r5, r6, lr}
 800e4f6:	1e4a      	subs	r2, r1, #1
 800e4f8:	2568      	movs	r5, #104	; 0x68
 800e4fa:	4355      	muls	r5, r2
 800e4fc:	460e      	mov	r6, r1
 800e4fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e502:	f7ff fa7f 	bl	800da04 <_malloc_r>
 800e506:	4604      	mov	r4, r0
 800e508:	b140      	cbz	r0, 800e51c <__sfmoreglue+0x28>
 800e50a:	2100      	movs	r1, #0
 800e50c:	e9c0 1600 	strd	r1, r6, [r0]
 800e510:	300c      	adds	r0, #12
 800e512:	60a0      	str	r0, [r4, #8]
 800e514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e518:	f7fb fdea 	bl	800a0f0 <memset>
 800e51c:	4620      	mov	r0, r4
 800e51e:	bd70      	pop	{r4, r5, r6, pc}

0800e520 <__sfp_lock_acquire>:
 800e520:	4801      	ldr	r0, [pc, #4]	; (800e528 <__sfp_lock_acquire+0x8>)
 800e522:	f000 b8b3 	b.w	800e68c <__retarget_lock_acquire_recursive>
 800e526:	bf00      	nop
 800e528:	20000dd0 	.word	0x20000dd0

0800e52c <__sfp_lock_release>:
 800e52c:	4801      	ldr	r0, [pc, #4]	; (800e534 <__sfp_lock_release+0x8>)
 800e52e:	f000 b8ae 	b.w	800e68e <__retarget_lock_release_recursive>
 800e532:	bf00      	nop
 800e534:	20000dd0 	.word	0x20000dd0

0800e538 <__sinit_lock_acquire>:
 800e538:	4801      	ldr	r0, [pc, #4]	; (800e540 <__sinit_lock_acquire+0x8>)
 800e53a:	f000 b8a7 	b.w	800e68c <__retarget_lock_acquire_recursive>
 800e53e:	bf00      	nop
 800e540:	20000dcb 	.word	0x20000dcb

0800e544 <__sinit_lock_release>:
 800e544:	4801      	ldr	r0, [pc, #4]	; (800e54c <__sinit_lock_release+0x8>)
 800e546:	f000 b8a2 	b.w	800e68e <__retarget_lock_release_recursive>
 800e54a:	bf00      	nop
 800e54c:	20000dcb 	.word	0x20000dcb

0800e550 <__sinit>:
 800e550:	b510      	push	{r4, lr}
 800e552:	4604      	mov	r4, r0
 800e554:	f7ff fff0 	bl	800e538 <__sinit_lock_acquire>
 800e558:	69a3      	ldr	r3, [r4, #24]
 800e55a:	b11b      	cbz	r3, 800e564 <__sinit+0x14>
 800e55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e560:	f7ff bff0 	b.w	800e544 <__sinit_lock_release>
 800e564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e568:	6523      	str	r3, [r4, #80]	; 0x50
 800e56a:	4b13      	ldr	r3, [pc, #76]	; (800e5b8 <__sinit+0x68>)
 800e56c:	4a13      	ldr	r2, [pc, #76]	; (800e5bc <__sinit+0x6c>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	62a2      	str	r2, [r4, #40]	; 0x28
 800e572:	42a3      	cmp	r3, r4
 800e574:	bf04      	itt	eq
 800e576:	2301      	moveq	r3, #1
 800e578:	61a3      	streq	r3, [r4, #24]
 800e57a:	4620      	mov	r0, r4
 800e57c:	f000 f820 	bl	800e5c0 <__sfp>
 800e580:	6060      	str	r0, [r4, #4]
 800e582:	4620      	mov	r0, r4
 800e584:	f000 f81c 	bl	800e5c0 <__sfp>
 800e588:	60a0      	str	r0, [r4, #8]
 800e58a:	4620      	mov	r0, r4
 800e58c:	f000 f818 	bl	800e5c0 <__sfp>
 800e590:	2200      	movs	r2, #0
 800e592:	60e0      	str	r0, [r4, #12]
 800e594:	2104      	movs	r1, #4
 800e596:	6860      	ldr	r0, [r4, #4]
 800e598:	f7ff ff82 	bl	800e4a0 <std>
 800e59c:	68a0      	ldr	r0, [r4, #8]
 800e59e:	2201      	movs	r2, #1
 800e5a0:	2109      	movs	r1, #9
 800e5a2:	f7ff ff7d 	bl	800e4a0 <std>
 800e5a6:	68e0      	ldr	r0, [r4, #12]
 800e5a8:	2202      	movs	r2, #2
 800e5aa:	2112      	movs	r1, #18
 800e5ac:	f7ff ff78 	bl	800e4a0 <std>
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	61a3      	str	r3, [r4, #24]
 800e5b4:	e7d2      	b.n	800e55c <__sinit+0xc>
 800e5b6:	bf00      	nop
 800e5b8:	0800fce0 	.word	0x0800fce0
 800e5bc:	0800e4e9 	.word	0x0800e4e9

0800e5c0 <__sfp>:
 800e5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5c2:	4607      	mov	r7, r0
 800e5c4:	f7ff ffac 	bl	800e520 <__sfp_lock_acquire>
 800e5c8:	4b1e      	ldr	r3, [pc, #120]	; (800e644 <__sfp+0x84>)
 800e5ca:	681e      	ldr	r6, [r3, #0]
 800e5cc:	69b3      	ldr	r3, [r6, #24]
 800e5ce:	b913      	cbnz	r3, 800e5d6 <__sfp+0x16>
 800e5d0:	4630      	mov	r0, r6
 800e5d2:	f7ff ffbd 	bl	800e550 <__sinit>
 800e5d6:	3648      	adds	r6, #72	; 0x48
 800e5d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e5dc:	3b01      	subs	r3, #1
 800e5de:	d503      	bpl.n	800e5e8 <__sfp+0x28>
 800e5e0:	6833      	ldr	r3, [r6, #0]
 800e5e2:	b30b      	cbz	r3, 800e628 <__sfp+0x68>
 800e5e4:	6836      	ldr	r6, [r6, #0]
 800e5e6:	e7f7      	b.n	800e5d8 <__sfp+0x18>
 800e5e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e5ec:	b9d5      	cbnz	r5, 800e624 <__sfp+0x64>
 800e5ee:	4b16      	ldr	r3, [pc, #88]	; (800e648 <__sfp+0x88>)
 800e5f0:	60e3      	str	r3, [r4, #12]
 800e5f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e5f6:	6665      	str	r5, [r4, #100]	; 0x64
 800e5f8:	f000 f847 	bl	800e68a <__retarget_lock_init_recursive>
 800e5fc:	f7ff ff96 	bl	800e52c <__sfp_lock_release>
 800e600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e608:	6025      	str	r5, [r4, #0]
 800e60a:	61a5      	str	r5, [r4, #24]
 800e60c:	2208      	movs	r2, #8
 800e60e:	4629      	mov	r1, r5
 800e610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e614:	f7fb fd6c 	bl	800a0f0 <memset>
 800e618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e61c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e620:	4620      	mov	r0, r4
 800e622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e624:	3468      	adds	r4, #104	; 0x68
 800e626:	e7d9      	b.n	800e5dc <__sfp+0x1c>
 800e628:	2104      	movs	r1, #4
 800e62a:	4638      	mov	r0, r7
 800e62c:	f7ff ff62 	bl	800e4f4 <__sfmoreglue>
 800e630:	4604      	mov	r4, r0
 800e632:	6030      	str	r0, [r6, #0]
 800e634:	2800      	cmp	r0, #0
 800e636:	d1d5      	bne.n	800e5e4 <__sfp+0x24>
 800e638:	f7ff ff78 	bl	800e52c <__sfp_lock_release>
 800e63c:	230c      	movs	r3, #12
 800e63e:	603b      	str	r3, [r7, #0]
 800e640:	e7ee      	b.n	800e620 <__sfp+0x60>
 800e642:	bf00      	nop
 800e644:	0800fce0 	.word	0x0800fce0
 800e648:	ffff0001 	.word	0xffff0001

0800e64c <_fwalk_reent>:
 800e64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e650:	4606      	mov	r6, r0
 800e652:	4688      	mov	r8, r1
 800e654:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e658:	2700      	movs	r7, #0
 800e65a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e65e:	f1b9 0901 	subs.w	r9, r9, #1
 800e662:	d505      	bpl.n	800e670 <_fwalk_reent+0x24>
 800e664:	6824      	ldr	r4, [r4, #0]
 800e666:	2c00      	cmp	r4, #0
 800e668:	d1f7      	bne.n	800e65a <_fwalk_reent+0xe>
 800e66a:	4638      	mov	r0, r7
 800e66c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e670:	89ab      	ldrh	r3, [r5, #12]
 800e672:	2b01      	cmp	r3, #1
 800e674:	d907      	bls.n	800e686 <_fwalk_reent+0x3a>
 800e676:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e67a:	3301      	adds	r3, #1
 800e67c:	d003      	beq.n	800e686 <_fwalk_reent+0x3a>
 800e67e:	4629      	mov	r1, r5
 800e680:	4630      	mov	r0, r6
 800e682:	47c0      	blx	r8
 800e684:	4307      	orrs	r7, r0
 800e686:	3568      	adds	r5, #104	; 0x68
 800e688:	e7e9      	b.n	800e65e <_fwalk_reent+0x12>

0800e68a <__retarget_lock_init_recursive>:
 800e68a:	4770      	bx	lr

0800e68c <__retarget_lock_acquire_recursive>:
 800e68c:	4770      	bx	lr

0800e68e <__retarget_lock_release_recursive>:
 800e68e:	4770      	bx	lr

0800e690 <__swhatbuf_r>:
 800e690:	b570      	push	{r4, r5, r6, lr}
 800e692:	460e      	mov	r6, r1
 800e694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e698:	2900      	cmp	r1, #0
 800e69a:	b096      	sub	sp, #88	; 0x58
 800e69c:	4614      	mov	r4, r2
 800e69e:	461d      	mov	r5, r3
 800e6a0:	da07      	bge.n	800e6b2 <__swhatbuf_r+0x22>
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	602b      	str	r3, [r5, #0]
 800e6a6:	89b3      	ldrh	r3, [r6, #12]
 800e6a8:	061a      	lsls	r2, r3, #24
 800e6aa:	d410      	bmi.n	800e6ce <__swhatbuf_r+0x3e>
 800e6ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6b0:	e00e      	b.n	800e6d0 <__swhatbuf_r+0x40>
 800e6b2:	466a      	mov	r2, sp
 800e6b4:	f000 f902 	bl	800e8bc <_fstat_r>
 800e6b8:	2800      	cmp	r0, #0
 800e6ba:	dbf2      	blt.n	800e6a2 <__swhatbuf_r+0x12>
 800e6bc:	9a01      	ldr	r2, [sp, #4]
 800e6be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e6c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e6c6:	425a      	negs	r2, r3
 800e6c8:	415a      	adcs	r2, r3
 800e6ca:	602a      	str	r2, [r5, #0]
 800e6cc:	e7ee      	b.n	800e6ac <__swhatbuf_r+0x1c>
 800e6ce:	2340      	movs	r3, #64	; 0x40
 800e6d0:	2000      	movs	r0, #0
 800e6d2:	6023      	str	r3, [r4, #0]
 800e6d4:	b016      	add	sp, #88	; 0x58
 800e6d6:	bd70      	pop	{r4, r5, r6, pc}

0800e6d8 <__smakebuf_r>:
 800e6d8:	898b      	ldrh	r3, [r1, #12]
 800e6da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e6dc:	079d      	lsls	r5, r3, #30
 800e6de:	4606      	mov	r6, r0
 800e6e0:	460c      	mov	r4, r1
 800e6e2:	d507      	bpl.n	800e6f4 <__smakebuf_r+0x1c>
 800e6e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e6e8:	6023      	str	r3, [r4, #0]
 800e6ea:	6123      	str	r3, [r4, #16]
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	6163      	str	r3, [r4, #20]
 800e6f0:	b002      	add	sp, #8
 800e6f2:	bd70      	pop	{r4, r5, r6, pc}
 800e6f4:	ab01      	add	r3, sp, #4
 800e6f6:	466a      	mov	r2, sp
 800e6f8:	f7ff ffca 	bl	800e690 <__swhatbuf_r>
 800e6fc:	9900      	ldr	r1, [sp, #0]
 800e6fe:	4605      	mov	r5, r0
 800e700:	4630      	mov	r0, r6
 800e702:	f7ff f97f 	bl	800da04 <_malloc_r>
 800e706:	b948      	cbnz	r0, 800e71c <__smakebuf_r+0x44>
 800e708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e70c:	059a      	lsls	r2, r3, #22
 800e70e:	d4ef      	bmi.n	800e6f0 <__smakebuf_r+0x18>
 800e710:	f023 0303 	bic.w	r3, r3, #3
 800e714:	f043 0302 	orr.w	r3, r3, #2
 800e718:	81a3      	strh	r3, [r4, #12]
 800e71a:	e7e3      	b.n	800e6e4 <__smakebuf_r+0xc>
 800e71c:	4b0d      	ldr	r3, [pc, #52]	; (800e754 <__smakebuf_r+0x7c>)
 800e71e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e720:	89a3      	ldrh	r3, [r4, #12]
 800e722:	6020      	str	r0, [r4, #0]
 800e724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e728:	81a3      	strh	r3, [r4, #12]
 800e72a:	9b00      	ldr	r3, [sp, #0]
 800e72c:	6163      	str	r3, [r4, #20]
 800e72e:	9b01      	ldr	r3, [sp, #4]
 800e730:	6120      	str	r0, [r4, #16]
 800e732:	b15b      	cbz	r3, 800e74c <__smakebuf_r+0x74>
 800e734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e738:	4630      	mov	r0, r6
 800e73a:	f000 f8d1 	bl	800e8e0 <_isatty_r>
 800e73e:	b128      	cbz	r0, 800e74c <__smakebuf_r+0x74>
 800e740:	89a3      	ldrh	r3, [r4, #12]
 800e742:	f023 0303 	bic.w	r3, r3, #3
 800e746:	f043 0301 	orr.w	r3, r3, #1
 800e74a:	81a3      	strh	r3, [r4, #12]
 800e74c:	89a0      	ldrh	r0, [r4, #12]
 800e74e:	4305      	orrs	r5, r0
 800e750:	81a5      	strh	r5, [r4, #12]
 800e752:	e7cd      	b.n	800e6f0 <__smakebuf_r+0x18>
 800e754:	0800e4e9 	.word	0x0800e4e9

0800e758 <_malloc_usable_size_r>:
 800e758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e75c:	1f18      	subs	r0, r3, #4
 800e75e:	2b00      	cmp	r3, #0
 800e760:	bfbc      	itt	lt
 800e762:	580b      	ldrlt	r3, [r1, r0]
 800e764:	18c0      	addlt	r0, r0, r3
 800e766:	4770      	bx	lr

0800e768 <_raise_r>:
 800e768:	291f      	cmp	r1, #31
 800e76a:	b538      	push	{r3, r4, r5, lr}
 800e76c:	4604      	mov	r4, r0
 800e76e:	460d      	mov	r5, r1
 800e770:	d904      	bls.n	800e77c <_raise_r+0x14>
 800e772:	2316      	movs	r3, #22
 800e774:	6003      	str	r3, [r0, #0]
 800e776:	f04f 30ff 	mov.w	r0, #4294967295
 800e77a:	bd38      	pop	{r3, r4, r5, pc}
 800e77c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e77e:	b112      	cbz	r2, 800e786 <_raise_r+0x1e>
 800e780:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e784:	b94b      	cbnz	r3, 800e79a <_raise_r+0x32>
 800e786:	4620      	mov	r0, r4
 800e788:	f000 f830 	bl	800e7ec <_getpid_r>
 800e78c:	462a      	mov	r2, r5
 800e78e:	4601      	mov	r1, r0
 800e790:	4620      	mov	r0, r4
 800e792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e796:	f000 b817 	b.w	800e7c8 <_kill_r>
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	d00a      	beq.n	800e7b4 <_raise_r+0x4c>
 800e79e:	1c59      	adds	r1, r3, #1
 800e7a0:	d103      	bne.n	800e7aa <_raise_r+0x42>
 800e7a2:	2316      	movs	r3, #22
 800e7a4:	6003      	str	r3, [r0, #0]
 800e7a6:	2001      	movs	r0, #1
 800e7a8:	e7e7      	b.n	800e77a <_raise_r+0x12>
 800e7aa:	2400      	movs	r4, #0
 800e7ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e7b0:	4628      	mov	r0, r5
 800e7b2:	4798      	blx	r3
 800e7b4:	2000      	movs	r0, #0
 800e7b6:	e7e0      	b.n	800e77a <_raise_r+0x12>

0800e7b8 <raise>:
 800e7b8:	4b02      	ldr	r3, [pc, #8]	; (800e7c4 <raise+0xc>)
 800e7ba:	4601      	mov	r1, r0
 800e7bc:	6818      	ldr	r0, [r3, #0]
 800e7be:	f7ff bfd3 	b.w	800e768 <_raise_r>
 800e7c2:	bf00      	nop
 800e7c4:	20000084 	.word	0x20000084

0800e7c8 <_kill_r>:
 800e7c8:	b538      	push	{r3, r4, r5, lr}
 800e7ca:	4d07      	ldr	r5, [pc, #28]	; (800e7e8 <_kill_r+0x20>)
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	4604      	mov	r4, r0
 800e7d0:	4608      	mov	r0, r1
 800e7d2:	4611      	mov	r1, r2
 800e7d4:	602b      	str	r3, [r5, #0]
 800e7d6:	f7f5 fb61 	bl	8003e9c <_kill>
 800e7da:	1c43      	adds	r3, r0, #1
 800e7dc:	d102      	bne.n	800e7e4 <_kill_r+0x1c>
 800e7de:	682b      	ldr	r3, [r5, #0]
 800e7e0:	b103      	cbz	r3, 800e7e4 <_kill_r+0x1c>
 800e7e2:	6023      	str	r3, [r4, #0]
 800e7e4:	bd38      	pop	{r3, r4, r5, pc}
 800e7e6:	bf00      	nop
 800e7e8:	20000dc4 	.word	0x20000dc4

0800e7ec <_getpid_r>:
 800e7ec:	f7f5 bb4e 	b.w	8003e8c <_getpid>

0800e7f0 <__sread>:
 800e7f0:	b510      	push	{r4, lr}
 800e7f2:	460c      	mov	r4, r1
 800e7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7f8:	f000 f894 	bl	800e924 <_read_r>
 800e7fc:	2800      	cmp	r0, #0
 800e7fe:	bfab      	itete	ge
 800e800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e802:	89a3      	ldrhlt	r3, [r4, #12]
 800e804:	181b      	addge	r3, r3, r0
 800e806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e80a:	bfac      	ite	ge
 800e80c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e80e:	81a3      	strhlt	r3, [r4, #12]
 800e810:	bd10      	pop	{r4, pc}

0800e812 <__swrite>:
 800e812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e816:	461f      	mov	r7, r3
 800e818:	898b      	ldrh	r3, [r1, #12]
 800e81a:	05db      	lsls	r3, r3, #23
 800e81c:	4605      	mov	r5, r0
 800e81e:	460c      	mov	r4, r1
 800e820:	4616      	mov	r6, r2
 800e822:	d505      	bpl.n	800e830 <__swrite+0x1e>
 800e824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e828:	2302      	movs	r3, #2
 800e82a:	2200      	movs	r2, #0
 800e82c:	f000 f868 	bl	800e900 <_lseek_r>
 800e830:	89a3      	ldrh	r3, [r4, #12]
 800e832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e83a:	81a3      	strh	r3, [r4, #12]
 800e83c:	4632      	mov	r2, r6
 800e83e:	463b      	mov	r3, r7
 800e840:	4628      	mov	r0, r5
 800e842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e846:	f000 b817 	b.w	800e878 <_write_r>

0800e84a <__sseek>:
 800e84a:	b510      	push	{r4, lr}
 800e84c:	460c      	mov	r4, r1
 800e84e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e852:	f000 f855 	bl	800e900 <_lseek_r>
 800e856:	1c43      	adds	r3, r0, #1
 800e858:	89a3      	ldrh	r3, [r4, #12]
 800e85a:	bf15      	itete	ne
 800e85c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e85e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e866:	81a3      	strheq	r3, [r4, #12]
 800e868:	bf18      	it	ne
 800e86a:	81a3      	strhne	r3, [r4, #12]
 800e86c:	bd10      	pop	{r4, pc}

0800e86e <__sclose>:
 800e86e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e872:	f000 b813 	b.w	800e89c <_close_r>
	...

0800e878 <_write_r>:
 800e878:	b538      	push	{r3, r4, r5, lr}
 800e87a:	4d07      	ldr	r5, [pc, #28]	; (800e898 <_write_r+0x20>)
 800e87c:	4604      	mov	r4, r0
 800e87e:	4608      	mov	r0, r1
 800e880:	4611      	mov	r1, r2
 800e882:	2200      	movs	r2, #0
 800e884:	602a      	str	r2, [r5, #0]
 800e886:	461a      	mov	r2, r3
 800e888:	f7f5 fb3f 	bl	8003f0a <_write>
 800e88c:	1c43      	adds	r3, r0, #1
 800e88e:	d102      	bne.n	800e896 <_write_r+0x1e>
 800e890:	682b      	ldr	r3, [r5, #0]
 800e892:	b103      	cbz	r3, 800e896 <_write_r+0x1e>
 800e894:	6023      	str	r3, [r4, #0]
 800e896:	bd38      	pop	{r3, r4, r5, pc}
 800e898:	20000dc4 	.word	0x20000dc4

0800e89c <_close_r>:
 800e89c:	b538      	push	{r3, r4, r5, lr}
 800e89e:	4d06      	ldr	r5, [pc, #24]	; (800e8b8 <_close_r+0x1c>)
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	4604      	mov	r4, r0
 800e8a4:	4608      	mov	r0, r1
 800e8a6:	602b      	str	r3, [r5, #0]
 800e8a8:	f7f5 fb4b 	bl	8003f42 <_close>
 800e8ac:	1c43      	adds	r3, r0, #1
 800e8ae:	d102      	bne.n	800e8b6 <_close_r+0x1a>
 800e8b0:	682b      	ldr	r3, [r5, #0]
 800e8b2:	b103      	cbz	r3, 800e8b6 <_close_r+0x1a>
 800e8b4:	6023      	str	r3, [r4, #0]
 800e8b6:	bd38      	pop	{r3, r4, r5, pc}
 800e8b8:	20000dc4 	.word	0x20000dc4

0800e8bc <_fstat_r>:
 800e8bc:	b538      	push	{r3, r4, r5, lr}
 800e8be:	4d07      	ldr	r5, [pc, #28]	; (800e8dc <_fstat_r+0x20>)
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	4608      	mov	r0, r1
 800e8c6:	4611      	mov	r1, r2
 800e8c8:	602b      	str	r3, [r5, #0]
 800e8ca:	f7f5 fb46 	bl	8003f5a <_fstat>
 800e8ce:	1c43      	adds	r3, r0, #1
 800e8d0:	d102      	bne.n	800e8d8 <_fstat_r+0x1c>
 800e8d2:	682b      	ldr	r3, [r5, #0]
 800e8d4:	b103      	cbz	r3, 800e8d8 <_fstat_r+0x1c>
 800e8d6:	6023      	str	r3, [r4, #0]
 800e8d8:	bd38      	pop	{r3, r4, r5, pc}
 800e8da:	bf00      	nop
 800e8dc:	20000dc4 	.word	0x20000dc4

0800e8e0 <_isatty_r>:
 800e8e0:	b538      	push	{r3, r4, r5, lr}
 800e8e2:	4d06      	ldr	r5, [pc, #24]	; (800e8fc <_isatty_r+0x1c>)
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	4608      	mov	r0, r1
 800e8ea:	602b      	str	r3, [r5, #0]
 800e8ec:	f7f5 fb45 	bl	8003f7a <_isatty>
 800e8f0:	1c43      	adds	r3, r0, #1
 800e8f2:	d102      	bne.n	800e8fa <_isatty_r+0x1a>
 800e8f4:	682b      	ldr	r3, [r5, #0]
 800e8f6:	b103      	cbz	r3, 800e8fa <_isatty_r+0x1a>
 800e8f8:	6023      	str	r3, [r4, #0]
 800e8fa:	bd38      	pop	{r3, r4, r5, pc}
 800e8fc:	20000dc4 	.word	0x20000dc4

0800e900 <_lseek_r>:
 800e900:	b538      	push	{r3, r4, r5, lr}
 800e902:	4d07      	ldr	r5, [pc, #28]	; (800e920 <_lseek_r+0x20>)
 800e904:	4604      	mov	r4, r0
 800e906:	4608      	mov	r0, r1
 800e908:	4611      	mov	r1, r2
 800e90a:	2200      	movs	r2, #0
 800e90c:	602a      	str	r2, [r5, #0]
 800e90e:	461a      	mov	r2, r3
 800e910:	f7f5 fb3e 	bl	8003f90 <_lseek>
 800e914:	1c43      	adds	r3, r0, #1
 800e916:	d102      	bne.n	800e91e <_lseek_r+0x1e>
 800e918:	682b      	ldr	r3, [r5, #0]
 800e91a:	b103      	cbz	r3, 800e91e <_lseek_r+0x1e>
 800e91c:	6023      	str	r3, [r4, #0]
 800e91e:	bd38      	pop	{r3, r4, r5, pc}
 800e920:	20000dc4 	.word	0x20000dc4

0800e924 <_read_r>:
 800e924:	b538      	push	{r3, r4, r5, lr}
 800e926:	4d07      	ldr	r5, [pc, #28]	; (800e944 <_read_r+0x20>)
 800e928:	4604      	mov	r4, r0
 800e92a:	4608      	mov	r0, r1
 800e92c:	4611      	mov	r1, r2
 800e92e:	2200      	movs	r2, #0
 800e930:	602a      	str	r2, [r5, #0]
 800e932:	461a      	mov	r2, r3
 800e934:	f7f5 facc 	bl	8003ed0 <_read>
 800e938:	1c43      	adds	r3, r0, #1
 800e93a:	d102      	bne.n	800e942 <_read_r+0x1e>
 800e93c:	682b      	ldr	r3, [r5, #0]
 800e93e:	b103      	cbz	r3, 800e942 <_read_r+0x1e>
 800e940:	6023      	str	r3, [r4, #0]
 800e942:	bd38      	pop	{r3, r4, r5, pc}
 800e944:	20000dc4 	.word	0x20000dc4

0800e948 <atan>:
 800e948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e94c:	ec55 4b10 	vmov	r4, r5, d0
 800e950:	4bc3      	ldr	r3, [pc, #780]	; (800ec60 <atan+0x318>)
 800e952:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e956:	429e      	cmp	r6, r3
 800e958:	46ab      	mov	fp, r5
 800e95a:	dd18      	ble.n	800e98e <atan+0x46>
 800e95c:	4bc1      	ldr	r3, [pc, #772]	; (800ec64 <atan+0x31c>)
 800e95e:	429e      	cmp	r6, r3
 800e960:	dc01      	bgt.n	800e966 <atan+0x1e>
 800e962:	d109      	bne.n	800e978 <atan+0x30>
 800e964:	b144      	cbz	r4, 800e978 <atan+0x30>
 800e966:	4622      	mov	r2, r4
 800e968:	462b      	mov	r3, r5
 800e96a:	4620      	mov	r0, r4
 800e96c:	4629      	mov	r1, r5
 800e96e:	f7f1 fc8d 	bl	800028c <__adddf3>
 800e972:	4604      	mov	r4, r0
 800e974:	460d      	mov	r5, r1
 800e976:	e006      	b.n	800e986 <atan+0x3e>
 800e978:	f1bb 0f00 	cmp.w	fp, #0
 800e97c:	f300 8131 	bgt.w	800ebe2 <atan+0x29a>
 800e980:	a59b      	add	r5, pc, #620	; (adr r5, 800ebf0 <atan+0x2a8>)
 800e982:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e986:	ec45 4b10 	vmov	d0, r4, r5
 800e98a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e98e:	4bb6      	ldr	r3, [pc, #728]	; (800ec68 <atan+0x320>)
 800e990:	429e      	cmp	r6, r3
 800e992:	dc14      	bgt.n	800e9be <atan+0x76>
 800e994:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e998:	429e      	cmp	r6, r3
 800e99a:	dc0d      	bgt.n	800e9b8 <atan+0x70>
 800e99c:	a396      	add	r3, pc, #600	; (adr r3, 800ebf8 <atan+0x2b0>)
 800e99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a2:	ee10 0a10 	vmov	r0, s0
 800e9a6:	4629      	mov	r1, r5
 800e9a8:	f7f1 fc70 	bl	800028c <__adddf3>
 800e9ac:	4baf      	ldr	r3, [pc, #700]	; (800ec6c <atan+0x324>)
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f7f2 f8b2 	bl	8000b18 <__aeabi_dcmpgt>
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	d1e6      	bne.n	800e986 <atan+0x3e>
 800e9b8:	f04f 3aff 	mov.w	sl, #4294967295
 800e9bc:	e02b      	b.n	800ea16 <atan+0xce>
 800e9be:	f000 f963 	bl	800ec88 <fabs>
 800e9c2:	4bab      	ldr	r3, [pc, #684]	; (800ec70 <atan+0x328>)
 800e9c4:	429e      	cmp	r6, r3
 800e9c6:	ec55 4b10 	vmov	r4, r5, d0
 800e9ca:	f300 80bf 	bgt.w	800eb4c <atan+0x204>
 800e9ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e9d2:	429e      	cmp	r6, r3
 800e9d4:	f300 80a0 	bgt.w	800eb18 <atan+0x1d0>
 800e9d8:	ee10 2a10 	vmov	r2, s0
 800e9dc:	ee10 0a10 	vmov	r0, s0
 800e9e0:	462b      	mov	r3, r5
 800e9e2:	4629      	mov	r1, r5
 800e9e4:	f7f1 fc52 	bl	800028c <__adddf3>
 800e9e8:	4ba0      	ldr	r3, [pc, #640]	; (800ec6c <atan+0x324>)
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f7f1 fc4c 	bl	8000288 <__aeabi_dsub>
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	4606      	mov	r6, r0
 800e9f4:	460f      	mov	r7, r1
 800e9f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	4629      	mov	r1, r5
 800e9fe:	f7f1 fc45 	bl	800028c <__adddf3>
 800ea02:	4602      	mov	r2, r0
 800ea04:	460b      	mov	r3, r1
 800ea06:	4630      	mov	r0, r6
 800ea08:	4639      	mov	r1, r7
 800ea0a:	f7f1 ff1f 	bl	800084c <__aeabi_ddiv>
 800ea0e:	f04f 0a00 	mov.w	sl, #0
 800ea12:	4604      	mov	r4, r0
 800ea14:	460d      	mov	r5, r1
 800ea16:	4622      	mov	r2, r4
 800ea18:	462b      	mov	r3, r5
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	4629      	mov	r1, r5
 800ea1e:	f7f1 fdeb 	bl	80005f8 <__aeabi_dmul>
 800ea22:	4602      	mov	r2, r0
 800ea24:	460b      	mov	r3, r1
 800ea26:	4680      	mov	r8, r0
 800ea28:	4689      	mov	r9, r1
 800ea2a:	f7f1 fde5 	bl	80005f8 <__aeabi_dmul>
 800ea2e:	a374      	add	r3, pc, #464	; (adr r3, 800ec00 <atan+0x2b8>)
 800ea30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea34:	4606      	mov	r6, r0
 800ea36:	460f      	mov	r7, r1
 800ea38:	f7f1 fdde 	bl	80005f8 <__aeabi_dmul>
 800ea3c:	a372      	add	r3, pc, #456	; (adr r3, 800ec08 <atan+0x2c0>)
 800ea3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea42:	f7f1 fc23 	bl	800028c <__adddf3>
 800ea46:	4632      	mov	r2, r6
 800ea48:	463b      	mov	r3, r7
 800ea4a:	f7f1 fdd5 	bl	80005f8 <__aeabi_dmul>
 800ea4e:	a370      	add	r3, pc, #448	; (adr r3, 800ec10 <atan+0x2c8>)
 800ea50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea54:	f7f1 fc1a 	bl	800028c <__adddf3>
 800ea58:	4632      	mov	r2, r6
 800ea5a:	463b      	mov	r3, r7
 800ea5c:	f7f1 fdcc 	bl	80005f8 <__aeabi_dmul>
 800ea60:	a36d      	add	r3, pc, #436	; (adr r3, 800ec18 <atan+0x2d0>)
 800ea62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea66:	f7f1 fc11 	bl	800028c <__adddf3>
 800ea6a:	4632      	mov	r2, r6
 800ea6c:	463b      	mov	r3, r7
 800ea6e:	f7f1 fdc3 	bl	80005f8 <__aeabi_dmul>
 800ea72:	a36b      	add	r3, pc, #428	; (adr r3, 800ec20 <atan+0x2d8>)
 800ea74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea78:	f7f1 fc08 	bl	800028c <__adddf3>
 800ea7c:	4632      	mov	r2, r6
 800ea7e:	463b      	mov	r3, r7
 800ea80:	f7f1 fdba 	bl	80005f8 <__aeabi_dmul>
 800ea84:	a368      	add	r3, pc, #416	; (adr r3, 800ec28 <atan+0x2e0>)
 800ea86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8a:	f7f1 fbff 	bl	800028c <__adddf3>
 800ea8e:	4642      	mov	r2, r8
 800ea90:	464b      	mov	r3, r9
 800ea92:	f7f1 fdb1 	bl	80005f8 <__aeabi_dmul>
 800ea96:	a366      	add	r3, pc, #408	; (adr r3, 800ec30 <atan+0x2e8>)
 800ea98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9c:	4680      	mov	r8, r0
 800ea9e:	4689      	mov	r9, r1
 800eaa0:	4630      	mov	r0, r6
 800eaa2:	4639      	mov	r1, r7
 800eaa4:	f7f1 fda8 	bl	80005f8 <__aeabi_dmul>
 800eaa8:	a363      	add	r3, pc, #396	; (adr r3, 800ec38 <atan+0x2f0>)
 800eaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaae:	f7f1 fbeb 	bl	8000288 <__aeabi_dsub>
 800eab2:	4632      	mov	r2, r6
 800eab4:	463b      	mov	r3, r7
 800eab6:	f7f1 fd9f 	bl	80005f8 <__aeabi_dmul>
 800eaba:	a361      	add	r3, pc, #388	; (adr r3, 800ec40 <atan+0x2f8>)
 800eabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac0:	f7f1 fbe2 	bl	8000288 <__aeabi_dsub>
 800eac4:	4632      	mov	r2, r6
 800eac6:	463b      	mov	r3, r7
 800eac8:	f7f1 fd96 	bl	80005f8 <__aeabi_dmul>
 800eacc:	a35e      	add	r3, pc, #376	; (adr r3, 800ec48 <atan+0x300>)
 800eace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead2:	f7f1 fbd9 	bl	8000288 <__aeabi_dsub>
 800ead6:	4632      	mov	r2, r6
 800ead8:	463b      	mov	r3, r7
 800eada:	f7f1 fd8d 	bl	80005f8 <__aeabi_dmul>
 800eade:	a35c      	add	r3, pc, #368	; (adr r3, 800ec50 <atan+0x308>)
 800eae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae4:	f7f1 fbd0 	bl	8000288 <__aeabi_dsub>
 800eae8:	4632      	mov	r2, r6
 800eaea:	463b      	mov	r3, r7
 800eaec:	f7f1 fd84 	bl	80005f8 <__aeabi_dmul>
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	460b      	mov	r3, r1
 800eaf4:	4640      	mov	r0, r8
 800eaf6:	4649      	mov	r1, r9
 800eaf8:	f7f1 fbc8 	bl	800028c <__adddf3>
 800eafc:	4622      	mov	r2, r4
 800eafe:	462b      	mov	r3, r5
 800eb00:	f7f1 fd7a 	bl	80005f8 <__aeabi_dmul>
 800eb04:	f1ba 3fff 	cmp.w	sl, #4294967295
 800eb08:	4602      	mov	r2, r0
 800eb0a:	460b      	mov	r3, r1
 800eb0c:	d14b      	bne.n	800eba6 <atan+0x25e>
 800eb0e:	4620      	mov	r0, r4
 800eb10:	4629      	mov	r1, r5
 800eb12:	f7f1 fbb9 	bl	8000288 <__aeabi_dsub>
 800eb16:	e72c      	b.n	800e972 <atan+0x2a>
 800eb18:	ee10 0a10 	vmov	r0, s0
 800eb1c:	4b53      	ldr	r3, [pc, #332]	; (800ec6c <atan+0x324>)
 800eb1e:	2200      	movs	r2, #0
 800eb20:	4629      	mov	r1, r5
 800eb22:	f7f1 fbb1 	bl	8000288 <__aeabi_dsub>
 800eb26:	4b51      	ldr	r3, [pc, #324]	; (800ec6c <atan+0x324>)
 800eb28:	4606      	mov	r6, r0
 800eb2a:	460f      	mov	r7, r1
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	4620      	mov	r0, r4
 800eb30:	4629      	mov	r1, r5
 800eb32:	f7f1 fbab 	bl	800028c <__adddf3>
 800eb36:	4602      	mov	r2, r0
 800eb38:	460b      	mov	r3, r1
 800eb3a:	4630      	mov	r0, r6
 800eb3c:	4639      	mov	r1, r7
 800eb3e:	f7f1 fe85 	bl	800084c <__aeabi_ddiv>
 800eb42:	f04f 0a01 	mov.w	sl, #1
 800eb46:	4604      	mov	r4, r0
 800eb48:	460d      	mov	r5, r1
 800eb4a:	e764      	b.n	800ea16 <atan+0xce>
 800eb4c:	4b49      	ldr	r3, [pc, #292]	; (800ec74 <atan+0x32c>)
 800eb4e:	429e      	cmp	r6, r3
 800eb50:	da1d      	bge.n	800eb8e <atan+0x246>
 800eb52:	ee10 0a10 	vmov	r0, s0
 800eb56:	4b48      	ldr	r3, [pc, #288]	; (800ec78 <atan+0x330>)
 800eb58:	2200      	movs	r2, #0
 800eb5a:	4629      	mov	r1, r5
 800eb5c:	f7f1 fb94 	bl	8000288 <__aeabi_dsub>
 800eb60:	4b45      	ldr	r3, [pc, #276]	; (800ec78 <atan+0x330>)
 800eb62:	4606      	mov	r6, r0
 800eb64:	460f      	mov	r7, r1
 800eb66:	2200      	movs	r2, #0
 800eb68:	4620      	mov	r0, r4
 800eb6a:	4629      	mov	r1, r5
 800eb6c:	f7f1 fd44 	bl	80005f8 <__aeabi_dmul>
 800eb70:	4b3e      	ldr	r3, [pc, #248]	; (800ec6c <atan+0x324>)
 800eb72:	2200      	movs	r2, #0
 800eb74:	f7f1 fb8a 	bl	800028c <__adddf3>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	4630      	mov	r0, r6
 800eb7e:	4639      	mov	r1, r7
 800eb80:	f7f1 fe64 	bl	800084c <__aeabi_ddiv>
 800eb84:	f04f 0a02 	mov.w	sl, #2
 800eb88:	4604      	mov	r4, r0
 800eb8a:	460d      	mov	r5, r1
 800eb8c:	e743      	b.n	800ea16 <atan+0xce>
 800eb8e:	462b      	mov	r3, r5
 800eb90:	ee10 2a10 	vmov	r2, s0
 800eb94:	4939      	ldr	r1, [pc, #228]	; (800ec7c <atan+0x334>)
 800eb96:	2000      	movs	r0, #0
 800eb98:	f7f1 fe58 	bl	800084c <__aeabi_ddiv>
 800eb9c:	f04f 0a03 	mov.w	sl, #3
 800eba0:	4604      	mov	r4, r0
 800eba2:	460d      	mov	r5, r1
 800eba4:	e737      	b.n	800ea16 <atan+0xce>
 800eba6:	4b36      	ldr	r3, [pc, #216]	; (800ec80 <atan+0x338>)
 800eba8:	4e36      	ldr	r6, [pc, #216]	; (800ec84 <atan+0x33c>)
 800ebaa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ebae:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ebb2:	e9da 2300 	ldrd	r2, r3, [sl]
 800ebb6:	f7f1 fb67 	bl	8000288 <__aeabi_dsub>
 800ebba:	4622      	mov	r2, r4
 800ebbc:	462b      	mov	r3, r5
 800ebbe:	f7f1 fb63 	bl	8000288 <__aeabi_dsub>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ebca:	f7f1 fb5d 	bl	8000288 <__aeabi_dsub>
 800ebce:	f1bb 0f00 	cmp.w	fp, #0
 800ebd2:	4604      	mov	r4, r0
 800ebd4:	460d      	mov	r5, r1
 800ebd6:	f6bf aed6 	bge.w	800e986 <atan+0x3e>
 800ebda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ebde:	461d      	mov	r5, r3
 800ebe0:	e6d1      	b.n	800e986 <atan+0x3e>
 800ebe2:	a51d      	add	r5, pc, #116	; (adr r5, 800ec58 <atan+0x310>)
 800ebe4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ebe8:	e6cd      	b.n	800e986 <atan+0x3e>
 800ebea:	bf00      	nop
 800ebec:	f3af 8000 	nop.w
 800ebf0:	54442d18 	.word	0x54442d18
 800ebf4:	bff921fb 	.word	0xbff921fb
 800ebf8:	8800759c 	.word	0x8800759c
 800ebfc:	7e37e43c 	.word	0x7e37e43c
 800ec00:	e322da11 	.word	0xe322da11
 800ec04:	3f90ad3a 	.word	0x3f90ad3a
 800ec08:	24760deb 	.word	0x24760deb
 800ec0c:	3fa97b4b 	.word	0x3fa97b4b
 800ec10:	a0d03d51 	.word	0xa0d03d51
 800ec14:	3fb10d66 	.word	0x3fb10d66
 800ec18:	c54c206e 	.word	0xc54c206e
 800ec1c:	3fb745cd 	.word	0x3fb745cd
 800ec20:	920083ff 	.word	0x920083ff
 800ec24:	3fc24924 	.word	0x3fc24924
 800ec28:	5555550d 	.word	0x5555550d
 800ec2c:	3fd55555 	.word	0x3fd55555
 800ec30:	2c6a6c2f 	.word	0x2c6a6c2f
 800ec34:	bfa2b444 	.word	0xbfa2b444
 800ec38:	52defd9a 	.word	0x52defd9a
 800ec3c:	3fadde2d 	.word	0x3fadde2d
 800ec40:	af749a6d 	.word	0xaf749a6d
 800ec44:	3fb3b0f2 	.word	0x3fb3b0f2
 800ec48:	fe231671 	.word	0xfe231671
 800ec4c:	3fbc71c6 	.word	0x3fbc71c6
 800ec50:	9998ebc4 	.word	0x9998ebc4
 800ec54:	3fc99999 	.word	0x3fc99999
 800ec58:	54442d18 	.word	0x54442d18
 800ec5c:	3ff921fb 	.word	0x3ff921fb
 800ec60:	440fffff 	.word	0x440fffff
 800ec64:	7ff00000 	.word	0x7ff00000
 800ec68:	3fdbffff 	.word	0x3fdbffff
 800ec6c:	3ff00000 	.word	0x3ff00000
 800ec70:	3ff2ffff 	.word	0x3ff2ffff
 800ec74:	40038000 	.word	0x40038000
 800ec78:	3ff80000 	.word	0x3ff80000
 800ec7c:	bff00000 	.word	0xbff00000
 800ec80:	080101b8 	.word	0x080101b8
 800ec84:	08010198 	.word	0x08010198

0800ec88 <fabs>:
 800ec88:	ec51 0b10 	vmov	r0, r1, d0
 800ec8c:	ee10 2a10 	vmov	r2, s0
 800ec90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ec94:	ec43 2b10 	vmov	d0, r2, r3
 800ec98:	4770      	bx	lr
	...

0800ec9c <pow>:
 800ec9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eca0:	ec59 8b10 	vmov	r8, r9, d0
 800eca4:	ec57 6b11 	vmov	r6, r7, d1
 800eca8:	f000 f8da 	bl	800ee60 <__ieee754_pow>
 800ecac:	4b4e      	ldr	r3, [pc, #312]	; (800ede8 <pow+0x14c>)
 800ecae:	f993 3000 	ldrsb.w	r3, [r3]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	ec55 4b10 	vmov	r4, r5, d0
 800ecb8:	d015      	beq.n	800ece6 <pow+0x4a>
 800ecba:	4632      	mov	r2, r6
 800ecbc:	463b      	mov	r3, r7
 800ecbe:	4630      	mov	r0, r6
 800ecc0:	4639      	mov	r1, r7
 800ecc2:	f7f1 ff33 	bl	8000b2c <__aeabi_dcmpun>
 800ecc6:	b970      	cbnz	r0, 800ece6 <pow+0x4a>
 800ecc8:	4642      	mov	r2, r8
 800ecca:	464b      	mov	r3, r9
 800eccc:	4640      	mov	r0, r8
 800ecce:	4649      	mov	r1, r9
 800ecd0:	f7f1 ff2c 	bl	8000b2c <__aeabi_dcmpun>
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	b148      	cbz	r0, 800ecee <pow+0x52>
 800ecda:	4630      	mov	r0, r6
 800ecdc:	4639      	mov	r1, r7
 800ecde:	f7f1 fef3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ece2:	2800      	cmp	r0, #0
 800ece4:	d17d      	bne.n	800ede2 <pow+0x146>
 800ece6:	ec45 4b10 	vmov	d0, r4, r5
 800ecea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecee:	4640      	mov	r0, r8
 800ecf0:	4649      	mov	r1, r9
 800ecf2:	f7f1 fee9 	bl	8000ac8 <__aeabi_dcmpeq>
 800ecf6:	b1e0      	cbz	r0, 800ed32 <pow+0x96>
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	4630      	mov	r0, r6
 800ecfe:	4639      	mov	r1, r7
 800ed00:	f7f1 fee2 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed04:	2800      	cmp	r0, #0
 800ed06:	d16c      	bne.n	800ede2 <pow+0x146>
 800ed08:	ec47 6b10 	vmov	d0, r6, r7
 800ed0c:	f000 fe7e 	bl	800fa0c <finite>
 800ed10:	2800      	cmp	r0, #0
 800ed12:	d0e8      	beq.n	800ece6 <pow+0x4a>
 800ed14:	2200      	movs	r2, #0
 800ed16:	2300      	movs	r3, #0
 800ed18:	4630      	mov	r0, r6
 800ed1a:	4639      	mov	r1, r7
 800ed1c:	f7f1 fede 	bl	8000adc <__aeabi_dcmplt>
 800ed20:	2800      	cmp	r0, #0
 800ed22:	d0e0      	beq.n	800ece6 <pow+0x4a>
 800ed24:	f7fb f9ba 	bl	800a09c <__errno>
 800ed28:	2321      	movs	r3, #33	; 0x21
 800ed2a:	6003      	str	r3, [r0, #0]
 800ed2c:	2400      	movs	r4, #0
 800ed2e:	4d2f      	ldr	r5, [pc, #188]	; (800edec <pow+0x150>)
 800ed30:	e7d9      	b.n	800ece6 <pow+0x4a>
 800ed32:	ec45 4b10 	vmov	d0, r4, r5
 800ed36:	f000 fe69 	bl	800fa0c <finite>
 800ed3a:	bbb8      	cbnz	r0, 800edac <pow+0x110>
 800ed3c:	ec49 8b10 	vmov	d0, r8, r9
 800ed40:	f000 fe64 	bl	800fa0c <finite>
 800ed44:	b390      	cbz	r0, 800edac <pow+0x110>
 800ed46:	ec47 6b10 	vmov	d0, r6, r7
 800ed4a:	f000 fe5f 	bl	800fa0c <finite>
 800ed4e:	b368      	cbz	r0, 800edac <pow+0x110>
 800ed50:	4622      	mov	r2, r4
 800ed52:	462b      	mov	r3, r5
 800ed54:	4620      	mov	r0, r4
 800ed56:	4629      	mov	r1, r5
 800ed58:	f7f1 fee8 	bl	8000b2c <__aeabi_dcmpun>
 800ed5c:	b160      	cbz	r0, 800ed78 <pow+0xdc>
 800ed5e:	f7fb f99d 	bl	800a09c <__errno>
 800ed62:	2321      	movs	r3, #33	; 0x21
 800ed64:	6003      	str	r3, [r0, #0]
 800ed66:	2200      	movs	r2, #0
 800ed68:	2300      	movs	r3, #0
 800ed6a:	4610      	mov	r0, r2
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	f7f1 fd6d 	bl	800084c <__aeabi_ddiv>
 800ed72:	4604      	mov	r4, r0
 800ed74:	460d      	mov	r5, r1
 800ed76:	e7b6      	b.n	800ece6 <pow+0x4a>
 800ed78:	f7fb f990 	bl	800a09c <__errno>
 800ed7c:	2322      	movs	r3, #34	; 0x22
 800ed7e:	6003      	str	r3, [r0, #0]
 800ed80:	2200      	movs	r2, #0
 800ed82:	2300      	movs	r3, #0
 800ed84:	4640      	mov	r0, r8
 800ed86:	4649      	mov	r1, r9
 800ed88:	f7f1 fea8 	bl	8000adc <__aeabi_dcmplt>
 800ed8c:	2400      	movs	r4, #0
 800ed8e:	b158      	cbz	r0, 800eda8 <pow+0x10c>
 800ed90:	ec47 6b10 	vmov	d0, r6, r7
 800ed94:	f000 fe46 	bl	800fa24 <rint>
 800ed98:	4632      	mov	r2, r6
 800ed9a:	ec51 0b10 	vmov	r0, r1, d0
 800ed9e:	463b      	mov	r3, r7
 800eda0:	f7f1 fe92 	bl	8000ac8 <__aeabi_dcmpeq>
 800eda4:	2800      	cmp	r0, #0
 800eda6:	d0c2      	beq.n	800ed2e <pow+0x92>
 800eda8:	4d11      	ldr	r5, [pc, #68]	; (800edf0 <pow+0x154>)
 800edaa:	e79c      	b.n	800ece6 <pow+0x4a>
 800edac:	2200      	movs	r2, #0
 800edae:	2300      	movs	r3, #0
 800edb0:	4620      	mov	r0, r4
 800edb2:	4629      	mov	r1, r5
 800edb4:	f7f1 fe88 	bl	8000ac8 <__aeabi_dcmpeq>
 800edb8:	2800      	cmp	r0, #0
 800edba:	d094      	beq.n	800ece6 <pow+0x4a>
 800edbc:	ec49 8b10 	vmov	d0, r8, r9
 800edc0:	f000 fe24 	bl	800fa0c <finite>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d08e      	beq.n	800ece6 <pow+0x4a>
 800edc8:	ec47 6b10 	vmov	d0, r6, r7
 800edcc:	f000 fe1e 	bl	800fa0c <finite>
 800edd0:	2800      	cmp	r0, #0
 800edd2:	d088      	beq.n	800ece6 <pow+0x4a>
 800edd4:	f7fb f962 	bl	800a09c <__errno>
 800edd8:	2322      	movs	r3, #34	; 0x22
 800edda:	6003      	str	r3, [r0, #0]
 800eddc:	2400      	movs	r4, #0
 800edde:	2500      	movs	r5, #0
 800ede0:	e781      	b.n	800ece6 <pow+0x4a>
 800ede2:	4d04      	ldr	r5, [pc, #16]	; (800edf4 <pow+0x158>)
 800ede4:	2400      	movs	r4, #0
 800ede6:	e77e      	b.n	800ece6 <pow+0x4a>
 800ede8:	20000258 	.word	0x20000258
 800edec:	fff00000 	.word	0xfff00000
 800edf0:	7ff00000 	.word	0x7ff00000
 800edf4:	3ff00000 	.word	0x3ff00000

0800edf8 <sqrt>:
 800edf8:	b538      	push	{r3, r4, r5, lr}
 800edfa:	ed2d 8b02 	vpush	{d8}
 800edfe:	ec55 4b10 	vmov	r4, r5, d0
 800ee02:	f000 fd4f 	bl	800f8a4 <__ieee754_sqrt>
 800ee06:	4b15      	ldr	r3, [pc, #84]	; (800ee5c <sqrt+0x64>)
 800ee08:	eeb0 8a40 	vmov.f32	s16, s0
 800ee0c:	eef0 8a60 	vmov.f32	s17, s1
 800ee10:	f993 3000 	ldrsb.w	r3, [r3]
 800ee14:	3301      	adds	r3, #1
 800ee16:	d019      	beq.n	800ee4c <sqrt+0x54>
 800ee18:	4622      	mov	r2, r4
 800ee1a:	462b      	mov	r3, r5
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	4629      	mov	r1, r5
 800ee20:	f7f1 fe84 	bl	8000b2c <__aeabi_dcmpun>
 800ee24:	b990      	cbnz	r0, 800ee4c <sqrt+0x54>
 800ee26:	2200      	movs	r2, #0
 800ee28:	2300      	movs	r3, #0
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	4629      	mov	r1, r5
 800ee2e:	f7f1 fe55 	bl	8000adc <__aeabi_dcmplt>
 800ee32:	b158      	cbz	r0, 800ee4c <sqrt+0x54>
 800ee34:	f7fb f932 	bl	800a09c <__errno>
 800ee38:	2321      	movs	r3, #33	; 0x21
 800ee3a:	6003      	str	r3, [r0, #0]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	2300      	movs	r3, #0
 800ee40:	4610      	mov	r0, r2
 800ee42:	4619      	mov	r1, r3
 800ee44:	f7f1 fd02 	bl	800084c <__aeabi_ddiv>
 800ee48:	ec41 0b18 	vmov	d8, r0, r1
 800ee4c:	eeb0 0a48 	vmov.f32	s0, s16
 800ee50:	eef0 0a68 	vmov.f32	s1, s17
 800ee54:	ecbd 8b02 	vpop	{d8}
 800ee58:	bd38      	pop	{r3, r4, r5, pc}
 800ee5a:	bf00      	nop
 800ee5c:	20000258 	.word	0x20000258

0800ee60 <__ieee754_pow>:
 800ee60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee64:	ed2d 8b06 	vpush	{d8-d10}
 800ee68:	b08d      	sub	sp, #52	; 0x34
 800ee6a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800ee6e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800ee72:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800ee76:	ea56 0100 	orrs.w	r1, r6, r0
 800ee7a:	ec53 2b10 	vmov	r2, r3, d0
 800ee7e:	f000 84d1 	beq.w	800f824 <__ieee754_pow+0x9c4>
 800ee82:	497f      	ldr	r1, [pc, #508]	; (800f080 <__ieee754_pow+0x220>)
 800ee84:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800ee88:	428c      	cmp	r4, r1
 800ee8a:	ee10 8a10 	vmov	r8, s0
 800ee8e:	4699      	mov	r9, r3
 800ee90:	dc09      	bgt.n	800eea6 <__ieee754_pow+0x46>
 800ee92:	d103      	bne.n	800ee9c <__ieee754_pow+0x3c>
 800ee94:	b97a      	cbnz	r2, 800eeb6 <__ieee754_pow+0x56>
 800ee96:	42a6      	cmp	r6, r4
 800ee98:	dd02      	ble.n	800eea0 <__ieee754_pow+0x40>
 800ee9a:	e00c      	b.n	800eeb6 <__ieee754_pow+0x56>
 800ee9c:	428e      	cmp	r6, r1
 800ee9e:	dc02      	bgt.n	800eea6 <__ieee754_pow+0x46>
 800eea0:	428e      	cmp	r6, r1
 800eea2:	d110      	bne.n	800eec6 <__ieee754_pow+0x66>
 800eea4:	b178      	cbz	r0, 800eec6 <__ieee754_pow+0x66>
 800eea6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800eeaa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800eeae:	ea54 0308 	orrs.w	r3, r4, r8
 800eeb2:	f000 84b7 	beq.w	800f824 <__ieee754_pow+0x9c4>
 800eeb6:	4873      	ldr	r0, [pc, #460]	; (800f084 <__ieee754_pow+0x224>)
 800eeb8:	b00d      	add	sp, #52	; 0x34
 800eeba:	ecbd 8b06 	vpop	{d8-d10}
 800eebe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec2:	f7fe bf55 	b.w	800dd70 <nan>
 800eec6:	f1b9 0f00 	cmp.w	r9, #0
 800eeca:	da36      	bge.n	800ef3a <__ieee754_pow+0xda>
 800eecc:	496e      	ldr	r1, [pc, #440]	; (800f088 <__ieee754_pow+0x228>)
 800eece:	428e      	cmp	r6, r1
 800eed0:	dc51      	bgt.n	800ef76 <__ieee754_pow+0x116>
 800eed2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800eed6:	428e      	cmp	r6, r1
 800eed8:	f340 84af 	ble.w	800f83a <__ieee754_pow+0x9da>
 800eedc:	1531      	asrs	r1, r6, #20
 800eede:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800eee2:	2914      	cmp	r1, #20
 800eee4:	dd0f      	ble.n	800ef06 <__ieee754_pow+0xa6>
 800eee6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800eeea:	fa20 fc01 	lsr.w	ip, r0, r1
 800eeee:	fa0c f101 	lsl.w	r1, ip, r1
 800eef2:	4281      	cmp	r1, r0
 800eef4:	f040 84a1 	bne.w	800f83a <__ieee754_pow+0x9da>
 800eef8:	f00c 0c01 	and.w	ip, ip, #1
 800eefc:	f1cc 0102 	rsb	r1, ip, #2
 800ef00:	9100      	str	r1, [sp, #0]
 800ef02:	b180      	cbz	r0, 800ef26 <__ieee754_pow+0xc6>
 800ef04:	e059      	b.n	800efba <__ieee754_pow+0x15a>
 800ef06:	2800      	cmp	r0, #0
 800ef08:	d155      	bne.n	800efb6 <__ieee754_pow+0x156>
 800ef0a:	f1c1 0114 	rsb	r1, r1, #20
 800ef0e:	fa46 fc01 	asr.w	ip, r6, r1
 800ef12:	fa0c f101 	lsl.w	r1, ip, r1
 800ef16:	42b1      	cmp	r1, r6
 800ef18:	f040 848c 	bne.w	800f834 <__ieee754_pow+0x9d4>
 800ef1c:	f00c 0c01 	and.w	ip, ip, #1
 800ef20:	f1cc 0102 	rsb	r1, ip, #2
 800ef24:	9100      	str	r1, [sp, #0]
 800ef26:	4959      	ldr	r1, [pc, #356]	; (800f08c <__ieee754_pow+0x22c>)
 800ef28:	428e      	cmp	r6, r1
 800ef2a:	d12d      	bne.n	800ef88 <__ieee754_pow+0x128>
 800ef2c:	2f00      	cmp	r7, #0
 800ef2e:	da79      	bge.n	800f024 <__ieee754_pow+0x1c4>
 800ef30:	4956      	ldr	r1, [pc, #344]	; (800f08c <__ieee754_pow+0x22c>)
 800ef32:	2000      	movs	r0, #0
 800ef34:	f7f1 fc8a 	bl	800084c <__aeabi_ddiv>
 800ef38:	e016      	b.n	800ef68 <__ieee754_pow+0x108>
 800ef3a:	2100      	movs	r1, #0
 800ef3c:	9100      	str	r1, [sp, #0]
 800ef3e:	2800      	cmp	r0, #0
 800ef40:	d13b      	bne.n	800efba <__ieee754_pow+0x15a>
 800ef42:	494f      	ldr	r1, [pc, #316]	; (800f080 <__ieee754_pow+0x220>)
 800ef44:	428e      	cmp	r6, r1
 800ef46:	d1ee      	bne.n	800ef26 <__ieee754_pow+0xc6>
 800ef48:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ef4c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ef50:	ea53 0308 	orrs.w	r3, r3, r8
 800ef54:	f000 8466 	beq.w	800f824 <__ieee754_pow+0x9c4>
 800ef58:	4b4d      	ldr	r3, [pc, #308]	; (800f090 <__ieee754_pow+0x230>)
 800ef5a:	429c      	cmp	r4, r3
 800ef5c:	dd0d      	ble.n	800ef7a <__ieee754_pow+0x11a>
 800ef5e:	2f00      	cmp	r7, #0
 800ef60:	f280 8464 	bge.w	800f82c <__ieee754_pow+0x9cc>
 800ef64:	2000      	movs	r0, #0
 800ef66:	2100      	movs	r1, #0
 800ef68:	ec41 0b10 	vmov	d0, r0, r1
 800ef6c:	b00d      	add	sp, #52	; 0x34
 800ef6e:	ecbd 8b06 	vpop	{d8-d10}
 800ef72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef76:	2102      	movs	r1, #2
 800ef78:	e7e0      	b.n	800ef3c <__ieee754_pow+0xdc>
 800ef7a:	2f00      	cmp	r7, #0
 800ef7c:	daf2      	bge.n	800ef64 <__ieee754_pow+0x104>
 800ef7e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800ef82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ef86:	e7ef      	b.n	800ef68 <__ieee754_pow+0x108>
 800ef88:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800ef8c:	d104      	bne.n	800ef98 <__ieee754_pow+0x138>
 800ef8e:	4610      	mov	r0, r2
 800ef90:	4619      	mov	r1, r3
 800ef92:	f7f1 fb31 	bl	80005f8 <__aeabi_dmul>
 800ef96:	e7e7      	b.n	800ef68 <__ieee754_pow+0x108>
 800ef98:	493e      	ldr	r1, [pc, #248]	; (800f094 <__ieee754_pow+0x234>)
 800ef9a:	428f      	cmp	r7, r1
 800ef9c:	d10d      	bne.n	800efba <__ieee754_pow+0x15a>
 800ef9e:	f1b9 0f00 	cmp.w	r9, #0
 800efa2:	db0a      	blt.n	800efba <__ieee754_pow+0x15a>
 800efa4:	ec43 2b10 	vmov	d0, r2, r3
 800efa8:	b00d      	add	sp, #52	; 0x34
 800efaa:	ecbd 8b06 	vpop	{d8-d10}
 800efae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb2:	f000 bc77 	b.w	800f8a4 <__ieee754_sqrt>
 800efb6:	2100      	movs	r1, #0
 800efb8:	9100      	str	r1, [sp, #0]
 800efba:	ec43 2b10 	vmov	d0, r2, r3
 800efbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800efc2:	f7ff fe61 	bl	800ec88 <fabs>
 800efc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800efca:	ec51 0b10 	vmov	r0, r1, d0
 800efce:	f1b8 0f00 	cmp.w	r8, #0
 800efd2:	d12a      	bne.n	800f02a <__ieee754_pow+0x1ca>
 800efd4:	b12c      	cbz	r4, 800efe2 <__ieee754_pow+0x182>
 800efd6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800f08c <__ieee754_pow+0x22c>
 800efda:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800efde:	45e6      	cmp	lr, ip
 800efe0:	d123      	bne.n	800f02a <__ieee754_pow+0x1ca>
 800efe2:	2f00      	cmp	r7, #0
 800efe4:	da05      	bge.n	800eff2 <__ieee754_pow+0x192>
 800efe6:	4602      	mov	r2, r0
 800efe8:	460b      	mov	r3, r1
 800efea:	2000      	movs	r0, #0
 800efec:	4927      	ldr	r1, [pc, #156]	; (800f08c <__ieee754_pow+0x22c>)
 800efee:	f7f1 fc2d 	bl	800084c <__aeabi_ddiv>
 800eff2:	f1b9 0f00 	cmp.w	r9, #0
 800eff6:	dab7      	bge.n	800ef68 <__ieee754_pow+0x108>
 800eff8:	9b00      	ldr	r3, [sp, #0]
 800effa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800effe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f002:	4323      	orrs	r3, r4
 800f004:	d108      	bne.n	800f018 <__ieee754_pow+0x1b8>
 800f006:	4602      	mov	r2, r0
 800f008:	460b      	mov	r3, r1
 800f00a:	4610      	mov	r0, r2
 800f00c:	4619      	mov	r1, r3
 800f00e:	f7f1 f93b 	bl	8000288 <__aeabi_dsub>
 800f012:	4602      	mov	r2, r0
 800f014:	460b      	mov	r3, r1
 800f016:	e78d      	b.n	800ef34 <__ieee754_pow+0xd4>
 800f018:	9b00      	ldr	r3, [sp, #0]
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	d1a4      	bne.n	800ef68 <__ieee754_pow+0x108>
 800f01e:	4602      	mov	r2, r0
 800f020:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f024:	4610      	mov	r0, r2
 800f026:	4619      	mov	r1, r3
 800f028:	e79e      	b.n	800ef68 <__ieee754_pow+0x108>
 800f02a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800f02e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800f032:	950a      	str	r5, [sp, #40]	; 0x28
 800f034:	9d00      	ldr	r5, [sp, #0]
 800f036:	46ac      	mov	ip, r5
 800f038:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f03a:	ea5c 0505 	orrs.w	r5, ip, r5
 800f03e:	d0e4      	beq.n	800f00a <__ieee754_pow+0x1aa>
 800f040:	4b15      	ldr	r3, [pc, #84]	; (800f098 <__ieee754_pow+0x238>)
 800f042:	429e      	cmp	r6, r3
 800f044:	f340 80fc 	ble.w	800f240 <__ieee754_pow+0x3e0>
 800f048:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f04c:	429e      	cmp	r6, r3
 800f04e:	4b10      	ldr	r3, [pc, #64]	; (800f090 <__ieee754_pow+0x230>)
 800f050:	dd07      	ble.n	800f062 <__ieee754_pow+0x202>
 800f052:	429c      	cmp	r4, r3
 800f054:	dc0a      	bgt.n	800f06c <__ieee754_pow+0x20c>
 800f056:	2f00      	cmp	r7, #0
 800f058:	da84      	bge.n	800ef64 <__ieee754_pow+0x104>
 800f05a:	a307      	add	r3, pc, #28	; (adr r3, 800f078 <__ieee754_pow+0x218>)
 800f05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f060:	e795      	b.n	800ef8e <__ieee754_pow+0x12e>
 800f062:	429c      	cmp	r4, r3
 800f064:	dbf7      	blt.n	800f056 <__ieee754_pow+0x1f6>
 800f066:	4b09      	ldr	r3, [pc, #36]	; (800f08c <__ieee754_pow+0x22c>)
 800f068:	429c      	cmp	r4, r3
 800f06a:	dd17      	ble.n	800f09c <__ieee754_pow+0x23c>
 800f06c:	2f00      	cmp	r7, #0
 800f06e:	dcf4      	bgt.n	800f05a <__ieee754_pow+0x1fa>
 800f070:	e778      	b.n	800ef64 <__ieee754_pow+0x104>
 800f072:	bf00      	nop
 800f074:	f3af 8000 	nop.w
 800f078:	8800759c 	.word	0x8800759c
 800f07c:	7e37e43c 	.word	0x7e37e43c
 800f080:	7ff00000 	.word	0x7ff00000
 800f084:	08010130 	.word	0x08010130
 800f088:	433fffff 	.word	0x433fffff
 800f08c:	3ff00000 	.word	0x3ff00000
 800f090:	3fefffff 	.word	0x3fefffff
 800f094:	3fe00000 	.word	0x3fe00000
 800f098:	41e00000 	.word	0x41e00000
 800f09c:	4b64      	ldr	r3, [pc, #400]	; (800f230 <__ieee754_pow+0x3d0>)
 800f09e:	2200      	movs	r2, #0
 800f0a0:	f7f1 f8f2 	bl	8000288 <__aeabi_dsub>
 800f0a4:	a356      	add	r3, pc, #344	; (adr r3, 800f200 <__ieee754_pow+0x3a0>)
 800f0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0aa:	4604      	mov	r4, r0
 800f0ac:	460d      	mov	r5, r1
 800f0ae:	f7f1 faa3 	bl	80005f8 <__aeabi_dmul>
 800f0b2:	a355      	add	r3, pc, #340	; (adr r3, 800f208 <__ieee754_pow+0x3a8>)
 800f0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b8:	4606      	mov	r6, r0
 800f0ba:	460f      	mov	r7, r1
 800f0bc:	4620      	mov	r0, r4
 800f0be:	4629      	mov	r1, r5
 800f0c0:	f7f1 fa9a 	bl	80005f8 <__aeabi_dmul>
 800f0c4:	4b5b      	ldr	r3, [pc, #364]	; (800f234 <__ieee754_pow+0x3d4>)
 800f0c6:	4682      	mov	sl, r0
 800f0c8:	468b      	mov	fp, r1
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	4629      	mov	r1, r5
 800f0d0:	f7f1 fa92 	bl	80005f8 <__aeabi_dmul>
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	460b      	mov	r3, r1
 800f0d8:	a14d      	add	r1, pc, #308	; (adr r1, 800f210 <__ieee754_pow+0x3b0>)
 800f0da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0de:	f7f1 f8d3 	bl	8000288 <__aeabi_dsub>
 800f0e2:	4622      	mov	r2, r4
 800f0e4:	462b      	mov	r3, r5
 800f0e6:	f7f1 fa87 	bl	80005f8 <__aeabi_dmul>
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	460b      	mov	r3, r1
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	4951      	ldr	r1, [pc, #324]	; (800f238 <__ieee754_pow+0x3d8>)
 800f0f2:	f7f1 f8c9 	bl	8000288 <__aeabi_dsub>
 800f0f6:	4622      	mov	r2, r4
 800f0f8:	4680      	mov	r8, r0
 800f0fa:	4689      	mov	r9, r1
 800f0fc:	462b      	mov	r3, r5
 800f0fe:	4620      	mov	r0, r4
 800f100:	4629      	mov	r1, r5
 800f102:	f7f1 fa79 	bl	80005f8 <__aeabi_dmul>
 800f106:	4602      	mov	r2, r0
 800f108:	460b      	mov	r3, r1
 800f10a:	4640      	mov	r0, r8
 800f10c:	4649      	mov	r1, r9
 800f10e:	f7f1 fa73 	bl	80005f8 <__aeabi_dmul>
 800f112:	a341      	add	r3, pc, #260	; (adr r3, 800f218 <__ieee754_pow+0x3b8>)
 800f114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f118:	f7f1 fa6e 	bl	80005f8 <__aeabi_dmul>
 800f11c:	4602      	mov	r2, r0
 800f11e:	460b      	mov	r3, r1
 800f120:	4650      	mov	r0, sl
 800f122:	4659      	mov	r1, fp
 800f124:	f7f1 f8b0 	bl	8000288 <__aeabi_dsub>
 800f128:	4602      	mov	r2, r0
 800f12a:	460b      	mov	r3, r1
 800f12c:	4680      	mov	r8, r0
 800f12e:	4689      	mov	r9, r1
 800f130:	4630      	mov	r0, r6
 800f132:	4639      	mov	r1, r7
 800f134:	f7f1 f8aa 	bl	800028c <__adddf3>
 800f138:	2400      	movs	r4, #0
 800f13a:	4632      	mov	r2, r6
 800f13c:	463b      	mov	r3, r7
 800f13e:	4620      	mov	r0, r4
 800f140:	460d      	mov	r5, r1
 800f142:	f7f1 f8a1 	bl	8000288 <__aeabi_dsub>
 800f146:	4602      	mov	r2, r0
 800f148:	460b      	mov	r3, r1
 800f14a:	4640      	mov	r0, r8
 800f14c:	4649      	mov	r1, r9
 800f14e:	f7f1 f89b 	bl	8000288 <__aeabi_dsub>
 800f152:	9b00      	ldr	r3, [sp, #0]
 800f154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f156:	3b01      	subs	r3, #1
 800f158:	4313      	orrs	r3, r2
 800f15a:	4682      	mov	sl, r0
 800f15c:	468b      	mov	fp, r1
 800f15e:	f040 81f1 	bne.w	800f544 <__ieee754_pow+0x6e4>
 800f162:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800f220 <__ieee754_pow+0x3c0>
 800f166:	eeb0 8a47 	vmov.f32	s16, s14
 800f16a:	eef0 8a67 	vmov.f32	s17, s15
 800f16e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f172:	2600      	movs	r6, #0
 800f174:	4632      	mov	r2, r6
 800f176:	463b      	mov	r3, r7
 800f178:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f17c:	f7f1 f884 	bl	8000288 <__aeabi_dsub>
 800f180:	4622      	mov	r2, r4
 800f182:	462b      	mov	r3, r5
 800f184:	f7f1 fa38 	bl	80005f8 <__aeabi_dmul>
 800f188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f18c:	4680      	mov	r8, r0
 800f18e:	4689      	mov	r9, r1
 800f190:	4650      	mov	r0, sl
 800f192:	4659      	mov	r1, fp
 800f194:	f7f1 fa30 	bl	80005f8 <__aeabi_dmul>
 800f198:	4602      	mov	r2, r0
 800f19a:	460b      	mov	r3, r1
 800f19c:	4640      	mov	r0, r8
 800f19e:	4649      	mov	r1, r9
 800f1a0:	f7f1 f874 	bl	800028c <__adddf3>
 800f1a4:	4632      	mov	r2, r6
 800f1a6:	463b      	mov	r3, r7
 800f1a8:	4680      	mov	r8, r0
 800f1aa:	4689      	mov	r9, r1
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	4629      	mov	r1, r5
 800f1b0:	f7f1 fa22 	bl	80005f8 <__aeabi_dmul>
 800f1b4:	460b      	mov	r3, r1
 800f1b6:	4604      	mov	r4, r0
 800f1b8:	460d      	mov	r5, r1
 800f1ba:	4602      	mov	r2, r0
 800f1bc:	4649      	mov	r1, r9
 800f1be:	4640      	mov	r0, r8
 800f1c0:	f7f1 f864 	bl	800028c <__adddf3>
 800f1c4:	4b1d      	ldr	r3, [pc, #116]	; (800f23c <__ieee754_pow+0x3dc>)
 800f1c6:	4299      	cmp	r1, r3
 800f1c8:	ec45 4b19 	vmov	d9, r4, r5
 800f1cc:	4606      	mov	r6, r0
 800f1ce:	460f      	mov	r7, r1
 800f1d0:	468b      	mov	fp, r1
 800f1d2:	f340 82fe 	ble.w	800f7d2 <__ieee754_pow+0x972>
 800f1d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f1da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f1de:	4303      	orrs	r3, r0
 800f1e0:	f000 81f0 	beq.w	800f5c4 <__ieee754_pow+0x764>
 800f1e4:	a310      	add	r3, pc, #64	; (adr r3, 800f228 <__ieee754_pow+0x3c8>)
 800f1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ea:	ec51 0b18 	vmov	r0, r1, d8
 800f1ee:	f7f1 fa03 	bl	80005f8 <__aeabi_dmul>
 800f1f2:	a30d      	add	r3, pc, #52	; (adr r3, 800f228 <__ieee754_pow+0x3c8>)
 800f1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f8:	e6cb      	b.n	800ef92 <__ieee754_pow+0x132>
 800f1fa:	bf00      	nop
 800f1fc:	f3af 8000 	nop.w
 800f200:	60000000 	.word	0x60000000
 800f204:	3ff71547 	.word	0x3ff71547
 800f208:	f85ddf44 	.word	0xf85ddf44
 800f20c:	3e54ae0b 	.word	0x3e54ae0b
 800f210:	55555555 	.word	0x55555555
 800f214:	3fd55555 	.word	0x3fd55555
 800f218:	652b82fe 	.word	0x652b82fe
 800f21c:	3ff71547 	.word	0x3ff71547
 800f220:	00000000 	.word	0x00000000
 800f224:	bff00000 	.word	0xbff00000
 800f228:	8800759c 	.word	0x8800759c
 800f22c:	7e37e43c 	.word	0x7e37e43c
 800f230:	3ff00000 	.word	0x3ff00000
 800f234:	3fd00000 	.word	0x3fd00000
 800f238:	3fe00000 	.word	0x3fe00000
 800f23c:	408fffff 	.word	0x408fffff
 800f240:	4bd7      	ldr	r3, [pc, #860]	; (800f5a0 <__ieee754_pow+0x740>)
 800f242:	ea03 0309 	and.w	r3, r3, r9
 800f246:	2200      	movs	r2, #0
 800f248:	b92b      	cbnz	r3, 800f256 <__ieee754_pow+0x3f6>
 800f24a:	4bd6      	ldr	r3, [pc, #856]	; (800f5a4 <__ieee754_pow+0x744>)
 800f24c:	f7f1 f9d4 	bl	80005f8 <__aeabi_dmul>
 800f250:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f254:	460c      	mov	r4, r1
 800f256:	1523      	asrs	r3, r4, #20
 800f258:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f25c:	4413      	add	r3, r2
 800f25e:	9309      	str	r3, [sp, #36]	; 0x24
 800f260:	4bd1      	ldr	r3, [pc, #836]	; (800f5a8 <__ieee754_pow+0x748>)
 800f262:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f266:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f26a:	429c      	cmp	r4, r3
 800f26c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f270:	dd08      	ble.n	800f284 <__ieee754_pow+0x424>
 800f272:	4bce      	ldr	r3, [pc, #824]	; (800f5ac <__ieee754_pow+0x74c>)
 800f274:	429c      	cmp	r4, r3
 800f276:	f340 8163 	ble.w	800f540 <__ieee754_pow+0x6e0>
 800f27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f27c:	3301      	adds	r3, #1
 800f27e:	9309      	str	r3, [sp, #36]	; 0x24
 800f280:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f284:	2400      	movs	r4, #0
 800f286:	00e3      	lsls	r3, r4, #3
 800f288:	930b      	str	r3, [sp, #44]	; 0x2c
 800f28a:	4bc9      	ldr	r3, [pc, #804]	; (800f5b0 <__ieee754_pow+0x750>)
 800f28c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f290:	ed93 7b00 	vldr	d7, [r3]
 800f294:	4629      	mov	r1, r5
 800f296:	ec53 2b17 	vmov	r2, r3, d7
 800f29a:	eeb0 8a47 	vmov.f32	s16, s14
 800f29e:	eef0 8a67 	vmov.f32	s17, s15
 800f2a2:	4682      	mov	sl, r0
 800f2a4:	f7f0 fff0 	bl	8000288 <__aeabi_dsub>
 800f2a8:	4652      	mov	r2, sl
 800f2aa:	4606      	mov	r6, r0
 800f2ac:	460f      	mov	r7, r1
 800f2ae:	462b      	mov	r3, r5
 800f2b0:	ec51 0b18 	vmov	r0, r1, d8
 800f2b4:	f7f0 ffea 	bl	800028c <__adddf3>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	460b      	mov	r3, r1
 800f2bc:	2000      	movs	r0, #0
 800f2be:	49bd      	ldr	r1, [pc, #756]	; (800f5b4 <__ieee754_pow+0x754>)
 800f2c0:	f7f1 fac4 	bl	800084c <__aeabi_ddiv>
 800f2c4:	ec41 0b19 	vmov	d9, r0, r1
 800f2c8:	4602      	mov	r2, r0
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	4630      	mov	r0, r6
 800f2ce:	4639      	mov	r1, r7
 800f2d0:	f7f1 f992 	bl	80005f8 <__aeabi_dmul>
 800f2d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f2d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f2dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	9304      	str	r3, [sp, #16]
 800f2e4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f2e8:	46ab      	mov	fp, r5
 800f2ea:	106d      	asrs	r5, r5, #1
 800f2ec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f2f0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f2f4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	4640      	mov	r0, r8
 800f2fc:	4649      	mov	r1, r9
 800f2fe:	4614      	mov	r4, r2
 800f300:	461d      	mov	r5, r3
 800f302:	f7f1 f979 	bl	80005f8 <__aeabi_dmul>
 800f306:	4602      	mov	r2, r0
 800f308:	460b      	mov	r3, r1
 800f30a:	4630      	mov	r0, r6
 800f30c:	4639      	mov	r1, r7
 800f30e:	f7f0 ffbb 	bl	8000288 <__aeabi_dsub>
 800f312:	ec53 2b18 	vmov	r2, r3, d8
 800f316:	4606      	mov	r6, r0
 800f318:	460f      	mov	r7, r1
 800f31a:	4620      	mov	r0, r4
 800f31c:	4629      	mov	r1, r5
 800f31e:	f7f0 ffb3 	bl	8000288 <__aeabi_dsub>
 800f322:	4602      	mov	r2, r0
 800f324:	460b      	mov	r3, r1
 800f326:	4650      	mov	r0, sl
 800f328:	4659      	mov	r1, fp
 800f32a:	f7f0 ffad 	bl	8000288 <__aeabi_dsub>
 800f32e:	4642      	mov	r2, r8
 800f330:	464b      	mov	r3, r9
 800f332:	f7f1 f961 	bl	80005f8 <__aeabi_dmul>
 800f336:	4602      	mov	r2, r0
 800f338:	460b      	mov	r3, r1
 800f33a:	4630      	mov	r0, r6
 800f33c:	4639      	mov	r1, r7
 800f33e:	f7f0 ffa3 	bl	8000288 <__aeabi_dsub>
 800f342:	ec53 2b19 	vmov	r2, r3, d9
 800f346:	f7f1 f957 	bl	80005f8 <__aeabi_dmul>
 800f34a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f34e:	ec41 0b18 	vmov	d8, r0, r1
 800f352:	4610      	mov	r0, r2
 800f354:	4619      	mov	r1, r3
 800f356:	f7f1 f94f 	bl	80005f8 <__aeabi_dmul>
 800f35a:	a37d      	add	r3, pc, #500	; (adr r3, 800f550 <__ieee754_pow+0x6f0>)
 800f35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f360:	4604      	mov	r4, r0
 800f362:	460d      	mov	r5, r1
 800f364:	f7f1 f948 	bl	80005f8 <__aeabi_dmul>
 800f368:	a37b      	add	r3, pc, #492	; (adr r3, 800f558 <__ieee754_pow+0x6f8>)
 800f36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f36e:	f7f0 ff8d 	bl	800028c <__adddf3>
 800f372:	4622      	mov	r2, r4
 800f374:	462b      	mov	r3, r5
 800f376:	f7f1 f93f 	bl	80005f8 <__aeabi_dmul>
 800f37a:	a379      	add	r3, pc, #484	; (adr r3, 800f560 <__ieee754_pow+0x700>)
 800f37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f380:	f7f0 ff84 	bl	800028c <__adddf3>
 800f384:	4622      	mov	r2, r4
 800f386:	462b      	mov	r3, r5
 800f388:	f7f1 f936 	bl	80005f8 <__aeabi_dmul>
 800f38c:	a376      	add	r3, pc, #472	; (adr r3, 800f568 <__ieee754_pow+0x708>)
 800f38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f392:	f7f0 ff7b 	bl	800028c <__adddf3>
 800f396:	4622      	mov	r2, r4
 800f398:	462b      	mov	r3, r5
 800f39a:	f7f1 f92d 	bl	80005f8 <__aeabi_dmul>
 800f39e:	a374      	add	r3, pc, #464	; (adr r3, 800f570 <__ieee754_pow+0x710>)
 800f3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a4:	f7f0 ff72 	bl	800028c <__adddf3>
 800f3a8:	4622      	mov	r2, r4
 800f3aa:	462b      	mov	r3, r5
 800f3ac:	f7f1 f924 	bl	80005f8 <__aeabi_dmul>
 800f3b0:	a371      	add	r3, pc, #452	; (adr r3, 800f578 <__ieee754_pow+0x718>)
 800f3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b6:	f7f0 ff69 	bl	800028c <__adddf3>
 800f3ba:	4622      	mov	r2, r4
 800f3bc:	4606      	mov	r6, r0
 800f3be:	460f      	mov	r7, r1
 800f3c0:	462b      	mov	r3, r5
 800f3c2:	4620      	mov	r0, r4
 800f3c4:	4629      	mov	r1, r5
 800f3c6:	f7f1 f917 	bl	80005f8 <__aeabi_dmul>
 800f3ca:	4602      	mov	r2, r0
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	4630      	mov	r0, r6
 800f3d0:	4639      	mov	r1, r7
 800f3d2:	f7f1 f911 	bl	80005f8 <__aeabi_dmul>
 800f3d6:	4642      	mov	r2, r8
 800f3d8:	4604      	mov	r4, r0
 800f3da:	460d      	mov	r5, r1
 800f3dc:	464b      	mov	r3, r9
 800f3de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f3e2:	f7f0 ff53 	bl	800028c <__adddf3>
 800f3e6:	ec53 2b18 	vmov	r2, r3, d8
 800f3ea:	f7f1 f905 	bl	80005f8 <__aeabi_dmul>
 800f3ee:	4622      	mov	r2, r4
 800f3f0:	462b      	mov	r3, r5
 800f3f2:	f7f0 ff4b 	bl	800028c <__adddf3>
 800f3f6:	4642      	mov	r2, r8
 800f3f8:	4682      	mov	sl, r0
 800f3fa:	468b      	mov	fp, r1
 800f3fc:	464b      	mov	r3, r9
 800f3fe:	4640      	mov	r0, r8
 800f400:	4649      	mov	r1, r9
 800f402:	f7f1 f8f9 	bl	80005f8 <__aeabi_dmul>
 800f406:	4b6c      	ldr	r3, [pc, #432]	; (800f5b8 <__ieee754_pow+0x758>)
 800f408:	2200      	movs	r2, #0
 800f40a:	4606      	mov	r6, r0
 800f40c:	460f      	mov	r7, r1
 800f40e:	f7f0 ff3d 	bl	800028c <__adddf3>
 800f412:	4652      	mov	r2, sl
 800f414:	465b      	mov	r3, fp
 800f416:	f7f0 ff39 	bl	800028c <__adddf3>
 800f41a:	9c04      	ldr	r4, [sp, #16]
 800f41c:	460d      	mov	r5, r1
 800f41e:	4622      	mov	r2, r4
 800f420:	460b      	mov	r3, r1
 800f422:	4640      	mov	r0, r8
 800f424:	4649      	mov	r1, r9
 800f426:	f7f1 f8e7 	bl	80005f8 <__aeabi_dmul>
 800f42a:	4b63      	ldr	r3, [pc, #396]	; (800f5b8 <__ieee754_pow+0x758>)
 800f42c:	4680      	mov	r8, r0
 800f42e:	4689      	mov	r9, r1
 800f430:	2200      	movs	r2, #0
 800f432:	4620      	mov	r0, r4
 800f434:	4629      	mov	r1, r5
 800f436:	f7f0 ff27 	bl	8000288 <__aeabi_dsub>
 800f43a:	4632      	mov	r2, r6
 800f43c:	463b      	mov	r3, r7
 800f43e:	f7f0 ff23 	bl	8000288 <__aeabi_dsub>
 800f442:	4602      	mov	r2, r0
 800f444:	460b      	mov	r3, r1
 800f446:	4650      	mov	r0, sl
 800f448:	4659      	mov	r1, fp
 800f44a:	f7f0 ff1d 	bl	8000288 <__aeabi_dsub>
 800f44e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f452:	f7f1 f8d1 	bl	80005f8 <__aeabi_dmul>
 800f456:	4622      	mov	r2, r4
 800f458:	4606      	mov	r6, r0
 800f45a:	460f      	mov	r7, r1
 800f45c:	462b      	mov	r3, r5
 800f45e:	ec51 0b18 	vmov	r0, r1, d8
 800f462:	f7f1 f8c9 	bl	80005f8 <__aeabi_dmul>
 800f466:	4602      	mov	r2, r0
 800f468:	460b      	mov	r3, r1
 800f46a:	4630      	mov	r0, r6
 800f46c:	4639      	mov	r1, r7
 800f46e:	f7f0 ff0d 	bl	800028c <__adddf3>
 800f472:	4606      	mov	r6, r0
 800f474:	460f      	mov	r7, r1
 800f476:	4602      	mov	r2, r0
 800f478:	460b      	mov	r3, r1
 800f47a:	4640      	mov	r0, r8
 800f47c:	4649      	mov	r1, r9
 800f47e:	f7f0 ff05 	bl	800028c <__adddf3>
 800f482:	9c04      	ldr	r4, [sp, #16]
 800f484:	a33e      	add	r3, pc, #248	; (adr r3, 800f580 <__ieee754_pow+0x720>)
 800f486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f48a:	4620      	mov	r0, r4
 800f48c:	460d      	mov	r5, r1
 800f48e:	f7f1 f8b3 	bl	80005f8 <__aeabi_dmul>
 800f492:	4642      	mov	r2, r8
 800f494:	ec41 0b18 	vmov	d8, r0, r1
 800f498:	464b      	mov	r3, r9
 800f49a:	4620      	mov	r0, r4
 800f49c:	4629      	mov	r1, r5
 800f49e:	f7f0 fef3 	bl	8000288 <__aeabi_dsub>
 800f4a2:	4602      	mov	r2, r0
 800f4a4:	460b      	mov	r3, r1
 800f4a6:	4630      	mov	r0, r6
 800f4a8:	4639      	mov	r1, r7
 800f4aa:	f7f0 feed 	bl	8000288 <__aeabi_dsub>
 800f4ae:	a336      	add	r3, pc, #216	; (adr r3, 800f588 <__ieee754_pow+0x728>)
 800f4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b4:	f7f1 f8a0 	bl	80005f8 <__aeabi_dmul>
 800f4b8:	a335      	add	r3, pc, #212	; (adr r3, 800f590 <__ieee754_pow+0x730>)
 800f4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4be:	4606      	mov	r6, r0
 800f4c0:	460f      	mov	r7, r1
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	4629      	mov	r1, r5
 800f4c6:	f7f1 f897 	bl	80005f8 <__aeabi_dmul>
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	4630      	mov	r0, r6
 800f4d0:	4639      	mov	r1, r7
 800f4d2:	f7f0 fedb 	bl	800028c <__adddf3>
 800f4d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f4d8:	4b38      	ldr	r3, [pc, #224]	; (800f5bc <__ieee754_pow+0x75c>)
 800f4da:	4413      	add	r3, r2
 800f4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e0:	f7f0 fed4 	bl	800028c <__adddf3>
 800f4e4:	4682      	mov	sl, r0
 800f4e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4e8:	468b      	mov	fp, r1
 800f4ea:	f7f1 f81b 	bl	8000524 <__aeabi_i2d>
 800f4ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f4f0:	4b33      	ldr	r3, [pc, #204]	; (800f5c0 <__ieee754_pow+0x760>)
 800f4f2:	4413      	add	r3, r2
 800f4f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f4f8:	4606      	mov	r6, r0
 800f4fa:	460f      	mov	r7, r1
 800f4fc:	4652      	mov	r2, sl
 800f4fe:	465b      	mov	r3, fp
 800f500:	ec51 0b18 	vmov	r0, r1, d8
 800f504:	f7f0 fec2 	bl	800028c <__adddf3>
 800f508:	4642      	mov	r2, r8
 800f50a:	464b      	mov	r3, r9
 800f50c:	f7f0 febe 	bl	800028c <__adddf3>
 800f510:	4632      	mov	r2, r6
 800f512:	463b      	mov	r3, r7
 800f514:	f7f0 feba 	bl	800028c <__adddf3>
 800f518:	9c04      	ldr	r4, [sp, #16]
 800f51a:	4632      	mov	r2, r6
 800f51c:	463b      	mov	r3, r7
 800f51e:	4620      	mov	r0, r4
 800f520:	460d      	mov	r5, r1
 800f522:	f7f0 feb1 	bl	8000288 <__aeabi_dsub>
 800f526:	4642      	mov	r2, r8
 800f528:	464b      	mov	r3, r9
 800f52a:	f7f0 fead 	bl	8000288 <__aeabi_dsub>
 800f52e:	ec53 2b18 	vmov	r2, r3, d8
 800f532:	f7f0 fea9 	bl	8000288 <__aeabi_dsub>
 800f536:	4602      	mov	r2, r0
 800f538:	460b      	mov	r3, r1
 800f53a:	4650      	mov	r0, sl
 800f53c:	4659      	mov	r1, fp
 800f53e:	e606      	b.n	800f14e <__ieee754_pow+0x2ee>
 800f540:	2401      	movs	r4, #1
 800f542:	e6a0      	b.n	800f286 <__ieee754_pow+0x426>
 800f544:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800f598 <__ieee754_pow+0x738>
 800f548:	e60d      	b.n	800f166 <__ieee754_pow+0x306>
 800f54a:	bf00      	nop
 800f54c:	f3af 8000 	nop.w
 800f550:	4a454eef 	.word	0x4a454eef
 800f554:	3fca7e28 	.word	0x3fca7e28
 800f558:	93c9db65 	.word	0x93c9db65
 800f55c:	3fcd864a 	.word	0x3fcd864a
 800f560:	a91d4101 	.word	0xa91d4101
 800f564:	3fd17460 	.word	0x3fd17460
 800f568:	518f264d 	.word	0x518f264d
 800f56c:	3fd55555 	.word	0x3fd55555
 800f570:	db6fabff 	.word	0xdb6fabff
 800f574:	3fdb6db6 	.word	0x3fdb6db6
 800f578:	33333303 	.word	0x33333303
 800f57c:	3fe33333 	.word	0x3fe33333
 800f580:	e0000000 	.word	0xe0000000
 800f584:	3feec709 	.word	0x3feec709
 800f588:	dc3a03fd 	.word	0xdc3a03fd
 800f58c:	3feec709 	.word	0x3feec709
 800f590:	145b01f5 	.word	0x145b01f5
 800f594:	be3e2fe0 	.word	0xbe3e2fe0
 800f598:	00000000 	.word	0x00000000
 800f59c:	3ff00000 	.word	0x3ff00000
 800f5a0:	7ff00000 	.word	0x7ff00000
 800f5a4:	43400000 	.word	0x43400000
 800f5a8:	0003988e 	.word	0x0003988e
 800f5ac:	000bb679 	.word	0x000bb679
 800f5b0:	080101d8 	.word	0x080101d8
 800f5b4:	3ff00000 	.word	0x3ff00000
 800f5b8:	40080000 	.word	0x40080000
 800f5bc:	080101f8 	.word	0x080101f8
 800f5c0:	080101e8 	.word	0x080101e8
 800f5c4:	a3b5      	add	r3, pc, #724	; (adr r3, 800f89c <__ieee754_pow+0xa3c>)
 800f5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ca:	4640      	mov	r0, r8
 800f5cc:	4649      	mov	r1, r9
 800f5ce:	f7f0 fe5d 	bl	800028c <__adddf3>
 800f5d2:	4622      	mov	r2, r4
 800f5d4:	ec41 0b1a 	vmov	d10, r0, r1
 800f5d8:	462b      	mov	r3, r5
 800f5da:	4630      	mov	r0, r6
 800f5dc:	4639      	mov	r1, r7
 800f5de:	f7f0 fe53 	bl	8000288 <__aeabi_dsub>
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	460b      	mov	r3, r1
 800f5e6:	ec51 0b1a 	vmov	r0, r1, d10
 800f5ea:	f7f1 fa95 	bl	8000b18 <__aeabi_dcmpgt>
 800f5ee:	2800      	cmp	r0, #0
 800f5f0:	f47f adf8 	bne.w	800f1e4 <__ieee754_pow+0x384>
 800f5f4:	4aa4      	ldr	r2, [pc, #656]	; (800f888 <__ieee754_pow+0xa28>)
 800f5f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	f340 810b 	ble.w	800f816 <__ieee754_pow+0x9b6>
 800f600:	151b      	asrs	r3, r3, #20
 800f602:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f606:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f60a:	fa4a f303 	asr.w	r3, sl, r3
 800f60e:	445b      	add	r3, fp
 800f610:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f614:	4e9d      	ldr	r6, [pc, #628]	; (800f88c <__ieee754_pow+0xa2c>)
 800f616:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f61a:	4116      	asrs	r6, r2
 800f61c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f620:	2000      	movs	r0, #0
 800f622:	ea23 0106 	bic.w	r1, r3, r6
 800f626:	f1c2 0214 	rsb	r2, r2, #20
 800f62a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f62e:	fa4a fa02 	asr.w	sl, sl, r2
 800f632:	f1bb 0f00 	cmp.w	fp, #0
 800f636:	4602      	mov	r2, r0
 800f638:	460b      	mov	r3, r1
 800f63a:	4620      	mov	r0, r4
 800f63c:	4629      	mov	r1, r5
 800f63e:	bfb8      	it	lt
 800f640:	f1ca 0a00 	rsblt	sl, sl, #0
 800f644:	f7f0 fe20 	bl	8000288 <__aeabi_dsub>
 800f648:	ec41 0b19 	vmov	d9, r0, r1
 800f64c:	4642      	mov	r2, r8
 800f64e:	464b      	mov	r3, r9
 800f650:	ec51 0b19 	vmov	r0, r1, d9
 800f654:	f7f0 fe1a 	bl	800028c <__adddf3>
 800f658:	2400      	movs	r4, #0
 800f65a:	a379      	add	r3, pc, #484	; (adr r3, 800f840 <__ieee754_pow+0x9e0>)
 800f65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f660:	4620      	mov	r0, r4
 800f662:	460d      	mov	r5, r1
 800f664:	f7f0 ffc8 	bl	80005f8 <__aeabi_dmul>
 800f668:	ec53 2b19 	vmov	r2, r3, d9
 800f66c:	4606      	mov	r6, r0
 800f66e:	460f      	mov	r7, r1
 800f670:	4620      	mov	r0, r4
 800f672:	4629      	mov	r1, r5
 800f674:	f7f0 fe08 	bl	8000288 <__aeabi_dsub>
 800f678:	4602      	mov	r2, r0
 800f67a:	460b      	mov	r3, r1
 800f67c:	4640      	mov	r0, r8
 800f67e:	4649      	mov	r1, r9
 800f680:	f7f0 fe02 	bl	8000288 <__aeabi_dsub>
 800f684:	a370      	add	r3, pc, #448	; (adr r3, 800f848 <__ieee754_pow+0x9e8>)
 800f686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68a:	f7f0 ffb5 	bl	80005f8 <__aeabi_dmul>
 800f68e:	a370      	add	r3, pc, #448	; (adr r3, 800f850 <__ieee754_pow+0x9f0>)
 800f690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f694:	4680      	mov	r8, r0
 800f696:	4689      	mov	r9, r1
 800f698:	4620      	mov	r0, r4
 800f69a:	4629      	mov	r1, r5
 800f69c:	f7f0 ffac 	bl	80005f8 <__aeabi_dmul>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	460b      	mov	r3, r1
 800f6a4:	4640      	mov	r0, r8
 800f6a6:	4649      	mov	r1, r9
 800f6a8:	f7f0 fdf0 	bl	800028c <__adddf3>
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	460d      	mov	r5, r1
 800f6b0:	4602      	mov	r2, r0
 800f6b2:	460b      	mov	r3, r1
 800f6b4:	4630      	mov	r0, r6
 800f6b6:	4639      	mov	r1, r7
 800f6b8:	f7f0 fde8 	bl	800028c <__adddf3>
 800f6bc:	4632      	mov	r2, r6
 800f6be:	463b      	mov	r3, r7
 800f6c0:	4680      	mov	r8, r0
 800f6c2:	4689      	mov	r9, r1
 800f6c4:	f7f0 fde0 	bl	8000288 <__aeabi_dsub>
 800f6c8:	4602      	mov	r2, r0
 800f6ca:	460b      	mov	r3, r1
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	4629      	mov	r1, r5
 800f6d0:	f7f0 fdda 	bl	8000288 <__aeabi_dsub>
 800f6d4:	4642      	mov	r2, r8
 800f6d6:	4606      	mov	r6, r0
 800f6d8:	460f      	mov	r7, r1
 800f6da:	464b      	mov	r3, r9
 800f6dc:	4640      	mov	r0, r8
 800f6de:	4649      	mov	r1, r9
 800f6e0:	f7f0 ff8a 	bl	80005f8 <__aeabi_dmul>
 800f6e4:	a35c      	add	r3, pc, #368	; (adr r3, 800f858 <__ieee754_pow+0x9f8>)
 800f6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ea:	4604      	mov	r4, r0
 800f6ec:	460d      	mov	r5, r1
 800f6ee:	f7f0 ff83 	bl	80005f8 <__aeabi_dmul>
 800f6f2:	a35b      	add	r3, pc, #364	; (adr r3, 800f860 <__ieee754_pow+0xa00>)
 800f6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f8:	f7f0 fdc6 	bl	8000288 <__aeabi_dsub>
 800f6fc:	4622      	mov	r2, r4
 800f6fe:	462b      	mov	r3, r5
 800f700:	f7f0 ff7a 	bl	80005f8 <__aeabi_dmul>
 800f704:	a358      	add	r3, pc, #352	; (adr r3, 800f868 <__ieee754_pow+0xa08>)
 800f706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70a:	f7f0 fdbf 	bl	800028c <__adddf3>
 800f70e:	4622      	mov	r2, r4
 800f710:	462b      	mov	r3, r5
 800f712:	f7f0 ff71 	bl	80005f8 <__aeabi_dmul>
 800f716:	a356      	add	r3, pc, #344	; (adr r3, 800f870 <__ieee754_pow+0xa10>)
 800f718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71c:	f7f0 fdb4 	bl	8000288 <__aeabi_dsub>
 800f720:	4622      	mov	r2, r4
 800f722:	462b      	mov	r3, r5
 800f724:	f7f0 ff68 	bl	80005f8 <__aeabi_dmul>
 800f728:	a353      	add	r3, pc, #332	; (adr r3, 800f878 <__ieee754_pow+0xa18>)
 800f72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72e:	f7f0 fdad 	bl	800028c <__adddf3>
 800f732:	4622      	mov	r2, r4
 800f734:	462b      	mov	r3, r5
 800f736:	f7f0 ff5f 	bl	80005f8 <__aeabi_dmul>
 800f73a:	4602      	mov	r2, r0
 800f73c:	460b      	mov	r3, r1
 800f73e:	4640      	mov	r0, r8
 800f740:	4649      	mov	r1, r9
 800f742:	f7f0 fda1 	bl	8000288 <__aeabi_dsub>
 800f746:	4604      	mov	r4, r0
 800f748:	460d      	mov	r5, r1
 800f74a:	4602      	mov	r2, r0
 800f74c:	460b      	mov	r3, r1
 800f74e:	4640      	mov	r0, r8
 800f750:	4649      	mov	r1, r9
 800f752:	f7f0 ff51 	bl	80005f8 <__aeabi_dmul>
 800f756:	2200      	movs	r2, #0
 800f758:	ec41 0b19 	vmov	d9, r0, r1
 800f75c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f760:	4620      	mov	r0, r4
 800f762:	4629      	mov	r1, r5
 800f764:	f7f0 fd90 	bl	8000288 <__aeabi_dsub>
 800f768:	4602      	mov	r2, r0
 800f76a:	460b      	mov	r3, r1
 800f76c:	ec51 0b19 	vmov	r0, r1, d9
 800f770:	f7f1 f86c 	bl	800084c <__aeabi_ddiv>
 800f774:	4632      	mov	r2, r6
 800f776:	4604      	mov	r4, r0
 800f778:	460d      	mov	r5, r1
 800f77a:	463b      	mov	r3, r7
 800f77c:	4640      	mov	r0, r8
 800f77e:	4649      	mov	r1, r9
 800f780:	f7f0 ff3a 	bl	80005f8 <__aeabi_dmul>
 800f784:	4632      	mov	r2, r6
 800f786:	463b      	mov	r3, r7
 800f788:	f7f0 fd80 	bl	800028c <__adddf3>
 800f78c:	4602      	mov	r2, r0
 800f78e:	460b      	mov	r3, r1
 800f790:	4620      	mov	r0, r4
 800f792:	4629      	mov	r1, r5
 800f794:	f7f0 fd78 	bl	8000288 <__aeabi_dsub>
 800f798:	4642      	mov	r2, r8
 800f79a:	464b      	mov	r3, r9
 800f79c:	f7f0 fd74 	bl	8000288 <__aeabi_dsub>
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	4602      	mov	r2, r0
 800f7a4:	493a      	ldr	r1, [pc, #232]	; (800f890 <__ieee754_pow+0xa30>)
 800f7a6:	2000      	movs	r0, #0
 800f7a8:	f7f0 fd6e 	bl	8000288 <__aeabi_dsub>
 800f7ac:	e9cd 0100 	strd	r0, r1, [sp]
 800f7b0:	9b01      	ldr	r3, [sp, #4]
 800f7b2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f7b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f7ba:	da2f      	bge.n	800f81c <__ieee754_pow+0x9bc>
 800f7bc:	4650      	mov	r0, sl
 800f7be:	ed9d 0b00 	vldr	d0, [sp]
 800f7c2:	f000 f9b9 	bl	800fb38 <scalbn>
 800f7c6:	ec51 0b10 	vmov	r0, r1, d0
 800f7ca:	ec53 2b18 	vmov	r2, r3, d8
 800f7ce:	f7ff bbe0 	b.w	800ef92 <__ieee754_pow+0x132>
 800f7d2:	4b30      	ldr	r3, [pc, #192]	; (800f894 <__ieee754_pow+0xa34>)
 800f7d4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f7d8:	429e      	cmp	r6, r3
 800f7da:	f77f af0b 	ble.w	800f5f4 <__ieee754_pow+0x794>
 800f7de:	4b2e      	ldr	r3, [pc, #184]	; (800f898 <__ieee754_pow+0xa38>)
 800f7e0:	440b      	add	r3, r1
 800f7e2:	4303      	orrs	r3, r0
 800f7e4:	d00b      	beq.n	800f7fe <__ieee754_pow+0x99e>
 800f7e6:	a326      	add	r3, pc, #152	; (adr r3, 800f880 <__ieee754_pow+0xa20>)
 800f7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ec:	ec51 0b18 	vmov	r0, r1, d8
 800f7f0:	f7f0 ff02 	bl	80005f8 <__aeabi_dmul>
 800f7f4:	a322      	add	r3, pc, #136	; (adr r3, 800f880 <__ieee754_pow+0xa20>)
 800f7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fa:	f7ff bbca 	b.w	800ef92 <__ieee754_pow+0x132>
 800f7fe:	4622      	mov	r2, r4
 800f800:	462b      	mov	r3, r5
 800f802:	f7f0 fd41 	bl	8000288 <__aeabi_dsub>
 800f806:	4642      	mov	r2, r8
 800f808:	464b      	mov	r3, r9
 800f80a:	f7f1 f97b 	bl	8000b04 <__aeabi_dcmpge>
 800f80e:	2800      	cmp	r0, #0
 800f810:	f43f aef0 	beq.w	800f5f4 <__ieee754_pow+0x794>
 800f814:	e7e7      	b.n	800f7e6 <__ieee754_pow+0x986>
 800f816:	f04f 0a00 	mov.w	sl, #0
 800f81a:	e717      	b.n	800f64c <__ieee754_pow+0x7ec>
 800f81c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f820:	4619      	mov	r1, r3
 800f822:	e7d2      	b.n	800f7ca <__ieee754_pow+0x96a>
 800f824:	491a      	ldr	r1, [pc, #104]	; (800f890 <__ieee754_pow+0xa30>)
 800f826:	2000      	movs	r0, #0
 800f828:	f7ff bb9e 	b.w	800ef68 <__ieee754_pow+0x108>
 800f82c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f830:	f7ff bb9a 	b.w	800ef68 <__ieee754_pow+0x108>
 800f834:	9000      	str	r0, [sp, #0]
 800f836:	f7ff bb76 	b.w	800ef26 <__ieee754_pow+0xc6>
 800f83a:	2100      	movs	r1, #0
 800f83c:	f7ff bb60 	b.w	800ef00 <__ieee754_pow+0xa0>
 800f840:	00000000 	.word	0x00000000
 800f844:	3fe62e43 	.word	0x3fe62e43
 800f848:	fefa39ef 	.word	0xfefa39ef
 800f84c:	3fe62e42 	.word	0x3fe62e42
 800f850:	0ca86c39 	.word	0x0ca86c39
 800f854:	be205c61 	.word	0xbe205c61
 800f858:	72bea4d0 	.word	0x72bea4d0
 800f85c:	3e663769 	.word	0x3e663769
 800f860:	c5d26bf1 	.word	0xc5d26bf1
 800f864:	3ebbbd41 	.word	0x3ebbbd41
 800f868:	af25de2c 	.word	0xaf25de2c
 800f86c:	3f11566a 	.word	0x3f11566a
 800f870:	16bebd93 	.word	0x16bebd93
 800f874:	3f66c16c 	.word	0x3f66c16c
 800f878:	5555553e 	.word	0x5555553e
 800f87c:	3fc55555 	.word	0x3fc55555
 800f880:	c2f8f359 	.word	0xc2f8f359
 800f884:	01a56e1f 	.word	0x01a56e1f
 800f888:	3fe00000 	.word	0x3fe00000
 800f88c:	000fffff 	.word	0x000fffff
 800f890:	3ff00000 	.word	0x3ff00000
 800f894:	4090cbff 	.word	0x4090cbff
 800f898:	3f6f3400 	.word	0x3f6f3400
 800f89c:	652b82fe 	.word	0x652b82fe
 800f8a0:	3c971547 	.word	0x3c971547

0800f8a4 <__ieee754_sqrt>:
 800f8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a8:	ec55 4b10 	vmov	r4, r5, d0
 800f8ac:	4e56      	ldr	r6, [pc, #344]	; (800fa08 <__ieee754_sqrt+0x164>)
 800f8ae:	43ae      	bics	r6, r5
 800f8b0:	ee10 0a10 	vmov	r0, s0
 800f8b4:	ee10 3a10 	vmov	r3, s0
 800f8b8:	4629      	mov	r1, r5
 800f8ba:	462a      	mov	r2, r5
 800f8bc:	d110      	bne.n	800f8e0 <__ieee754_sqrt+0x3c>
 800f8be:	ee10 2a10 	vmov	r2, s0
 800f8c2:	462b      	mov	r3, r5
 800f8c4:	f7f0 fe98 	bl	80005f8 <__aeabi_dmul>
 800f8c8:	4602      	mov	r2, r0
 800f8ca:	460b      	mov	r3, r1
 800f8cc:	4620      	mov	r0, r4
 800f8ce:	4629      	mov	r1, r5
 800f8d0:	f7f0 fcdc 	bl	800028c <__adddf3>
 800f8d4:	4604      	mov	r4, r0
 800f8d6:	460d      	mov	r5, r1
 800f8d8:	ec45 4b10 	vmov	d0, r4, r5
 800f8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8e0:	2d00      	cmp	r5, #0
 800f8e2:	dc10      	bgt.n	800f906 <__ieee754_sqrt+0x62>
 800f8e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f8e8:	4330      	orrs	r0, r6
 800f8ea:	d0f5      	beq.n	800f8d8 <__ieee754_sqrt+0x34>
 800f8ec:	b15d      	cbz	r5, 800f906 <__ieee754_sqrt+0x62>
 800f8ee:	ee10 2a10 	vmov	r2, s0
 800f8f2:	462b      	mov	r3, r5
 800f8f4:	ee10 0a10 	vmov	r0, s0
 800f8f8:	f7f0 fcc6 	bl	8000288 <__aeabi_dsub>
 800f8fc:	4602      	mov	r2, r0
 800f8fe:	460b      	mov	r3, r1
 800f900:	f7f0 ffa4 	bl	800084c <__aeabi_ddiv>
 800f904:	e7e6      	b.n	800f8d4 <__ieee754_sqrt+0x30>
 800f906:	1509      	asrs	r1, r1, #20
 800f908:	d076      	beq.n	800f9f8 <__ieee754_sqrt+0x154>
 800f90a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800f90e:	07ce      	lsls	r6, r1, #31
 800f910:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800f914:	bf5e      	ittt	pl
 800f916:	0fda      	lsrpl	r2, r3, #31
 800f918:	005b      	lslpl	r3, r3, #1
 800f91a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800f91e:	0fda      	lsrs	r2, r3, #31
 800f920:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800f924:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800f928:	2000      	movs	r0, #0
 800f92a:	106d      	asrs	r5, r5, #1
 800f92c:	005b      	lsls	r3, r3, #1
 800f92e:	f04f 0e16 	mov.w	lr, #22
 800f932:	4684      	mov	ip, r0
 800f934:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f938:	eb0c 0401 	add.w	r4, ip, r1
 800f93c:	4294      	cmp	r4, r2
 800f93e:	bfde      	ittt	le
 800f940:	1b12      	suble	r2, r2, r4
 800f942:	eb04 0c01 	addle.w	ip, r4, r1
 800f946:	1840      	addle	r0, r0, r1
 800f948:	0052      	lsls	r2, r2, #1
 800f94a:	f1be 0e01 	subs.w	lr, lr, #1
 800f94e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800f952:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f956:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f95a:	d1ed      	bne.n	800f938 <__ieee754_sqrt+0x94>
 800f95c:	4671      	mov	r1, lr
 800f95e:	2720      	movs	r7, #32
 800f960:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f964:	4562      	cmp	r2, ip
 800f966:	eb04 060e 	add.w	r6, r4, lr
 800f96a:	dc02      	bgt.n	800f972 <__ieee754_sqrt+0xce>
 800f96c:	d113      	bne.n	800f996 <__ieee754_sqrt+0xf2>
 800f96e:	429e      	cmp	r6, r3
 800f970:	d811      	bhi.n	800f996 <__ieee754_sqrt+0xf2>
 800f972:	2e00      	cmp	r6, #0
 800f974:	eb06 0e04 	add.w	lr, r6, r4
 800f978:	da43      	bge.n	800fa02 <__ieee754_sqrt+0x15e>
 800f97a:	f1be 0f00 	cmp.w	lr, #0
 800f97e:	db40      	blt.n	800fa02 <__ieee754_sqrt+0x15e>
 800f980:	f10c 0801 	add.w	r8, ip, #1
 800f984:	eba2 020c 	sub.w	r2, r2, ip
 800f988:	429e      	cmp	r6, r3
 800f98a:	bf88      	it	hi
 800f98c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f990:	1b9b      	subs	r3, r3, r6
 800f992:	4421      	add	r1, r4
 800f994:	46c4      	mov	ip, r8
 800f996:	0052      	lsls	r2, r2, #1
 800f998:	3f01      	subs	r7, #1
 800f99a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800f99e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f9a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f9a6:	d1dd      	bne.n	800f964 <__ieee754_sqrt+0xc0>
 800f9a8:	4313      	orrs	r3, r2
 800f9aa:	d006      	beq.n	800f9ba <__ieee754_sqrt+0x116>
 800f9ac:	1c4c      	adds	r4, r1, #1
 800f9ae:	bf13      	iteet	ne
 800f9b0:	3101      	addne	r1, #1
 800f9b2:	3001      	addeq	r0, #1
 800f9b4:	4639      	moveq	r1, r7
 800f9b6:	f021 0101 	bicne.w	r1, r1, #1
 800f9ba:	1043      	asrs	r3, r0, #1
 800f9bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f9c0:	0849      	lsrs	r1, r1, #1
 800f9c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f9c6:	07c2      	lsls	r2, r0, #31
 800f9c8:	bf48      	it	mi
 800f9ca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800f9ce:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800f9d2:	460c      	mov	r4, r1
 800f9d4:	463d      	mov	r5, r7
 800f9d6:	e77f      	b.n	800f8d8 <__ieee754_sqrt+0x34>
 800f9d8:	0ada      	lsrs	r2, r3, #11
 800f9da:	3815      	subs	r0, #21
 800f9dc:	055b      	lsls	r3, r3, #21
 800f9de:	2a00      	cmp	r2, #0
 800f9e0:	d0fa      	beq.n	800f9d8 <__ieee754_sqrt+0x134>
 800f9e2:	02d7      	lsls	r7, r2, #11
 800f9e4:	d50a      	bpl.n	800f9fc <__ieee754_sqrt+0x158>
 800f9e6:	f1c1 0420 	rsb	r4, r1, #32
 800f9ea:	fa23 f404 	lsr.w	r4, r3, r4
 800f9ee:	1e4d      	subs	r5, r1, #1
 800f9f0:	408b      	lsls	r3, r1
 800f9f2:	4322      	orrs	r2, r4
 800f9f4:	1b41      	subs	r1, r0, r5
 800f9f6:	e788      	b.n	800f90a <__ieee754_sqrt+0x66>
 800f9f8:	4608      	mov	r0, r1
 800f9fa:	e7f0      	b.n	800f9de <__ieee754_sqrt+0x13a>
 800f9fc:	0052      	lsls	r2, r2, #1
 800f9fe:	3101      	adds	r1, #1
 800fa00:	e7ef      	b.n	800f9e2 <__ieee754_sqrt+0x13e>
 800fa02:	46e0      	mov	r8, ip
 800fa04:	e7be      	b.n	800f984 <__ieee754_sqrt+0xe0>
 800fa06:	bf00      	nop
 800fa08:	7ff00000 	.word	0x7ff00000

0800fa0c <finite>:
 800fa0c:	b082      	sub	sp, #8
 800fa0e:	ed8d 0b00 	vstr	d0, [sp]
 800fa12:	9801      	ldr	r0, [sp, #4]
 800fa14:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800fa18:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fa1c:	0fc0      	lsrs	r0, r0, #31
 800fa1e:	b002      	add	sp, #8
 800fa20:	4770      	bx	lr
	...

0800fa24 <rint>:
 800fa24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa26:	ec51 0b10 	vmov	r0, r1, d0
 800fa2a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fa2e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800fa32:	2e13      	cmp	r6, #19
 800fa34:	ee10 4a10 	vmov	r4, s0
 800fa38:	460b      	mov	r3, r1
 800fa3a:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800fa3e:	dc58      	bgt.n	800faf2 <rint+0xce>
 800fa40:	2e00      	cmp	r6, #0
 800fa42:	da2b      	bge.n	800fa9c <rint+0x78>
 800fa44:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800fa48:	4302      	orrs	r2, r0
 800fa4a:	d023      	beq.n	800fa94 <rint+0x70>
 800fa4c:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800fa50:	4302      	orrs	r2, r0
 800fa52:	4254      	negs	r4, r2
 800fa54:	4314      	orrs	r4, r2
 800fa56:	0c4b      	lsrs	r3, r1, #17
 800fa58:	0b24      	lsrs	r4, r4, #12
 800fa5a:	045b      	lsls	r3, r3, #17
 800fa5c:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800fa60:	ea44 0103 	orr.w	r1, r4, r3
 800fa64:	4b32      	ldr	r3, [pc, #200]	; (800fb30 <rint+0x10c>)
 800fa66:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fa6a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fa6e:	4602      	mov	r2, r0
 800fa70:	460b      	mov	r3, r1
 800fa72:	4630      	mov	r0, r6
 800fa74:	4639      	mov	r1, r7
 800fa76:	f7f0 fc09 	bl	800028c <__adddf3>
 800fa7a:	e9cd 0100 	strd	r0, r1, [sp]
 800fa7e:	463b      	mov	r3, r7
 800fa80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa84:	4632      	mov	r2, r6
 800fa86:	f7f0 fbff 	bl	8000288 <__aeabi_dsub>
 800fa8a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fa8e:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800fa92:	4639      	mov	r1, r7
 800fa94:	ec41 0b10 	vmov	d0, r0, r1
 800fa98:	b003      	add	sp, #12
 800fa9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa9c:	4a25      	ldr	r2, [pc, #148]	; (800fb34 <rint+0x110>)
 800fa9e:	4132      	asrs	r2, r6
 800faa0:	ea01 0702 	and.w	r7, r1, r2
 800faa4:	4307      	orrs	r7, r0
 800faa6:	d0f5      	beq.n	800fa94 <rint+0x70>
 800faa8:	0851      	lsrs	r1, r2, #1
 800faaa:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800faae:	4314      	orrs	r4, r2
 800fab0:	d00c      	beq.n	800facc <rint+0xa8>
 800fab2:	ea23 0201 	bic.w	r2, r3, r1
 800fab6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800faba:	2e13      	cmp	r6, #19
 800fabc:	fa43 f606 	asr.w	r6, r3, r6
 800fac0:	bf0c      	ite	eq
 800fac2:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800fac6:	2400      	movne	r4, #0
 800fac8:	ea42 0306 	orr.w	r3, r2, r6
 800facc:	4918      	ldr	r1, [pc, #96]	; (800fb30 <rint+0x10c>)
 800face:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800fad2:	4622      	mov	r2, r4
 800fad4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fad8:	4620      	mov	r0, r4
 800fada:	4629      	mov	r1, r5
 800fadc:	f7f0 fbd6 	bl	800028c <__adddf3>
 800fae0:	e9cd 0100 	strd	r0, r1, [sp]
 800fae4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fae8:	4622      	mov	r2, r4
 800faea:	462b      	mov	r3, r5
 800faec:	f7f0 fbcc 	bl	8000288 <__aeabi_dsub>
 800faf0:	e7d0      	b.n	800fa94 <rint+0x70>
 800faf2:	2e33      	cmp	r6, #51	; 0x33
 800faf4:	dd07      	ble.n	800fb06 <rint+0xe2>
 800faf6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fafa:	d1cb      	bne.n	800fa94 <rint+0x70>
 800fafc:	ee10 2a10 	vmov	r2, s0
 800fb00:	f7f0 fbc4 	bl	800028c <__adddf3>
 800fb04:	e7c6      	b.n	800fa94 <rint+0x70>
 800fb06:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800fb0a:	f04f 36ff 	mov.w	r6, #4294967295
 800fb0e:	40d6      	lsrs	r6, r2
 800fb10:	4230      	tst	r0, r6
 800fb12:	d0bf      	beq.n	800fa94 <rint+0x70>
 800fb14:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800fb18:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800fb1c:	bf1f      	itttt	ne
 800fb1e:	ea24 0101 	bicne.w	r1, r4, r1
 800fb22:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800fb26:	fa44 f202 	asrne.w	r2, r4, r2
 800fb2a:	ea41 0402 	orrne.w	r4, r1, r2
 800fb2e:	e7cd      	b.n	800facc <rint+0xa8>
 800fb30:	08010208 	.word	0x08010208
 800fb34:	000fffff 	.word	0x000fffff

0800fb38 <scalbn>:
 800fb38:	b570      	push	{r4, r5, r6, lr}
 800fb3a:	ec55 4b10 	vmov	r4, r5, d0
 800fb3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fb42:	4606      	mov	r6, r0
 800fb44:	462b      	mov	r3, r5
 800fb46:	b99a      	cbnz	r2, 800fb70 <scalbn+0x38>
 800fb48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fb4c:	4323      	orrs	r3, r4
 800fb4e:	d036      	beq.n	800fbbe <scalbn+0x86>
 800fb50:	4b39      	ldr	r3, [pc, #228]	; (800fc38 <scalbn+0x100>)
 800fb52:	4629      	mov	r1, r5
 800fb54:	ee10 0a10 	vmov	r0, s0
 800fb58:	2200      	movs	r2, #0
 800fb5a:	f7f0 fd4d 	bl	80005f8 <__aeabi_dmul>
 800fb5e:	4b37      	ldr	r3, [pc, #220]	; (800fc3c <scalbn+0x104>)
 800fb60:	429e      	cmp	r6, r3
 800fb62:	4604      	mov	r4, r0
 800fb64:	460d      	mov	r5, r1
 800fb66:	da10      	bge.n	800fb8a <scalbn+0x52>
 800fb68:	a32b      	add	r3, pc, #172	; (adr r3, 800fc18 <scalbn+0xe0>)
 800fb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6e:	e03a      	b.n	800fbe6 <scalbn+0xae>
 800fb70:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fb74:	428a      	cmp	r2, r1
 800fb76:	d10c      	bne.n	800fb92 <scalbn+0x5a>
 800fb78:	ee10 2a10 	vmov	r2, s0
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	4629      	mov	r1, r5
 800fb80:	f7f0 fb84 	bl	800028c <__adddf3>
 800fb84:	4604      	mov	r4, r0
 800fb86:	460d      	mov	r5, r1
 800fb88:	e019      	b.n	800fbbe <scalbn+0x86>
 800fb8a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fb8e:	460b      	mov	r3, r1
 800fb90:	3a36      	subs	r2, #54	; 0x36
 800fb92:	4432      	add	r2, r6
 800fb94:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fb98:	428a      	cmp	r2, r1
 800fb9a:	dd08      	ble.n	800fbae <scalbn+0x76>
 800fb9c:	2d00      	cmp	r5, #0
 800fb9e:	a120      	add	r1, pc, #128	; (adr r1, 800fc20 <scalbn+0xe8>)
 800fba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fba4:	da1c      	bge.n	800fbe0 <scalbn+0xa8>
 800fba6:	a120      	add	r1, pc, #128	; (adr r1, 800fc28 <scalbn+0xf0>)
 800fba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbac:	e018      	b.n	800fbe0 <scalbn+0xa8>
 800fbae:	2a00      	cmp	r2, #0
 800fbb0:	dd08      	ble.n	800fbc4 <scalbn+0x8c>
 800fbb2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fbb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fbba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fbbe:	ec45 4b10 	vmov	d0, r4, r5
 800fbc2:	bd70      	pop	{r4, r5, r6, pc}
 800fbc4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fbc8:	da19      	bge.n	800fbfe <scalbn+0xc6>
 800fbca:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fbce:	429e      	cmp	r6, r3
 800fbd0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800fbd4:	dd0a      	ble.n	800fbec <scalbn+0xb4>
 800fbd6:	a112      	add	r1, pc, #72	; (adr r1, 800fc20 <scalbn+0xe8>)
 800fbd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d1e2      	bne.n	800fba6 <scalbn+0x6e>
 800fbe0:	a30f      	add	r3, pc, #60	; (adr r3, 800fc20 <scalbn+0xe8>)
 800fbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe6:	f7f0 fd07 	bl	80005f8 <__aeabi_dmul>
 800fbea:	e7cb      	b.n	800fb84 <scalbn+0x4c>
 800fbec:	a10a      	add	r1, pc, #40	; (adr r1, 800fc18 <scalbn+0xe0>)
 800fbee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d0b8      	beq.n	800fb68 <scalbn+0x30>
 800fbf6:	a10e      	add	r1, pc, #56	; (adr r1, 800fc30 <scalbn+0xf8>)
 800fbf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbfc:	e7b4      	b.n	800fb68 <scalbn+0x30>
 800fbfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fc02:	3236      	adds	r2, #54	; 0x36
 800fc04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fc08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	4b0c      	ldr	r3, [pc, #48]	; (800fc40 <scalbn+0x108>)
 800fc10:	2200      	movs	r2, #0
 800fc12:	e7e8      	b.n	800fbe6 <scalbn+0xae>
 800fc14:	f3af 8000 	nop.w
 800fc18:	c2f8f359 	.word	0xc2f8f359
 800fc1c:	01a56e1f 	.word	0x01a56e1f
 800fc20:	8800759c 	.word	0x8800759c
 800fc24:	7e37e43c 	.word	0x7e37e43c
 800fc28:	8800759c 	.word	0x8800759c
 800fc2c:	fe37e43c 	.word	0xfe37e43c
 800fc30:	c2f8f359 	.word	0xc2f8f359
 800fc34:	81a56e1f 	.word	0x81a56e1f
 800fc38:	43500000 	.word	0x43500000
 800fc3c:	ffff3cb0 	.word	0xffff3cb0
 800fc40:	3c900000 	.word	0x3c900000

0800fc44 <_init>:
 800fc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc46:	bf00      	nop
 800fc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc4a:	bc08      	pop	{r3}
 800fc4c:	469e      	mov	lr, r3
 800fc4e:	4770      	bx	lr

0800fc50 <_fini>:
 800fc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc52:	bf00      	nop
 800fc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc56:	bc08      	pop	{r3}
 800fc58:	469e      	mov	lr, r3
 800fc5a:	4770      	bx	lr
