
Dron_PPM_STM32L475_Bo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  0800dcd8  0800dcd8  0001dcd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e068  0800e068  0002025c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e068  0800e068  0001e068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e070  0800e070  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e070  0800e070  0001e070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e074  0800e074  0001e074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800e078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a3c  2000025c  0800e2d4  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c98  0800e2d4  00020c98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f869  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036cc  00000000  00000000  0003faf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d08  00000000  00000000  000431c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b50  00000000  00000000  00044ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029c11  00000000  00000000  00046a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000162ae  00000000  00000000  00070631  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00100252  00000000  00000000  000868df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00186b31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c94  00000000  00000000  00186bac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000025c 	.word	0x2000025c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dcbc 	.word	0x0800dcbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000260 	.word	0x20000260
 80001cc:	0800dcbc 	.word	0x0800dcbc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f92:	2300      	movs	r3, #0
 8000f94:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000f96:	2110      	movs	r1, #16
 8000f98:	20d4      	movs	r0, #212	; 0xd4
 8000f9a:	f001 ff07 	bl	8002dac <SENSOR_IO_Read>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8000fa6:	7bbb      	ldrb	r3, [r7, #14]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000fae:	7bba      	ldrb	r2, [r7, #14]
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2110      	movs	r1, #16
 8000fbc:	20d4      	movs	r0, #212	; 0xd4
 8000fbe:	f001 fedb 	bl	8002d78 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000fc2:	2112      	movs	r1, #18
 8000fc4:	20d4      	movs	r0, #212	; 0xd4
 8000fc6:	f001 fef1 	bl	8002dac <SENSOR_IO_Read>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000fd6:	7bbb      	ldrb	r3, [r7, #14]
 8000fd8:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000fdc:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000fde:	7bba      	ldrb	r2, [r7, #14]
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	2112      	movs	r1, #18
 8000fec:	20d4      	movs	r0, #212	; 0xd4
 8000fee:	f001 fec3 	bl	8002d78 <SENSOR_IO_Write>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001000:	2300      	movs	r3, #0
 8001002:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001004:	2110      	movs	r1, #16
 8001006:	20d4      	movs	r0, #212	; 0xd4
 8001008:	f001 fed0 	bl	8002dac <SENSOR_IO_Read>
 800100c:	4603      	mov	r3, r0
 800100e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	461a      	mov	r2, r3
 800101c:	2110      	movs	r1, #16
 800101e:	20d4      	movs	r0, #212	; 0xd4
 8001020:	f001 feaa 	bl	8002d78 <SENSOR_IO_Write>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001030:	f001 fe98 	bl	8002d64 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001034:	210f      	movs	r1, #15
 8001036:	20d4      	movs	r0, #212	; 0xd4
 8001038:	f001 feb8 	bl	8002dac <SENSOR_IO_Read>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	bd80      	pop	{r7, pc}

08001042 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001050:	2115      	movs	r1, #21
 8001052:	20d4      	movs	r0, #212	; 0xd4
 8001054:	f001 feaa 	bl	8002dac <SENSOR_IO_Read>
 8001058:	4603      	mov	r3, r0
 800105a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	f023 0310 	bic.w	r3, r3, #16
 8001062:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	f043 0310 	orr.w	r3, r3, #16
 8001070:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	461a      	mov	r2, r3
 8001076:	2115      	movs	r1, #21
 8001078:	20d4      	movs	r0, #212	; 0xd4
 800107a:	f001 fe7d 	bl	8002d78 <SENSOR_IO_Write>
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001090:	2300      	movs	r3, #0
 8001092:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800109e:	2110      	movs	r1, #16
 80010a0:	20d4      	movs	r0, #212	; 0xd4
 80010a2:	f001 fe83 	bl	8002dac <SENSOR_IO_Read>
 80010a6:	4603      	mov	r3, r0
 80010a8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80010aa:	f107 0208 	add.w	r2, r7, #8
 80010ae:	2306      	movs	r3, #6
 80010b0:	2128      	movs	r1, #40	; 0x28
 80010b2:	20d4      	movs	r0, #212	; 0xd4
 80010b4:	f001 fe98 	bl	8002de8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	77fb      	strb	r3, [r7, #31]
 80010bc:	e01f      	b.n	80010fe <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80010be:	7ffb      	ldrb	r3, [r7, #31]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	3301      	adds	r3, #1
 80010c4:	f107 0220 	add.w	r2, r7, #32
 80010c8:	4413      	add	r3, r2
 80010ca:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	7ffb      	ldrb	r3, [r7, #31]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	f107 0120 	add.w	r1, r7, #32
 80010dc:	440b      	add	r3, r1
 80010de:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4413      	add	r3, r2
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	7ffb      	ldrb	r3, [r7, #31]
 80010ea:	b212      	sxth	r2, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	f107 0120 	add.w	r1, r7, #32
 80010f2:	440b      	add	r3, r1
 80010f4:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80010f8:	7ffb      	ldrb	r3, [r7, #31]
 80010fa:	3301      	adds	r3, #1
 80010fc:	77fb      	strb	r3, [r7, #31]
 80010fe:	7ffb      	ldrb	r3, [r7, #31]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d9dc      	bls.n	80010be <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	f003 030c 	and.w	r3, r3, #12
 800110a:	2b0c      	cmp	r3, #12
 800110c:	d828      	bhi.n	8001160 <LSM6DSL_AccReadXYZ+0xd8>
 800110e:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <LSM6DSL_AccReadXYZ+0x8c>)
 8001110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001114:	08001149 	.word	0x08001149
 8001118:	08001161 	.word	0x08001161
 800111c:	08001161 	.word	0x08001161
 8001120:	08001161 	.word	0x08001161
 8001124:	0800115b 	.word	0x0800115b
 8001128:	08001161 	.word	0x08001161
 800112c:	08001161 	.word	0x08001161
 8001130:	08001161 	.word	0x08001161
 8001134:	0800114f 	.word	0x0800114f
 8001138:	08001161 	.word	0x08001161
 800113c:	08001161 	.word	0x08001161
 8001140:	08001161 	.word	0x08001161
 8001144:	08001155 	.word	0x08001155
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <LSM6DSL_AccReadXYZ+0x124>)
 800114a:	61bb      	str	r3, [r7, #24]
    break;
 800114c:	e008      	b.n	8001160 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <LSM6DSL_AccReadXYZ+0x128>)
 8001150:	61bb      	str	r3, [r7, #24]
    break;
 8001152:	e005      	b.n	8001160 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <LSM6DSL_AccReadXYZ+0x12c>)
 8001156:	61bb      	str	r3, [r7, #24]
    break;
 8001158:	e002      	b.n	8001160 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <LSM6DSL_AccReadXYZ+0x130>)
 800115c:	61bb      	str	r3, [r7, #24]
    break;    
 800115e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001160:	2300      	movs	r3, #0
 8001162:	77fb      	strb	r3, [r7, #31]
 8001164:	e01b      	b.n	800119e <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001166:	7ffb      	ldrb	r3, [r7, #31]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	f107 0220 	add.w	r2, r7, #32
 800116e:	4413      	add	r3, r2
 8001170:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800117c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001184:	7ffb      	ldrb	r3, [r7, #31]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	4413      	add	r3, r2
 800118c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001190:	ee17 2a90 	vmov	r2, s15
 8001194:	b212      	sxth	r2, r2
 8001196:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001198:	7ffb      	ldrb	r3, [r7, #31]
 800119a:	3301      	adds	r3, #1
 800119c:	77fb      	strb	r3, [r7, #31]
 800119e:	7ffb      	ldrb	r3, [r7, #31]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d9e0      	bls.n	8001166 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	3d79db23 	.word	0x3d79db23
 80011b0:	3df9db23 	.word	0x3df9db23
 80011b4:	3e79db23 	.word	0x3e79db23
 80011b8:	3ef9db23 	.word	0x3ef9db23

080011bc <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80011c6:	2300      	movs	r3, #0
 80011c8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80011ca:	2111      	movs	r1, #17
 80011cc:	20d4      	movs	r0, #212	; 0xd4
 80011ce:	f001 fded 	bl	8002dac <SENSOR_IO_Read>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80011da:	7bbb      	ldrb	r3, [r7, #14]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80011e2:	7bba      	ldrb	r2, [r7, #14]
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	461a      	mov	r2, r3
 80011ee:	2111      	movs	r1, #17
 80011f0:	20d4      	movs	r0, #212	; 0xd4
 80011f2:	f001 fdc1 	bl	8002d78 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80011f6:	2112      	movs	r1, #18
 80011f8:	20d4      	movs	r0, #212	; 0xd4
 80011fa:	f001 fdd7 	bl	8002dac <SENSOR_IO_Read>
 80011fe:	4603      	mov	r3, r0
 8001200:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	b29b      	uxth	r3, r3
 8001208:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800120a:	7bbb      	ldrb	r3, [r7, #14]
 800120c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001210:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001212:	7bba      	ldrb	r2, [r7, #14]
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	4313      	orrs	r3, r2
 8001218:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800121a:	7bbb      	ldrb	r3, [r7, #14]
 800121c:	461a      	mov	r2, r3
 800121e:	2112      	movs	r1, #18
 8001220:	20d4      	movs	r0, #212	; 0xd4
 8001222:	f001 fda9 	bl	8002d78 <SENSOR_IO_Write>
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001234:	2300      	movs	r3, #0
 8001236:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001238:	2111      	movs	r1, #17
 800123a:	20d4      	movs	r0, #212	; 0xd4
 800123c:	f001 fdb6 	bl	8002dac <SENSOR_IO_Read>
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	461a      	mov	r2, r3
 8001250:	2111      	movs	r1, #17
 8001252:	20d4      	movs	r0, #212	; 0xd4
 8001254:	f001 fd90 	bl	8002d78 <SENSOR_IO_Write>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001264:	f001 fd7e 	bl	8002d64 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8001268:	210f      	movs	r1, #15
 800126a:	20d4      	movs	r0, #212	; 0xd4
 800126c:	f001 fd9e 	bl	8002dac <SENSOR_IO_Read>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	bd80      	pop	{r7, pc}

08001276 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001284:	2116      	movs	r1, #22
 8001286:	20d4      	movs	r0, #212	; 0xd4
 8001288:	f001 fd90 	bl	8002dac <SENSOR_IO_Read>
 800128c:	4603      	mov	r3, r0
 800128e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001296:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012a4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	461a      	mov	r2, r3
 80012aa:	2116      	movs	r1, #22
 80012ac:	20d4      	movs	r0, #212	; 0xd4
 80012ae:	f001 fd63 	bl	8002d78 <SENSOR_IO_Write>
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80012d2:	2111      	movs	r1, #17
 80012d4:	20d4      	movs	r0, #212	; 0xd4
 80012d6:	f001 fd69 	bl	8002dac <SENSOR_IO_Read>
 80012da:	4603      	mov	r3, r0
 80012dc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80012de:	f107 0208 	add.w	r2, r7, #8
 80012e2:	2306      	movs	r3, #6
 80012e4:	2122      	movs	r1, #34	; 0x22
 80012e6:	20d4      	movs	r0, #212	; 0xd4
 80012e8:	f001 fd7e 	bl	8002de8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	77fb      	strb	r3, [r7, #31]
 80012f0:	e01f      	b.n	8001332 <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	3301      	adds	r3, #1
 80012f8:	f107 0220 	add.w	r2, r7, #32
 80012fc:	4413      	add	r3, r2
 80012fe:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001302:	b29b      	uxth	r3, r3
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b29a      	uxth	r2, r3
 8001308:	7ffb      	ldrb	r3, [r7, #31]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	f107 0120 	add.w	r1, r7, #32
 8001310:	440b      	add	r3, r1
 8001312:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001316:	b29b      	uxth	r3, r3
 8001318:	4413      	add	r3, r2
 800131a:	b29a      	uxth	r2, r3
 800131c:	7ffb      	ldrb	r3, [r7, #31]
 800131e:	b212      	sxth	r2, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	f107 0120 	add.w	r1, r7, #32
 8001326:	440b      	add	r3, r1
 8001328:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800132c:	7ffb      	ldrb	r3, [r7, #31]
 800132e:	3301      	adds	r3, #1
 8001330:	77fb      	strb	r3, [r7, #31]
 8001332:	7ffb      	ldrb	r3, [r7, #31]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d9dc      	bls.n	80012f2 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b0c      	cmp	r3, #12
 8001340:	d828      	bhi.n	8001394 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8001342:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 8001344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001348:	0800137d 	.word	0x0800137d
 800134c:	08001395 	.word	0x08001395
 8001350:	08001395 	.word	0x08001395
 8001354:	08001395 	.word	0x08001395
 8001358:	08001383 	.word	0x08001383
 800135c:	08001395 	.word	0x08001395
 8001360:	08001395 	.word	0x08001395
 8001364:	08001395 	.word	0x08001395
 8001368:	08001389 	.word	0x08001389
 800136c:	08001395 	.word	0x08001395
 8001370:	08001395 	.word	0x08001395
 8001374:	08001395 	.word	0x08001395
 8001378:	0800138f 	.word	0x0800138f
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 800137e:	61bb      	str	r3, [r7, #24]
    break;
 8001380:	e008      	b.n	8001394 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8001384:	61bb      	str	r3, [r7, #24]
    break;
 8001386:	e005      	b.n	8001394 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 800138a:	61bb      	str	r3, [r7, #24]
    break;
 800138c:	e002      	b.n	8001394 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 8001390:	61bb      	str	r3, [r7, #24]
    break;    
 8001392:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001394:	2300      	movs	r3, #0
 8001396:	77fb      	strb	r3, [r7, #31]
 8001398:	e017      	b.n	80013ca <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800139a:	7ffb      	ldrb	r3, [r7, #31]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	f107 0220 	add.w	r2, r7, #32
 80013a2:	4413      	add	r3, r2
 80013a4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80013a8:	ee07 3a90 	vmov	s15, r3
 80013ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013b0:	7ffb      	ldrb	r3, [r7, #31]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80013c4:	7ffb      	ldrb	r3, [r7, #31]
 80013c6:	3301      	adds	r3, #1
 80013c8:	77fb      	strb	r3, [r7, #31]
 80013ca:	7ffb      	ldrb	r3, [r7, #31]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d9e4      	bls.n	800139a <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 80013d0:	bf00      	nop
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	410c0000 	.word	0x410c0000
 80013dc:	418c0000 	.word	0x418c0000
 80013e0:	420c0000 	.word	0x420c0000
 80013e4:	428c0000 	.word	0x428c0000

080013e8 <HAL_GPIO_EXTI_Callback>:
float now_speed[3]={0,}, goal_speed[3]={0,};
float now_angle[3];
float goal_angle[3]={0,};

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET)
 80013f2:	2110      	movs	r1, #16
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f8:	f002 ff94 	bl	8004324 <HAL_GPIO_ReadPin>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d10b      	bne.n	800141a <HAL_GPIO_EXTI_Callback+0x32>
	{
		HighTime[Count++] = msTime;
 8001402:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <HAL_GPIO_EXTI_Callback+0xd4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	492b      	ldr	r1, [pc, #172]	; (80014bc <HAL_GPIO_EXTI_Callback+0xd4>)
 800140e:	600a      	str	r2, [r1, #0]
 8001410:	b201      	sxth	r1, r0
 8001412:	4a2b      	ldr	r2, [pc, #172]	; (80014c0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001414:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		{
			Count =0;
			msTime =0;
		}
	}
}
 8001418:	e049      	b.n	80014ae <HAL_GPIO_EXTI_Callback+0xc6>
	else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET)
 800141a:	2110      	movs	r1, #16
 800141c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001420:	f002 ff80 	bl	8004324 <HAL_GPIO_ReadPin>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d141      	bne.n	80014ae <HAL_GPIO_EXTI_Callback+0xc6>
		if(Count > 0)
 800142a:	4b24      	ldr	r3, [pc, #144]	; (80014bc <HAL_GPIO_EXTI_Callback+0xd4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d033      	beq.n	800149a <HAL_GPIO_EXTI_Callback+0xb2>
			LowTime[Count-1] = msTime;
 8001432:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <HAL_GPIO_EXTI_Callback+0xd4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3b01      	subs	r3, #1
 800143c:	b211      	sxth	r1, r2
 800143e:	4a21      	ldr	r2, [pc, #132]	; (80014c4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001440:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(LowTime[Count-1] - HighTime[Count-1]>600)
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <HAL_GPIO_EXTI_Callback+0xd4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3b01      	subs	r3, #1
 800144a:	4a1e      	ldr	r2, [pc, #120]	; (80014c4 <HAL_GPIO_EXTI_Callback+0xdc>)
 800144c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001450:	4619      	mov	r1, r3
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_GPIO_EXTI_Callback+0xd4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3b01      	subs	r3, #1
 8001458:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <HAL_GPIO_EXTI_Callback+0xd8>)
 800145a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800145e:	1acb      	subs	r3, r1, r3
 8001460:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001464:	dd02      	ble.n	800146c <HAL_GPIO_EXTI_Callback+0x84>
				Count=9;
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_GPIO_EXTI_Callback+0xd4>)
 8001468:	2209      	movs	r2, #9
 800146a:	601a      	str	r2, [r3, #0]
			PwmTime[Count-1] = LowTime[Count-1] - HighTime[Count-1];
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <HAL_GPIO_EXTI_Callback+0xd4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3b01      	subs	r3, #1
 8001472:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001474:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001478:	b29a      	uxth	r2, r3
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_GPIO_EXTI_Callback+0xd4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3b01      	subs	r3, #1
 8001480:	490f      	ldr	r1, [pc, #60]	; (80014c0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001482:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001486:	b29b      	uxth	r3, r3
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_GPIO_EXTI_Callback+0xd4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3b01      	subs	r3, #1
 8001492:	b211      	sxth	r1, r2
 8001494:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001496:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(Count>8)
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_GPIO_EXTI_Callback+0xd4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d905      	bls.n	80014ae <HAL_GPIO_EXTI_Callback+0xc6>
			Count =0;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_GPIO_EXTI_Callback+0xd4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
			msTime =0;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_GPIO_EXTI_Callback+0xd0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000284 	.word	0x20000284
 80014bc:	20000280 	.word	0x20000280
 80014c0:	20000454 	.word	0x20000454
 80014c4:	20000b0c 	.word	0x20000b0c
 80014c8:	200003f0 	.word	0x200003f0

080014cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014dc:	d104      	bne.n	80014e8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		msTime++;
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	4a03      	ldr	r2, [pc, #12]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80014e6:	6013      	str	r3, [r2, #0]
	}
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	20000284 	.word	0x20000284

080014f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fe:	f002 f9c0 	bl	8003882 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001502:	f000 fd95 	bl	8002030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001506:	f001 f9b1 	bl	800286c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800150a:	f000 fe35 	bl	8002178 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800150e:	f000 fe6b 	bl	80021e8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001512:	f000 fea9 	bl	8002268 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001516:	f000 fecd 	bl	80022b4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800151a:	f001 f919 	bl	8002750 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800151e:	f001 f947 	bl	80027b0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001522:	f001 f975 	bl	8002810 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8001526:	f000 ff03 	bl	8002330 <MX_TIM2_Init>
  MX_TIM3_Init();
 800152a:	f000 ff4d 	bl	80023c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800152e:	f000 ffc3 	bl	80024b8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001532:	f001 f839 	bl	80025a8 <MX_TIM5_Init>
  MX_TIM17_Init();
 8001536:	f001 f893 	bl	8002660 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800153a:	480d      	ldr	r0, [pc, #52]	; (8001570 <main+0x78>)
 800153c:	f005 fb06 	bl	8006b4c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001540:	2100      	movs	r1, #0
 8001542:	480c      	ldr	r0, [pc, #48]	; (8001574 <main+0x7c>)
 8001544:	f005 fbca 	bl	8006cdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001548:	2100      	movs	r1, #0
 800154a:	480b      	ldr	r0, [pc, #44]	; (8001578 <main+0x80>)
 800154c:	f005 fbc6 	bl	8006cdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001550:	2108      	movs	r1, #8
 8001552:	480a      	ldr	r0, [pc, #40]	; (800157c <main+0x84>)
 8001554:	f005 fbc2 	bl	8006cdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001558:	2108      	movs	r1, #8
 800155a:	4809      	ldr	r0, [pc, #36]	; (8001580 <main+0x88>)
 800155c:	f005 fbbe 	bl	8006cdc <HAL_TIM_PWM_Start>
  BSP_ACCELERO_Init();
 8001560:	f001 fc60 	bl	8002e24 <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 8001564:	f001 fcb4 	bl	8002ed0 <BSP_GYRO_Init>

  for(int j=0; j<100; j++)
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	e061      	b.n	8001632 <main+0x13a>
 800156e:	bf00      	nop
 8001570:	20000b20 	.word	0x20000b20
 8001574:	20000940 	.word	0x20000940
 8001578:	20000990 	.word	0x20000990
 800157c:	20000408 	.word	0x20000408
 8001580:	200009dc 	.word	0x200009dc
  {
	  BSP_ACCELERO_AccGetXYZ(Acc_XYZ_Data);
 8001584:	48d4      	ldr	r0, [pc, #848]	; (80018d8 <main+0x3e0>)
 8001586:	f001 fc8b 	bl	8002ea0 <BSP_ACCELERO_AccGetXYZ>
	  BSP_GYRO_GetXYZ(Gyro_XYZ_Data);
 800158a:	48d4      	ldr	r0, [pc, #848]	; (80018dc <main+0x3e4>)
 800158c:	f001 fce2 	bl	8002f54 <BSP_GYRO_GetXYZ>
	  sum[0] += Acc_XYZ_Data[0];
 8001590:	4bd3      	ldr	r3, [pc, #844]	; (80018e0 <main+0x3e8>)
 8001592:	ed93 7a00 	vldr	s14, [r3]
 8001596:	4bd0      	ldr	r3, [pc, #832]	; (80018d8 <main+0x3e0>)
 8001598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a8:	4bcd      	ldr	r3, [pc, #820]	; (80018e0 <main+0x3e8>)
 80015aa:	edc3 7a00 	vstr	s15, [r3]
	  sum[1] += Acc_XYZ_Data[1];
 80015ae:	4bcc      	ldr	r3, [pc, #816]	; (80018e0 <main+0x3e8>)
 80015b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80015b4:	4bc8      	ldr	r3, [pc, #800]	; (80018d8 <main+0x3e0>)
 80015b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c6:	4bc6      	ldr	r3, [pc, #792]	; (80018e0 <main+0x3e8>)
 80015c8:	edc3 7a01 	vstr	s15, [r3, #4]
	  sum[2] += Acc_XYZ_Data[2];
 80015cc:	4bc4      	ldr	r3, [pc, #784]	; (80018e0 <main+0x3e8>)
 80015ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80015d2:	4bc1      	ldr	r3, [pc, #772]	; (80018d8 <main+0x3e0>)
 80015d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015d8:	ee07 3a90 	vmov	s15, r3
 80015dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e4:	4bbe      	ldr	r3, [pc, #760]	; (80018e0 <main+0x3e8>)
 80015e6:	edc3 7a02 	vstr	s15, [r3, #8]
	  g_sum[0] += Gyro_XYZ_Data[0];
 80015ea:	4bbe      	ldr	r3, [pc, #760]	; (80018e4 <main+0x3ec>)
 80015ec:	ed93 7a00 	vldr	s14, [r3]
 80015f0:	4bba      	ldr	r3, [pc, #744]	; (80018dc <main+0x3e4>)
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fa:	4bba      	ldr	r3, [pc, #744]	; (80018e4 <main+0x3ec>)
 80015fc:	edc3 7a00 	vstr	s15, [r3]
	  g_sum[1] += Gyro_XYZ_Data[1];
 8001600:	4bb8      	ldr	r3, [pc, #736]	; (80018e4 <main+0x3ec>)
 8001602:	ed93 7a01 	vldr	s14, [r3, #4]
 8001606:	4bb5      	ldr	r3, [pc, #724]	; (80018dc <main+0x3e4>)
 8001608:	edd3 7a01 	vldr	s15, [r3, #4]
 800160c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001610:	4bb4      	ldr	r3, [pc, #720]	; (80018e4 <main+0x3ec>)
 8001612:	edc3 7a01 	vstr	s15, [r3, #4]
	  g_sum[2] += Gyro_XYZ_Data[2];
 8001616:	4bb3      	ldr	r3, [pc, #716]	; (80018e4 <main+0x3ec>)
 8001618:	ed93 7a02 	vldr	s14, [r3, #8]
 800161c:	4baf      	ldr	r3, [pc, #700]	; (80018dc <main+0x3e4>)
 800161e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001626:	4baf      	ldr	r3, [pc, #700]	; (80018e4 <main+0x3ec>)
 8001628:	edc3 7a02 	vstr	s15, [r3, #8]
  for(int j=0; j<100; j++)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3301      	adds	r3, #1
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b63      	cmp	r3, #99	; 0x63
 8001636:	dda5      	ble.n	8001584 <main+0x8c>
  }
  BaseAc[0] = sum[0] / 100;
 8001638:	4ba9      	ldr	r3, [pc, #676]	; (80018e0 <main+0x3e8>)
 800163a:	ed93 7a00 	vldr	s14, [r3]
 800163e:	eddf 6aaa 	vldr	s13, [pc, #680]	; 80018e8 <main+0x3f0>
 8001642:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001646:	4ba9      	ldr	r3, [pc, #676]	; (80018ec <main+0x3f4>)
 8001648:	edc3 7a00 	vstr	s15, [r3]
  BaseAc[1] = sum[1] / 100;
 800164c:	4ba4      	ldr	r3, [pc, #656]	; (80018e0 <main+0x3e8>)
 800164e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001652:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80018e8 <main+0x3f0>
 8001656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800165a:	4ba4      	ldr	r3, [pc, #656]	; (80018ec <main+0x3f4>)
 800165c:	edc3 7a01 	vstr	s15, [r3, #4]
  BaseAc[2] = sum[2] / 100;
 8001660:	4b9f      	ldr	r3, [pc, #636]	; (80018e0 <main+0x3e8>)
 8001662:	ed93 7a02 	vldr	s14, [r3, #8]
 8001666:	eddf 6aa0 	vldr	s13, [pc, #640]	; 80018e8 <main+0x3f0>
 800166a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800166e:	4b9f      	ldr	r3, [pc, #636]	; (80018ec <main+0x3f4>)
 8001670:	edc3 7a02 	vstr	s15, [r3, #8]
  BaseG[0] = g_sum[0] / 100;
 8001674:	4b9b      	ldr	r3, [pc, #620]	; (80018e4 <main+0x3ec>)
 8001676:	ed93 7a00 	vldr	s14, [r3]
 800167a:	eddf 6a9b 	vldr	s13, [pc, #620]	; 80018e8 <main+0x3f0>
 800167e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001682:	4b9b      	ldr	r3, [pc, #620]	; (80018f0 <main+0x3f8>)
 8001684:	edc3 7a00 	vstr	s15, [r3]
  BaseG[1] = g_sum[1] / 100;
 8001688:	4b96      	ldr	r3, [pc, #600]	; (80018e4 <main+0x3ec>)
 800168a:	ed93 7a01 	vldr	s14, [r3, #4]
 800168e:	eddf 6a96 	vldr	s13, [pc, #600]	; 80018e8 <main+0x3f0>
 8001692:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001696:	4b96      	ldr	r3, [pc, #600]	; (80018f0 <main+0x3f8>)
 8001698:	edc3 7a01 	vstr	s15, [r3, #4]
  BaseG[2] = g_sum[2] / 100;
 800169c:	4b91      	ldr	r3, [pc, #580]	; (80018e4 <main+0x3ec>)
 800169e:	ed93 7a02 	vldr	s14, [r3, #8]
 80016a2:	eddf 6a91 	vldr	s13, [pc, #580]	; 80018e8 <main+0x3f0>
 80016a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016aa:	4b91      	ldr	r3, [pc, #580]	; (80018f0 <main+0x3f8>)
 80016ac:	edc3 7a02 	vstr	s15, [r3, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_ACCELERO_AccGetXYZ(Acc_XYZ_Data);
 80016b0:	4889      	ldr	r0, [pc, #548]	; (80018d8 <main+0x3e0>)
 80016b2:	f001 fbf5 	bl	8002ea0 <BSP_ACCELERO_AccGetXYZ>
	  BSP_GYRO_GetXYZ(Gyro_XYZ_Data);
 80016b6:	4889      	ldr	r0, [pc, #548]	; (80018dc <main+0x3e4>)
 80016b8:	f001 fc4c 	bl	8002f54 <BSP_GYRO_GetXYZ>

	  AcXYZ[0] = Acc_XYZ_Data[0] - BaseAc[0];
 80016bc:	4b86      	ldr	r3, [pc, #536]	; (80018d8 <main+0x3e0>)
 80016be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ca:	4b88      	ldr	r3, [pc, #544]	; (80018ec <main+0x3f4>)
 80016cc:	edd3 7a00 	vldr	s15, [r3]
 80016d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d4:	4b87      	ldr	r3, [pc, #540]	; (80018f4 <main+0x3fc>)
 80016d6:	edc3 7a00 	vstr	s15, [r3]
	  AcXYZ[1] = Acc_XYZ_Data[1] - BaseAc[1];
 80016da:	4b7f      	ldr	r3, [pc, #508]	; (80018d8 <main+0x3e0>)
 80016dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e8:	4b80      	ldr	r3, [pc, #512]	; (80018ec <main+0x3f4>)
 80016ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80016ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f2:	4b80      	ldr	r3, [pc, #512]	; (80018f4 <main+0x3fc>)
 80016f4:	edc3 7a01 	vstr	s15, [r3, #4]
	  AcXYZ[2] = Acc_XYZ_Data[2] +1008- BaseAc[2];
 80016f8:	4b77      	ldr	r3, [pc, #476]	; (80018d8 <main+0x3e0>)
 80016fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016fe:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170a:	4b78      	ldr	r3, [pc, #480]	; (80018ec <main+0x3f4>)
 800170c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001710:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001714:	4b77      	ldr	r3, [pc, #476]	; (80018f4 <main+0x3fc>)
 8001716:	edc3 7a02 	vstr	s15, [r3, #8]

	  GyroX = (Gyro_XYZ_Data[0] - BaseG[0]) / 131;
 800171a:	4b70      	ldr	r3, [pc, #448]	; (80018dc <main+0x3e4>)
 800171c:	ed93 7a00 	vldr	s14, [r3]
 8001720:	4b73      	ldr	r3, [pc, #460]	; (80018f0 <main+0x3f8>)
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	ee37 7a67 	vsub.f32	s14, s14, s15
 800172a:	eddf 6a73 	vldr	s13, [pc, #460]	; 80018f8 <main+0x400>
 800172e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001732:	4b72      	ldr	r3, [pc, #456]	; (80018fc <main+0x404>)
 8001734:	edc3 7a00 	vstr	s15, [r3]
	  GyroY = (Gyro_XYZ_Data[1] - BaseG[1]) / 131;
 8001738:	4b68      	ldr	r3, [pc, #416]	; (80018dc <main+0x3e4>)
 800173a:	ed93 7a01 	vldr	s14, [r3, #4]
 800173e:	4b6c      	ldr	r3, [pc, #432]	; (80018f0 <main+0x3f8>)
 8001740:	edd3 7a01 	vldr	s15, [r3, #4]
 8001744:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001748:	eddf 6a6b 	vldr	s13, [pc, #428]	; 80018f8 <main+0x400>
 800174c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001750:	4b6b      	ldr	r3, [pc, #428]	; (8001900 <main+0x408>)
 8001752:	edc3 7a00 	vstr	s15, [r3]
	  GyroZ = (Gyro_XYZ_Data[2] - BaseG[2]) / 131;
 8001756:	4b61      	ldr	r3, [pc, #388]	; (80018dc <main+0x3e4>)
 8001758:	ed93 7a02 	vldr	s14, [r3, #8]
 800175c:	4b64      	ldr	r3, [pc, #400]	; (80018f0 <main+0x3f8>)
 800175e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001762:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001766:	eddf 6a64 	vldr	s13, [pc, #400]	; 80018f8 <main+0x400>
 800176a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800176e:	4b65      	ldr	r3, [pc, #404]	; (8001904 <main+0x40c>)
 8001770:	edc3 7a00 	vstr	s15, [r3]

	  accel_xz = sqrt(pow(AcXYZ[0],2) + pow(AcXYZ[2],2));
 8001774:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <main+0x3fc>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fee5 	bl	8000548 <__aeabi_f2d>
 800177e:	4603      	mov	r3, r0
 8001780:	460c      	mov	r4, r1
 8001782:	ed9f 1b53 	vldr	d1, [pc, #332]	; 80018d0 <main+0x3d8>
 8001786:	ec44 3b10 	vmov	d0, r3, r4
 800178a:	f00b f9f3 	bl	800cb74 <pow>
 800178e:	ec55 4b10 	vmov	r4, r5, d0
 8001792:	4b58      	ldr	r3, [pc, #352]	; (80018f4 <main+0x3fc>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fed6 	bl	8000548 <__aeabi_f2d>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 80018d0 <main+0x3d8>
 80017a4:	ec43 2b10 	vmov	d0, r2, r3
 80017a8:	f00b f9e4 	bl	800cb74 <pow>
 80017ac:	ec53 2b10 	vmov	r2, r3, d0
 80017b0:	4620      	mov	r0, r4
 80017b2:	4629      	mov	r1, r5
 80017b4:	f7fe fd6a 	bl	800028c <__adddf3>
 80017b8:	4603      	mov	r3, r0
 80017ba:	460c      	mov	r4, r1
 80017bc:	ec44 3b17 	vmov	d7, r3, r4
 80017c0:	eeb0 0a47 	vmov.f32	s0, s14
 80017c4:	eef0 0a67 	vmov.f32	s1, s15
 80017c8:	f00b fb44 	bl	800ce54 <sqrt>
 80017cc:	ec54 3b10 	vmov	r3, r4, d0
 80017d0:	4618      	mov	r0, r3
 80017d2:	4621      	mov	r1, r4
 80017d4:	f7ff fa08 	bl	8000be8 <__aeabi_d2f>
 80017d8:	4602      	mov	r2, r0
 80017da:	4b4b      	ldr	r3, [pc, #300]	; (8001908 <main+0x410>)
 80017dc:	601a      	str	r2, [r3, #0]
	  accel_angle_x = atan(-AcXYZ[1]/accel_xz) * RADIANS_TO_DEGREES;
 80017de:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <main+0x3fc>)
 80017e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80017e4:	eeb1 7a67 	vneg.f32	s14, s15
 80017e8:	4b47      	ldr	r3, [pc, #284]	; (8001908 <main+0x410>)
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017f2:	ee16 0a90 	vmov	r0, s13
 80017f6:	f7fe fea7 	bl	8000548 <__aeabi_f2d>
 80017fa:	4603      	mov	r3, r0
 80017fc:	460c      	mov	r4, r1
 80017fe:	ec44 3b10 	vmov	d0, r3, r4
 8001802:	f00b f80d 	bl	800c820 <atan>
 8001806:	ec56 5b10 	vmov	r5, r6, d0
 800180a:	4b40      	ldr	r3, [pc, #256]	; (800190c <main+0x414>)
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fe9b 	bl	8000548 <__aeabi_f2d>
 8001812:	4603      	mov	r3, r0
 8001814:	460c      	mov	r4, r1
 8001816:	461a      	mov	r2, r3
 8001818:	4623      	mov	r3, r4
 800181a:	4628      	mov	r0, r5
 800181c:	4631      	mov	r1, r6
 800181e:	f7fe feeb 	bl	80005f8 <__aeabi_dmul>
 8001822:	4603      	mov	r3, r0
 8001824:	460c      	mov	r4, r1
 8001826:	4618      	mov	r0, r3
 8001828:	4621      	mov	r1, r4
 800182a:	f7ff f9dd 	bl	8000be8 <__aeabi_d2f>
 800182e:	4602      	mov	r2, r0
 8001830:	4b37      	ldr	r3, [pc, #220]	; (8001910 <main+0x418>)
 8001832:	601a      	str	r2, [r3, #0]
	  accel_yz = sqrt(pow(AcXYZ[1],2) + pow(AcXYZ[2],2));
 8001834:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <main+0x3fc>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe85 	bl	8000548 <__aeabi_f2d>
 800183e:	4603      	mov	r3, r0
 8001840:	460c      	mov	r4, r1
 8001842:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80018d0 <main+0x3d8>
 8001846:	ec44 3b10 	vmov	d0, r3, r4
 800184a:	f00b f993 	bl	800cb74 <pow>
 800184e:	ec55 4b10 	vmov	r4, r5, d0
 8001852:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <main+0x3fc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe76 	bl	8000548 <__aeabi_f2d>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80018d0 <main+0x3d8>
 8001864:	ec43 2b10 	vmov	d0, r2, r3
 8001868:	f00b f984 	bl	800cb74 <pow>
 800186c:	ec53 2b10 	vmov	r2, r3, d0
 8001870:	4620      	mov	r0, r4
 8001872:	4629      	mov	r1, r5
 8001874:	f7fe fd0a 	bl	800028c <__adddf3>
 8001878:	4603      	mov	r3, r0
 800187a:	460c      	mov	r4, r1
 800187c:	ec44 3b17 	vmov	d7, r3, r4
 8001880:	eeb0 0a47 	vmov.f32	s0, s14
 8001884:	eef0 0a67 	vmov.f32	s1, s15
 8001888:	f00b fae4 	bl	800ce54 <sqrt>
 800188c:	ec54 3b10 	vmov	r3, r4, d0
 8001890:	4618      	mov	r0, r3
 8001892:	4621      	mov	r1, r4
 8001894:	f7ff f9a8 	bl	8000be8 <__aeabi_d2f>
 8001898:	4602      	mov	r2, r0
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <main+0x41c>)
 800189c:	601a      	str	r2, [r3, #0]
	  accel_angle_y = atan(-AcXYZ[0]/accel_yz) * RADIANS_TO_DEGREES;
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <main+0x3fc>)
 80018a0:	edd3 7a00 	vldr	s15, [r3]
 80018a4:	eeb1 7a67 	vneg.f32	s14, s15
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <main+0x41c>)
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80018b2:	ee16 0a90 	vmov	r0, s13
 80018b6:	f7fe fe47 	bl	8000548 <__aeabi_f2d>
 80018ba:	4603      	mov	r3, r0
 80018bc:	460c      	mov	r4, r1
 80018be:	ec44 3b10 	vmov	d0, r3, r4
 80018c2:	f00a ffad 	bl	800c820 <atan>
 80018c6:	ec56 5b10 	vmov	r5, r6, d0
 80018ca:	e025      	b.n	8001918 <main+0x420>
 80018cc:	f3af 8000 	nop.w
 80018d0:	00000000 	.word	0x00000000
 80018d4:	40000000 	.word	0x40000000
 80018d8:	20000298 	.word	0x20000298
 80018dc:	200002a0 	.word	0x200002a0
 80018e0:	200002b8 	.word	0x200002b8
 80018e4:	200002c4 	.word	0x200002c4
 80018e8:	42c80000 	.word	0x42c80000
 80018ec:	200002e8 	.word	0x200002e8
 80018f0:	200002f4 	.word	0x200002f4
 80018f4:	200002dc 	.word	0x200002dc
 80018f8:	43030000 	.word	0x43030000
 80018fc:	200002ac 	.word	0x200002ac
 8001900:	200002b0 	.word	0x200002b0
 8001904:	200002b4 	.word	0x200002b4
 8001908:	20000bc0 	.word	0x20000bc0
 800190c:	42652eee 	.word	0x42652eee
 8001910:	20000404 	.word	0x20000404
 8001914:	2000098c 	.word	0x2000098c
 8001918:	4bc9      	ldr	r3, [pc, #804]	; (8001c40 <main+0x748>)
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fe14 	bl	8000548 <__aeabi_f2d>
 8001920:	4603      	mov	r3, r0
 8001922:	460c      	mov	r4, r1
 8001924:	461a      	mov	r2, r3
 8001926:	4623      	mov	r3, r4
 8001928:	4628      	mov	r0, r5
 800192a:	4631      	mov	r1, r6
 800192c:	f7fe fe64 	bl	80005f8 <__aeabi_dmul>
 8001930:	4603      	mov	r3, r0
 8001932:	460c      	mov	r4, r1
 8001934:	4618      	mov	r0, r3
 8001936:	4621      	mov	r1, r4
 8001938:	f7ff f956 	bl	8000be8 <__aeabi_d2f>
 800193c:	4602      	mov	r2, r0
 800193e:	4bc1      	ldr	r3, [pc, #772]	; (8001c44 <main+0x74c>)
 8001940:	601a      	str	r2, [r3, #0]
	  accel_angle_z = 0;
 8001942:	4bc1      	ldr	r3, [pc, #772]	; (8001c48 <main+0x750>)
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	601a      	str	r2, [r3, #0]

	  temp_angleX = now_angle[0] + GyroX * DTime;
 800194a:	4bc0      	ldr	r3, [pc, #768]	; (8001c4c <main+0x754>)
 800194c:	ed93 7a00 	vldr	s14, [r3]
 8001950:	4bbf      	ldr	r3, [pc, #764]	; (8001c50 <main+0x758>)
 8001952:	edd3 6a00 	vldr	s13, [r3]
 8001956:	4bbf      	ldr	r3, [pc, #764]	; (8001c54 <main+0x75c>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001964:	4bbc      	ldr	r3, [pc, #752]	; (8001c58 <main+0x760>)
 8001966:	edc3 7a00 	vstr	s15, [r3]
	  temp_angleY = now_angle[1] + GyroY * DTime;
 800196a:	4bb8      	ldr	r3, [pc, #736]	; (8001c4c <main+0x754>)
 800196c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001970:	4bba      	ldr	r3, [pc, #744]	; (8001c5c <main+0x764>)
 8001972:	edd3 6a00 	vldr	s13, [r3]
 8001976:	4bb7      	ldr	r3, [pc, #732]	; (8001c54 <main+0x75c>)
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001984:	4bb6      	ldr	r3, [pc, #728]	; (8001c60 <main+0x768>)
 8001986:	edc3 7a00 	vstr	s15, [r3]
	  temp_angleZ = now_angle[2] + GyroZ * DTime;
 800198a:	4bb0      	ldr	r3, [pc, #704]	; (8001c4c <main+0x754>)
 800198c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001990:	4bb4      	ldr	r3, [pc, #720]	; (8001c64 <main+0x76c>)
 8001992:	edd3 6a00 	vldr	s13, [r3]
 8001996:	4baf      	ldr	r3, [pc, #700]	; (8001c54 <main+0x75c>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a4:	4bb0      	ldr	r3, [pc, #704]	; (8001c68 <main+0x770>)
 80019a6:	edc3 7a00 	vstr	s15, [r3]

	  now_angle[0] = 0.09 * temp_angleX + (0.8)*accel_angle_x;			//x		Pitch
 80019aa:	4bab      	ldr	r3, [pc, #684]	; (8001c58 <main+0x760>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdca 	bl	8000548 <__aeabi_f2d>
 80019b4:	a39e      	add	r3, pc, #632	; (adr r3, 8001c30 <main+0x738>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	f7fe fe1d 	bl	80005f8 <__aeabi_dmul>
 80019be:	4603      	mov	r3, r0
 80019c0:	460c      	mov	r4, r1
 80019c2:	4625      	mov	r5, r4
 80019c4:	461c      	mov	r4, r3
 80019c6:	4ba9      	ldr	r3, [pc, #676]	; (8001c6c <main+0x774>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fdbc 	bl	8000548 <__aeabi_f2d>
 80019d0:	a399      	add	r3, pc, #612	; (adr r3, 8001c38 <main+0x740>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f7fe fe0f 	bl	80005f8 <__aeabi_dmul>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4620      	mov	r0, r4
 80019e0:	4629      	mov	r1, r5
 80019e2:	f7fe fc53 	bl	800028c <__adddf3>
 80019e6:	4603      	mov	r3, r0
 80019e8:	460c      	mov	r4, r1
 80019ea:	4618      	mov	r0, r3
 80019ec:	4621      	mov	r1, r4
 80019ee:	f7ff f8fb 	bl	8000be8 <__aeabi_d2f>
 80019f2:	4602      	mov	r2, r0
 80019f4:	4b95      	ldr	r3, [pc, #596]	; (8001c4c <main+0x754>)
 80019f6:	601a      	str	r2, [r3, #0]
	  now_angle[1] = 0.09 * temp_angleY + (0.8)*accel_angle_y;			//y		Roll
 80019f8:	4b99      	ldr	r3, [pc, #612]	; (8001c60 <main+0x768>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fda3 	bl	8000548 <__aeabi_f2d>
 8001a02:	a38b      	add	r3, pc, #556	; (adr r3, 8001c30 <main+0x738>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fdf6 	bl	80005f8 <__aeabi_dmul>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	460c      	mov	r4, r1
 8001a10:	4625      	mov	r5, r4
 8001a12:	461c      	mov	r4, r3
 8001a14:	4b8b      	ldr	r3, [pc, #556]	; (8001c44 <main+0x74c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fd95 	bl	8000548 <__aeabi_f2d>
 8001a1e:	a386      	add	r3, pc, #536	; (adr r3, 8001c38 <main+0x740>)
 8001a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a24:	f7fe fde8 	bl	80005f8 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	4629      	mov	r1, r5
 8001a30:	f7fe fc2c 	bl	800028c <__adddf3>
 8001a34:	4603      	mov	r3, r0
 8001a36:	460c      	mov	r4, r1
 8001a38:	4618      	mov	r0, r3
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	f7ff f8d4 	bl	8000be8 <__aeabi_d2f>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b82      	ldr	r3, [pc, #520]	; (8001c4c <main+0x754>)
 8001a44:	605a      	str	r2, [r3, #4]
	  now_angle[2] = 0.09 * temp_angleZ + (0.8)*accel_angle_z;			//z		Yaw
 8001a46:	4b88      	ldr	r3, [pc, #544]	; (8001c68 <main+0x770>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fd7c 	bl	8000548 <__aeabi_f2d>
 8001a50:	a377      	add	r3, pc, #476	; (adr r3, 8001c30 <main+0x738>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f7fe fdcf 	bl	80005f8 <__aeabi_dmul>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	460c      	mov	r4, r1
 8001a5e:	4625      	mov	r5, r4
 8001a60:	461c      	mov	r4, r3
 8001a62:	4b79      	ldr	r3, [pc, #484]	; (8001c48 <main+0x750>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd6e 	bl	8000548 <__aeabi_f2d>
 8001a6c:	a372      	add	r3, pc, #456	; (adr r3, 8001c38 <main+0x740>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	f7fe fdc1 	bl	80005f8 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	4629      	mov	r1, r5
 8001a7e:	f7fe fc05 	bl	800028c <__adddf3>
 8001a82:	4603      	mov	r3, r0
 8001a84:	460c      	mov	r4, r1
 8001a86:	4618      	mov	r0, r3
 8001a88:	4621      	mov	r1, r4
 8001a8a:	f7ff f8ad 	bl	8000be8 <__aeabi_d2f>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	4b6e      	ldr	r3, [pc, #440]	; (8001c4c <main+0x754>)
 8001a92:	609a      	str	r2, [r3, #8]

	  goal_angle[0] = (PwmTime[2]-112);
 8001a94:	4b76      	ldr	r3, [pc, #472]	; (8001c70 <main+0x778>)
 8001a96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a9a:	3b70      	subs	r3, #112	; 0x70
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa4:	4b73      	ldr	r3, [pc, #460]	; (8001c74 <main+0x77c>)
 8001aa6:	edc3 7a00 	vstr	s15, [r3]
	  goal_angle[1] = -(PwmTime[0]-112);
 8001aaa:	4b71      	ldr	r3, [pc, #452]	; (8001c70 <main+0x778>)
 8001aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab0:	f1c3 0370 	rsb	r3, r3, #112	; 0x70
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001abc:	4b6d      	ldr	r3, [pc, #436]	; (8001c74 <main+0x77c>)
 8001abe:	edc3 7a01 	vstr	s15, [r3, #4]
	  goal_angle[2] = -(PwmTime[3]-112);
 8001ac2:	4b6b      	ldr	r3, [pc, #428]	; (8001c70 <main+0x778>)
 8001ac4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ac8:	f1c3 0370 	rsb	r3, r3, #112	; 0x70
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad4:	4b67      	ldr	r3, [pc, #412]	; (8001c74 <main+0x77c>)
 8001ad6:	edc3 7a02 	vstr	s15, [r3, #8]

	  error[0] = (goal_angle[0] - now_angle[0]);
 8001ada:	4b66      	ldr	r3, [pc, #408]	; (8001c74 <main+0x77c>)
 8001adc:	ed93 7a00 	vldr	s14, [r3]
 8001ae0:	4b5a      	ldr	r3, [pc, #360]	; (8001c4c <main+0x754>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aea:	4b63      	ldr	r3, [pc, #396]	; (8001c78 <main+0x780>)
 8001aec:	edc3 7a00 	vstr	s15, [r3]
	  error[1] = (goal_angle[1] - now_angle[1]);
 8001af0:	4b60      	ldr	r3, [pc, #384]	; (8001c74 <main+0x77c>)
 8001af2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001af6:	4b55      	ldr	r3, [pc, #340]	; (8001c4c <main+0x754>)
 8001af8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b00:	4b5d      	ldr	r3, [pc, #372]	; (8001c78 <main+0x780>)
 8001b02:	edc3 7a01 	vstr	s15, [r3, #4]
	  error[2] = (goal_angle[2] - now_angle[2]);
 8001b06:	4b5b      	ldr	r3, [pc, #364]	; (8001c74 <main+0x77c>)
 8001b08:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b0c:	4b4f      	ldr	r3, [pc, #316]	; (8001c4c <main+0x754>)
 8001b0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b16:	4b58      	ldr	r3, [pc, #352]	; (8001c78 <main+0x780>)
 8001b18:	edc3 7a02 	vstr	s15, [r3, #8]

	  PID_P[0]  = Kp * error[0];
 8001b1c:	4b56      	ldr	r3, [pc, #344]	; (8001c78 <main+0x780>)
 8001b1e:	ed93 7a00 	vldr	s14, [r3]
 8001b22:	4b56      	ldr	r3, [pc, #344]	; (8001c7c <main+0x784>)
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b2c:	4b54      	ldr	r3, [pc, #336]	; (8001c80 <main+0x788>)
 8001b2e:	edc3 7a00 	vstr	s15, [r3]
	  PID_I[0]  = Ki * error[0] * DTime;
 8001b32:	4b51      	ldr	r3, [pc, #324]	; (8001c78 <main+0x780>)
 8001b34:	ed93 7a00 	vldr	s14, [r3]
 8001b38:	4b52      	ldr	r3, [pc, #328]	; (8001c84 <main+0x78c>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b42:	4b44      	ldr	r3, [pc, #272]	; (8001c54 <main+0x75c>)
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b4c:	4b4e      	ldr	r3, [pc, #312]	; (8001c88 <main+0x790>)
 8001b4e:	edc3 7a00 	vstr	s15, [r3]
	  PID_D[0]  = Kd * (error[0]-_error[0]) / DTime;
 8001b52:	4b49      	ldr	r3, [pc, #292]	; (8001c78 <main+0x780>)
 8001b54:	ed93 7a00 	vldr	s14, [r3]
 8001b58:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <main+0x794>)
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b62:	4b4b      	ldr	r3, [pc, #300]	; (8001c90 <main+0x798>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b6c:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <main+0x75c>)
 8001b6e:	ed93 7a00 	vldr	s14, [r3]
 8001b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b76:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <main+0x79c>)
 8001b78:	edc3 7a00 	vstr	s15, [r3]
	  PID[0]    = PID_P[0] + PID_I[0] + PID_D[0];
 8001b7c:	4b40      	ldr	r3, [pc, #256]	; (8001c80 <main+0x788>)
 8001b7e:	ed93 7a00 	vldr	s14, [r3]
 8001b82:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <main+0x790>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b8c:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <main+0x79c>)
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b96:	4b40      	ldr	r3, [pc, #256]	; (8001c98 <main+0x7a0>)
 8001b98:	edc3 7a00 	vstr	s15, [r3]

	  PID_P[1]  = Kp * error[1];
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <main+0x780>)
 8001b9e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ba2:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <main+0x784>)
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bac:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <main+0x788>)
 8001bae:	edc3 7a01 	vstr	s15, [r3, #4]
	  PID_I[1]  = Ki * error[1] * DTime;
 8001bb2:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <main+0x780>)
 8001bb4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bb8:	4b32      	ldr	r3, [pc, #200]	; (8001c84 <main+0x78c>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <main+0x75c>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bcc:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <main+0x790>)
 8001bce:	edc3 7a01 	vstr	s15, [r3, #4]
	  PID_D[1]  = Kd * (error[1]-_error[1]) / DTime;
 8001bd2:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <main+0x780>)
 8001bd4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bd8:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <main+0x794>)
 8001bda:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001be2:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <main+0x798>)
 8001be4:	edd3 7a00 	vldr	s15, [r3]
 8001be8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <main+0x75c>)
 8001bee:	ed93 7a00 	vldr	s14, [r3]
 8001bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bf6:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <main+0x79c>)
 8001bf8:	edc3 7a01 	vstr	s15, [r3, #4]
	  PID[1]    = PID_P[1] + PID_I[1] + PID_D[1];
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <main+0x788>)
 8001bfe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <main+0x790>)
 8001c04:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <main+0x79c>)
 8001c0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <main+0x7a0>)
 8001c18:	edc3 7a01 	vstr	s15, [r3, #4]

	  PID_P[2]  = Kp * error[2];
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <main+0x780>)
 8001c1e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c22:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <main+0x784>)
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2c:	e036      	b.n	8001c9c <main+0x7a4>
 8001c2e:	bf00      	nop
 8001c30:	70a3d70a 	.word	0x70a3d70a
 8001c34:	3fb70a3d 	.word	0x3fb70a3d
 8001c38:	9999999a 	.word	0x9999999a
 8001c3c:	3fe99999 	.word	0x3fe99999
 8001c40:	42652eee 	.word	0x42652eee
 8001c44:	20000b78 	.word	0x20000b78
 8001c48:	200008f0 	.word	0x200008f0
 8001c4c:	20000b6c 	.word	0x20000b6c
 8001c50:	200002ac 	.word	0x200002ac
 8001c54:	20000078 	.word	0x20000078
 8001c58:	200002d0 	.word	0x200002d0
 8001c5c:	200002b0 	.word	0x200002b0
 8001c60:	200002d4 	.word	0x200002d4
 8001c64:	200002b4 	.word	0x200002b4
 8001c68:	200002d8 	.word	0x200002d8
 8001c6c:	20000404 	.word	0x20000404
 8001c70:	200003f0 	.word	0x200003f0
 8001c74:	20000370 	.word	0x20000370
 8001c78:	20000310 	.word	0x20000310
 8001c7c:	20000068 	.word	0x20000068
 8001c80:	20000328 	.word	0x20000328
 8001c84:	2000006c 	.word	0x2000006c
 8001c88:	20000334 	.word	0x20000334
 8001c8c:	2000031c 	.word	0x2000031c
 8001c90:	20000070 	.word	0x20000070
 8001c94:	20000340 	.word	0x20000340
 8001c98:	20000304 	.word	0x20000304
 8001c9c:	4bb6      	ldr	r3, [pc, #728]	; (8001f78 <main+0xa80>)
 8001c9e:	edc3 7a02 	vstr	s15, [r3, #8]
	  PID_I[2]  = Ki * error[2] * DTime;
 8001ca2:	4bb6      	ldr	r3, [pc, #728]	; (8001f7c <main+0xa84>)
 8001ca4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ca8:	4bb5      	ldr	r3, [pc, #724]	; (8001f80 <main+0xa88>)
 8001caa:	edd3 7a00 	vldr	s15, [r3]
 8001cae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb2:	4bb4      	ldr	r3, [pc, #720]	; (8001f84 <main+0xa8c>)
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cbc:	4bb2      	ldr	r3, [pc, #712]	; (8001f88 <main+0xa90>)
 8001cbe:	edc3 7a02 	vstr	s15, [r3, #8]
	  PID_D[2]  = Kd * (error[2]-_error[2]) / DTime;
 8001cc2:	4bae      	ldr	r3, [pc, #696]	; (8001f7c <main+0xa84>)
 8001cc4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cc8:	4bb0      	ldr	r3, [pc, #704]	; (8001f8c <main+0xa94>)
 8001cca:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cd2:	4baf      	ldr	r3, [pc, #700]	; (8001f90 <main+0xa98>)
 8001cd4:	edd3 7a00 	vldr	s15, [r3]
 8001cd8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001cdc:	4ba9      	ldr	r3, [pc, #676]	; (8001f84 <main+0xa8c>)
 8001cde:	ed93 7a00 	vldr	s14, [r3]
 8001ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ce6:	4bab      	ldr	r3, [pc, #684]	; (8001f94 <main+0xa9c>)
 8001ce8:	edc3 7a02 	vstr	s15, [r3, #8]
	  PID[2]    = PID_P[2] + PID_I[2] + PID_D[2];
 8001cec:	4ba2      	ldr	r3, [pc, #648]	; (8001f78 <main+0xa80>)
 8001cee:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cf2:	4ba5      	ldr	r3, [pc, #660]	; (8001f88 <main+0xa90>)
 8001cf4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cfc:	4ba5      	ldr	r3, [pc, #660]	; (8001f94 <main+0xa9c>)
 8001cfe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d06:	4ba4      	ldr	r3, [pc, #656]	; (8001f98 <main+0xaa0>)
 8001d08:	edc3 7a02 	vstr	s15, [r3, #8]

	  g_error[0] = PID_P[0] - GyroX;
 8001d0c:	4b9a      	ldr	r3, [pc, #616]	; (8001f78 <main+0xa80>)
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	4ba2      	ldr	r3, [pc, #648]	; (8001f9c <main+0xaa4>)
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1c:	4ba0      	ldr	r3, [pc, #640]	; (8001fa0 <main+0xaa8>)
 8001d1e:	edc3 7a00 	vstr	s15, [r3]
	  g_error[1] = PID_P[1] - GyroY;
 8001d22:	4b95      	ldr	r3, [pc, #596]	; (8001f78 <main+0xa80>)
 8001d24:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d28:	4b9e      	ldr	r3, [pc, #632]	; (8001fa4 <main+0xaac>)
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d32:	4b9b      	ldr	r3, [pc, #620]	; (8001fa0 <main+0xaa8>)
 8001d34:	edc3 7a01 	vstr	s15, [r3, #4]
	  g_error[2] = PID_P[2] - GyroZ;
 8001d38:	4b8f      	ldr	r3, [pc, #572]	; (8001f78 <main+0xa80>)
 8001d3a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d3e:	4b9a      	ldr	r3, [pc, #616]	; (8001fa8 <main+0xab0>)
 8001d40:	edd3 7a00 	vldr	s15, [r3]
 8001d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d48:	4b95      	ldr	r3, [pc, #596]	; (8001fa0 <main+0xaa8>)
 8001d4a:	edc3 7a02 	vstr	s15, [r3, #8]

	  g_PID_P[0]  = g_Kp * g_error[0];
 8001d4e:	4b94      	ldr	r3, [pc, #592]	; (8001fa0 <main+0xaa8>)
 8001d50:	ed93 7a00 	vldr	s14, [r3]
 8001d54:	4b95      	ldr	r3, [pc, #596]	; (8001fac <main+0xab4>)
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5e:	4b94      	ldr	r3, [pc, #592]	; (8001fb0 <main+0xab8>)
 8001d60:	edc3 7a00 	vstr	s15, [r3]
	  g_PID_I[0] += g_Ki * g_error[0]*DTime;
 8001d64:	4b93      	ldr	r3, [pc, #588]	; (8001fb4 <main+0xabc>)
 8001d66:	ed93 7a00 	vldr	s14, [r3]
 8001d6a:	4b8d      	ldr	r3, [pc, #564]	; (8001fa0 <main+0xaa8>)
 8001d6c:	edd3 6a00 	vldr	s13, [r3]
 8001d70:	4b91      	ldr	r3, [pc, #580]	; (8001fb8 <main+0xac0>)
 8001d72:	edd3 7a00 	vldr	s15, [r3]
 8001d76:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d7a:	4b82      	ldr	r3, [pc, #520]	; (8001f84 <main+0xa8c>)
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d88:	4b8a      	ldr	r3, [pc, #552]	; (8001fb4 <main+0xabc>)
 8001d8a:	edc3 7a00 	vstr	s15, [r3]

	  g_PID_P[1]  = g_Kp * g_error[1];
 8001d8e:	4b84      	ldr	r3, [pc, #528]	; (8001fa0 <main+0xaa8>)
 8001d90:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d94:	4b85      	ldr	r3, [pc, #532]	; (8001fac <main+0xab4>)
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9e:	4b84      	ldr	r3, [pc, #528]	; (8001fb0 <main+0xab8>)
 8001da0:	edc3 7a01 	vstr	s15, [r3, #4]
	  g_PID_I[1] += g_Ki * g_error[1]*DTime;
 8001da4:	4b83      	ldr	r3, [pc, #524]	; (8001fb4 <main+0xabc>)
 8001da6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001daa:	4b7d      	ldr	r3, [pc, #500]	; (8001fa0 <main+0xaa8>)
 8001dac:	edd3 6a01 	vldr	s13, [r3, #4]
 8001db0:	4b81      	ldr	r3, [pc, #516]	; (8001fb8 <main+0xac0>)
 8001db2:	edd3 7a00 	vldr	s15, [r3]
 8001db6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dba:	4b72      	ldr	r3, [pc, #456]	; (8001f84 <main+0xa8c>)
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc8:	4b7a      	ldr	r3, [pc, #488]	; (8001fb4 <main+0xabc>)
 8001dca:	edc3 7a01 	vstr	s15, [r3, #4]

	  g_PID_P[2]  = g_Kp * g_error[2];
 8001dce:	4b74      	ldr	r3, [pc, #464]	; (8001fa0 <main+0xaa8>)
 8001dd0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001dd4:	4b75      	ldr	r3, [pc, #468]	; (8001fac <main+0xab4>)
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dde:	4b74      	ldr	r3, [pc, #464]	; (8001fb0 <main+0xab8>)
 8001de0:	edc3 7a02 	vstr	s15, [r3, #8]
	  g_PID_I[2] += g_Ki * g_error[2]*DTime;
 8001de4:	4b73      	ldr	r3, [pc, #460]	; (8001fb4 <main+0xabc>)
 8001de6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001dea:	4b6d      	ldr	r3, [pc, #436]	; (8001fa0 <main+0xaa8>)
 8001dec:	edd3 6a02 	vldr	s13, [r3, #8]
 8001df0:	4b71      	ldr	r3, [pc, #452]	; (8001fb8 <main+0xac0>)
 8001df2:	edd3 7a00 	vldr	s15, [r3]
 8001df6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dfa:	4b62      	ldr	r3, [pc, #392]	; (8001f84 <main+0xa8c>)
 8001dfc:	edd3 7a00 	vldr	s15, [r3]
 8001e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e08:	4b6a      	ldr	r3, [pc, #424]	; (8001fb4 <main+0xabc>)
 8001e0a:	edc3 7a02 	vstr	s15, [r3, #8]

	  pitch_output = g_PID_P[0] + g_PID_I[0] + PID_I[0];
 8001e0e:	4b68      	ldr	r3, [pc, #416]	; (8001fb0 <main+0xab8>)
 8001e10:	ed93 7a00 	vldr	s14, [r3]
 8001e14:	4b67      	ldr	r3, [pc, #412]	; (8001fb4 <main+0xabc>)
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e1e:	4b5a      	ldr	r3, [pc, #360]	; (8001f88 <main+0xa90>)
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2c:	ee17 3a90 	vmov	r3, s15
 8001e30:	b21a      	sxth	r2, r3
 8001e32:	4b62      	ldr	r3, [pc, #392]	; (8001fbc <main+0xac4>)
 8001e34:	801a      	strh	r2, [r3, #0]
	  roll_output  = g_PID_P[1] + g_PID_I[1] + PID_I[1];
 8001e36:	4b5e      	ldr	r3, [pc, #376]	; (8001fb0 <main+0xab8>)
 8001e38:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e3c:	4b5d      	ldr	r3, [pc, #372]	; (8001fb4 <main+0xabc>)
 8001e3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e46:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <main+0xa90>)
 8001e48:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e54:	ee17 3a90 	vmov	r3, s15
 8001e58:	b21a      	sxth	r2, r3
 8001e5a:	4b59      	ldr	r3, [pc, #356]	; (8001fc0 <main+0xac8>)
 8001e5c:	801a      	strh	r2, [r3, #0]
	  yow_output   = g_PID_P[2] + g_PID_I[2] + PID_I[2];
 8001e5e:	4b54      	ldr	r3, [pc, #336]	; (8001fb0 <main+0xab8>)
 8001e60:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e64:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <main+0xabc>)
 8001e66:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e6e:	4b46      	ldr	r3, [pc, #280]	; (8001f88 <main+0xa90>)
 8001e70:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e7c:	ee17 3a90 	vmov	r3, s15
 8001e80:	b21a      	sxth	r2, r3
 8001e82:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <main+0xacc>)
 8001e84:	801a      	strh	r2, [r3, #0]


	  Motor[0] = ((PwmTime[1]-70) ==0|| PwmTime[1]-71 == 0) ? 0 : (PwmTime[1] + yow_output + roll_output+ pitch_output)+20; 		//1
 8001e86:	4b50      	ldr	r3, [pc, #320]	; (8001fc8 <main+0xad0>)
 8001e88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e8c:	2b46      	cmp	r3, #70	; 0x46
 8001e8e:	d016      	beq.n	8001ebe <main+0x9c6>
 8001e90:	4b4d      	ldr	r3, [pc, #308]	; (8001fc8 <main+0xad0>)
 8001e92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e96:	2b47      	cmp	r3, #71	; 0x47
 8001e98:	d011      	beq.n	8001ebe <main+0x9c6>
 8001e9a:	4b4b      	ldr	r3, [pc, #300]	; (8001fc8 <main+0xad0>)
 8001e9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b48      	ldr	r3, [pc, #288]	; (8001fc4 <main+0xacc>)
 8001ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a45      	ldr	r2, [pc, #276]	; (8001fc0 <main+0xac8>)
 8001eac:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4a42      	ldr	r2, [pc, #264]	; (8001fbc <main+0xac4>)
 8001eb4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001eb8:	4413      	add	r3, r2
 8001eba:	3314      	adds	r3, #20
 8001ebc:	e000      	b.n	8001ec0 <main+0x9c8>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	4a42      	ldr	r2, [pc, #264]	; (8001fcc <main+0xad4>)
 8001ec2:	6013      	str	r3, [r2, #0]
	  Motor[1] = ((PwmTime[1]-70) ==0|| PwmTime[1]-71 == 0) ? 0 : (PwmTime[1] - yow_output - roll_output + pitch_output)+30;		//2
 8001ec4:	4b40      	ldr	r3, [pc, #256]	; (8001fc8 <main+0xad0>)
 8001ec6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001eca:	2b46      	cmp	r3, #70	; 0x46
 8001ecc:	d016      	beq.n	8001efc <main+0xa04>
 8001ece:	4b3e      	ldr	r3, [pc, #248]	; (8001fc8 <main+0xad0>)
 8001ed0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ed4:	2b47      	cmp	r3, #71	; 0x47
 8001ed6:	d011      	beq.n	8001efc <main+0xa04>
 8001ed8:	4b3b      	ldr	r3, [pc, #236]	; (8001fc8 <main+0xad0>)
 8001eda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b38      	ldr	r3, [pc, #224]	; (8001fc4 <main+0xacc>)
 8001ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	4a35      	ldr	r2, [pc, #212]	; (8001fc0 <main+0xac8>)
 8001eea:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	4a32      	ldr	r2, [pc, #200]	; (8001fbc <main+0xac4>)
 8001ef2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	331e      	adds	r3, #30
 8001efa:	e000      	b.n	8001efe <main+0xa06>
 8001efc:	2300      	movs	r3, #0
 8001efe:	4a33      	ldr	r2, [pc, #204]	; (8001fcc <main+0xad4>)
 8001f00:	6053      	str	r3, [r2, #4]
	  Motor[2] = ((PwmTime[1]-70) ==0|| PwmTime[1]-71 == 0) ? 0 : (PwmTime[1] + yow_output - roll_output - pitch_output)+40;		//3
 8001f02:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <main+0xad0>)
 8001f04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f08:	2b46      	cmp	r3, #70	; 0x46
 8001f0a:	d016      	beq.n	8001f3a <main+0xa42>
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <main+0xad0>)
 8001f0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f12:	2b47      	cmp	r3, #71	; 0x47
 8001f14:	d011      	beq.n	8001f3a <main+0xa42>
 8001f16:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <main+0xad0>)
 8001f18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <main+0xacc>)
 8001f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f24:	4413      	add	r3, r2
 8001f26:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <main+0xac8>)
 8001f28:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <main+0xac4>)
 8001f30:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	3328      	adds	r3, #40	; 0x28
 8001f38:	e000      	b.n	8001f3c <main+0xa44>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <main+0xad4>)
 8001f3e:	6093      	str	r3, [r2, #8]
	  Motor[3] = ((PwmTime[1]-70) ==0|| PwmTime[1]-71 == 0) ? 0 : (PwmTime[1] - yow_output + roll_output - pitch_output)+30;		//4
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <main+0xad0>)
 8001f42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f46:	2b46      	cmp	r3, #70	; 0x46
 8001f48:	d042      	beq.n	8001fd0 <main+0xad8>
 8001f4a:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <main+0xad0>)
 8001f4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f50:	2b47      	cmp	r3, #71	; 0x47
 8001f52:	d03d      	beq.n	8001fd0 <main+0xad8>
 8001f54:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <main+0xad0>)
 8001f56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <main+0xacc>)
 8001f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	4a16      	ldr	r2, [pc, #88]	; (8001fc0 <main+0xac8>)
 8001f66:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <main+0xac4>)
 8001f6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	331e      	adds	r3, #30
 8001f76:	e02c      	b.n	8001fd2 <main+0xada>
 8001f78:	20000328 	.word	0x20000328
 8001f7c:	20000310 	.word	0x20000310
 8001f80:	2000006c 	.word	0x2000006c
 8001f84:	20000078 	.word	0x20000078
 8001f88:	20000334 	.word	0x20000334
 8001f8c:	2000031c 	.word	0x2000031c
 8001f90:	20000070 	.word	0x20000070
 8001f94:	20000340 	.word	0x20000340
 8001f98:	20000304 	.word	0x20000304
 8001f9c:	200002ac 	.word	0x200002ac
 8001fa0:	2000034c 	.word	0x2000034c
 8001fa4:	200002b0 	.word	0x200002b0
 8001fa8:	200002b4 	.word	0x200002b4
 8001fac:	20000074 	.word	0x20000074
 8001fb0:	20000358 	.word	0x20000358
 8001fb4:	20000364 	.word	0x20000364
 8001fb8:	20000300 	.word	0x20000300
 8001fbc:	2000027c 	.word	0x2000027c
 8001fc0:	2000027a 	.word	0x2000027a
 8001fc4:	20000278 	.word	0x20000278
 8001fc8:	200003f0 	.word	0x200003f0
 8001fcc:	20000288 	.word	0x20000288
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	4a10      	ldr	r2, [pc, #64]	; (8002014 <main+0xb1c>)
 8001fd4:	60d3      	str	r3, [r2, #12]
	  TIM17->CCR1 = Motor[0];
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <main+0xb20>)
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <main+0xb1c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM5->CCR1 = Motor[1];
 8001fde:	4a0f      	ldr	r2, [pc, #60]	; (800201c <main+0xb24>)
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <main+0xb1c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	6353      	str	r3, [r2, #52]	; 0x34
	  TIM4->CCR3 = Motor[2];
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <main+0xb28>)
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <main+0xb1c>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	63d3      	str	r3, [r2, #60]	; 0x3c
	  TIM3->CCR3 = Motor[3];
 8001fee:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <main+0xb2c>)
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <main+0xb1c>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	63d3      	str	r3, [r2, #60]	; 0x3c

	  _error[0] = error[0];
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <main+0xb30>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a0c      	ldr	r2, [pc, #48]	; (800202c <main+0xb34>)
 8001ffc:	6013      	str	r3, [r2, #0]
	  _error[1] = error[1];
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <main+0xb30>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4a0a      	ldr	r2, [pc, #40]	; (800202c <main+0xb34>)
 8002004:	6053      	str	r3, [r2, #4]
	  _error[2] = error[2];
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <main+0xb30>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	4a08      	ldr	r2, [pc, #32]	; (800202c <main+0xb34>)
 800200c:	6093      	str	r3, [r2, #8]
  {
 800200e:	f7ff bb4f 	b.w	80016b0 <main+0x1b8>
 8002012:	bf00      	nop
 8002014:	20000288 	.word	0x20000288
 8002018:	40014800 	.word	0x40014800
 800201c:	40000c00 	.word	0x40000c00
 8002020:	40000800 	.word	0x40000800
 8002024:	40000400 	.word	0x40000400
 8002028:	20000310 	.word	0x20000310
 800202c:	2000031c 	.word	0x2000031c

08002030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b0b8      	sub	sp, #224	; 0xe0
 8002034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002036:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800203a:	2244      	movs	r2, #68	; 0x44
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f006 feac 	bl	8008d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002044:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002054:	463b      	mov	r3, r7
 8002056:	2288      	movs	r2, #136	; 0x88
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f006 fe9e 	bl	8008d9c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002060:	f003 f890 	bl	8005184 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002064:	4b42      	ldr	r3, [pc, #264]	; (8002170 <SystemClock_Config+0x140>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	4a41      	ldr	r2, [pc, #260]	; (8002170 <SystemClock_Config+0x140>)
 800206c:	f023 0318 	bic.w	r3, r3, #24
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002074:	2314      	movs	r3, #20
 8002076:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800207a:	2301      	movs	r3, #1
 800207c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002080:	2301      	movs	r3, #1
 8002082:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800208c:	2360      	movs	r3, #96	; 0x60
 800208e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002092:	2302      	movs	r3, #2
 8002094:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002098:	2301      	movs	r3, #1
 800209a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800209e:	2301      	movs	r3, #1
 80020a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80020a4:	2328      	movs	r3, #40	; 0x28
 80020a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80020aa:	2307      	movs	r3, #7
 80020ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020b0:	2302      	movs	r3, #2
 80020b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020b6:	2302      	movs	r3, #2
 80020b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 f99f 	bl	8005404 <HAL_RCC_OscConfig>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80020cc:	f000 fd56 	bl	8002b7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d0:	230f      	movs	r3, #15
 80020d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020d6:	2303      	movs	r3, #3
 80020d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80020ee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80020f2:	2104      	movs	r1, #4
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 fd6b 	bl	8005bd0 <HAL_RCC_ClockConfig>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002100:	f000 fd3c 	bl	8002b7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <SystemClock_Config+0x144>)
 8002106:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002108:	2300      	movs	r3, #0
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800210c:	2300      	movs	r3, #0
 800210e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002110:	2300      	movs	r3, #0
 8002112:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800211a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800211e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002120:	2301      	movs	r3, #1
 8002122:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002124:	2301      	movs	r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002128:	2318      	movs	r3, #24
 800212a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800212c:	2307      	movs	r3, #7
 800212e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002130:	2302      	movs	r3, #2
 8002132:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002134:	2302      	movs	r3, #2
 8002136:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002138:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800213c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800213e:	463b      	mov	r3, r7
 8002140:	4618      	mov	r0, r3
 8002142:	f003 ff49 	bl	8005fd8 <HAL_RCCEx_PeriphCLKConfig>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <SystemClock_Config+0x120>
  {
    Error_Handler();
 800214c:	f000 fd16 	bl	8002b7c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002150:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002154:	f003 f834 	bl	80051c0 <HAL_PWREx_ControlVoltageScaling>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <SystemClock_Config+0x132>
  {
    Error_Handler();
 800215e:	f000 fd0d 	bl	8002b7c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002162:	f004 fa1f 	bl	80065a4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002166:	bf00      	nop
 8002168:	37e0      	adds	r7, #224	; 0xe0
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	00012085 	.word	0x00012085

08002178 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800217c:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <MX_DFSDM1_Init+0x68>)
 800217e:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <MX_DFSDM1_Init+0x6c>)
 8002180:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <MX_DFSDM1_Init+0x68>)
 8002184:	2201      	movs	r2, #1
 8002186:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002188:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <MX_DFSDM1_Init+0x68>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800218e:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_DFSDM1_Init+0x68>)
 8002190:	2202      	movs	r2, #2
 8002192:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <MX_DFSDM1_Init+0x68>)
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_DFSDM1_Init+0x68>)
 800219c:	2200      	movs	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <MX_DFSDM1_Init+0x68>)
 80021a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021a6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <MX_DFSDM1_Init+0x68>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80021ae:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <MX_DFSDM1_Init+0x68>)
 80021b0:	2204      	movs	r2, #4
 80021b2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <MX_DFSDM1_Init+0x68>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_DFSDM1_Init+0x68>)
 80021bc:	2201      	movs	r2, #1
 80021be:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <MX_DFSDM1_Init+0x68>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_DFSDM1_Init+0x68>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80021cc:	4804      	ldr	r0, [pc, #16]	; (80021e0 <MX_DFSDM1_Init+0x68>)
 80021ce:	f001 fd01 	bl	8003bd4 <HAL_DFSDM_ChannelInit>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80021d8:	f000 fcd0 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	200003b8 	.word	0x200003b8
 80021e4:	40016020 	.word	0x40016020

080021e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <MX_I2C2_Init+0x74>)
 80021ee:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <MX_I2C2_Init+0x78>)
 80021f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80021f2:	4b1a      	ldr	r3, [pc, #104]	; (800225c <MX_I2C2_Init+0x74>)
 80021f4:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <MX_I2C2_Init+0x7c>)
 80021f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80021f8:	4b18      	ldr	r3, [pc, #96]	; (800225c <MX_I2C2_Init+0x74>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <MX_I2C2_Init+0x74>)
 8002200:	2201      	movs	r2, #1
 8002202:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002204:	4b15      	ldr	r3, [pc, #84]	; (800225c <MX_I2C2_Init+0x74>)
 8002206:	2200      	movs	r2, #0
 8002208:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <MX_I2C2_Init+0x74>)
 800220c:	2200      	movs	r2, #0
 800220e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <MX_I2C2_Init+0x74>)
 8002212:	2200      	movs	r2, #0
 8002214:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <MX_I2C2_Init+0x74>)
 8002218:	2200      	movs	r2, #0
 800221a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <MX_I2C2_Init+0x74>)
 800221e:	2200      	movs	r2, #0
 8002220:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002222:	480e      	ldr	r0, [pc, #56]	; (800225c <MX_I2C2_Init+0x74>)
 8002224:	f002 f8c6 	bl	80043b4 <HAL_I2C_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800222e:	f000 fca5 	bl	8002b7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002232:	2100      	movs	r1, #0
 8002234:	4809      	ldr	r0, [pc, #36]	; (800225c <MX_I2C2_Init+0x74>)
 8002236:	f002 fdc5 	bl	8004dc4 <HAL_I2CEx_ConfigAnalogFilter>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002240:	f000 fc9c 	bl	8002b7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002244:	2100      	movs	r1, #0
 8002246:	4805      	ldr	r0, [pc, #20]	; (800225c <MX_I2C2_Init+0x74>)
 8002248:	f002 fe07 	bl	8004e5a <HAL_I2CEx_ConfigDigitalFilter>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002252:	f000 fc93 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200008f4 	.word	0x200008f4
 8002260:	40005800 	.word	0x40005800
 8002264:	10909cec 	.word	0x10909cec

08002268 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <MX_QUADSPI_Init+0x44>)
 800226e:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <MX_QUADSPI_Init+0x48>)
 8002270:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <MX_QUADSPI_Init+0x44>)
 8002274:	2202      	movs	r2, #2
 8002276:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <MX_QUADSPI_Init+0x44>)
 800227a:	2204      	movs	r2, #4
 800227c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <MX_QUADSPI_Init+0x44>)
 8002280:	2210      	movs	r2, #16
 8002282:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <MX_QUADSPI_Init+0x44>)
 8002286:	2217      	movs	r2, #23
 8002288:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <MX_QUADSPI_Init+0x44>)
 800228c:	2200      	movs	r2, #0
 800228e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <MX_QUADSPI_Init+0x44>)
 8002292:	2200      	movs	r2, #0
 8002294:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002296:	4805      	ldr	r0, [pc, #20]	; (80022ac <MX_QUADSPI_Init+0x44>)
 8002298:	f002 fff8 	bl	800528c <HAL_QSPI_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80022a2:	f000 fc6b 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000b7c 	.word	0x20000b7c
 80022b0:	a0001000 	.word	0xa0001000

080022b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <MX_SPI3_Init+0x74>)
 80022ba:	4a1c      	ldr	r2, [pc, #112]	; (800232c <MX_SPI3_Init+0x78>)
 80022bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80022be:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <MX_SPI3_Init+0x74>)
 80022c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <MX_SPI3_Init+0x74>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80022cc:	4b16      	ldr	r3, [pc, #88]	; (8002328 <MX_SPI3_Init+0x74>)
 80022ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80022d2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022d4:	4b14      	ldr	r3, [pc, #80]	; (8002328 <MX_SPI3_Init+0x74>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022da:	4b13      	ldr	r3, [pc, #76]	; (8002328 <MX_SPI3_Init+0x74>)
 80022dc:	2200      	movs	r2, #0
 80022de:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <MX_SPI3_Init+0x74>)
 80022e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022e6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <MX_SPI3_Init+0x74>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <MX_SPI3_Init+0x74>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <MX_SPI3_Init+0x74>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <MX_SPI3_Init+0x74>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <MX_SPI3_Init+0x74>)
 8002302:	2207      	movs	r2, #7
 8002304:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002306:	4b08      	ldr	r3, [pc, #32]	; (8002328 <MX_SPI3_Init+0x74>)
 8002308:	2200      	movs	r2, #0
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <MX_SPI3_Init+0x74>)
 800230e:	2208      	movs	r2, #8
 8002310:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002312:	4805      	ldr	r0, [pc, #20]	; (8002328 <MX_SPI3_Init+0x74>)
 8002314:	f004 fb20 	bl	8006958 <HAL_SPI_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800231e:	f000 fc2d 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000a28 	.word	0x20000a28
 800232c:	40003c00 	.word	0x40003c00

08002330 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002336:	f107 0310 	add.w	r3, r7, #16
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <MX_TIM2_Init+0x94>)
 8002350:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002354:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <MX_TIM2_Init+0x94>)
 8002358:	2207      	movs	r2, #7
 800235a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <MX_TIM2_Init+0x94>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <MX_TIM2_Init+0x94>)
 8002364:	2263      	movs	r2, #99	; 0x63
 8002366:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <MX_TIM2_Init+0x94>)
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <MX_TIM2_Init+0x94>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002374:	4813      	ldr	r0, [pc, #76]	; (80023c4 <MX_TIM2_Init+0x94>)
 8002376:	f004 fb92 	bl	8006a9e <HAL_TIM_Base_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002380:	f000 fbfc 	bl	8002b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002388:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800238a:	f107 0310 	add.w	r3, r7, #16
 800238e:	4619      	mov	r1, r3
 8002390:	480c      	ldr	r0, [pc, #48]	; (80023c4 <MX_TIM2_Init+0x94>)
 8002392:	f004 ffd9 	bl	8007348 <HAL_TIM_ConfigClockSource>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800239c:	f000 fbee 	bl	8002b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a0:	2300      	movs	r3, #0
 80023a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	4619      	mov	r1, r3
 80023ac:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_TIM2_Init+0x94>)
 80023ae:	f005 fcdd 	bl	8007d6c <HAL_TIMEx_MasterConfigSynchronization>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80023b8:	f000 fbe0 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023bc:	bf00      	nop
 80023be:	3720      	adds	r7, #32
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000b20 	.word	0x20000b20

080023c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08e      	sub	sp, #56	; 0x38
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023e8:	463b      	mov	r3, r7
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	611a      	str	r2, [r3, #16]
 80023f6:	615a      	str	r2, [r3, #20]
 80023f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023fa:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <MX_TIM3_Init+0xe8>)
 80023fc:	4a2d      	ldr	r2, [pc, #180]	; (80024b4 <MX_TIM3_Init+0xec>)
 80023fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8002400:	4b2b      	ldr	r3, [pc, #172]	; (80024b0 <MX_TIM3_Init+0xe8>)
 8002402:	f240 321f 	movw	r2, #799	; 0x31f
 8002406:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002408:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <MX_TIM3_Init+0xe8>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 800240e:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <MX_TIM3_Init+0xe8>)
 8002410:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002414:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002416:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <MX_TIM3_Init+0xe8>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <MX_TIM3_Init+0xe8>)
 800241e:	2200      	movs	r2, #0
 8002420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002422:	4823      	ldr	r0, [pc, #140]	; (80024b0 <MX_TIM3_Init+0xe8>)
 8002424:	f004 fb3b 	bl	8006a9e <HAL_TIM_Base_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800242e:	f000 fba5 	bl	8002b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800243c:	4619      	mov	r1, r3
 800243e:	481c      	ldr	r0, [pc, #112]	; (80024b0 <MX_TIM3_Init+0xe8>)
 8002440:	f004 ff82 	bl	8007348 <HAL_TIM_ConfigClockSource>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800244a:	f000 fb97 	bl	8002b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800244e:	4818      	ldr	r0, [pc, #96]	; (80024b0 <MX_TIM3_Init+0xe8>)
 8002450:	f004 fbec 	bl	8006c2c <HAL_TIM_PWM_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800245a:	f000 fb8f 	bl	8002b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002466:	f107 031c 	add.w	r3, r7, #28
 800246a:	4619      	mov	r1, r3
 800246c:	4810      	ldr	r0, [pc, #64]	; (80024b0 <MX_TIM3_Init+0xe8>)
 800246e:	f005 fc7d 	bl	8007d6c <HAL_TIMEx_MasterConfigSynchronization>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002478:	f000 fb80 	bl	8002b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800247c:	2360      	movs	r3, #96	; 0x60
 800247e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 99;
 8002480:	2363      	movs	r3, #99	; 0x63
 8002482:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800248c:	463b      	mov	r3, r7
 800248e:	2208      	movs	r2, #8
 8002490:	4619      	mov	r1, r3
 8002492:	4807      	ldr	r0, [pc, #28]	; (80024b0 <MX_TIM3_Init+0xe8>)
 8002494:	f004 fe48 	bl	8007128 <HAL_TIM_PWM_ConfigChannel>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800249e:	f000 fb6d 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80024a2:	4803      	ldr	r0, [pc, #12]	; (80024b0 <MX_TIM3_Init+0xe8>)
 80024a4:	f000 ff6e 	bl	8003384 <HAL_TIM_MspPostInit>

}
 80024a8:	bf00      	nop
 80024aa:	3738      	adds	r7, #56	; 0x38
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	200009dc 	.word	0x200009dc
 80024b4:	40000400 	.word	0x40000400

080024b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08e      	sub	sp, #56	; 0x38
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	605a      	str	r2, [r3, #4]
 80024c8:	609a      	str	r2, [r3, #8]
 80024ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024cc:	f107 031c 	add.w	r3, r7, #28
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024d8:	463b      	mov	r3, r7
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	60da      	str	r2, [r3, #12]
 80024e4:	611a      	str	r2, [r3, #16]
 80024e6:	615a      	str	r2, [r3, #20]
 80024e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024ea:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <MX_TIM4_Init+0xe8>)
 80024ec:	4a2d      	ldr	r2, [pc, #180]	; (80025a4 <MX_TIM4_Init+0xec>)
 80024ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 799;
 80024f0:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <MX_TIM4_Init+0xe8>)
 80024f2:	f240 321f 	movw	r2, #799	; 0x31f
 80024f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f8:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <MX_TIM4_Init+0xe8>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80024fe:	4b28      	ldr	r3, [pc, #160]	; (80025a0 <MX_TIM4_Init+0xe8>)
 8002500:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002504:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002506:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <MX_TIM4_Init+0xe8>)
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250c:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <MX_TIM4_Init+0xe8>)
 800250e:	2200      	movs	r2, #0
 8002510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002512:	4823      	ldr	r0, [pc, #140]	; (80025a0 <MX_TIM4_Init+0xe8>)
 8002514:	f004 fac3 	bl	8006a9e <HAL_TIM_Base_Init>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 800251e:	f000 fb2d 	bl	8002b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002528:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800252c:	4619      	mov	r1, r3
 800252e:	481c      	ldr	r0, [pc, #112]	; (80025a0 <MX_TIM4_Init+0xe8>)
 8002530:	f004 ff0a 	bl	8007348 <HAL_TIM_ConfigClockSource>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800253a:	f000 fb1f 	bl	8002b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800253e:	4818      	ldr	r0, [pc, #96]	; (80025a0 <MX_TIM4_Init+0xe8>)
 8002540:	f004 fb74 	bl	8006c2c <HAL_TIM_PWM_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800254a:	f000 fb17 	bl	8002b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002556:	f107 031c 	add.w	r3, r7, #28
 800255a:	4619      	mov	r1, r3
 800255c:	4810      	ldr	r0, [pc, #64]	; (80025a0 <MX_TIM4_Init+0xe8>)
 800255e:	f005 fc05 	bl	8007d6c <HAL_TIMEx_MasterConfigSynchronization>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002568:	f000 fb08 	bl	8002b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800256c:	2360      	movs	r3, #96	; 0x60
 800256e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 99;
 8002570:	2363      	movs	r3, #99	; 0x63
 8002572:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800257c:	463b      	mov	r3, r7
 800257e:	2208      	movs	r2, #8
 8002580:	4619      	mov	r1, r3
 8002582:	4807      	ldr	r0, [pc, #28]	; (80025a0 <MX_TIM4_Init+0xe8>)
 8002584:	f004 fdd0 	bl	8007128 <HAL_TIM_PWM_ConfigChannel>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800258e:	f000 faf5 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002592:	4803      	ldr	r0, [pc, #12]	; (80025a0 <MX_TIM4_Init+0xe8>)
 8002594:	f000 fef6 	bl	8003384 <HAL_TIM_MspPostInit>

}
 8002598:	bf00      	nop
 800259a:	3738      	adds	r7, #56	; 0x38
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20000408 	.word	0x20000408
 80025a4:	40000800 	.word	0x40000800

080025a8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ae:	f107 031c 	add.w	r3, r7, #28
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ba:	463b      	mov	r3, r7
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
 80025c8:	615a      	str	r2, [r3, #20]
 80025ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025cc:	4b22      	ldr	r3, [pc, #136]	; (8002658 <MX_TIM5_Init+0xb0>)
 80025ce:	4a23      	ldr	r2, [pc, #140]	; (800265c <MX_TIM5_Init+0xb4>)
 80025d0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 799;
 80025d2:	4b21      	ldr	r3, [pc, #132]	; (8002658 <MX_TIM5_Init+0xb0>)
 80025d4:	f240 321f 	movw	r2, #799	; 0x31f
 80025d8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025da:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <MX_TIM5_Init+0xb0>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 80025e0:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <MX_TIM5_Init+0xb0>)
 80025e2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80025e6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <MX_TIM5_Init+0xb0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <MX_TIM5_Init+0xb0>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80025f4:	4818      	ldr	r0, [pc, #96]	; (8002658 <MX_TIM5_Init+0xb0>)
 80025f6:	f004 fb19 	bl	8006c2c <HAL_TIM_PWM_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 8002600:	f000 fabc 	bl	8002b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002604:	2300      	movs	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800260c:	f107 031c 	add.w	r3, r7, #28
 8002610:	4619      	mov	r1, r3
 8002612:	4811      	ldr	r0, [pc, #68]	; (8002658 <MX_TIM5_Init+0xb0>)
 8002614:	f005 fbaa 	bl	8007d6c <HAL_TIMEx_MasterConfigSynchronization>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 800261e:	f000 faad 	bl	8002b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002622:	2360      	movs	r3, #96	; 0x60
 8002624:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 99;
 8002626:	2363      	movs	r3, #99	; 0x63
 8002628:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002632:	463b      	mov	r3, r7
 8002634:	2200      	movs	r2, #0
 8002636:	4619      	mov	r1, r3
 8002638:	4807      	ldr	r0, [pc, #28]	; (8002658 <MX_TIM5_Init+0xb0>)
 800263a:	f004 fd75 	bl	8007128 <HAL_TIM_PWM_ConfigChannel>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8002644:	f000 fa9a 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002648:	4803      	ldr	r0, [pc, #12]	; (8002658 <MX_TIM5_Init+0xb0>)
 800264a:	f000 fe9b 	bl	8003384 <HAL_TIM_MspPostInit>

}
 800264e:	bf00      	nop
 8002650:	3728      	adds	r7, #40	; 0x28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000990 	.word	0x20000990
 800265c:	40000c00 	.word	0x40000c00

08002660 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b092      	sub	sp, #72	; 0x48
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002666:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	60da      	str	r2, [r3, #12]
 8002674:	611a      	str	r2, [r3, #16]
 8002676:	615a      	str	r2, [r3, #20]
 8002678:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800267a:	463b      	mov	r3, r7
 800267c:	222c      	movs	r2, #44	; 0x2c
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f006 fb8b 	bl	8008d9c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002686:	4b30      	ldr	r3, [pc, #192]	; (8002748 <MX_TIM17_Init+0xe8>)
 8002688:	4a30      	ldr	r2, [pc, #192]	; (800274c <MX_TIM17_Init+0xec>)
 800268a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 799;
 800268c:	4b2e      	ldr	r3, [pc, #184]	; (8002748 <MX_TIM17_Init+0xe8>)
 800268e:	f240 321f 	movw	r2, #799	; 0x31f
 8002692:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002694:	4b2c      	ldr	r3, [pc, #176]	; (8002748 <MX_TIM17_Init+0xe8>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1999;
 800269a:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <MX_TIM17_Init+0xe8>)
 800269c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80026a0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a2:	4b29      	ldr	r3, [pc, #164]	; (8002748 <MX_TIM17_Init+0xe8>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80026a8:	4b27      	ldr	r3, [pc, #156]	; (8002748 <MX_TIM17_Init+0xe8>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ae:	4b26      	ldr	r3, [pc, #152]	; (8002748 <MX_TIM17_Init+0xe8>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80026b4:	4824      	ldr	r0, [pc, #144]	; (8002748 <MX_TIM17_Init+0xe8>)
 80026b6:	f004 f9f2 	bl	8006a9e <HAL_TIM_Base_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 80026c0:	f000 fa5c 	bl	8002b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80026c4:	4820      	ldr	r0, [pc, #128]	; (8002748 <MX_TIM17_Init+0xe8>)
 80026c6:	f004 fab1 	bl	8006c2c <HAL_TIM_PWM_Init>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 80026d0:	f000 fa54 	bl	8002b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026d4:	2360      	movs	r3, #96	; 0x60
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 99;
 80026d8:	2363      	movs	r3, #99	; 0x63
 80026da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026dc:	2300      	movs	r3, #0
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026e0:	2300      	movs	r3, #0
 80026e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026e8:	2300      	movs	r3, #0
 80026ea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026ec:	2300      	movs	r3, #0
 80026ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026f4:	2200      	movs	r2, #0
 80026f6:	4619      	mov	r1, r3
 80026f8:	4813      	ldr	r0, [pc, #76]	; (8002748 <MX_TIM17_Init+0xe8>)
 80026fa:	f004 fd15 	bl	8007128 <HAL_TIM_PWM_ConfigChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8002704:	f000 fa3a 	bl	8002b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002708:	2300      	movs	r3, #0
 800270a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002710:	2300      	movs	r3, #0
 8002712:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800271c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002720:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002726:	463b      	mov	r3, r7
 8002728:	4619      	mov	r1, r3
 800272a:	4807      	ldr	r0, [pc, #28]	; (8002748 <MX_TIM17_Init+0xe8>)
 800272c:	f005 fba6 	bl	8007e7c <HAL_TIMEx_ConfigBreakDeadTime>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8002736:	f000 fa21 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800273a:	4803      	ldr	r0, [pc, #12]	; (8002748 <MX_TIM17_Init+0xe8>)
 800273c:	f000 fe22 	bl	8003384 <HAL_TIM_MspPostInit>

}
 8002740:	bf00      	nop
 8002742:	3748      	adds	r7, #72	; 0x48
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000940 	.word	0x20000940
 800274c:	40014800 	.word	0x40014800

08002750 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002754:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <MX_USART1_UART_Init+0x58>)
 8002756:	4a15      	ldr	r2, [pc, #84]	; (80027ac <MX_USART1_UART_Init+0x5c>)
 8002758:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <MX_USART1_UART_Init+0x58>)
 800275c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002760:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <MX_USART1_UART_Init+0x58>)
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <MX_USART1_UART_Init+0x58>)
 800276a:	2200      	movs	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <MX_USART1_UART_Init+0x58>)
 8002770:	2200      	movs	r2, #0
 8002772:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <MX_USART1_UART_Init+0x58>)
 8002776:	220c      	movs	r2, #12
 8002778:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <MX_USART1_UART_Init+0x58>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <MX_USART1_UART_Init+0x58>)
 8002782:	2200      	movs	r2, #0
 8002784:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <MX_USART1_UART_Init+0x58>)
 8002788:	2200      	movs	r2, #0
 800278a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <MX_USART1_UART_Init+0x58>)
 800278e:	2200      	movs	r2, #0
 8002790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002792:	4805      	ldr	r0, [pc, #20]	; (80027a8 <MX_USART1_UART_Init+0x58>)
 8002794:	f005 fc0e 	bl	8007fb4 <HAL_UART_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800279e:	f000 f9ed 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000a8c 	.word	0x20000a8c
 80027ac:	40013800 	.word	0x40013800

080027b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027b4:	4b14      	ldr	r3, [pc, #80]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027b6:	4a15      	ldr	r2, [pc, #84]	; (800280c <MX_USART3_UART_Init+0x5c>)
 80027b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027c2:	4b11      	ldr	r3, [pc, #68]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027c8:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027d6:	220c      	movs	r2, #12
 80027d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e0:	4b09      	ldr	r3, [pc, #36]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027e6:	4b08      	ldr	r3, [pc, #32]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027f2:	4805      	ldr	r0, [pc, #20]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027f4:	f005 fbde 	bl	8007fb4 <HAL_UART_Init>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80027fe:	f000 f9bd 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000468 	.word	0x20000468
 800280c:	40004800 	.word	0x40004800

08002810 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002814:	4b14      	ldr	r3, [pc, #80]	; (8002868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002816:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800281a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800281e:	2206      	movs	r2, #6
 8002820:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002824:	2202      	movs	r2, #2
 8002826:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800282a:	2202      	movs	r2, #2
 800282c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002830:	2200      	movs	r2, #0
 8002832:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002836:	2200      	movs	r2, #0
 8002838:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800283c:	2200      	movs	r2, #0
 800283e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002842:	2200      	movs	r2, #0
 8002844:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002848:	2200      	movs	r2, #0
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800284e:	2200      	movs	r2, #0
 8002850:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002852:	4805      	ldr	r0, [pc, #20]	; (8002868 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002854:	f002 fb4d 	bl	8004ef2 <HAL_PCD_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800285e:	f000 f98d 	bl	8002b7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200004e8 	.word	0x200004e8

0800286c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	; 0x28
 8002870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002872:	f107 0314 	add.w	r3, r7, #20
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	609a      	str	r2, [r3, #8]
 800287e:	60da      	str	r2, [r3, #12]
 8002880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002882:	4bb6      	ldr	r3, [pc, #728]	; (8002b5c <MX_GPIO_Init+0x2f0>)
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	4ab5      	ldr	r2, [pc, #724]	; (8002b5c <MX_GPIO_Init+0x2f0>)
 8002888:	f043 0310 	orr.w	r3, r3, #16
 800288c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800288e:	4bb3      	ldr	r3, [pc, #716]	; (8002b5c <MX_GPIO_Init+0x2f0>)
 8002890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800289a:	4bb0      	ldr	r3, [pc, #704]	; (8002b5c <MX_GPIO_Init+0x2f0>)
 800289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289e:	4aaf      	ldr	r2, [pc, #700]	; (8002b5c <MX_GPIO_Init+0x2f0>)
 80028a0:	f043 0304 	orr.w	r3, r3, #4
 80028a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028a6:	4bad      	ldr	r3, [pc, #692]	; (8002b5c <MX_GPIO_Init+0x2f0>)
 80028a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	4baa      	ldr	r3, [pc, #680]	; (8002b5c <MX_GPIO_Init+0x2f0>)
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	4aa9      	ldr	r2, [pc, #676]	; (8002b5c <MX_GPIO_Init+0x2f0>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028be:	4ba7      	ldr	r3, [pc, #668]	; (8002b5c <MX_GPIO_Init+0x2f0>)
 80028c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	4ba4      	ldr	r3, [pc, #656]	; (8002b5c <MX_GPIO_Init+0x2f0>)
 80028cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ce:	4aa3      	ldr	r2, [pc, #652]	; (8002b5c <MX_GPIO_Init+0x2f0>)
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028d6:	4ba1      	ldr	r3, [pc, #644]	; (8002b5c <MX_GPIO_Init+0x2f0>)
 80028d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	607b      	str	r3, [r7, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e2:	4b9e      	ldr	r3, [pc, #632]	; (8002b5c <MX_GPIO_Init+0x2f0>)
 80028e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e6:	4a9d      	ldr	r2, [pc, #628]	; (8002b5c <MX_GPIO_Init+0x2f0>)
 80028e8:	f043 0308 	orr.w	r3, r3, #8
 80028ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ee:	4b9b      	ldr	r3, [pc, #620]	; (8002b5c <MX_GPIO_Init+0x2f0>)
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80028fa:	2200      	movs	r2, #0
 80028fc:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002900:	4897      	ldr	r0, [pc, #604]	; (8002b60 <MX_GPIO_Init+0x2f4>)
 8002902:	f001 fd27 	bl	8004354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);
 8002906:	2200      	movs	r2, #0
 8002908:	f44f 7182 	mov.w	r1, #260	; 0x104
 800290c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002910:	f001 fd20 	bl	8004354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002914:	2200      	movs	r2, #0
 8002916:	f24f 0114 	movw	r1, #61460	; 0xf014
 800291a:	4892      	ldr	r0, [pc, #584]	; (8002b64 <MX_GPIO_Init+0x2f8>)
 800291c:	f001 fd1a 	bl	8004354 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002920:	2200      	movs	r2, #0
 8002922:	f241 0181 	movw	r1, #4225	; 0x1081
 8002926:	4890      	ldr	r0, [pc, #576]	; (8002b68 <MX_GPIO_Init+0x2fc>)
 8002928:	f001 fd14 	bl	8004354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800292c:	2201      	movs	r2, #1
 800292e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002932:	488d      	ldr	r0, [pc, #564]	; (8002b68 <MX_GPIO_Init+0x2fc>)
 8002934:	f001 fd0e 	bl	8004354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002938:	2200      	movs	r2, #0
 800293a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800293e:	488b      	ldr	r0, [pc, #556]	; (8002b6c <MX_GPIO_Init+0x300>)
 8002940:	f001 fd08 	bl	8004354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002944:	2201      	movs	r2, #1
 8002946:	2120      	movs	r1, #32
 8002948:	4886      	ldr	r0, [pc, #536]	; (8002b64 <MX_GPIO_Init+0x2f8>)
 800294a:	f001 fd03 	bl	8004354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800294e:	2201      	movs	r2, #1
 8002950:	2101      	movs	r1, #1
 8002952:	4883      	ldr	r0, [pc, #524]	; (8002b60 <MX_GPIO_Init+0x2f4>)
 8002954:	f001 fcfe 	bl	8004354 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002958:	f240 1315 	movw	r3, #277	; 0x115
 800295c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295e:	2301      	movs	r3, #1
 8002960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002966:	2300      	movs	r3, #0
 8002968:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	4619      	mov	r1, r3
 8002970:	487b      	ldr	r0, [pc, #492]	; (8002b60 <MX_GPIO_Init+0x2f4>)
 8002972:	f001 fa3b 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8002976:	236a      	movs	r3, #106	; 0x6a
 8002978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800297a:	4b7d      	ldr	r3, [pc, #500]	; (8002b70 <MX_GPIO_Init+0x304>)
 800297c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	4619      	mov	r1, r3
 8002988:	4875      	ldr	r0, [pc, #468]	; (8002b60 <MX_GPIO_Init+0x2f4>)
 800298a:	f001 fa2f 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800298e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002994:	4b77      	ldr	r3, [pc, #476]	; (8002b74 <MX_GPIO_Init+0x308>)
 8002996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800299c:	f107 0314 	add.w	r3, r7, #20
 80029a0:	4619      	mov	r1, r3
 80029a2:	4872      	ldr	r0, [pc, #456]	; (8002b6c <MX_GPIO_Init+0x300>)
 80029a4:	f001 fa22 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80029a8:	233f      	movs	r3, #63	; 0x3f
 80029aa:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80029ac:	230b      	movs	r3, #11
 80029ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	4619      	mov	r1, r3
 80029ba:	486c      	ldr	r0, [pc, #432]	; (8002b6c <MX_GPIO_Init+0x300>)
 80029bc:	f001 fa16 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin;
 80029c0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80029c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c6:	2301      	movs	r3, #1
 80029c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d2:	f107 0314 	add.w	r3, r7, #20
 80029d6:	4619      	mov	r1, r3
 80029d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029dc:	f001 fa06 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029e0:	2310      	movs	r3, #16
 80029e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80029e4:	4b64      	ldr	r3, [pc, #400]	; (8002b78 <MX_GPIO_Init+0x30c>)
 80029e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	4619      	mov	r1, r3
 80029f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f6:	f001 f9f9 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin;
 80029fa:	2360      	movs	r3, #96	; 0x60
 80029fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a06:	2303      	movs	r3, #3
 8002a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a0a:	2305      	movs	r3, #5
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	4619      	mov	r1, r3
 8002a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a18:	f001 f9e8 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002a20:	230b      	movs	r3, #11
 8002a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	484d      	ldr	r0, [pc, #308]	; (8002b64 <MX_GPIO_Init+0x2f8>)
 8002a30:	f001 f9dc 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002a34:	f24f 0334 	movw	r3, #61492	; 0xf034
 8002a38:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4845      	ldr	r0, [pc, #276]	; (8002b64 <MX_GPIO_Init+0x2f8>)
 8002a4e:	f001 f9cd 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
 8002a52:	f648 4304 	movw	r3, #35844	; 0x8c04
 8002a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a58:	4b45      	ldr	r3, [pc, #276]	; (8002b70 <MX_GPIO_Init+0x304>)
 8002a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a60:	f107 0314 	add.w	r3, r7, #20
 8002a64:	4619      	mov	r1, r3
 8002a66:	4840      	ldr	r0, [pc, #256]	; (8002b68 <MX_GPIO_Init+0x2fc>)
 8002a68:	f001 f9c0 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002a6c:	f243 0381 	movw	r3, #12417	; 0x3081
 8002a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a72:	2301      	movs	r3, #1
 8002a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a7e:	f107 0314 	add.w	r3, r7, #20
 8002a82:	4619      	mov	r1, r3
 8002a84:	4838      	ldr	r0, [pc, #224]	; (8002b68 <MX_GPIO_Init+0x2fc>)
 8002a86:	f001 f9b1 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002a8a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a90:	2301      	movs	r3, #1
 8002a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4832      	ldr	r0, [pc, #200]	; (8002b6c <MX_GPIO_Init+0x300>)
 8002aa4:	f001 f9a2 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002aa8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aae:	4b30      	ldr	r3, [pc, #192]	; (8002b70 <MX_GPIO_Init+0x304>)
 8002ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab6:	f107 0314 	add.w	r3, r7, #20
 8002aba:	4619      	mov	r1, r3
 8002abc:	482b      	ldr	r0, [pc, #172]	; (8002b6c <MX_GPIO_Init+0x300>)
 8002abe:	f001 f995 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ad2:	2305      	movs	r3, #5
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002ad6:	f107 0314 	add.w	r3, r7, #20
 8002ada:	4619      	mov	r1, r3
 8002adc:	4822      	ldr	r0, [pc, #136]	; (8002b68 <MX_GPIO_Init+0x2fc>)
 8002ade:	f001 f985 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002ae2:	2378      	movs	r3, #120	; 0x78
 8002ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aee:	2303      	movs	r3, #3
 8002af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002af2:	2307      	movs	r3, #7
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002af6:	f107 0314 	add.w	r3, r7, #20
 8002afa:	4619      	mov	r1, r3
 8002afc:	481a      	ldr	r0, [pc, #104]	; (8002b68 <MX_GPIO_Init+0x2fc>)
 8002afe:	f001 f975 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002b02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b08:	2312      	movs	r3, #18
 8002b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b10:	2303      	movs	r3, #3
 8002b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b14:	2304      	movs	r3, #4
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4811      	ldr	r0, [pc, #68]	; (8002b64 <MX_GPIO_Init+0x2f8>)
 8002b20:	f001 f964 	bl	8003dec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002b24:	2200      	movs	r2, #0
 8002b26:	2100      	movs	r1, #0
 8002b28:	200a      	movs	r0, #10
 8002b2a:	f001 f81c 	bl	8003b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002b2e:	200a      	movs	r0, #10
 8002b30:	f001 f835 	bl	8003b9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002b34:	2200      	movs	r2, #0
 8002b36:	2100      	movs	r1, #0
 8002b38:	2017      	movs	r0, #23
 8002b3a:	f001 f814 	bl	8003b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b3e:	2017      	movs	r0, #23
 8002b40:	f001 f82d 	bl	8003b9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b44:	2200      	movs	r2, #0
 8002b46:	2100      	movs	r1, #0
 8002b48:	2028      	movs	r0, #40	; 0x28
 8002b4a:	f001 f80c 	bl	8003b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b4e:	2028      	movs	r0, #40	; 0x28
 8002b50:	f001 f825 	bl	8003b9e <HAL_NVIC_EnableIRQ>

}
 8002b54:	bf00      	nop
 8002b56:	3728      	adds	r7, #40	; 0x28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	48001000 	.word	0x48001000
 8002b64:	48000400 	.word	0x48000400
 8002b68:	48000c00 	.word	0x48000c00
 8002b6c:	48000800 	.word	0x48000800
 8002b70:	10110000 	.word	0x10110000
 8002b74:	10210000 	.word	0x10210000
 8002b78:	10310000 	.word	0x10310000

08002b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b80:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b82:	e7fe      	b.n	8002b82 <Error_Handler+0x6>

08002b84 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002b8c:	4b27      	ldr	r3, [pc, #156]	; (8002c2c <I2Cx_MspInit+0xa8>)
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b90:	4a26      	ldr	r2, [pc, #152]	; (8002c2c <I2Cx_MspInit+0xa8>)
 8002b92:	f043 0302 	orr.w	r3, r3, #2
 8002b96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b98:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <I2Cx_MspInit+0xa8>)
 8002b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002ba4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ba8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002baa:	2312      	movs	r3, #18
 8002bac:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002bba:	f107 0314 	add.w	r3, r7, #20
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	481b      	ldr	r0, [pc, #108]	; (8002c30 <I2Cx_MspInit+0xac>)
 8002bc2:	f001 f913 	bl	8003dec <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002bc6:	f107 0314 	add.w	r3, r7, #20
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4818      	ldr	r0, [pc, #96]	; (8002c30 <I2Cx_MspInit+0xac>)
 8002bce:	f001 f90d 	bl	8003dec <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002bd2:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <I2Cx_MspInit+0xa8>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <I2Cx_MspInit+0xa8>)
 8002bd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8002bde:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <I2Cx_MspInit+0xa8>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <I2Cx_MspInit+0xa8>)
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <I2Cx_MspInit+0xa8>)
 8002bf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bf4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <I2Cx_MspInit+0xa8>)
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	4a0c      	ldr	r2, [pc, #48]	; (8002c2c <I2Cx_MspInit+0xa8>)
 8002bfc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002c00:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002c02:	2200      	movs	r2, #0
 8002c04:	210f      	movs	r1, #15
 8002c06:	2021      	movs	r0, #33	; 0x21
 8002c08:	f000 ffad 	bl	8003b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002c0c:	2021      	movs	r0, #33	; 0x21
 8002c0e:	f000 ffc6 	bl	8003b9e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002c12:	2200      	movs	r2, #0
 8002c14:	210f      	movs	r1, #15
 8002c16:	2022      	movs	r0, #34	; 0x22
 8002c18:	f000 ffa5 	bl	8003b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002c1c:	2022      	movs	r0, #34	; 0x22
 8002c1e:	f000 ffbe 	bl	8003b9e <HAL_NVIC_EnableIRQ>
}
 8002c22:	bf00      	nop
 8002c24:	3728      	adds	r7, #40	; 0x28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	48000400 	.word	0x48000400

08002c34 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a12      	ldr	r2, [pc, #72]	; (8002c88 <I2Cx_Init+0x54>)
 8002c40:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a11      	ldr	r2, [pc, #68]	; (8002c8c <I2Cx_Init+0x58>)
 8002c46:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff ff89 	bl	8002b84 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f001 fb9e 	bl	80043b4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002c78:	2100      	movs	r1, #0
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f002 f8a2 	bl	8004dc4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40005800 	.word	0x40005800
 8002c8c:	00702681 	.word	0x00702681

08002c90 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af04      	add	r7, sp, #16
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	4608      	mov	r0, r1
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	72fb      	strb	r3, [r7, #11]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	813b      	strh	r3, [r7, #8]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002cae:	7afb      	ldrb	r3, [r7, #11]
 8002cb0:	b299      	uxth	r1, r3
 8002cb2:	88f8      	ldrh	r0, [r7, #6]
 8002cb4:	893a      	ldrh	r2, [r7, #8]
 8002cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cba:	9302      	str	r3, [sp, #8]
 8002cbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002cbe:	9301      	str	r3, [sp, #4]
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f001 fd46 	bl	8004758 <HAL_I2C_Mem_Read>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d004      	beq.n	8002ce0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8002cd6:	7afb      	ldrb	r3, [r7, #11]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f832 	bl	8002d44 <I2Cx_Error>
  }
  return status;
 8002ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b08a      	sub	sp, #40	; 0x28
 8002cee:	af04      	add	r7, sp, #16
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	4608      	mov	r0, r1
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	72fb      	strb	r3, [r7, #11]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	813b      	strh	r3, [r7, #8]
 8002d00:	4613      	mov	r3, r2
 8002d02:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002d08:	7afb      	ldrb	r3, [r7, #11]
 8002d0a:	b299      	uxth	r1, r3
 8002d0c:	88f8      	ldrh	r0, [r7, #6]
 8002d0e:	893a      	ldrh	r2, [r7, #8]
 8002d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d14:	9302      	str	r3, [sp, #8]
 8002d16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	4603      	mov	r3, r0
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f001 fc05 	bl	8004530 <HAL_I2C_Mem_Write>
 8002d26:	4603      	mov	r3, r0
 8002d28:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d004      	beq.n	8002d3a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002d30:	7afb      	ldrb	r3, [r7, #11]
 8002d32:	4619      	mov	r1, r3
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f805 	bl	8002d44 <I2Cx_Error>
  }
  return status;
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f001 fbbe 	bl	80044d2 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ff6c 	bl	8002c34 <I2Cx_Init>
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002d68:	4802      	ldr	r0, [pc, #8]	; (8002d74 <SENSOR_IO_Init+0x10>)
 8002d6a:	f7ff ff63 	bl	8002c34 <I2Cx_Init>
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000c44 	.word	0x20000c44

08002d78 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
 8002d82:	460b      	mov	r3, r1
 8002d84:	71bb      	strb	r3, [r7, #6]
 8002d86:	4613      	mov	r3, r2
 8002d88:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002d8a:	79bb      	ldrb	r3, [r7, #6]
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	79f9      	ldrb	r1, [r7, #7]
 8002d90:	2301      	movs	r3, #1
 8002d92:	9301      	str	r3, [sp, #4]
 8002d94:	1d7b      	adds	r3, r7, #5
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	2301      	movs	r3, #1
 8002d9a:	4803      	ldr	r0, [pc, #12]	; (8002da8 <SENSOR_IO_Write+0x30>)
 8002d9c:	f7ff ffa5 	bl	8002cea <I2Cx_WriteMultiple>
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000c44 	.word	0x20000c44

08002dac <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	4603      	mov	r3, r0
 8002db4:	460a      	mov	r2, r1
 8002db6:	71fb      	strb	r3, [r7, #7]
 8002db8:	4613      	mov	r3, r2
 8002dba:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002dc0:	79bb      	ldrb	r3, [r7, #6]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	79f9      	ldrb	r1, [r7, #7]
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	f107 030f 	add.w	r3, r7, #15
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	4804      	ldr	r0, [pc, #16]	; (8002de4 <SENSOR_IO_Read+0x38>)
 8002dd4:	f7ff ff5c 	bl	8002c90 <I2Cx_ReadMultiple>

  return read_value;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000c44 	.word	0x20000c44

08002de8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	603a      	str	r2, [r7, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
 8002df6:	460b      	mov	r3, r1
 8002df8:	71bb      	strb	r3, [r7, #6]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002dfe:	79bb      	ldrb	r3, [r7, #6]
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	79f9      	ldrb	r1, [r7, #7]
 8002e04:	88bb      	ldrh	r3, [r7, #4]
 8002e06:	9301      	str	r3, [sp, #4]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	4804      	ldr	r0, [pc, #16]	; (8002e20 <SENSOR_IO_ReadMultiple+0x38>)
 8002e10:	f7ff ff3e 	bl	8002c90 <I2Cx_ReadMultiple>
 8002e14:	4603      	mov	r3, r0
 8002e16:	b29b      	uxth	r3, r3
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20000c44 	.word	0x20000c44

08002e24 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002e32:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <BSP_ACCELERO_Init+0x74>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	4798      	blx	r3
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b6a      	cmp	r3, #106	; 0x6a
 8002e3c:	d002      	beq.n	8002e44 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
 8002e42:	e024      	b.n	8002e8e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002e44:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <BSP_ACCELERO_Init+0x78>)
 8002e46:	4a14      	ldr	r2, [pc, #80]	; (8002e98 <BSP_ACCELERO_Init+0x74>)
 8002e48:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8002e4a:	2330      	movs	r3, #48	; 0x30
 8002e4c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8002e52:	2300      	movs	r3, #0
 8002e54:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002e56:	2340      	movs	r3, #64	; 0x40
 8002e58:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8002e62:	797a      	ldrb	r2, [r7, #5]
 8002e64:	7abb      	ldrb	r3, [r7, #10]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002e6c:	7a3b      	ldrb	r3, [r7, #8]
 8002e6e:	f043 0304 	orr.w	r3, r3, #4
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	021b      	lsls	r3, r3, #8
 8002e76:	b21a      	sxth	r2, r3
 8002e78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	b21b      	sxth	r3, r3
 8002e80:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002e82:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <BSP_ACCELERO_Init+0x78>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	89ba      	ldrh	r2, [r7, #12]
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4798      	blx	r3
  }  

  return ret;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	2000037c 	.word	0x2000037c

08002ea0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d009      	beq.n	8002ec4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d004      	beq.n	8002ec4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8002eba:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	4798      	blx	r3
    }
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	2000037c 	.word	0x2000037c

08002ed0 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002eda:	2300      	movs	r3, #0
 8002edc:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002ede:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <BSP_GYRO_Init+0x7c>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	4798      	blx	r3
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b6a      	cmp	r3, #106	; 0x6a
 8002ee8:	d002      	beq.n	8002ef0 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
 8002eee:	e028      	b.n	8002f42 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002ef0:	4b17      	ldr	r3, [pc, #92]	; (8002f50 <BSP_GYRO_Init+0x80>)
 8002ef2:	4a16      	ldr	r2, [pc, #88]	; (8002f4c <BSP_GYRO_Init+0x7c>)
 8002ef4:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8002efa:	2330      	movs	r3, #48	; 0x30
 8002efc:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002f06:	2340      	movs	r3, #64	; 0x40
 8002f08:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8002f0e:	230c      	movs	r3, #12
 8002f10:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8002f12:	7aba      	ldrb	r2, [r7, #10]
 8002f14:	797b      	ldrb	r3, [r7, #5]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002f1c:	7a3b      	ldrb	r3, [r7, #8]
 8002f1e:	f043 0304 	orr.w	r3, r3, #4
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	b21a      	sxth	r2, r3
 8002f28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	b21b      	sxth	r3, r3
 8002f30:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002f32:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <BSP_GYRO_Init+0x80>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	89ba      	ldrh	r2, [r7, #12]
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4798      	blx	r3
    
    ret = GYRO_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000034 	.word	0x20000034
 8002f50:	20000380 	.word	0x20000380

08002f54 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8002f5c:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <BSP_GYRO_GetXYZ+0x2c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d009      	beq.n	8002f78 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <BSP_GYRO_GetXYZ+0x2c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d004      	beq.n	8002f78 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <BSP_GYRO_GetXYZ+0x2c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
    }
  }
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000380 	.word	0x20000380

08002f84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <HAL_MspInit+0x44>)
 8002f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8e:	4a0e      	ldr	r2, [pc, #56]	; (8002fc8 <HAL_MspInit+0x44>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6613      	str	r3, [r2, #96]	; 0x60
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <HAL_MspInit+0x44>)
 8002f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	607b      	str	r3, [r7, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_MspInit+0x44>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	4a08      	ldr	r2, [pc, #32]	; (8002fc8 <HAL_MspInit+0x44>)
 8002fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fac:	6593      	str	r3, [r2, #88]	; 0x58
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_MspInit+0x44>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000

08002fcc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	; 0x28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 0314 	add.w	r3, r7, #20
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8002fe4:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <HAL_DFSDM_ChannelMspInit+0x84>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d12d      	bne.n	8003048 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_DFSDM_ChannelMspInit+0x88>)
 8002fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff0:	4a18      	ldr	r2, [pc, #96]	; (8003054 <HAL_DFSDM_ChannelMspInit+0x88>)
 8002ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff6:	6613      	str	r3, [r2, #96]	; 0x60
 8002ff8:	4b16      	ldr	r3, [pc, #88]	; (8003054 <HAL_DFSDM_ChannelMspInit+0x88>)
 8002ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003004:	4b13      	ldr	r3, [pc, #76]	; (8003054 <HAL_DFSDM_ChannelMspInit+0x88>)
 8003006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003008:	4a12      	ldr	r2, [pc, #72]	; (8003054 <HAL_DFSDM_ChannelMspInit+0x88>)
 800300a:	f043 0310 	orr.w	r3, r3, #16
 800300e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003010:	4b10      	ldr	r3, [pc, #64]	; (8003054 <HAL_DFSDM_ChannelMspInit+0x88>)
 8003012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800301c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	2302      	movs	r3, #2
 8003024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302a:	2300      	movs	r3, #0
 800302c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800302e:	2306      	movs	r3, #6
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003032:	f107 0314 	add.w	r3, r7, #20
 8003036:	4619      	mov	r1, r3
 8003038:	4807      	ldr	r0, [pc, #28]	; (8003058 <HAL_DFSDM_ChannelMspInit+0x8c>)
 800303a:	f000 fed7 	bl	8003dec <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <HAL_DFSDM_ChannelMspInit+0x84>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3301      	adds	r3, #1
 8003044:	4a02      	ldr	r2, [pc, #8]	; (8003050 <HAL_DFSDM_ChannelMspInit+0x84>)
 8003046:	6013      	str	r3, [r2, #0]
  }

}
 8003048:	bf00      	nop
 800304a:	3728      	adds	r7, #40	; 0x28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20000384 	.word	0x20000384
 8003054:	40021000 	.word	0x40021000
 8003058:	48001000 	.word	0x48001000

0800305c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a17      	ldr	r2, [pc, #92]	; (80030d8 <HAL_I2C_MspInit+0x7c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d128      	bne.n	80030d0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800307e:	4b17      	ldr	r3, [pc, #92]	; (80030dc <HAL_I2C_MspInit+0x80>)
 8003080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003082:	4a16      	ldr	r2, [pc, #88]	; (80030dc <HAL_I2C_MspInit+0x80>)
 8003084:	f043 0302 	orr.w	r3, r3, #2
 8003088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800308a:	4b14      	ldr	r3, [pc, #80]	; (80030dc <HAL_I2C_MspInit+0x80>)
 800308c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8003096:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800309a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800309c:	2312      	movs	r3, #18
 800309e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030a0:	2301      	movs	r3, #1
 80030a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80030a8:	2304      	movs	r3, #4
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	4619      	mov	r1, r3
 80030b2:	480b      	ldr	r0, [pc, #44]	; (80030e0 <HAL_I2C_MspInit+0x84>)
 80030b4:	f000 fe9a 	bl	8003dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80030b8:	4b08      	ldr	r3, [pc, #32]	; (80030dc <HAL_I2C_MspInit+0x80>)
 80030ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030bc:	4a07      	ldr	r2, [pc, #28]	; (80030dc <HAL_I2C_MspInit+0x80>)
 80030be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030c2:	6593      	str	r3, [r2, #88]	; 0x58
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <HAL_I2C_MspInit+0x80>)
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80030d0:	bf00      	nop
 80030d2:	3728      	adds	r7, #40	; 0x28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40005800 	.word	0x40005800
 80030dc:	40021000 	.word	0x40021000
 80030e0:	48000400 	.word	0x48000400

080030e4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0b      	ldr	r2, [pc, #44]	; (8003120 <HAL_I2C_MspDeInit+0x3c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d10f      	bne.n	8003116 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_I2C_MspDeInit+0x40>)
 80030f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fa:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <HAL_I2C_MspDeInit+0x40>)
 80030fc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003100:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8003102:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003106:	4808      	ldr	r0, [pc, #32]	; (8003128 <HAL_I2C_MspDeInit+0x44>)
 8003108:	f001 f818 	bl	800413c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 800310c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003110:	4805      	ldr	r0, [pc, #20]	; (8003128 <HAL_I2C_MspDeInit+0x44>)
 8003112:	f001 f813 	bl	800413c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40005800 	.word	0x40005800
 8003124:	40021000 	.word	0x40021000
 8003128:	48000400 	.word	0x48000400

0800312c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	; 0x28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a17      	ldr	r2, [pc, #92]	; (80031a8 <HAL_QSPI_MspInit+0x7c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d128      	bne.n	80031a0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800314e:	4b17      	ldr	r3, [pc, #92]	; (80031ac <HAL_QSPI_MspInit+0x80>)
 8003150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003152:	4a16      	ldr	r2, [pc, #88]	; (80031ac <HAL_QSPI_MspInit+0x80>)
 8003154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003158:	6513      	str	r3, [r2, #80]	; 0x50
 800315a:	4b14      	ldr	r3, [pc, #80]	; (80031ac <HAL_QSPI_MspInit+0x80>)
 800315c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003166:	4b11      	ldr	r3, [pc, #68]	; (80031ac <HAL_QSPI_MspInit+0x80>)
 8003168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316a:	4a10      	ldr	r2, [pc, #64]	; (80031ac <HAL_QSPI_MspInit+0x80>)
 800316c:	f043 0310 	orr.w	r3, r3, #16
 8003170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <HAL_QSPI_MspInit+0x80>)
 8003174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800317e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003182:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003184:	2302      	movs	r3, #2
 8003186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318c:	2303      	movs	r3, #3
 800318e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003190:	230a      	movs	r3, #10
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	4619      	mov	r1, r3
 800319a:	4805      	ldr	r0, [pc, #20]	; (80031b0 <HAL_QSPI_MspInit+0x84>)
 800319c:	f000 fe26 	bl	8003dec <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80031a0:	bf00      	nop
 80031a2:	3728      	adds	r7, #40	; 0x28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	a0001000 	.word	0xa0001000
 80031ac:	40021000 	.word	0x40021000
 80031b0:	48001000 	.word	0x48001000

080031b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08a      	sub	sp, #40	; 0x28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a17      	ldr	r2, [pc, #92]	; (8003230 <HAL_SPI_MspInit+0x7c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d128      	bne.n	8003228 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031d6:	4b17      	ldr	r3, [pc, #92]	; (8003234 <HAL_SPI_MspInit+0x80>)
 80031d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031da:	4a16      	ldr	r2, [pc, #88]	; (8003234 <HAL_SPI_MspInit+0x80>)
 80031dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031e0:	6593      	str	r3, [r2, #88]	; 0x58
 80031e2:	4b14      	ldr	r3, [pc, #80]	; (8003234 <HAL_SPI_MspInit+0x80>)
 80031e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <HAL_SPI_MspInit+0x80>)
 80031f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f2:	4a10      	ldr	r2, [pc, #64]	; (8003234 <HAL_SPI_MspInit+0x80>)
 80031f4:	f043 0304 	orr.w	r3, r3, #4
 80031f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031fa:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <HAL_SPI_MspInit+0x80>)
 80031fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8003206:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800320a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003214:	2303      	movs	r3, #3
 8003216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003218:	2306      	movs	r3, #6
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800321c:	f107 0314 	add.w	r3, r7, #20
 8003220:	4619      	mov	r1, r3
 8003222:	4805      	ldr	r0, [pc, #20]	; (8003238 <HAL_SPI_MspInit+0x84>)
 8003224:	f000 fde2 	bl	8003dec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003228:	bf00      	nop
 800322a:	3728      	adds	r7, #40	; 0x28
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40003c00 	.word	0x40003c00
 8003234:	40021000 	.word	0x40021000
 8003238:	48000800 	.word	0x48000800

0800323c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	; 0x30
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	f107 031c 	add.w	r3, r7, #28
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325c:	d131      	bne.n	80032c2 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800325e:	4b35      	ldr	r3, [pc, #212]	; (8003334 <HAL_TIM_Base_MspInit+0xf8>)
 8003260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003262:	4a34      	ldr	r2, [pc, #208]	; (8003334 <HAL_TIM_Base_MspInit+0xf8>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6593      	str	r3, [r2, #88]	; 0x58
 800326a:	4b32      	ldr	r3, [pc, #200]	; (8003334 <HAL_TIM_Base_MspInit+0xf8>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003276:	4b2f      	ldr	r3, [pc, #188]	; (8003334 <HAL_TIM_Base_MspInit+0xf8>)
 8003278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327a:	4a2e      	ldr	r2, [pc, #184]	; (8003334 <HAL_TIM_Base_MspInit+0xf8>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003282:	4b2c      	ldr	r3, [pc, #176]	; (8003334 <HAL_TIM_Base_MspInit+0xf8>)
 8003284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 800328e:	2308      	movs	r3, #8
 8003290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003292:	2302      	movs	r3, #2
 8003294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329a:	2300      	movs	r3, #0
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800329e:	2301      	movs	r3, #1
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80032a2:	f107 031c 	add.w	r3, r7, #28
 80032a6:	4619      	mov	r1, r3
 80032a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032ac:	f000 fd9e 	bl	8003dec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80032b0:	2200      	movs	r2, #0
 80032b2:	2100      	movs	r1, #0
 80032b4:	201c      	movs	r0, #28
 80032b6:	f000 fc56 	bl	8003b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80032ba:	201c      	movs	r0, #28
 80032bc:	f000 fc6f 	bl	8003b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80032c0:	e034      	b.n	800332c <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM3)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <HAL_TIM_Base_MspInit+0xfc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d10c      	bne.n	80032e6 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_TIM_Base_MspInit+0xf8>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	4a18      	ldr	r2, [pc, #96]	; (8003334 <HAL_TIM_Base_MspInit+0xf8>)
 80032d2:	f043 0302 	orr.w	r3, r3, #2
 80032d6:	6593      	str	r3, [r2, #88]	; 0x58
 80032d8:	4b16      	ldr	r3, [pc, #88]	; (8003334 <HAL_TIM_Base_MspInit+0xf8>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	693b      	ldr	r3, [r7, #16]
}
 80032e4:	e022      	b.n	800332c <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM4)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a14      	ldr	r2, [pc, #80]	; (800333c <HAL_TIM_Base_MspInit+0x100>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d10c      	bne.n	800330a <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032f0:	4b10      	ldr	r3, [pc, #64]	; (8003334 <HAL_TIM_Base_MspInit+0xf8>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f4:	4a0f      	ldr	r2, [pc, #60]	; (8003334 <HAL_TIM_Base_MspInit+0xf8>)
 80032f6:	f043 0304 	orr.w	r3, r3, #4
 80032fa:	6593      	str	r3, [r2, #88]	; 0x58
 80032fc:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <HAL_TIM_Base_MspInit+0xf8>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]
}
 8003308:	e010      	b.n	800332c <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM17)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a0c      	ldr	r2, [pc, #48]	; (8003340 <HAL_TIM_Base_MspInit+0x104>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10b      	bne.n	800332c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003314:	4b07      	ldr	r3, [pc, #28]	; (8003334 <HAL_TIM_Base_MspInit+0xf8>)
 8003316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003318:	4a06      	ldr	r2, [pc, #24]	; (8003334 <HAL_TIM_Base_MspInit+0xf8>)
 800331a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800331e:	6613      	str	r3, [r2, #96]	; 0x60
 8003320:	4b04      	ldr	r3, [pc, #16]	; (8003334 <HAL_TIM_Base_MspInit+0xf8>)
 8003322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	68bb      	ldr	r3, [r7, #8]
}
 800332c:	bf00      	nop
 800332e:	3730      	adds	r7, #48	; 0x30
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000
 8003338:	40000400 	.word	0x40000400
 800333c:	40000800 	.word	0x40000800
 8003340:	40014800 	.word	0x40014800

08003344 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0a      	ldr	r2, [pc, #40]	; (800337c <HAL_TIM_PWM_MspInit+0x38>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d10b      	bne.n	800336e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <HAL_TIM_PWM_MspInit+0x3c>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	4a09      	ldr	r2, [pc, #36]	; (8003380 <HAL_TIM_PWM_MspInit+0x3c>)
 800335c:	f043 0308 	orr.w	r3, r3, #8
 8003360:	6593      	str	r3, [r2, #88]	; 0x58
 8003362:	4b07      	ldr	r3, [pc, #28]	; (8003380 <HAL_TIM_PWM_MspInit+0x3c>)
 8003364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40000c00 	.word	0x40000c00
 8003380:	40021000 	.word	0x40021000

08003384 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08c      	sub	sp, #48	; 0x30
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338c:	f107 031c 	add.w	r3, r7, #28
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a45      	ldr	r2, [pc, #276]	; (80034b8 <HAL_TIM_MspPostInit+0x134>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d11c      	bne.n	80033e0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a6:	4b45      	ldr	r3, [pc, #276]	; (80034bc <HAL_TIM_MspPostInit+0x138>)
 80033a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033aa:	4a44      	ldr	r2, [pc, #272]	; (80034bc <HAL_TIM_MspPostInit+0x138>)
 80033ac:	f043 0302 	orr.w	r3, r3, #2
 80033b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033b2:	4b42      	ldr	r3, [pc, #264]	; (80034bc <HAL_TIM_MspPostInit+0x138>)
 80033b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033be:	2301      	movs	r3, #1
 80033c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c2:	2302      	movs	r3, #2
 80033c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ca:	2300      	movs	r3, #0
 80033cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033ce:	2302      	movs	r3, #2
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d2:	f107 031c 	add.w	r3, r7, #28
 80033d6:	4619      	mov	r1, r3
 80033d8:	4839      	ldr	r0, [pc, #228]	; (80034c0 <HAL_TIM_MspPostInit+0x13c>)
 80033da:	f000 fd07 	bl	8003dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80033de:	e067      	b.n	80034b0 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM4)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a37      	ldr	r2, [pc, #220]	; (80034c4 <HAL_TIM_MspPostInit+0x140>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d11d      	bne.n	8003426 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ea:	4b34      	ldr	r3, [pc, #208]	; (80034bc <HAL_TIM_MspPostInit+0x138>)
 80033ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ee:	4a33      	ldr	r2, [pc, #204]	; (80034bc <HAL_TIM_MspPostInit+0x138>)
 80033f0:	f043 0308 	orr.w	r3, r3, #8
 80033f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033f6:	4b31      	ldr	r3, [pc, #196]	; (80034bc <HAL_TIM_MspPostInit+0x138>)
 80033f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003402:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003408:	2302      	movs	r3, #2
 800340a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340c:	2300      	movs	r3, #0
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003410:	2300      	movs	r3, #0
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003414:	2302      	movs	r3, #2
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003418:	f107 031c 	add.w	r3, r7, #28
 800341c:	4619      	mov	r1, r3
 800341e:	482a      	ldr	r0, [pc, #168]	; (80034c8 <HAL_TIM_MspPostInit+0x144>)
 8003420:	f000 fce4 	bl	8003dec <HAL_GPIO_Init>
}
 8003424:	e044      	b.n	80034b0 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM5)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a28      	ldr	r2, [pc, #160]	; (80034cc <HAL_TIM_MspPostInit+0x148>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d11d      	bne.n	800346c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003430:	4b22      	ldr	r3, [pc, #136]	; (80034bc <HAL_TIM_MspPostInit+0x138>)
 8003432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003434:	4a21      	ldr	r2, [pc, #132]	; (80034bc <HAL_TIM_MspPostInit+0x138>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800343c:	4b1f      	ldr	r3, [pc, #124]	; (80034bc <HAL_TIM_MspPostInit+0x138>)
 800343e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003448:	2301      	movs	r3, #1
 800344a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344c:	2302      	movs	r3, #2
 800344e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003454:	2300      	movs	r3, #0
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003458:	2302      	movs	r3, #2
 800345a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345c:	f107 031c 	add.w	r3, r7, #28
 8003460:	4619      	mov	r1, r3
 8003462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003466:	f000 fcc1 	bl	8003dec <HAL_GPIO_Init>
}
 800346a:	e021      	b.n	80034b0 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM17)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a17      	ldr	r2, [pc, #92]	; (80034d0 <HAL_TIM_MspPostInit+0x14c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d11c      	bne.n	80034b0 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_TIM_MspPostInit+0x138>)
 8003478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347a:	4a10      	ldr	r2, [pc, #64]	; (80034bc <HAL_TIM_MspPostInit+0x138>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003482:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <HAL_TIM_MspPostInit+0x138>)
 8003484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003492:	2302      	movs	r3, #2
 8003494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349a:	2300      	movs	r3, #0
 800349c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 800349e:	230e      	movs	r3, #14
 80034a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a2:	f107 031c 	add.w	r3, r7, #28
 80034a6:	4619      	mov	r1, r3
 80034a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ac:	f000 fc9e 	bl	8003dec <HAL_GPIO_Init>
}
 80034b0:	bf00      	nop
 80034b2:	3730      	adds	r7, #48	; 0x30
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40000400 	.word	0x40000400
 80034bc:	40021000 	.word	0x40021000
 80034c0:	48000400 	.word	0x48000400
 80034c4:	40000800 	.word	0x40000800
 80034c8:	48000c00 	.word	0x48000c00
 80034cc:	40000c00 	.word	0x40000c00
 80034d0:	40014800 	.word	0x40014800

080034d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08c      	sub	sp, #48	; 0x30
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034dc:	f107 031c 	add.w	r3, r7, #28
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a2e      	ldr	r2, [pc, #184]	; (80035ac <HAL_UART_MspInit+0xd8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d128      	bne.n	8003548 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034f6:	4b2e      	ldr	r3, [pc, #184]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 80034f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fa:	4a2d      	ldr	r2, [pc, #180]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 80034fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003500:	6613      	str	r3, [r2, #96]	; 0x60
 8003502:	4b2b      	ldr	r3, [pc, #172]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 8003504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800350e:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	4a27      	ldr	r2, [pc, #156]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 8003514:	f043 0302 	orr.w	r3, r3, #2
 8003518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800351a:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 800351c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003526:	23c0      	movs	r3, #192	; 0xc0
 8003528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352a:	2302      	movs	r3, #2
 800352c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003532:	2303      	movs	r3, #3
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003536:	2307      	movs	r3, #7
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800353a:	f107 031c 	add.w	r3, r7, #28
 800353e:	4619      	mov	r1, r3
 8003540:	481c      	ldr	r0, [pc, #112]	; (80035b4 <HAL_UART_MspInit+0xe0>)
 8003542:	f000 fc53 	bl	8003dec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003546:	e02d      	b.n	80035a4 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a1a      	ldr	r2, [pc, #104]	; (80035b8 <HAL_UART_MspInit+0xe4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d128      	bne.n	80035a4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003552:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	4a16      	ldr	r2, [pc, #88]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 8003558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800355c:	6593      	str	r3, [r2, #88]	; 0x58
 800355e:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800356a:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 800356c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356e:	4a10      	ldr	r2, [pc, #64]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 8003570:	f043 0308 	orr.w	r3, r3, #8
 8003574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003576:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <HAL_UART_MspInit+0xdc>)
 8003578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003582:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003588:	2302      	movs	r3, #2
 800358a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	2300      	movs	r3, #0
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003590:	2303      	movs	r3, #3
 8003592:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003594:	2307      	movs	r3, #7
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003598:	f107 031c 	add.w	r3, r7, #28
 800359c:	4619      	mov	r1, r3
 800359e:	4807      	ldr	r0, [pc, #28]	; (80035bc <HAL_UART_MspInit+0xe8>)
 80035a0:	f000 fc24 	bl	8003dec <HAL_GPIO_Init>
}
 80035a4:	bf00      	nop
 80035a6:	3730      	adds	r7, #48	; 0x30
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40013800 	.word	0x40013800
 80035b0:	40021000 	.word	0x40021000
 80035b4:	48000400 	.word	0x48000400
 80035b8:	40004800 	.word	0x40004800
 80035bc:	48000c00 	.word	0x48000c00

080035c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	; 0x28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c8:	f107 0314 	add.w	r3, r7, #20
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035e0:	d154      	bne.n	800368c <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e2:	4b2c      	ldr	r3, [pc, #176]	; (8003694 <HAL_PCD_MspInit+0xd4>)
 80035e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e6:	4a2b      	ldr	r2, [pc, #172]	; (8003694 <HAL_PCD_MspInit+0xd4>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035ee:	4b29      	ldr	r3, [pc, #164]	; (8003694 <HAL_PCD_MspInit+0xd4>)
 80035f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80035fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003600:	2300      	movs	r3, #0
 8003602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003604:	2300      	movs	r3, #0
 8003606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	4619      	mov	r1, r3
 800360e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003612:	f000 fbeb 	bl	8003dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8003616:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800361a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361c:	2302      	movs	r3, #2
 800361e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003624:	2303      	movs	r3, #3
 8003626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003628:	230a      	movs	r3, #10
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362c:	f107 0314 	add.w	r3, r7, #20
 8003630:	4619      	mov	r1, r3
 8003632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003636:	f000 fbd9 	bl	8003dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800363a:	4b16      	ldr	r3, [pc, #88]	; (8003694 <HAL_PCD_MspInit+0xd4>)
 800363c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363e:	4a15      	ldr	r2, [pc, #84]	; (8003694 <HAL_PCD_MspInit+0xd4>)
 8003640:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003646:	4b13      	ldr	r3, [pc, #76]	; (8003694 <HAL_PCD_MspInit+0xd4>)
 8003648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003652:	4b10      	ldr	r3, [pc, #64]	; (8003694 <HAL_PCD_MspInit+0xd4>)
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d114      	bne.n	8003688 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <HAL_PCD_MspInit+0xd4>)
 8003660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003662:	4a0c      	ldr	r2, [pc, #48]	; (8003694 <HAL_PCD_MspInit+0xd4>)
 8003664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003668:	6593      	str	r3, [r2, #88]	; 0x58
 800366a:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <HAL_PCD_MspInit+0xd4>)
 800366c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8003676:	f001 fdf9 	bl	800526c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800367a:	4b06      	ldr	r3, [pc, #24]	; (8003694 <HAL_PCD_MspInit+0xd4>)
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367e:	4a05      	ldr	r2, [pc, #20]	; (8003694 <HAL_PCD_MspInit+0xd4>)
 8003680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003684:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003686:	e001      	b.n	800368c <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8003688:	f001 fdf0 	bl	800526c <HAL_PWREx_EnableVddUSB>
}
 800368c:	bf00      	nop
 800368e:	3728      	adds	r7, #40	; 0x28
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40021000 	.word	0x40021000

08003698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800369c:	e7fe      	b.n	800369c <NMI_Handler+0x4>

0800369e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036a2:	e7fe      	b.n	80036a2 <HardFault_Handler+0x4>

080036a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036a8:	e7fe      	b.n	80036a8 <MemManage_Handler+0x4>

080036aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036aa:	b480      	push	{r7}
 80036ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036ae:	e7fe      	b.n	80036ae <BusFault_Handler+0x4>

080036b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036b4:	e7fe      	b.n	80036b4 <UsageFault_Handler+0x4>

080036b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036b6:	b480      	push	{r7}
 80036b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036ba:	bf00      	nop
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036d2:	b480      	push	{r7}
 80036d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036d6:	bf00      	nop
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036e4:	f000 f922 	bl	800392c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036e8:	bf00      	nop
 80036ea:	bd80      	pop	{r7, pc}

080036ec <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80036f0:	2010      	movs	r0, #16
 80036f2:	f000 fe47 	bl	8004384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}

080036fa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80036fe:	2020      	movs	r0, #32
 8003700:	f000 fe40 	bl	8004384 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003704:	2040      	movs	r0, #64	; 0x40
 8003706:	f000 fe3d 	bl	8004384 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800370a:	2080      	movs	r0, #128	; 0x80
 800370c:	f000 fe3a 	bl	8004384 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003710:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003714:	f000 fe36 	bl	8004384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003718:	bf00      	nop
 800371a:	bd80      	pop	{r7, pc}

0800371c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003720:	4802      	ldr	r0, [pc, #8]	; (800372c <TIM2_IRQHandler+0x10>)
 8003722:	f003 fbe1 	bl	8006ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000b20 	.word	0x20000b20

08003730 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003734:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003738:	f000 fe24 	bl	8004384 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800373c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003740:	f000 fe20 	bl	8004384 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003744:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003748:	f000 fe1c 	bl	8004384 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800374c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003750:	f000 fe18 	bl	8004384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003754:	bf00      	nop
 8003756:	bd80      	pop	{r7, pc}

08003758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <_sbrk+0x5c>)
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <_sbrk+0x60>)
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800376c:	4b13      	ldr	r3, [pc, #76]	; (80037bc <_sbrk+0x64>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <_sbrk+0x64>)
 8003776:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <_sbrk+0x68>)
 8003778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <_sbrk+0x64>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	429a      	cmp	r2, r3
 8003786:	d207      	bcs.n	8003798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003788:	f005 fade 	bl	8008d48 <__errno>
 800378c:	4602      	mov	r2, r0
 800378e:	230c      	movs	r3, #12
 8003790:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295
 8003796:	e009      	b.n	80037ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <_sbrk+0x64>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <_sbrk+0x64>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	4a05      	ldr	r2, [pc, #20]	; (80037bc <_sbrk+0x64>)
 80037a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037aa:	68fb      	ldr	r3, [r7, #12]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20018000 	.word	0x20018000
 80037b8:	00000400 	.word	0x00000400
 80037bc:	20000388 	.word	0x20000388
 80037c0:	20000c98 	.word	0x20000c98

080037c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037c8:	4b17      	ldr	r3, [pc, #92]	; (8003828 <SystemInit+0x64>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ce:	4a16      	ldr	r2, [pc, #88]	; (8003828 <SystemInit+0x64>)
 80037d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <SystemInit+0x68>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a13      	ldr	r2, [pc, #76]	; (800382c <SystemInit+0x68>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80037e4:	4b11      	ldr	r3, [pc, #68]	; (800382c <SystemInit+0x68>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <SystemInit+0x68>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a0f      	ldr	r2, [pc, #60]	; (800382c <SystemInit+0x68>)
 80037f0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80037f4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80037f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <SystemInit+0x68>)
 80037fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003800:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003802:	4b0a      	ldr	r3, [pc, #40]	; (800382c <SystemInit+0x68>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a09      	ldr	r2, [pc, #36]	; (800382c <SystemInit+0x68>)
 8003808:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800380c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800380e:	4b07      	ldr	r3, [pc, #28]	; (800382c <SystemInit+0x68>)
 8003810:	2200      	movs	r2, #0
 8003812:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <SystemInit+0x64>)
 8003816:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800381a:	609a      	str	r2, [r3, #8]
#endif
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000ed00 	.word	0xe000ed00
 800382c:	40021000 	.word	0x40021000

08003830 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003868 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003834:	f7ff ffc6 	bl	80037c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003838:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800383a:	e003      	b.n	8003844 <LoopCopyDataInit>

0800383c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800383e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003840:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003842:	3104      	adds	r1, #4

08003844 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003844:	480a      	ldr	r0, [pc, #40]	; (8003870 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003846:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003848:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800384a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800384c:	d3f6      	bcc.n	800383c <CopyDataInit>
	ldr	r2, =_sbss
 800384e:	4a0a      	ldr	r2, [pc, #40]	; (8003878 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003850:	e002      	b.n	8003858 <LoopFillZerobss>

08003852 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003852:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003854:	f842 3b04 	str.w	r3, [r2], #4

08003858 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003858:	4b08      	ldr	r3, [pc, #32]	; (800387c <LoopForever+0x16>)
	cmp	r2, r3
 800385a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800385c:	d3f9      	bcc.n	8003852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800385e:	f005 fa79 	bl	8008d54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003862:	f7fd fe49 	bl	80014f8 <main>

08003866 <LoopForever>:

LoopForever:
    b LoopForever
 8003866:	e7fe      	b.n	8003866 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003868:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800386c:	0800e078 	.word	0x0800e078
	ldr	r0, =_sdata
 8003870:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003874:	2000025c 	.word	0x2000025c
	ldr	r2, =_sbss
 8003878:	2000025c 	.word	0x2000025c
	ldr	r3, = _ebss
 800387c:	20000c98 	.word	0x20000c98

08003880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003880:	e7fe      	b.n	8003880 <ADC1_2_IRQHandler>

08003882 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800388c:	2003      	movs	r0, #3
 800388e:	f000 f95f 	bl	8003b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003892:	2000      	movs	r0, #0
 8003894:	f000 f80e 	bl	80038b4 <HAL_InitTick>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	71fb      	strb	r3, [r7, #7]
 80038a2:	e001      	b.n	80038a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038a4:	f7ff fb6e 	bl	8002f84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038a8:	79fb      	ldrb	r3, [r7, #7]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80038c0:	4b17      	ldr	r3, [pc, #92]	; (8003920 <HAL_InitTick+0x6c>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d023      	beq.n	8003910 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80038c8:	4b16      	ldr	r3, [pc, #88]	; (8003924 <HAL_InitTick+0x70>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b14      	ldr	r3, [pc, #80]	; (8003920 <HAL_InitTick+0x6c>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	4619      	mov	r1, r3
 80038d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80038da:	fbb2 f3f3 	udiv	r3, r2, r3
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 f96b 	bl	8003bba <HAL_SYSTICK_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10f      	bne.n	800390a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b0f      	cmp	r3, #15
 80038ee:	d809      	bhi.n	8003904 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038f0:	2200      	movs	r2, #0
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295
 80038f8:	f000 f935 	bl	8003b66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038fc:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <HAL_InitTick+0x74>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	e007      	b.n	8003914 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
 8003908:	e004      	b.n	8003914 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
 800390e:	e001      	b.n	8003914 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003914:	7bfb      	ldrb	r3, [r7, #15]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000084 	.word	0x20000084
 8003924:	2000007c 	.word	0x2000007c
 8003928:	20000080 	.word	0x20000080

0800392c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <HAL_IncTick+0x20>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_IncTick+0x24>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4413      	add	r3, r2
 800393c:	4a04      	ldr	r2, [pc, #16]	; (8003950 <HAL_IncTick+0x24>)
 800393e:	6013      	str	r3, [r2, #0]
}
 8003940:	bf00      	nop
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000084 	.word	0x20000084
 8003950:	20000c90 	.word	0x20000c90

08003954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return uwTick;
 8003958:	4b03      	ldr	r3, [pc, #12]	; (8003968 <HAL_GetTick+0x14>)
 800395a:	681b      	ldr	r3, [r3, #0]
}
 800395c:	4618      	mov	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000c90 	.word	0x20000c90

0800396c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003974:	f7ff ffee 	bl	8003954 <HAL_GetTick>
 8003978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003984:	d005      	beq.n	8003992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003986:	4b09      	ldr	r3, [pc, #36]	; (80039ac <HAL_Delay+0x40>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003992:	bf00      	nop
 8003994:	f7ff ffde 	bl	8003954 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d8f7      	bhi.n	8003994 <HAL_Delay+0x28>
  {
  }
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20000084 	.word	0x20000084

080039b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <__NVIC_SetPriorityGrouping+0x44>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039cc:	4013      	ands	r3, r2
 80039ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039e2:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <__NVIC_SetPriorityGrouping+0x44>)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	60d3      	str	r3, [r2, #12]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039fc:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <__NVIC_GetPriorityGrouping+0x18>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	0a1b      	lsrs	r3, r3, #8
 8003a02:	f003 0307 	and.w	r3, r3, #7
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	db0b      	blt.n	8003a3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	f003 021f 	and.w	r2, r3, #31
 8003a2c:	4907      	ldr	r1, [pc, #28]	; (8003a4c <__NVIC_EnableIRQ+0x38>)
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2001      	movs	r0, #1
 8003a36:	fa00 f202 	lsl.w	r2, r0, r2
 8003a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	e000e100 	.word	0xe000e100

08003a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	6039      	str	r1, [r7, #0]
 8003a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	db0a      	blt.n	8003a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	490c      	ldr	r1, [pc, #48]	; (8003a9c <__NVIC_SetPriority+0x4c>)
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	0112      	lsls	r2, r2, #4
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	440b      	add	r3, r1
 8003a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a78:	e00a      	b.n	8003a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	4908      	ldr	r1, [pc, #32]	; (8003aa0 <__NVIC_SetPriority+0x50>)
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	3b04      	subs	r3, #4
 8003a88:	0112      	lsls	r2, r2, #4
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	761a      	strb	r2, [r3, #24]
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	e000e100 	.word	0xe000e100
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b089      	sub	sp, #36	; 0x24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f1c3 0307 	rsb	r3, r3, #7
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	bf28      	it	cs
 8003ac2:	2304      	movcs	r3, #4
 8003ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d902      	bls.n	8003ad4 <NVIC_EncodePriority+0x30>
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	3b03      	subs	r3, #3
 8003ad2:	e000      	b.n	8003ad6 <NVIC_EncodePriority+0x32>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aec:	f04f 31ff 	mov.w	r1, #4294967295
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	fa01 f303 	lsl.w	r3, r1, r3
 8003af6:	43d9      	mvns	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003afc:	4313      	orrs	r3, r2
         );
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3724      	adds	r7, #36	; 0x24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b1c:	d301      	bcc.n	8003b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e00f      	b.n	8003b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b22:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <SysTick_Config+0x40>)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b2a:	210f      	movs	r1, #15
 8003b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b30:	f7ff ff8e 	bl	8003a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <SysTick_Config+0x40>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b3a:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <SysTick_Config+0x40>)
 8003b3c:	2207      	movs	r2, #7
 8003b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	e000e010 	.word	0xe000e010

08003b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff ff29 	bl	80039b0 <__NVIC_SetPriorityGrouping>
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b78:	f7ff ff3e 	bl	80039f8 <__NVIC_GetPriorityGrouping>
 8003b7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	6978      	ldr	r0, [r7, #20]
 8003b84:	f7ff ff8e 	bl	8003aa4 <NVIC_EncodePriority>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff ff5d 	bl	8003a50 <__NVIC_SetPriority>
}
 8003b96:	bf00      	nop
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff31 	bl	8003a14 <__NVIC_EnableIRQ>
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff ffa2 	bl	8003b0c <SysTick_Config>
 8003bc8:	4603      	mov	r3, r0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e0ac      	b.n	8003d40 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f8b2 	bl	8003d54 <DFSDM_GetChannelFromInstance>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	4b55      	ldr	r3, [pc, #340]	; (8003d48 <HAL_DFSDM_ChannelInit+0x174>)
 8003bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e09f      	b.n	8003d40 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff f9e3 	bl	8002fcc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003c06:	4b51      	ldr	r3, [pc, #324]	; (8003d4c <HAL_DFSDM_ChannelInit+0x178>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	4a4f      	ldr	r2, [pc, #316]	; (8003d4c <HAL_DFSDM_ChannelInit+0x178>)
 8003c0e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003c10:	4b4e      	ldr	r3, [pc, #312]	; (8003d4c <HAL_DFSDM_ChannelInit+0x178>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d125      	bne.n	8003c64 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003c18:	4b4d      	ldr	r3, [pc, #308]	; (8003d50 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a4c      	ldr	r2, [pc, #304]	; (8003d50 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c22:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003c24:	4b4a      	ldr	r3, [pc, #296]	; (8003d50 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4948      	ldr	r1, [pc, #288]	; (8003d50 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003c32:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a46      	ldr	r2, [pc, #280]	; (8003d50 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c38:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003c3c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	791b      	ldrb	r3, [r3, #4]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d108      	bne.n	8003c58 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003c46:	4b42      	ldr	r3, [pc, #264]	; (8003d50 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	041b      	lsls	r3, r3, #16
 8003c52:	493f      	ldr	r1, [pc, #252]	; (8003d50 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003c58:	4b3d      	ldr	r3, [pc, #244]	; (8003d50 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a3c      	ldr	r2, [pc, #240]	; (8003d50 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c62:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003c72:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6819      	ldr	r1, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003c82:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003c88:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 020f 	bic.w	r2, r2, #15
 8003ca0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6819      	ldr	r1, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003cc8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6899      	ldr	r1, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f002 0207 	and.w	r2, r2, #7
 8003cf4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6859      	ldr	r1, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d20:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 f810 	bl	8003d54 <DFSDM_GetChannelFromInstance>
 8003d34:	4601      	mov	r1, r0
 8003d36:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <HAL_DFSDM_ChannelInit+0x174>)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20000390 	.word	0x20000390
 8003d4c:	2000038c 	.word	0x2000038c
 8003d50:	40016000 	.word	0x40016000

08003d54 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a1c      	ldr	r2, [pc, #112]	; (8003dd0 <DFSDM_GetChannelFromInstance+0x7c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d102      	bne.n	8003d6a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e02b      	b.n	8003dc2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a19      	ldr	r2, [pc, #100]	; (8003dd4 <DFSDM_GetChannelFromInstance+0x80>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d102      	bne.n	8003d78 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003d72:	2301      	movs	r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	e024      	b.n	8003dc2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <DFSDM_GetChannelFromInstance+0x84>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d102      	bne.n	8003d86 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003d80:	2302      	movs	r3, #2
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	e01d      	b.n	8003dc2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a14      	ldr	r2, [pc, #80]	; (8003ddc <DFSDM_GetChannelFromInstance+0x88>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d102      	bne.n	8003d94 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003d8e:	2304      	movs	r3, #4
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	e016      	b.n	8003dc2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a12      	ldr	r2, [pc, #72]	; (8003de0 <DFSDM_GetChannelFromInstance+0x8c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d102      	bne.n	8003da2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003d9c:	2305      	movs	r3, #5
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	e00f      	b.n	8003dc2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a0f      	ldr	r2, [pc, #60]	; (8003de4 <DFSDM_GetChannelFromInstance+0x90>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d102      	bne.n	8003db0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003daa:	2306      	movs	r3, #6
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	e008      	b.n	8003dc2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a0d      	ldr	r2, [pc, #52]	; (8003de8 <DFSDM_GetChannelFromInstance+0x94>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d102      	bne.n	8003dbe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003db8:	2307      	movs	r3, #7
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e001      	b.n	8003dc2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	40016000 	.word	0x40016000
 8003dd4:	40016020 	.word	0x40016020
 8003dd8:	40016040 	.word	0x40016040
 8003ddc:	40016080 	.word	0x40016080
 8003de0:	400160a0 	.word	0x400160a0
 8003de4:	400160c0 	.word	0x400160c0
 8003de8:	400160e0 	.word	0x400160e0

08003dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dfa:	e17f      	b.n	80040fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	2101      	movs	r1, #1
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	fa01 f303 	lsl.w	r3, r1, r3
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 8171 	beq.w	80040f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d00b      	beq.n	8003e34 <HAL_GPIO_Init+0x48>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d007      	beq.n	8003e34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e28:	2b11      	cmp	r3, #17
 8003e2a:	d003      	beq.n	8003e34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b12      	cmp	r3, #18
 8003e32:	d130      	bne.n	8003e96 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	2203      	movs	r2, #3
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4013      	ands	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	f003 0201 	and.w	r2, r3, #1
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d118      	bne.n	8003ed4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	08db      	lsrs	r3, r3, #3
 8003ebe:	f003 0201 	and.w	r2, r3, #1
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	2203      	movs	r2, #3
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d003      	beq.n	8003f14 <HAL_GPIO_Init+0x128>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b12      	cmp	r3, #18
 8003f12:	d123      	bne.n	8003f5c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	08da      	lsrs	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3208      	adds	r2, #8
 8003f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	220f      	movs	r2, #15
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4013      	ands	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	08da      	lsrs	r2, r3, #3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3208      	adds	r2, #8
 8003f56:	6939      	ldr	r1, [r7, #16]
 8003f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	2203      	movs	r2, #3
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 0203 	and.w	r2, r3, #3
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 80ac 	beq.w	80040f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9e:	4b5e      	ldr	r3, [pc, #376]	; (8004118 <HAL_GPIO_Init+0x32c>)
 8003fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa2:	4a5d      	ldr	r2, [pc, #372]	; (8004118 <HAL_GPIO_Init+0x32c>)
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	6613      	str	r3, [r2, #96]	; 0x60
 8003faa:	4b5b      	ldr	r3, [pc, #364]	; (8004118 <HAL_GPIO_Init+0x32c>)
 8003fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	60bb      	str	r3, [r7, #8]
 8003fb4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fb6:	4a59      	ldr	r2, [pc, #356]	; (800411c <HAL_GPIO_Init+0x330>)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	089b      	lsrs	r3, r3, #2
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	220f      	movs	r2, #15
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fe0:	d025      	beq.n	800402e <HAL_GPIO_Init+0x242>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a4e      	ldr	r2, [pc, #312]	; (8004120 <HAL_GPIO_Init+0x334>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d01f      	beq.n	800402a <HAL_GPIO_Init+0x23e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a4d      	ldr	r2, [pc, #308]	; (8004124 <HAL_GPIO_Init+0x338>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d019      	beq.n	8004026 <HAL_GPIO_Init+0x23a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a4c      	ldr	r2, [pc, #304]	; (8004128 <HAL_GPIO_Init+0x33c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <HAL_GPIO_Init+0x236>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a4b      	ldr	r2, [pc, #300]	; (800412c <HAL_GPIO_Init+0x340>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00d      	beq.n	800401e <HAL_GPIO_Init+0x232>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a4a      	ldr	r2, [pc, #296]	; (8004130 <HAL_GPIO_Init+0x344>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d007      	beq.n	800401a <HAL_GPIO_Init+0x22e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a49      	ldr	r2, [pc, #292]	; (8004134 <HAL_GPIO_Init+0x348>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d101      	bne.n	8004016 <HAL_GPIO_Init+0x22a>
 8004012:	2306      	movs	r3, #6
 8004014:	e00c      	b.n	8004030 <HAL_GPIO_Init+0x244>
 8004016:	2307      	movs	r3, #7
 8004018:	e00a      	b.n	8004030 <HAL_GPIO_Init+0x244>
 800401a:	2305      	movs	r3, #5
 800401c:	e008      	b.n	8004030 <HAL_GPIO_Init+0x244>
 800401e:	2304      	movs	r3, #4
 8004020:	e006      	b.n	8004030 <HAL_GPIO_Init+0x244>
 8004022:	2303      	movs	r3, #3
 8004024:	e004      	b.n	8004030 <HAL_GPIO_Init+0x244>
 8004026:	2302      	movs	r3, #2
 8004028:	e002      	b.n	8004030 <HAL_GPIO_Init+0x244>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <HAL_GPIO_Init+0x244>
 800402e:	2300      	movs	r3, #0
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	f002 0203 	and.w	r2, r2, #3
 8004036:	0092      	lsls	r2, r2, #2
 8004038:	4093      	lsls	r3, r2
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004040:	4936      	ldr	r1, [pc, #216]	; (800411c <HAL_GPIO_Init+0x330>)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	089b      	lsrs	r3, r3, #2
 8004046:	3302      	adds	r3, #2
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800404e:	4b3a      	ldr	r3, [pc, #232]	; (8004138 <HAL_GPIO_Init+0x34c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	43db      	mvns	r3, r3
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004072:	4a31      	ldr	r2, [pc, #196]	; (8004138 <HAL_GPIO_Init+0x34c>)
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004078:	4b2f      	ldr	r3, [pc, #188]	; (8004138 <HAL_GPIO_Init+0x34c>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	43db      	mvns	r3, r3
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4013      	ands	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800409c:	4a26      	ldr	r2, [pc, #152]	; (8004138 <HAL_GPIO_Init+0x34c>)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040a2:	4b25      	ldr	r3, [pc, #148]	; (8004138 <HAL_GPIO_Init+0x34c>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	43db      	mvns	r3, r3
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4013      	ands	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040c6:	4a1c      	ldr	r2, [pc, #112]	; (8004138 <HAL_GPIO_Init+0x34c>)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040cc:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <HAL_GPIO_Init+0x34c>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	43db      	mvns	r3, r3
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4013      	ands	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040f0:	4a11      	ldr	r2, [pc, #68]	; (8004138 <HAL_GPIO_Init+0x34c>)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	3301      	adds	r3, #1
 80040fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	fa22 f303 	lsr.w	r3, r2, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	f47f ae78 	bne.w	8003dfc <HAL_GPIO_Init+0x10>
  }
}
 800410c:	bf00      	nop
 800410e:	371c      	adds	r7, #28
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	40021000 	.word	0x40021000
 800411c:	40010000 	.word	0x40010000
 8004120:	48000400 	.word	0x48000400
 8004124:	48000800 	.word	0x48000800
 8004128:	48000c00 	.word	0x48000c00
 800412c:	48001000 	.word	0x48001000
 8004130:	48001400 	.word	0x48001400
 8004134:	48001800 	.word	0x48001800
 8004138:	40010400 	.word	0x40010400

0800413c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800414a:	e0cd      	b.n	80042e8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800414c:	2201      	movs	r2, #1
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	4013      	ands	r3, r2
 8004158:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80c0 	beq.w	80042e2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004162:	4a68      	ldr	r2, [pc, #416]	; (8004304 <HAL_GPIO_DeInit+0x1c8>)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	089b      	lsrs	r3, r3, #2
 8004168:	3302      	adds	r3, #2
 800416a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	220f      	movs	r2, #15
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4013      	ands	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800418a:	d025      	beq.n	80041d8 <HAL_GPIO_DeInit+0x9c>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a5e      	ldr	r2, [pc, #376]	; (8004308 <HAL_GPIO_DeInit+0x1cc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d01f      	beq.n	80041d4 <HAL_GPIO_DeInit+0x98>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a5d      	ldr	r2, [pc, #372]	; (800430c <HAL_GPIO_DeInit+0x1d0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d019      	beq.n	80041d0 <HAL_GPIO_DeInit+0x94>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a5c      	ldr	r2, [pc, #368]	; (8004310 <HAL_GPIO_DeInit+0x1d4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d013      	beq.n	80041cc <HAL_GPIO_DeInit+0x90>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a5b      	ldr	r2, [pc, #364]	; (8004314 <HAL_GPIO_DeInit+0x1d8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00d      	beq.n	80041c8 <HAL_GPIO_DeInit+0x8c>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a5a      	ldr	r2, [pc, #360]	; (8004318 <HAL_GPIO_DeInit+0x1dc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d007      	beq.n	80041c4 <HAL_GPIO_DeInit+0x88>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a59      	ldr	r2, [pc, #356]	; (800431c <HAL_GPIO_DeInit+0x1e0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d101      	bne.n	80041c0 <HAL_GPIO_DeInit+0x84>
 80041bc:	2306      	movs	r3, #6
 80041be:	e00c      	b.n	80041da <HAL_GPIO_DeInit+0x9e>
 80041c0:	2307      	movs	r3, #7
 80041c2:	e00a      	b.n	80041da <HAL_GPIO_DeInit+0x9e>
 80041c4:	2305      	movs	r3, #5
 80041c6:	e008      	b.n	80041da <HAL_GPIO_DeInit+0x9e>
 80041c8:	2304      	movs	r3, #4
 80041ca:	e006      	b.n	80041da <HAL_GPIO_DeInit+0x9e>
 80041cc:	2303      	movs	r3, #3
 80041ce:	e004      	b.n	80041da <HAL_GPIO_DeInit+0x9e>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e002      	b.n	80041da <HAL_GPIO_DeInit+0x9e>
 80041d4:	2301      	movs	r3, #1
 80041d6:	e000      	b.n	80041da <HAL_GPIO_DeInit+0x9e>
 80041d8:	2300      	movs	r3, #0
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	f002 0203 	and.w	r2, r2, #3
 80041e0:	0092      	lsls	r2, r2, #2
 80041e2:	4093      	lsls	r3, r2
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d132      	bne.n	8004250 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80041ea:	4b4d      	ldr	r3, [pc, #308]	; (8004320 <HAL_GPIO_DeInit+0x1e4>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	43db      	mvns	r3, r3
 80041f2:	494b      	ldr	r1, [pc, #300]	; (8004320 <HAL_GPIO_DeInit+0x1e4>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80041f8:	4b49      	ldr	r3, [pc, #292]	; (8004320 <HAL_GPIO_DeInit+0x1e4>)
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	43db      	mvns	r3, r3
 8004200:	4947      	ldr	r1, [pc, #284]	; (8004320 <HAL_GPIO_DeInit+0x1e4>)
 8004202:	4013      	ands	r3, r2
 8004204:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004206:	4b46      	ldr	r3, [pc, #280]	; (8004320 <HAL_GPIO_DeInit+0x1e4>)
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	43db      	mvns	r3, r3
 800420e:	4944      	ldr	r1, [pc, #272]	; (8004320 <HAL_GPIO_DeInit+0x1e4>)
 8004210:	4013      	ands	r3, r2
 8004212:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004214:	4b42      	ldr	r3, [pc, #264]	; (8004320 <HAL_GPIO_DeInit+0x1e4>)
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	43db      	mvns	r3, r3
 800421c:	4940      	ldr	r1, [pc, #256]	; (8004320 <HAL_GPIO_DeInit+0x1e4>)
 800421e:	4013      	ands	r3, r2
 8004220:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	220f      	movs	r2, #15
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004232:	4a34      	ldr	r2, [pc, #208]	; (8004304 <HAL_GPIO_DeInit+0x1c8>)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	089b      	lsrs	r3, r3, #2
 8004238:	3302      	adds	r3, #2
 800423a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	43da      	mvns	r2, r3
 8004242:	4830      	ldr	r0, [pc, #192]	; (8004304 <HAL_GPIO_DeInit+0x1c8>)
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	089b      	lsrs	r3, r3, #2
 8004248:	400a      	ands	r2, r1
 800424a:	3302      	adds	r3, #2
 800424c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	2103      	movs	r1, #3
 800425a:	fa01 f303 	lsl.w	r3, r1, r3
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	08da      	lsrs	r2, r3, #3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3208      	adds	r2, #8
 800426c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	220f      	movs	r2, #15
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	08d2      	lsrs	r2, r2, #3
 8004284:	4019      	ands	r1, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3208      	adds	r2, #8
 800428a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	2103      	movs	r1, #3
 8004298:	fa01 f303 	lsl.w	r3, r1, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	401a      	ands	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	2101      	movs	r1, #1
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	fa01 f303 	lsl.w	r3, r1, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	401a      	ands	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	2103      	movs	r1, #3
 80042c2:	fa01 f303 	lsl.w	r3, r1, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	401a      	ands	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d2:	2101      	movs	r1, #1
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	fa01 f303 	lsl.w	r3, r1, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	401a      	ands	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	3301      	adds	r3, #1
 80042e6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f47f af2b 	bne.w	800414c <HAL_GPIO_DeInit+0x10>
  }
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40010000 	.word	0x40010000
 8004308:	48000400 	.word	0x48000400
 800430c:	48000800 	.word	0x48000800
 8004310:	48000c00 	.word	0x48000c00
 8004314:	48001000 	.word	0x48001000
 8004318:	48001400 	.word	0x48001400
 800431c:	48001800 	.word	0x48001800
 8004320:	40010400 	.word	0x40010400

08004324 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	460b      	mov	r3, r1
 800432e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	887b      	ldrh	r3, [r7, #2]
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800433c:	2301      	movs	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
 8004340:	e001      	b.n	8004346 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004346:	7bfb      	ldrb	r3, [r7, #15]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	807b      	strh	r3, [r7, #2]
 8004360:	4613      	mov	r3, r2
 8004362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004364:	787b      	ldrb	r3, [r7, #1]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800436a:	887a      	ldrh	r2, [r7, #2]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004370:	e002      	b.n	8004378 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004372:	887a      	ldrh	r2, [r7, #2]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004390:	695a      	ldr	r2, [r3, #20]
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	4013      	ands	r3, r2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d006      	beq.n	80043a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800439a:	4a05      	ldr	r2, [pc, #20]	; (80043b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800439c:	88fb      	ldrh	r3, [r7, #6]
 800439e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd f820 	bl	80013e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80043a8:	bf00      	nop
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40010400 	.word	0x40010400

080043b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e081      	b.n	80044ca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d106      	bne.n	80043e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fe fe3e 	bl	800305c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2224      	movs	r2, #36	; 0x24
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0201 	bic.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004404:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004414:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d107      	bne.n	800442e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	e006      	b.n	800443c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800443a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d104      	bne.n	800444e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800444c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800445c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004460:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004470:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	ea42 0103 	orr.w	r1, r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	021a      	lsls	r2, r3, #8
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69d9      	ldr	r1, [r3, #28]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e021      	b.n	8004528 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2224      	movs	r2, #36	; 0x24
 80044e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7fe fdf1 	bl	80030e4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	4608      	mov	r0, r1
 800453a:	4611      	mov	r1, r2
 800453c:	461a      	mov	r2, r3
 800453e:	4603      	mov	r3, r0
 8004540:	817b      	strh	r3, [r7, #10]
 8004542:	460b      	mov	r3, r1
 8004544:	813b      	strh	r3, [r7, #8]
 8004546:	4613      	mov	r3, r2
 8004548:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b20      	cmp	r3, #32
 8004554:	f040 80f9 	bne.w	800474a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <HAL_I2C_Mem_Write+0x34>
 800455e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004560:	2b00      	cmp	r3, #0
 8004562:	d105      	bne.n	8004570 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800456a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0ed      	b.n	800474c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <HAL_I2C_Mem_Write+0x4e>
 800457a:	2302      	movs	r3, #2
 800457c:	e0e6      	b.n	800474c <HAL_I2C_Mem_Write+0x21c>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004586:	f7ff f9e5 	bl	8003954 <HAL_GetTick>
 800458a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	2319      	movs	r3, #25
 8004592:	2201      	movs	r2, #1
 8004594:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 fac3 	bl	8004b24 <I2C_WaitOnFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0d1      	b.n	800474c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2221      	movs	r2, #33	; 0x21
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2240      	movs	r2, #64	; 0x40
 80045b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a3a      	ldr	r2, [r7, #32]
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045d0:	88f8      	ldrh	r0, [r7, #6]
 80045d2:	893a      	ldrh	r2, [r7, #8]
 80045d4:	8979      	ldrh	r1, [r7, #10]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	9301      	str	r3, [sp, #4]
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	4603      	mov	r3, r0
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f9d3 	bl	800498c <I2C_RequestMemoryWrite>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0a9      	b.n	800474c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2bff      	cmp	r3, #255	; 0xff
 8004600:	d90e      	bls.n	8004620 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	22ff      	movs	r2, #255	; 0xff
 8004606:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460c:	b2da      	uxtb	r2, r3
 800460e:	8979      	ldrh	r1, [r7, #10]
 8004610:	2300      	movs	r3, #0
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 fba5 	bl	8004d68 <I2C_TransferConfig>
 800461e:	e00f      	b.n	8004640 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462e:	b2da      	uxtb	r2, r3
 8004630:	8979      	ldrh	r1, [r7, #10]
 8004632:	2300      	movs	r3, #0
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 fb94 	bl	8004d68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 faad 	bl	8004ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e07b      	b.n	800474c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	781a      	ldrb	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d034      	beq.n	80046f8 <HAL_I2C_Mem_Write+0x1c8>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004692:	2b00      	cmp	r3, #0
 8004694:	d130      	bne.n	80046f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	2200      	movs	r2, #0
 800469e:	2180      	movs	r1, #128	; 0x80
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 fa3f 	bl	8004b24 <I2C_WaitOnFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e04d      	b.n	800474c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2bff      	cmp	r3, #255	; 0xff
 80046b8:	d90e      	bls.n	80046d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	22ff      	movs	r2, #255	; 0xff
 80046be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	8979      	ldrh	r1, [r7, #10]
 80046c8:	2300      	movs	r3, #0
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fb49 	bl	8004d68 <I2C_TransferConfig>
 80046d6:	e00f      	b.n	80046f8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	8979      	ldrh	r1, [r7, #10]
 80046ea:	2300      	movs	r3, #0
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 fb38 	bl	8004d68 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d19e      	bne.n	8004640 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fa8c 	bl	8004c24 <I2C_WaitOnSTOPFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e01a      	b.n	800474c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2220      	movs	r2, #32
 800471c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6859      	ldr	r1, [r3, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <HAL_I2C_Mem_Write+0x224>)
 800472a:	400b      	ands	r3, r1
 800472c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800474a:	2302      	movs	r3, #2
  }
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	fe00e800 	.word	0xfe00e800

08004758 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af02      	add	r7, sp, #8
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	4608      	mov	r0, r1
 8004762:	4611      	mov	r1, r2
 8004764:	461a      	mov	r2, r3
 8004766:	4603      	mov	r3, r0
 8004768:	817b      	strh	r3, [r7, #10]
 800476a:	460b      	mov	r3, r1
 800476c:	813b      	strh	r3, [r7, #8]
 800476e:	4613      	mov	r3, r2
 8004770:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b20      	cmp	r3, #32
 800477c:	f040 80fd 	bne.w	800497a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_I2C_Mem_Read+0x34>
 8004786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004788:	2b00      	cmp	r3, #0
 800478a:	d105      	bne.n	8004798 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004792:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0f1      	b.n	800497c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_I2C_Mem_Read+0x4e>
 80047a2:	2302      	movs	r3, #2
 80047a4:	e0ea      	b.n	800497c <HAL_I2C_Mem_Read+0x224>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047ae:	f7ff f8d1 	bl	8003954 <HAL_GetTick>
 80047b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	2319      	movs	r3, #25
 80047ba:	2201      	movs	r2, #1
 80047bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f9af 	bl	8004b24 <I2C_WaitOnFlagUntilTimeout>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0d5      	b.n	800497c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2222      	movs	r2, #34	; 0x22
 80047d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2240      	movs	r2, #64	; 0x40
 80047dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a3a      	ldr	r2, [r7, #32]
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047f8:	88f8      	ldrh	r0, [r7, #6]
 80047fa:	893a      	ldrh	r2, [r7, #8]
 80047fc:	8979      	ldrh	r1, [r7, #10]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	9301      	str	r3, [sp, #4]
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	4603      	mov	r3, r0
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f913 	bl	8004a34 <I2C_RequestMemoryRead>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0ad      	b.n	800497c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	2bff      	cmp	r3, #255	; 0xff
 8004828:	d90e      	bls.n	8004848 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	22ff      	movs	r2, #255	; 0xff
 800482e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	b2da      	uxtb	r2, r3
 8004836:	8979      	ldrh	r1, [r7, #10]
 8004838:	4b52      	ldr	r3, [pc, #328]	; (8004984 <HAL_I2C_Mem_Read+0x22c>)
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 fa91 	bl	8004d68 <I2C_TransferConfig>
 8004846:	e00f      	b.n	8004868 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004856:	b2da      	uxtb	r2, r3
 8004858:	8979      	ldrh	r1, [r7, #10]
 800485a:	4b4a      	ldr	r3, [pc, #296]	; (8004984 <HAL_I2C_Mem_Read+0x22c>)
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fa80 	bl	8004d68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	2200      	movs	r2, #0
 8004870:	2104      	movs	r1, #4
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f956 	bl	8004b24 <I2C_WaitOnFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e07c      	b.n	800497c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d034      	beq.n	8004928 <HAL_I2C_Mem_Read+0x1d0>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d130      	bne.n	8004928 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	2200      	movs	r2, #0
 80048ce:	2180      	movs	r1, #128	; 0x80
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f927 	bl	8004b24 <I2C_WaitOnFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e04d      	b.n	800497c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2bff      	cmp	r3, #255	; 0xff
 80048e8:	d90e      	bls.n	8004908 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	22ff      	movs	r2, #255	; 0xff
 80048ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	8979      	ldrh	r1, [r7, #10]
 80048f8:	2300      	movs	r3, #0
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 fa31 	bl	8004d68 <I2C_TransferConfig>
 8004906:	e00f      	b.n	8004928 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004916:	b2da      	uxtb	r2, r3
 8004918:	8979      	ldrh	r1, [r7, #10]
 800491a:	2300      	movs	r3, #0
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fa20 	bl	8004d68 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d19a      	bne.n	8004868 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 f974 	bl	8004c24 <I2C_WaitOnSTOPFlagUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e01a      	b.n	800497c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2220      	movs	r2, #32
 800494c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6859      	ldr	r1, [r3, #4]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <HAL_I2C_Mem_Read+0x230>)
 800495a:	400b      	ands	r3, r1
 800495c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	e000      	b.n	800497c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800497a:	2302      	movs	r3, #2
  }
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	80002400 	.word	0x80002400
 8004988:	fe00e800 	.word	0xfe00e800

0800498c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	4608      	mov	r0, r1
 8004996:	4611      	mov	r1, r2
 8004998:	461a      	mov	r2, r3
 800499a:	4603      	mov	r3, r0
 800499c:	817b      	strh	r3, [r7, #10]
 800499e:	460b      	mov	r3, r1
 80049a0:	813b      	strh	r3, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	8979      	ldrh	r1, [r7, #10]
 80049ac:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <I2C_RequestMemoryWrite+0xa4>)
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f9d7 	bl	8004d68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	69b9      	ldr	r1, [r7, #24]
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 f8f0 	bl	8004ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e02c      	b.n	8004a28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d105      	bne.n	80049e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049d4:	893b      	ldrh	r3, [r7, #8]
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	629a      	str	r2, [r3, #40]	; 0x28
 80049de:	e015      	b.n	8004a0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049e0:	893b      	ldrh	r3, [r7, #8]
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	69b9      	ldr	r1, [r7, #24]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f8d6 	bl	8004ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e012      	b.n	8004a28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a02:	893b      	ldrh	r3, [r7, #8]
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2200      	movs	r2, #0
 8004a14:	2180      	movs	r1, #128	; 0x80
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f884 	bl	8004b24 <I2C_WaitOnFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	80002000 	.word	0x80002000

08004a34 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	461a      	mov	r2, r3
 8004a42:	4603      	mov	r3, r0
 8004a44:	817b      	strh	r3, [r7, #10]
 8004a46:	460b      	mov	r3, r1
 8004a48:	813b      	strh	r3, [r7, #8]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	8979      	ldrh	r1, [r7, #10]
 8004a54:	4b20      	ldr	r3, [pc, #128]	; (8004ad8 <I2C_RequestMemoryRead+0xa4>)
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 f984 	bl	8004d68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	69b9      	ldr	r1, [r7, #24]
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f89d 	bl	8004ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e02c      	b.n	8004ace <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a74:	88fb      	ldrh	r3, [r7, #6]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d105      	bne.n	8004a86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a7a:	893b      	ldrh	r3, [r7, #8]
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	629a      	str	r2, [r3, #40]	; 0x28
 8004a84:	e015      	b.n	8004ab2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a86:	893b      	ldrh	r3, [r7, #8]
 8004a88:	0a1b      	lsrs	r3, r3, #8
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	69b9      	ldr	r1, [r7, #24]
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f883 	bl	8004ba4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e012      	b.n	8004ace <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004aa8:	893b      	ldrh	r3, [r7, #8]
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2140      	movs	r1, #64	; 0x40
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f831 	bl	8004b24 <I2C_WaitOnFlagUntilTimeout>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e000      	b.n	8004ace <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	80002000 	.word	0x80002000

08004adc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d103      	bne.n	8004afa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2200      	movs	r2, #0
 8004af8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d007      	beq.n	8004b18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	619a      	str	r2, [r3, #24]
  }
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b34:	e022      	b.n	8004b7c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3c:	d01e      	beq.n	8004b7c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3e:	f7fe ff09 	bl	8003954 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d302      	bcc.n	8004b54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d113      	bne.n	8004b7c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b58:	f043 0220 	orr.w	r2, r3, #32
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e00f      	b.n	8004b9c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	4013      	ands	r3, r2
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d0cd      	beq.n	8004b36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bb0:	e02c      	b.n	8004c0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f870 	bl	8004c9c <I2C_IsAcknowledgeFailed>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e02a      	b.n	8004c1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bcc:	d01e      	beq.n	8004c0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bce:	f7fe fec1 	bl	8003954 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d302      	bcc.n	8004be4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d113      	bne.n	8004c0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e007      	b.n	8004c1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d1cb      	bne.n	8004bb2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c30:	e028      	b.n	8004c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f830 	bl	8004c9c <I2C_IsAcknowledgeFailed>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e026      	b.n	8004c94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c46:	f7fe fe85 	bl	8003954 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d113      	bne.n	8004c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c60:	f043 0220 	orr.w	r2, r3, #32
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e007      	b.n	8004c94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	d1cf      	bne.n	8004c32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d151      	bne.n	8004d5a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cb6:	e022      	b.n	8004cfe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbe:	d01e      	beq.n	8004cfe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc0:	f7fe fe48 	bl	8003954 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d302      	bcc.n	8004cd6 <I2C_IsAcknowledgeFailed+0x3a>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d113      	bne.n	8004cfe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cda:	f043 0220 	orr.w	r2, r3, #32
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e02e      	b.n	8004d5c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d1d5      	bne.n	8004cb8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2210      	movs	r2, #16
 8004d12:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f7ff fedd 	bl	8004adc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6859      	ldr	r1, [r3, #4]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <I2C_IsAcknowledgeFailed+0xc8>)
 8004d2e:	400b      	ands	r3, r1
 8004d30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d36:	f043 0204 	orr.w	r2, r3, #4
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	fe00e800 	.word	0xfe00e800

08004d68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	607b      	str	r3, [r7, #4]
 8004d72:	460b      	mov	r3, r1
 8004d74:	817b      	strh	r3, [r7, #10]
 8004d76:	4613      	mov	r3, r2
 8004d78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	0d5b      	lsrs	r3, r3, #21
 8004d84:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004d88:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <I2C_TransferConfig+0x58>)
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	ea02 0103 	and.w	r1, r2, r3
 8004d92:	897b      	ldrh	r3, [r7, #10]
 8004d94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d98:	7a7b      	ldrb	r3, [r7, #9]
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	431a      	orrs	r2, r3
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	431a      	orrs	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	03ff63ff 	.word	0x03ff63ff

08004dc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d138      	bne.n	8004e4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e032      	b.n	8004e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2224      	movs	r2, #36	; 0x24
 8004df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0201 	bic.w	r2, r2, #1
 8004e06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6819      	ldr	r1, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e000      	b.n	8004e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e4c:	2302      	movs	r3, #2
  }
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d139      	bne.n	8004ee4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e033      	b.n	8004ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2224      	movs	r2, #36	; 0x24
 8004e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0201 	bic.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004eac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e000      	b.n	8004ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ee4:	2302      	movs	r3, #2
  }
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef4:	b08f      	sub	sp, #60	; 0x3c
 8004ef6:	af0a      	add	r7, sp, #40	; 0x28
 8004ef8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e116      	b.n	8005132 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fe fb4e 	bl	80035c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2203      	movs	r2, #3
 8004f28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d102      	bne.n	8004f3e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f003 fcc2 	bl	80088cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	687e      	ldr	r6, [r7, #4]
 8004f50:	466d      	mov	r5, sp
 8004f52:	f106 0410 	add.w	r4, r6, #16
 8004f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f62:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f66:	1d33      	adds	r3, r6, #4
 8004f68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f6a:	6838      	ldr	r0, [r7, #0]
 8004f6c:	f003 fc5c 	bl	8008828 <USB_CoreInit>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2202      	movs	r2, #2
 8004f7a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e0d7      	b.n	8005132 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2100      	movs	r1, #0
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f003 fcb0 	bl	80088ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]
 8004f92:	e04a      	b.n	800502a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f94:	7bfa      	ldrb	r2, [r7, #15]
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	333d      	adds	r3, #61	; 0x3d
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004fa8:	7bfa      	ldrb	r2, [r7, #15]
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	1a9b      	subs	r3, r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	333c      	adds	r3, #60	; 0x3c
 8004fb8:	7bfa      	ldrb	r2, [r7, #15]
 8004fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004fbc:	7bfa      	ldrb	r2, [r7, #15]
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	b298      	uxth	r0, r3
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	1a9b      	subs	r3, r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	3342      	adds	r3, #66	; 0x42
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004fd4:	7bfa      	ldrb	r2, [r7, #15]
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	1a9b      	subs	r3, r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	333f      	adds	r3, #63	; 0x3f
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fe8:	7bfa      	ldrb	r2, [r7, #15]
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	4613      	mov	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	1a9b      	subs	r3, r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	3344      	adds	r3, #68	; 0x44
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ffc:	7bfa      	ldrb	r2, [r7, #15]
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	4613      	mov	r3, r2
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	3348      	adds	r3, #72	; 0x48
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005010:	7bfa      	ldrb	r2, [r7, #15]
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4613      	mov	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	3350      	adds	r3, #80	; 0x50
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	3301      	adds	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]
 800502a:	7bfa      	ldrb	r2, [r7, #15]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d3af      	bcc.n	8004f94 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005034:	2300      	movs	r3, #0
 8005036:	73fb      	strb	r3, [r7, #15]
 8005038:	e044      	b.n	80050c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800503a:	7bfa      	ldrb	r2, [r7, #15]
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	4613      	mov	r3, r2
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	440b      	add	r3, r1
 8005048:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005050:	7bfa      	ldrb	r2, [r7, #15]
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	4613      	mov	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	1a9b      	subs	r3, r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005062:	7bfa      	ldrb	r2, [r7, #15]
 8005064:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005066:	7bfa      	ldrb	r2, [r7, #15]
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	440b      	add	r3, r1
 8005074:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005078:	2200      	movs	r2, #0
 800507a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800507c:	7bfa      	ldrb	r2, [r7, #15]
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005092:	7bfa      	ldrb	r2, [r7, #15]
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050a8:	7bfa      	ldrb	r2, [r7, #15]
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	1a9b      	subs	r3, r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050be:	7bfb      	ldrb	r3, [r7, #15]
 80050c0:	3301      	adds	r3, #1
 80050c2:	73fb      	strb	r3, [r7, #15]
 80050c4:	7bfa      	ldrb	r2, [r7, #15]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d3b5      	bcc.n	800503a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	687e      	ldr	r6, [r7, #4]
 80050d6:	466d      	mov	r5, sp
 80050d8:	f106 0410 	add.w	r4, r6, #16
 80050dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80050ec:	1d33      	adds	r3, r6, #4
 80050ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050f0:	6838      	ldr	r0, [r7, #0]
 80050f2:	f003 fc27 	bl	8008944 <USB_DevInit>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e014      	b.n	8005132 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	2b01      	cmp	r3, #1
 800511e:	d102      	bne.n	8005126 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f80a 	bl	800513a <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f003 fdb7 	bl	8008c9e <USB_DevDisconnect>

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800513a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800513a:	b480      	push	{r7}
 800513c:	b085      	sub	sp, #20
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516c:	f043 0303 	orr.w	r3, r3, #3
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005188:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a04      	ldr	r2, [pc, #16]	; (80051a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800518e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005192:	6013      	str	r3, [r2, #0]
}
 8005194:	bf00      	nop
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40007000 	.word	0x40007000

080051a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80051a8:	4b04      	ldr	r3, [pc, #16]	; (80051bc <HAL_PWREx_GetVoltageRange+0x18>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40007000 	.word	0x40007000

080051c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ce:	d130      	bne.n	8005232 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80051d0:	4b23      	ldr	r3, [pc, #140]	; (8005260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051dc:	d038      	beq.n	8005250 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051de:	4b20      	ldr	r3, [pc, #128]	; (8005260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051e6:	4a1e      	ldr	r2, [pc, #120]	; (8005260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051ee:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2232      	movs	r2, #50	; 0x32
 80051f4:	fb02 f303 	mul.w	r3, r2, r3
 80051f8:	4a1b      	ldr	r2, [pc, #108]	; (8005268 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80051fa:	fba2 2303 	umull	r2, r3, r2, r3
 80051fe:	0c9b      	lsrs	r3, r3, #18
 8005200:	3301      	adds	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005204:	e002      	b.n	800520c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3b01      	subs	r3, #1
 800520a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800520c:	4b14      	ldr	r3, [pc, #80]	; (8005260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005218:	d102      	bne.n	8005220 <HAL_PWREx_ControlVoltageScaling+0x60>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1f2      	bne.n	8005206 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005220:	4b0f      	ldr	r3, [pc, #60]	; (8005260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800522c:	d110      	bne.n	8005250 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e00f      	b.n	8005252 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005232:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800523a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523e:	d007      	beq.n	8005250 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005240:	4b07      	ldr	r3, [pc, #28]	; (8005260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005248:	4a05      	ldr	r2, [pc, #20]	; (8005260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800524a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800524e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40007000 	.word	0x40007000
 8005264:	2000007c 	.word	0x2000007c
 8005268:	431bde83 	.word	0x431bde83

0800526c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005270:	4b05      	ldr	r3, [pc, #20]	; (8005288 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	4a04      	ldr	r2, [pc, #16]	; (8005288 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800527a:	6053      	str	r3, [r2, #4]
}
 800527c:	bf00      	nop
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40007000 	.word	0x40007000

0800528c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af02      	add	r7, sp, #8
 8005292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005294:	f7fe fb5e 	bl	8003954 <HAL_GetTick>
 8005298:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e063      	b.n	800536c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10b      	bne.n	80052c8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7fd ff37 	bl	800312c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80052be:	f241 3188 	movw	r1, #5000	; 0x1388
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f858 	bl	8005378 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	021a      	lsls	r2, r3, #8
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	2120      	movs	r1, #32
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f850 	bl	8005394 <QSPI_WaitFlagStateUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80052f8:	7afb      	ldrb	r3, [r7, #11]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d131      	bne.n	8005362 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005308:	f023 0310 	bic.w	r3, r3, #16
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6852      	ldr	r2, [r2, #4]
 8005310:	0611      	lsls	r1, r2, #24
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	68d2      	ldr	r2, [r2, #12]
 8005316:	4311      	orrs	r1, r2
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	430b      	orrs	r3, r1
 800531e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	4b13      	ldr	r3, [pc, #76]	; (8005374 <HAL_QSPI_Init+0xe8>)
 8005328:	4013      	ands	r3, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6912      	ldr	r2, [r2, #16]
 800532e:	0411      	lsls	r1, r2, #16
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6952      	ldr	r2, [r2, #20]
 8005334:	4311      	orrs	r1, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6992      	ldr	r2, [r2, #24]
 800533a:	4311      	orrs	r1, r2
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	430b      	orrs	r3, r1
 8005342:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800536a:	7afb      	ldrb	r3, [r7, #11]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	ffe0f8fe 	.word	0xffe0f8fe

08005378 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	4613      	mov	r3, r2
 80053a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80053a4:	e01a      	b.n	80053dc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ac:	d016      	beq.n	80053dc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ae:	f7fe fad1 	bl	8003954 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d302      	bcc.n	80053c4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10b      	bne.n	80053dc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2204      	movs	r2, #4
 80053c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d0:	f043 0201 	orr.w	r2, r3, #1
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e00e      	b.n	80053fa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4013      	ands	r3, r2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	bf14      	ite	ne
 80053ea:	2301      	movne	r3, #1
 80053ec:	2300      	moveq	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d1d6      	bne.n	80053a6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e3d4      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005416:	4ba1      	ldr	r3, [pc, #644]	; (800569c <HAL_RCC_OscConfig+0x298>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 030c 	and.w	r3, r3, #12
 800541e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005420:	4b9e      	ldr	r3, [pc, #632]	; (800569c <HAL_RCC_OscConfig+0x298>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f003 0303 	and.w	r3, r3, #3
 8005428:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0310 	and.w	r3, r3, #16
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80e4 	beq.w	8005600 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d007      	beq.n	800544e <HAL_RCC_OscConfig+0x4a>
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	2b0c      	cmp	r3, #12
 8005442:	f040 808b 	bne.w	800555c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b01      	cmp	r3, #1
 800544a:	f040 8087 	bne.w	800555c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800544e:	4b93      	ldr	r3, [pc, #588]	; (800569c <HAL_RCC_OscConfig+0x298>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <HAL_RCC_OscConfig+0x62>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e3ac      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1a      	ldr	r2, [r3, #32]
 800546a:	4b8c      	ldr	r3, [pc, #560]	; (800569c <HAL_RCC_OscConfig+0x298>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d004      	beq.n	8005480 <HAL_RCC_OscConfig+0x7c>
 8005476:	4b89      	ldr	r3, [pc, #548]	; (800569c <HAL_RCC_OscConfig+0x298>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800547e:	e005      	b.n	800548c <HAL_RCC_OscConfig+0x88>
 8005480:	4b86      	ldr	r3, [pc, #536]	; (800569c <HAL_RCC_OscConfig+0x298>)
 8005482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005486:	091b      	lsrs	r3, r3, #4
 8005488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800548c:	4293      	cmp	r3, r2
 800548e:	d223      	bcs.n	80054d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fd3f 	bl	8005f18 <RCC_SetFlashLatencyFromMSIRange>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e38d      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054a4:	4b7d      	ldr	r3, [pc, #500]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a7c      	ldr	r2, [pc, #496]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80054aa:	f043 0308 	orr.w	r3, r3, #8
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	4b7a      	ldr	r3, [pc, #488]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	4977      	ldr	r1, [pc, #476]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054c2:	4b76      	ldr	r3, [pc, #472]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	4972      	ldr	r1, [pc, #456]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	604b      	str	r3, [r1, #4]
 80054d6:	e025      	b.n	8005524 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054d8:	4b70      	ldr	r3, [pc, #448]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a6f      	ldr	r2, [pc, #444]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80054de:	f043 0308 	orr.w	r3, r3, #8
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	4b6d      	ldr	r3, [pc, #436]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	496a      	ldr	r1, [pc, #424]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054f6:	4b69      	ldr	r3, [pc, #420]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	021b      	lsls	r3, r3, #8
 8005504:	4965      	ldr	r1, [pc, #404]	; (800569c <HAL_RCC_OscConfig+0x298>)
 8005506:	4313      	orrs	r3, r2
 8005508:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d109      	bne.n	8005524 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fcff 	bl	8005f18 <RCC_SetFlashLatencyFromMSIRange>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e34d      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005524:	f000 fc36 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8005528:	4601      	mov	r1, r0
 800552a:	4b5c      	ldr	r3, [pc, #368]	; (800569c <HAL_RCC_OscConfig+0x298>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	091b      	lsrs	r3, r3, #4
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	4a5a      	ldr	r2, [pc, #360]	; (80056a0 <HAL_RCC_OscConfig+0x29c>)
 8005536:	5cd3      	ldrb	r3, [r2, r3]
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	fa21 f303 	lsr.w	r3, r1, r3
 8005540:	4a58      	ldr	r2, [pc, #352]	; (80056a4 <HAL_RCC_OscConfig+0x2a0>)
 8005542:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005544:	4b58      	ldr	r3, [pc, #352]	; (80056a8 <HAL_RCC_OscConfig+0x2a4>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f7fe f9b3 	bl	80038b4 <HAL_InitTick>
 800554e:	4603      	mov	r3, r0
 8005550:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d052      	beq.n	80055fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005558:	7bfb      	ldrb	r3, [r7, #15]
 800555a:	e331      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d032      	beq.n	80055ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005564:	4b4d      	ldr	r3, [pc, #308]	; (800569c <HAL_RCC_OscConfig+0x298>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a4c      	ldr	r2, [pc, #304]	; (800569c <HAL_RCC_OscConfig+0x298>)
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005570:	f7fe f9f0 	bl	8003954 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005578:	f7fe f9ec 	bl	8003954 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e31a      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800558a:	4b44      	ldr	r3, [pc, #272]	; (800569c <HAL_RCC_OscConfig+0x298>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0f0      	beq.n	8005578 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005596:	4b41      	ldr	r3, [pc, #260]	; (800569c <HAL_RCC_OscConfig+0x298>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a40      	ldr	r2, [pc, #256]	; (800569c <HAL_RCC_OscConfig+0x298>)
 800559c:	f043 0308 	orr.w	r3, r3, #8
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	4b3e      	ldr	r3, [pc, #248]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	493b      	ldr	r1, [pc, #236]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055b4:	4b39      	ldr	r3, [pc, #228]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	4936      	ldr	r1, [pc, #216]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	604b      	str	r3, [r1, #4]
 80055c8:	e01a      	b.n	8005600 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055ca:	4b34      	ldr	r3, [pc, #208]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a33      	ldr	r2, [pc, #204]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80055d0:	f023 0301 	bic.w	r3, r3, #1
 80055d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055d6:	f7fe f9bd 	bl	8003954 <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055de:	f7fe f9b9 	bl	8003954 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e2e7      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055f0:	4b2a      	ldr	r3, [pc, #168]	; (800569c <HAL_RCC_OscConfig+0x298>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1f0      	bne.n	80055de <HAL_RCC_OscConfig+0x1da>
 80055fc:	e000      	b.n	8005600 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d074      	beq.n	80056f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2b08      	cmp	r3, #8
 8005610:	d005      	beq.n	800561e <HAL_RCC_OscConfig+0x21a>
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	2b0c      	cmp	r3, #12
 8005616:	d10e      	bne.n	8005636 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b03      	cmp	r3, #3
 800561c:	d10b      	bne.n	8005636 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800561e:	4b1f      	ldr	r3, [pc, #124]	; (800569c <HAL_RCC_OscConfig+0x298>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d064      	beq.n	80056f4 <HAL_RCC_OscConfig+0x2f0>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d160      	bne.n	80056f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e2c4      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563e:	d106      	bne.n	800564e <HAL_RCC_OscConfig+0x24a>
 8005640:	4b16      	ldr	r3, [pc, #88]	; (800569c <HAL_RCC_OscConfig+0x298>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a15      	ldr	r2, [pc, #84]	; (800569c <HAL_RCC_OscConfig+0x298>)
 8005646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	e01d      	b.n	800568a <HAL_RCC_OscConfig+0x286>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005656:	d10c      	bne.n	8005672 <HAL_RCC_OscConfig+0x26e>
 8005658:	4b10      	ldr	r3, [pc, #64]	; (800569c <HAL_RCC_OscConfig+0x298>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a0f      	ldr	r2, [pc, #60]	; (800569c <HAL_RCC_OscConfig+0x298>)
 800565e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	4b0d      	ldr	r3, [pc, #52]	; (800569c <HAL_RCC_OscConfig+0x298>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a0c      	ldr	r2, [pc, #48]	; (800569c <HAL_RCC_OscConfig+0x298>)
 800566a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	e00b      	b.n	800568a <HAL_RCC_OscConfig+0x286>
 8005672:	4b0a      	ldr	r3, [pc, #40]	; (800569c <HAL_RCC_OscConfig+0x298>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a09      	ldr	r2, [pc, #36]	; (800569c <HAL_RCC_OscConfig+0x298>)
 8005678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	4b07      	ldr	r3, [pc, #28]	; (800569c <HAL_RCC_OscConfig+0x298>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a06      	ldr	r2, [pc, #24]	; (800569c <HAL_RCC_OscConfig+0x298>)
 8005684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005688:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01c      	beq.n	80056cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005692:	f7fe f95f 	bl	8003954 <HAL_GetTick>
 8005696:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005698:	e011      	b.n	80056be <HAL_RCC_OscConfig+0x2ba>
 800569a:	bf00      	nop
 800569c:	40021000 	.word	0x40021000
 80056a0:	0800dcd8 	.word	0x0800dcd8
 80056a4:	2000007c 	.word	0x2000007c
 80056a8:	20000080 	.word	0x20000080
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056ac:	f7fe f952 	bl	8003954 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b64      	cmp	r3, #100	; 0x64
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e280      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056be:	4baf      	ldr	r3, [pc, #700]	; (800597c <HAL_RCC_OscConfig+0x578>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0f0      	beq.n	80056ac <HAL_RCC_OscConfig+0x2a8>
 80056ca:	e014      	b.n	80056f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056cc:	f7fe f942 	bl	8003954 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d4:	f7fe f93e 	bl	8003954 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b64      	cmp	r3, #100	; 0x64
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e26c      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056e6:	4ba5      	ldr	r3, [pc, #660]	; (800597c <HAL_RCC_OscConfig+0x578>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f0      	bne.n	80056d4 <HAL_RCC_OscConfig+0x2d0>
 80056f2:	e000      	b.n	80056f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d060      	beq.n	80057c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	2b04      	cmp	r3, #4
 8005706:	d005      	beq.n	8005714 <HAL_RCC_OscConfig+0x310>
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	2b0c      	cmp	r3, #12
 800570c:	d119      	bne.n	8005742 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d116      	bne.n	8005742 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005714:	4b99      	ldr	r3, [pc, #612]	; (800597c <HAL_RCC_OscConfig+0x578>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800571c:	2b00      	cmp	r3, #0
 800571e:	d005      	beq.n	800572c <HAL_RCC_OscConfig+0x328>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e249      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800572c:	4b93      	ldr	r3, [pc, #588]	; (800597c <HAL_RCC_OscConfig+0x578>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	061b      	lsls	r3, r3, #24
 800573a:	4990      	ldr	r1, [pc, #576]	; (800597c <HAL_RCC_OscConfig+0x578>)
 800573c:	4313      	orrs	r3, r2
 800573e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005740:	e040      	b.n	80057c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d023      	beq.n	8005792 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800574a:	4b8c      	ldr	r3, [pc, #560]	; (800597c <HAL_RCC_OscConfig+0x578>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a8b      	ldr	r2, [pc, #556]	; (800597c <HAL_RCC_OscConfig+0x578>)
 8005750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005756:	f7fe f8fd 	bl	8003954 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800575e:	f7fe f8f9 	bl	8003954 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e227      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005770:	4b82      	ldr	r3, [pc, #520]	; (800597c <HAL_RCC_OscConfig+0x578>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0f0      	beq.n	800575e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800577c:	4b7f      	ldr	r3, [pc, #508]	; (800597c <HAL_RCC_OscConfig+0x578>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	061b      	lsls	r3, r3, #24
 800578a:	497c      	ldr	r1, [pc, #496]	; (800597c <HAL_RCC_OscConfig+0x578>)
 800578c:	4313      	orrs	r3, r2
 800578e:	604b      	str	r3, [r1, #4]
 8005790:	e018      	b.n	80057c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005792:	4b7a      	ldr	r3, [pc, #488]	; (800597c <HAL_RCC_OscConfig+0x578>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a79      	ldr	r2, [pc, #484]	; (800597c <HAL_RCC_OscConfig+0x578>)
 8005798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800579c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579e:	f7fe f8d9 	bl	8003954 <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a6:	f7fe f8d5 	bl	8003954 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e203      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057b8:	4b70      	ldr	r3, [pc, #448]	; (800597c <HAL_RCC_OscConfig+0x578>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1f0      	bne.n	80057a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d03c      	beq.n	800584a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01c      	beq.n	8005812 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057d8:	4b68      	ldr	r3, [pc, #416]	; (800597c <HAL_RCC_OscConfig+0x578>)
 80057da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057de:	4a67      	ldr	r2, [pc, #412]	; (800597c <HAL_RCC_OscConfig+0x578>)
 80057e0:	f043 0301 	orr.w	r3, r3, #1
 80057e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e8:	f7fe f8b4 	bl	8003954 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f0:	f7fe f8b0 	bl	8003954 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e1de      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005802:	4b5e      	ldr	r3, [pc, #376]	; (800597c <HAL_RCC_OscConfig+0x578>)
 8005804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0ef      	beq.n	80057f0 <HAL_RCC_OscConfig+0x3ec>
 8005810:	e01b      	b.n	800584a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005812:	4b5a      	ldr	r3, [pc, #360]	; (800597c <HAL_RCC_OscConfig+0x578>)
 8005814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005818:	4a58      	ldr	r2, [pc, #352]	; (800597c <HAL_RCC_OscConfig+0x578>)
 800581a:	f023 0301 	bic.w	r3, r3, #1
 800581e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005822:	f7fe f897 	bl	8003954 <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800582a:	f7fe f893 	bl	8003954 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e1c1      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800583c:	4b4f      	ldr	r3, [pc, #316]	; (800597c <HAL_RCC_OscConfig+0x578>)
 800583e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1ef      	bne.n	800582a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 80a6 	beq.w	80059a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005858:	2300      	movs	r3, #0
 800585a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800585c:	4b47      	ldr	r3, [pc, #284]	; (800597c <HAL_RCC_OscConfig+0x578>)
 800585e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10d      	bne.n	8005884 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005868:	4b44      	ldr	r3, [pc, #272]	; (800597c <HAL_RCC_OscConfig+0x578>)
 800586a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800586c:	4a43      	ldr	r2, [pc, #268]	; (800597c <HAL_RCC_OscConfig+0x578>)
 800586e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005872:	6593      	str	r3, [r2, #88]	; 0x58
 8005874:	4b41      	ldr	r3, [pc, #260]	; (800597c <HAL_RCC_OscConfig+0x578>)
 8005876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800587c:	60bb      	str	r3, [r7, #8]
 800587e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005880:	2301      	movs	r3, #1
 8005882:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005884:	4b3e      	ldr	r3, [pc, #248]	; (8005980 <HAL_RCC_OscConfig+0x57c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d118      	bne.n	80058c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005890:	4b3b      	ldr	r3, [pc, #236]	; (8005980 <HAL_RCC_OscConfig+0x57c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a3a      	ldr	r2, [pc, #232]	; (8005980 <HAL_RCC_OscConfig+0x57c>)
 8005896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800589a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800589c:	f7fe f85a 	bl	8003954 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a4:	f7fe f856 	bl	8003954 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e184      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058b6:	4b32      	ldr	r3, [pc, #200]	; (8005980 <HAL_RCC_OscConfig+0x57c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0f0      	beq.n	80058a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d108      	bne.n	80058dc <HAL_RCC_OscConfig+0x4d8>
 80058ca:	4b2c      	ldr	r3, [pc, #176]	; (800597c <HAL_RCC_OscConfig+0x578>)
 80058cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d0:	4a2a      	ldr	r2, [pc, #168]	; (800597c <HAL_RCC_OscConfig+0x578>)
 80058d2:	f043 0301 	orr.w	r3, r3, #1
 80058d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058da:	e024      	b.n	8005926 <HAL_RCC_OscConfig+0x522>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b05      	cmp	r3, #5
 80058e2:	d110      	bne.n	8005906 <HAL_RCC_OscConfig+0x502>
 80058e4:	4b25      	ldr	r3, [pc, #148]	; (800597c <HAL_RCC_OscConfig+0x578>)
 80058e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ea:	4a24      	ldr	r2, [pc, #144]	; (800597c <HAL_RCC_OscConfig+0x578>)
 80058ec:	f043 0304 	orr.w	r3, r3, #4
 80058f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058f4:	4b21      	ldr	r3, [pc, #132]	; (800597c <HAL_RCC_OscConfig+0x578>)
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fa:	4a20      	ldr	r2, [pc, #128]	; (800597c <HAL_RCC_OscConfig+0x578>)
 80058fc:	f043 0301 	orr.w	r3, r3, #1
 8005900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005904:	e00f      	b.n	8005926 <HAL_RCC_OscConfig+0x522>
 8005906:	4b1d      	ldr	r3, [pc, #116]	; (800597c <HAL_RCC_OscConfig+0x578>)
 8005908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590c:	4a1b      	ldr	r2, [pc, #108]	; (800597c <HAL_RCC_OscConfig+0x578>)
 800590e:	f023 0301 	bic.w	r3, r3, #1
 8005912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005916:	4b19      	ldr	r3, [pc, #100]	; (800597c <HAL_RCC_OscConfig+0x578>)
 8005918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591c:	4a17      	ldr	r2, [pc, #92]	; (800597c <HAL_RCC_OscConfig+0x578>)
 800591e:	f023 0304 	bic.w	r3, r3, #4
 8005922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d016      	beq.n	800595c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592e:	f7fe f811 	bl	8003954 <HAL_GetTick>
 8005932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005934:	e00a      	b.n	800594c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005936:	f7fe f80d 	bl	8003954 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	f241 3288 	movw	r2, #5000	; 0x1388
 8005944:	4293      	cmp	r3, r2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e139      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800594c:	4b0b      	ldr	r3, [pc, #44]	; (800597c <HAL_RCC_OscConfig+0x578>)
 800594e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0ed      	beq.n	8005936 <HAL_RCC_OscConfig+0x532>
 800595a:	e01a      	b.n	8005992 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595c:	f7fd fffa 	bl	8003954 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005962:	e00f      	b.n	8005984 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005964:	f7fd fff6 	bl	8003954 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005972:	4293      	cmp	r3, r2
 8005974:	d906      	bls.n	8005984 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e122      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
 800597a:	bf00      	nop
 800597c:	40021000 	.word	0x40021000
 8005980:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005984:	4b90      	ldr	r3, [pc, #576]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e8      	bne.n	8005964 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005992:	7ffb      	ldrb	r3, [r7, #31]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d105      	bne.n	80059a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005998:	4b8b      	ldr	r3, [pc, #556]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 800599a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599c:	4a8a      	ldr	r2, [pc, #552]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 800599e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 8108 	beq.w	8005bbe <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	f040 80d0 	bne.w	8005b58 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80059b8:	4b83      	ldr	r3, [pc, #524]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f003 0203 	and.w	r2, r3, #3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d130      	bne.n	8005a2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	3b01      	subs	r3, #1
 80059d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059da:	429a      	cmp	r2, r3
 80059dc:	d127      	bne.n	8005a2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d11f      	bne.n	8005a2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059f8:	2a07      	cmp	r2, #7
 80059fa:	bf14      	ite	ne
 80059fc:	2201      	movne	r2, #1
 80059fe:	2200      	moveq	r2, #0
 8005a00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d113      	bne.n	8005a2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a10:	085b      	lsrs	r3, r3, #1
 8005a12:	3b01      	subs	r3, #1
 8005a14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d109      	bne.n	8005a2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	085b      	lsrs	r3, r3, #1
 8005a26:	3b01      	subs	r3, #1
 8005a28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d06e      	beq.n	8005b0c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2b0c      	cmp	r3, #12
 8005a32:	d069      	beq.n	8005b08 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a34:	4b64      	ldr	r3, [pc, #400]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d105      	bne.n	8005a4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a40:	4b61      	ldr	r3, [pc, #388]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e0b7      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a50:	4b5d      	ldr	r3, [pc, #372]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a5c      	ldr	r2, [pc, #368]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a5c:	f7fd ff7a 	bl	8003954 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a64:	f7fd ff76 	bl	8003954 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e0a4      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a76:	4b54      	ldr	r3, [pc, #336]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f0      	bne.n	8005a64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a82:	4b51      	ldr	r3, [pc, #324]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	4b51      	ldr	r3, [pc, #324]	; (8005bcc <HAL_RCC_OscConfig+0x7c8>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a92:	3a01      	subs	r2, #1
 8005a94:	0112      	lsls	r2, r2, #4
 8005a96:	4311      	orrs	r1, r2
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a9c:	0212      	lsls	r2, r2, #8
 8005a9e:	4311      	orrs	r1, r2
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005aa4:	0852      	lsrs	r2, r2, #1
 8005aa6:	3a01      	subs	r2, #1
 8005aa8:	0552      	lsls	r2, r2, #21
 8005aaa:	4311      	orrs	r1, r2
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ab0:	0852      	lsrs	r2, r2, #1
 8005ab2:	3a01      	subs	r2, #1
 8005ab4:	0652      	lsls	r2, r2, #25
 8005ab6:	4311      	orrs	r1, r2
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005abc:	0912      	lsrs	r2, r2, #4
 8005abe:	0452      	lsls	r2, r2, #17
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	4941      	ldr	r1, [pc, #260]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ac8:	4b3f      	ldr	r3, [pc, #252]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a3e      	ldr	r2, [pc, #248]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ad2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ad4:	4b3c      	ldr	r3, [pc, #240]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	4a3b      	ldr	r2, [pc, #236]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ade:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ae0:	f7fd ff38 	bl	8003954 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae8:	f7fd ff34 	bl	8003954 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e062      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005afa:	4b33      	ldr	r3, [pc, #204]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f0      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b06:	e05a      	b.n	8005bbe <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e059      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b0c:	4b2e      	ldr	r3, [pc, #184]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d152      	bne.n	8005bbe <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b18:	4b2b      	ldr	r3, [pc, #172]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a2a      	ldr	r2, [pc, #168]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b24:	4b28      	ldr	r3, [pc, #160]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4a27      	ldr	r2, [pc, #156]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b30:	f7fd ff10 	bl	8003954 <HAL_GetTick>
 8005b34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b38:	f7fd ff0c 	bl	8003954 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e03a      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b4a:	4b1f      	ldr	r3, [pc, #124]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0f0      	beq.n	8005b38 <HAL_RCC_OscConfig+0x734>
 8005b56:	e032      	b.n	8005bbe <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	2b0c      	cmp	r3, #12
 8005b5c:	d02d      	beq.n	8005bba <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a19      	ldr	r2, [pc, #100]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005b64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b68:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005b6a:	4b17      	ldr	r3, [pc, #92]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d105      	bne.n	8005b82 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005b76:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005b7c:	f023 0303 	bic.w	r3, r3, #3
 8005b80:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005b82:	4b11      	ldr	r3, [pc, #68]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	4a10      	ldr	r2, [pc, #64]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005b88:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b90:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b92:	f7fd fedf 	bl	8003954 <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b98:	e008      	b.n	8005bac <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b9a:	f7fd fedb 	bl	8003954 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e009      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bac:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <HAL_RCC_OscConfig+0x7c4>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1f0      	bne.n	8005b9a <HAL_RCC_OscConfig+0x796>
 8005bb8:	e001      	b.n	8005bbe <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3720      	adds	r7, #32
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	f99d808c 	.word	0xf99d808c

08005bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e0c8      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005be4:	4b66      	ldr	r3, [pc, #408]	; (8005d80 <HAL_RCC_ClockConfig+0x1b0>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d910      	bls.n	8005c14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bf2:	4b63      	ldr	r3, [pc, #396]	; (8005d80 <HAL_RCC_ClockConfig+0x1b0>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f023 0207 	bic.w	r2, r3, #7
 8005bfa:	4961      	ldr	r1, [pc, #388]	; (8005d80 <HAL_RCC_ClockConfig+0x1b0>)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c02:	4b5f      	ldr	r3, [pc, #380]	; (8005d80 <HAL_RCC_ClockConfig+0x1b0>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d001      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0b0      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d04c      	beq.n	8005cba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d107      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c28:	4b56      	ldr	r3, [pc, #344]	; (8005d84 <HAL_RCC_ClockConfig+0x1b4>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d121      	bne.n	8005c78 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e09e      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d107      	bne.n	8005c50 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c40:	4b50      	ldr	r3, [pc, #320]	; (8005d84 <HAL_RCC_ClockConfig+0x1b4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d115      	bne.n	8005c78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e092      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d107      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c58:	4b4a      	ldr	r3, [pc, #296]	; (8005d84 <HAL_RCC_ClockConfig+0x1b4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d109      	bne.n	8005c78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e086      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c68:	4b46      	ldr	r3, [pc, #280]	; (8005d84 <HAL_RCC_ClockConfig+0x1b4>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e07e      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c78:	4b42      	ldr	r3, [pc, #264]	; (8005d84 <HAL_RCC_ClockConfig+0x1b4>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f023 0203 	bic.w	r2, r3, #3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	493f      	ldr	r1, [pc, #252]	; (8005d84 <HAL_RCC_ClockConfig+0x1b4>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c8a:	f7fd fe63 	bl	8003954 <HAL_GetTick>
 8005c8e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c90:	e00a      	b.n	8005ca8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c92:	f7fd fe5f 	bl	8003954 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e066      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca8:	4b36      	ldr	r3, [pc, #216]	; (8005d84 <HAL_RCC_ClockConfig+0x1b4>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 020c 	and.w	r2, r3, #12
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d1eb      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d008      	beq.n	8005cd8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc6:	4b2f      	ldr	r3, [pc, #188]	; (8005d84 <HAL_RCC_ClockConfig+0x1b4>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	492c      	ldr	r1, [pc, #176]	; (8005d84 <HAL_RCC_ClockConfig+0x1b4>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd8:	4b29      	ldr	r3, [pc, #164]	; (8005d80 <HAL_RCC_ClockConfig+0x1b0>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d210      	bcs.n	8005d08 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce6:	4b26      	ldr	r3, [pc, #152]	; (8005d80 <HAL_RCC_ClockConfig+0x1b0>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f023 0207 	bic.w	r2, r3, #7
 8005cee:	4924      	ldr	r1, [pc, #144]	; (8005d80 <HAL_RCC_ClockConfig+0x1b0>)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf6:	4b22      	ldr	r3, [pc, #136]	; (8005d80 <HAL_RCC_ClockConfig+0x1b0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d001      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e036      	b.n	8005d76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d14:	4b1b      	ldr	r3, [pc, #108]	; (8005d84 <HAL_RCC_ClockConfig+0x1b4>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	4918      	ldr	r1, [pc, #96]	; (8005d84 <HAL_RCC_ClockConfig+0x1b4>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d32:	4b14      	ldr	r3, [pc, #80]	; (8005d84 <HAL_RCC_ClockConfig+0x1b4>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	4910      	ldr	r1, [pc, #64]	; (8005d84 <HAL_RCC_ClockConfig+0x1b4>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d46:	f000 f825 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8005d4a:	4601      	mov	r1, r0
 8005d4c:	4b0d      	ldr	r3, [pc, #52]	; (8005d84 <HAL_RCC_ClockConfig+0x1b4>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	4a0c      	ldr	r2, [pc, #48]	; (8005d88 <HAL_RCC_ClockConfig+0x1b8>)
 8005d58:	5cd3      	ldrb	r3, [r2, r3]
 8005d5a:	f003 031f 	and.w	r3, r3, #31
 8005d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8005d62:	4a0a      	ldr	r2, [pc, #40]	; (8005d8c <HAL_RCC_ClockConfig+0x1bc>)
 8005d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d66:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <HAL_RCC_ClockConfig+0x1c0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fd fda2 	bl	80038b4 <HAL_InitTick>
 8005d70:	4603      	mov	r3, r0
 8005d72:	72fb      	strb	r3, [r7, #11]

  return status;
 8005d74:	7afb      	ldrb	r3, [r7, #11]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40022000 	.word	0x40022000
 8005d84:	40021000 	.word	0x40021000
 8005d88:	0800dcd8 	.word	0x0800dcd8
 8005d8c:	2000007c 	.word	0x2000007c
 8005d90:	20000080 	.word	0x20000080

08005d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b089      	sub	sp, #36	; 0x24
 8005d98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61fb      	str	r3, [r7, #28]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005da2:	4b3d      	ldr	r3, [pc, #244]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 030c 	and.w	r3, r3, #12
 8005daa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dac:	4b3a      	ldr	r3, [pc, #232]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b0c      	cmp	r3, #12
 8005dc0:	d121      	bne.n	8005e06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d11e      	bne.n	8005e06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005dc8:	4b33      	ldr	r3, [pc, #204]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d107      	bne.n	8005de4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005dd4:	4b30      	ldr	r3, [pc, #192]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8005dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dda:	0a1b      	lsrs	r3, r3, #8
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	61fb      	str	r3, [r7, #28]
 8005de2:	e005      	b.n	8005df0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005de4:	4b2c      	ldr	r3, [pc, #176]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	091b      	lsrs	r3, r3, #4
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005df0:	4a2a      	ldr	r2, [pc, #168]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10d      	bne.n	8005e1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e04:	e00a      	b.n	8005e1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d102      	bne.n	8005e12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e0c:	4b24      	ldr	r3, [pc, #144]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e0e:	61bb      	str	r3, [r7, #24]
 8005e10:	e004      	b.n	8005e1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d101      	bne.n	8005e1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e18:	4b22      	ldr	r3, [pc, #136]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	2b0c      	cmp	r3, #12
 8005e20:	d133      	bne.n	8005e8a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e22:	4b1d      	ldr	r3, [pc, #116]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d002      	beq.n	8005e38 <HAL_RCC_GetSysClockFreq+0xa4>
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d003      	beq.n	8005e3e <HAL_RCC_GetSysClockFreq+0xaa>
 8005e36:	e005      	b.n	8005e44 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e38:	4b19      	ldr	r3, [pc, #100]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e3a:	617b      	str	r3, [r7, #20]
      break;
 8005e3c:	e005      	b.n	8005e4a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e3e:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e40:	617b      	str	r3, [r7, #20]
      break;
 8005e42:	e002      	b.n	8005e4a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	617b      	str	r3, [r7, #20]
      break;
 8005e48:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e4a:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	091b      	lsrs	r3, r3, #4
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	3301      	adds	r3, #1
 8005e56:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e58:	4b0f      	ldr	r3, [pc, #60]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	0a1b      	lsrs	r3, r3, #8
 8005e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	fb02 f203 	mul.w	r2, r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e70:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <HAL_RCC_GetSysClockFreq+0x104>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	0e5b      	lsrs	r3, r3, #25
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e88:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e8a:	69bb      	ldr	r3, [r7, #24]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3724      	adds	r7, #36	; 0x24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	0800dcf0 	.word	0x0800dcf0
 8005ea0:	00f42400 	.word	0x00f42400
 8005ea4:	007a1200 	.word	0x007a1200

08005ea8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eac:	4b03      	ldr	r3, [pc, #12]	; (8005ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8005eae:	681b      	ldr	r3, [r3, #0]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	2000007c 	.word	0x2000007c

08005ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ec4:	f7ff fff0 	bl	8005ea8 <HAL_RCC_GetHCLKFreq>
 8005ec8:	4601      	mov	r1, r0
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	0a1b      	lsrs	r3, r3, #8
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	4a04      	ldr	r2, [pc, #16]	; (8005ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ed6:	5cd3      	ldrb	r3, [r2, r3]
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	0800dce8 	.word	0x0800dce8

08005eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ef0:	f7ff ffda 	bl	8005ea8 <HAL_RCC_GetHCLKFreq>
 8005ef4:	4601      	mov	r1, r0
 8005ef6:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	0adb      	lsrs	r3, r3, #11
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	4a04      	ldr	r2, [pc, #16]	; (8005f14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f02:	5cd3      	ldrb	r3, [r2, r3]
 8005f04:	f003 031f 	and.w	r3, r3, #31
 8005f08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40021000 	.word	0x40021000
 8005f14:	0800dce8 	.word	0x0800dce8

08005f18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f20:	2300      	movs	r3, #0
 8005f22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f24:	4b2a      	ldr	r3, [pc, #168]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f30:	f7ff f938 	bl	80051a4 <HAL_PWREx_GetVoltageRange>
 8005f34:	6178      	str	r0, [r7, #20]
 8005f36:	e014      	b.n	8005f62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f38:	4b25      	ldr	r3, [pc, #148]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3c:	4a24      	ldr	r2, [pc, #144]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f42:	6593      	str	r3, [r2, #88]	; 0x58
 8005f44:	4b22      	ldr	r3, [pc, #136]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f50:	f7ff f928 	bl	80051a4 <HAL_PWREx_GetVoltageRange>
 8005f54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f56:	4b1e      	ldr	r3, [pc, #120]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5a:	4a1d      	ldr	r2, [pc, #116]	; (8005fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f68:	d10b      	bne.n	8005f82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b80      	cmp	r3, #128	; 0x80
 8005f6e:	d919      	bls.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2ba0      	cmp	r3, #160	; 0xa0
 8005f74:	d902      	bls.n	8005f7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f76:	2302      	movs	r3, #2
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	e013      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	e010      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b80      	cmp	r3, #128	; 0x80
 8005f86:	d902      	bls.n	8005f8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005f88:	2303      	movs	r3, #3
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	e00a      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b80      	cmp	r3, #128	; 0x80
 8005f92:	d102      	bne.n	8005f9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f94:	2302      	movs	r3, #2
 8005f96:	613b      	str	r3, [r7, #16]
 8005f98:	e004      	b.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b70      	cmp	r3, #112	; 0x70
 8005f9e:	d101      	bne.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005fa4:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f023 0207 	bic.w	r2, r3, #7
 8005fac:	4909      	ldr	r1, [pc, #36]	; (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005fb4:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d001      	beq.n	8005fc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	40022000 	.word	0x40022000

08005fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d03f      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ffc:	d01c      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006002:	d802      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00e      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006008:	e01f      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800600a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800600e:	d003      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006010:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006014:	d01c      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006016:	e018      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006018:	4b85      	ldr	r3, [pc, #532]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4a84      	ldr	r2, [pc, #528]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800601e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006022:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006024:	e015      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3304      	adds	r3, #4
 800602a:	2100      	movs	r1, #0
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fac9 	bl	80065c4 <RCCEx_PLLSAI1_Config>
 8006032:	4603      	mov	r3, r0
 8006034:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006036:	e00c      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3320      	adds	r3, #32
 800603c:	2100      	movs	r1, #0
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fbb0 	bl	80067a4 <RCCEx_PLLSAI2_Config>
 8006044:	4603      	mov	r3, r0
 8006046:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006048:	e003      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	74fb      	strb	r3, [r7, #19]
      break;
 800604e:	e000      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006050:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006052:	7cfb      	ldrb	r3, [r7, #19]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10b      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006058:	4b75      	ldr	r3, [pc, #468]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800605a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006066:	4972      	ldr	r1, [pc, #456]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800606e:	e001      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006070:	7cfb      	ldrb	r3, [r7, #19]
 8006072:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d03f      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006088:	d01c      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800608a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800608e:	d802      	bhi.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00e      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8006094:	e01f      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800609a:	d003      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800609c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80060a0:	d01c      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x104>
 80060a2:	e018      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80060a4:	4b62      	ldr	r3, [pc, #392]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	4a61      	ldr	r2, [pc, #388]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80060aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060b0:	e015      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3304      	adds	r3, #4
 80060b6:	2100      	movs	r1, #0
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fa83 	bl	80065c4 <RCCEx_PLLSAI1_Config>
 80060be:	4603      	mov	r3, r0
 80060c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060c2:	e00c      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3320      	adds	r3, #32
 80060c8:	2100      	movs	r1, #0
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fb6a 	bl	80067a4 <RCCEx_PLLSAI2_Config>
 80060d0:	4603      	mov	r3, r0
 80060d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060d4:	e003      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	74fb      	strb	r3, [r7, #19]
      break;
 80060da:	e000      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80060dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060de:	7cfb      	ldrb	r3, [r7, #19]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10b      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80060e4:	4b52      	ldr	r3, [pc, #328]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80060e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060f2:	494f      	ldr	r1, [pc, #316]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80060fa:	e001      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fc:	7cfb      	ldrb	r3, [r7, #19]
 80060fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 80a0 	beq.w	800624e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800610e:	2300      	movs	r3, #0
 8006110:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006112:	4b47      	ldr	r3, [pc, #284]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006122:	2300      	movs	r3, #0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00d      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006128:	4b41      	ldr	r3, [pc, #260]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800612a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612c:	4a40      	ldr	r2, [pc, #256]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800612e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006132:	6593      	str	r3, [r2, #88]	; 0x58
 8006134:	4b3e      	ldr	r3, [pc, #248]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006140:	2301      	movs	r3, #1
 8006142:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006144:	4b3b      	ldr	r3, [pc, #236]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a3a      	ldr	r2, [pc, #232]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800614a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800614e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006150:	f7fd fc00 	bl	8003954 <HAL_GetTick>
 8006154:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006156:	e009      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006158:	f7fd fbfc 	bl	8003954 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d902      	bls.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	74fb      	strb	r3, [r7, #19]
        break;
 800616a:	e005      	b.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800616c:	4b31      	ldr	r3, [pc, #196]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0ef      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8006178:	7cfb      	ldrb	r3, [r7, #19]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d15c      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800617e:	4b2c      	ldr	r3, [pc, #176]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006188:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01f      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	429a      	cmp	r2, r3
 800619a:	d019      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800619c:	4b24      	ldr	r3, [pc, #144]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800619e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061a8:	4b21      	ldr	r3, [pc, #132]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	4a20      	ldr	r2, [pc, #128]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80061b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061b8:	4b1d      	ldr	r3, [pc, #116]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80061ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061be:	4a1c      	ldr	r2, [pc, #112]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80061c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061c8:	4a19      	ldr	r2, [pc, #100]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d016      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061da:	f7fd fbbb 	bl	8003954 <HAL_GetTick>
 80061de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061e0:	e00b      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061e2:	f7fd fbb7 	bl	8003954 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d902      	bls.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	74fb      	strb	r3, [r7, #19]
            break;
 80061f8:	e006      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061fa:	4b0d      	ldr	r3, [pc, #52]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80061fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0ec      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8006208:	7cfb      	ldrb	r3, [r7, #19]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10c      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800620e:	4b08      	ldr	r3, [pc, #32]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800621e:	4904      	ldr	r1, [pc, #16]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006220:	4313      	orrs	r3, r2
 8006222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006226:	e009      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006228:	7cfb      	ldrb	r3, [r7, #19]
 800622a:	74bb      	strb	r3, [r7, #18]
 800622c:	e006      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800622e:	bf00      	nop
 8006230:	40021000 	.word	0x40021000
 8006234:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006238:	7cfb      	ldrb	r3, [r7, #19]
 800623a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800623c:	7c7b      	ldrb	r3, [r7, #17]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d105      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006242:	4b9e      	ldr	r3, [pc, #632]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006246:	4a9d      	ldr	r2, [pc, #628]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800624c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800625a:	4b98      	ldr	r3, [pc, #608]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800625c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006260:	f023 0203 	bic.w	r2, r3, #3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006268:	4994      	ldr	r1, [pc, #592]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800626a:	4313      	orrs	r3, r2
 800626c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00a      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800627c:	4b8f      	ldr	r3, [pc, #572]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800627e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006282:	f023 020c 	bic.w	r2, r3, #12
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800628a:	498c      	ldr	r1, [pc, #560]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800628c:	4313      	orrs	r3, r2
 800628e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0304 	and.w	r3, r3, #4
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800629e:	4b87      	ldr	r3, [pc, #540]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80062a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	4983      	ldr	r1, [pc, #524]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0308 	and.w	r3, r3, #8
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00a      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062c0:	4b7e      	ldr	r3, [pc, #504]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80062c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ce:	497b      	ldr	r1, [pc, #492]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0310 	and.w	r3, r3, #16
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062e2:	4b76      	ldr	r3, [pc, #472]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80062e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062f0:	4972      	ldr	r1, [pc, #456]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006304:	4b6d      	ldr	r3, [pc, #436]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006312:	496a      	ldr	r1, [pc, #424]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006314:	4313      	orrs	r3, r2
 8006316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006326:	4b65      	ldr	r3, [pc, #404]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006334:	4961      	ldr	r1, [pc, #388]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006348:	4b5c      	ldr	r3, [pc, #368]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800634a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006356:	4959      	ldr	r1, [pc, #356]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800636a:	4b54      	ldr	r3, [pc, #336]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800636c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006370:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006378:	4950      	ldr	r1, [pc, #320]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800638c:	4b4b      	ldr	r3, [pc, #300]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800638e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006392:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639a:	4948      	ldr	r1, [pc, #288]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800639c:	4313      	orrs	r3, r2
 800639e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063ae:	4b43      	ldr	r3, [pc, #268]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80063b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063bc:	493f      	ldr	r1, [pc, #252]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d028      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063d0:	4b3a      	ldr	r3, [pc, #232]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80063d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063de:	4937      	ldr	r1, [pc, #220]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ee:	d106      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063f0:	4b32      	ldr	r3, [pc, #200]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	4a31      	ldr	r2, [pc, #196]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80063f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063fa:	60d3      	str	r3, [r2, #12]
 80063fc:	e011      	b.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006402:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006406:	d10c      	bne.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3304      	adds	r3, #4
 800640c:	2101      	movs	r1, #1
 800640e:	4618      	mov	r0, r3
 8006410:	f000 f8d8 	bl	80065c4 <RCCEx_PLLSAI1_Config>
 8006414:	4603      	mov	r3, r0
 8006416:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006418:	7cfb      	ldrb	r3, [r7, #19]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800641e:	7cfb      	ldrb	r3, [r7, #19]
 8006420:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d028      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800642e:	4b23      	ldr	r3, [pc, #140]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006434:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643c:	491f      	ldr	r1, [pc, #124]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800643e:	4313      	orrs	r3, r2
 8006440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006448:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800644c:	d106      	bne.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800644e:	4b1b      	ldr	r3, [pc, #108]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	4a1a      	ldr	r2, [pc, #104]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006454:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006458:	60d3      	str	r3, [r2, #12]
 800645a:	e011      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006464:	d10c      	bne.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	3304      	adds	r3, #4
 800646a:	2101      	movs	r1, #1
 800646c:	4618      	mov	r0, r3
 800646e:	f000 f8a9 	bl	80065c4 <RCCEx_PLLSAI1_Config>
 8006472:	4603      	mov	r3, r0
 8006474:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006476:	7cfb      	ldrb	r3, [r7, #19]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800647c:	7cfb      	ldrb	r3, [r7, #19]
 800647e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d02b      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800648c:	4b0b      	ldr	r3, [pc, #44]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800648e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006492:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800649a:	4908      	ldr	r1, [pc, #32]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800649c:	4313      	orrs	r3, r2
 800649e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064aa:	d109      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064ac:	4b03      	ldr	r3, [pc, #12]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	4a02      	ldr	r2, [pc, #8]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80064b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064b6:	60d3      	str	r3, [r2, #12]
 80064b8:	e014      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80064ba:	bf00      	nop
 80064bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064c8:	d10c      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	3304      	adds	r3, #4
 80064ce:	2101      	movs	r1, #1
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 f877 	bl	80065c4 <RCCEx_PLLSAI1_Config>
 80064d6:	4603      	mov	r3, r0
 80064d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064da:	7cfb      	ldrb	r3, [r7, #19]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80064e0:	7cfb      	ldrb	r3, [r7, #19]
 80064e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d02f      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064f0:	4b2b      	ldr	r3, [pc, #172]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064fe:	4928      	ldr	r1, [pc, #160]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800650a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800650e:	d10d      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3304      	adds	r3, #4
 8006514:	2102      	movs	r1, #2
 8006516:	4618      	mov	r0, r3
 8006518:	f000 f854 	bl	80065c4 <RCCEx_PLLSAI1_Config>
 800651c:	4603      	mov	r3, r0
 800651e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006520:	7cfb      	ldrb	r3, [r7, #19]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d014      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8006526:	7cfb      	ldrb	r3, [r7, #19]
 8006528:	74bb      	strb	r3, [r7, #18]
 800652a:	e011      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006534:	d10c      	bne.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3320      	adds	r3, #32
 800653a:	2102      	movs	r1, #2
 800653c:	4618      	mov	r0, r3
 800653e:	f000 f931 	bl	80067a4 <RCCEx_PLLSAI2_Config>
 8006542:	4603      	mov	r3, r0
 8006544:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006546:	7cfb      	ldrb	r3, [r7, #19]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800654c:	7cfb      	ldrb	r3, [r7, #19]
 800654e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00a      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800655c:	4b10      	ldr	r3, [pc, #64]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800655e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006562:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800656a:	490d      	ldr	r1, [pc, #52]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800656c:	4313      	orrs	r3, r2
 800656e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00b      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800657e:	4b08      	ldr	r3, [pc, #32]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006584:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800658e:	4904      	ldr	r1, [pc, #16]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006590:	4313      	orrs	r3, r2
 8006592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006596:	7cbb      	ldrb	r3, [r7, #18]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	40021000 	.word	0x40021000

080065a4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80065a8:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a04      	ldr	r2, [pc, #16]	; (80065c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80065ae:	f043 0304 	orr.w	r3, r3, #4
 80065b2:	6013      	str	r3, [r2, #0]
}
 80065b4:	bf00      	nop
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	40021000 	.word	0x40021000

080065c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065d2:	4b73      	ldr	r3, [pc, #460]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d018      	beq.n	8006610 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80065de:	4b70      	ldr	r3, [pc, #448]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f003 0203 	and.w	r2, r3, #3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d10d      	bne.n	800660a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
       ||
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80065f6:	4b6a      	ldr	r3, [pc, #424]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	091b      	lsrs	r3, r3, #4
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
       ||
 8006606:	429a      	cmp	r2, r3
 8006608:	d044      	beq.n	8006694 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	73fb      	strb	r3, [r7, #15]
 800660e:	e041      	b.n	8006694 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b02      	cmp	r3, #2
 8006616:	d00c      	beq.n	8006632 <RCCEx_PLLSAI1_Config+0x6e>
 8006618:	2b03      	cmp	r3, #3
 800661a:	d013      	beq.n	8006644 <RCCEx_PLLSAI1_Config+0x80>
 800661c:	2b01      	cmp	r3, #1
 800661e:	d120      	bne.n	8006662 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006620:	4b5f      	ldr	r3, [pc, #380]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d11d      	bne.n	8006668 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006630:	e01a      	b.n	8006668 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006632:	4b5b      	ldr	r3, [pc, #364]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800663a:	2b00      	cmp	r3, #0
 800663c:	d116      	bne.n	800666c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006642:	e013      	b.n	800666c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006644:	4b56      	ldr	r3, [pc, #344]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10f      	bne.n	8006670 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006650:	4b53      	ldr	r3, [pc, #332]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d109      	bne.n	8006670 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006660:	e006      	b.n	8006670 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	73fb      	strb	r3, [r7, #15]
      break;
 8006666:	e004      	b.n	8006672 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006668:	bf00      	nop
 800666a:	e002      	b.n	8006672 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800666c:	bf00      	nop
 800666e:	e000      	b.n	8006672 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006670:	bf00      	nop
    }

    if(status == HAL_OK)
 8006672:	7bfb      	ldrb	r3, [r7, #15]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10d      	bne.n	8006694 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006678:	4b49      	ldr	r3, [pc, #292]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	3b01      	subs	r3, #1
 800668a:	011b      	lsls	r3, r3, #4
 800668c:	430b      	orrs	r3, r1
 800668e:	4944      	ldr	r1, [pc, #272]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006690:	4313      	orrs	r3, r2
 8006692:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d17d      	bne.n	8006796 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800669a:	4b41      	ldr	r3, [pc, #260]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a40      	ldr	r2, [pc, #256]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80066a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066a6:	f7fd f955 	bl	8003954 <HAL_GetTick>
 80066aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066ac:	e009      	b.n	80066c2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066ae:	f7fd f951 	bl	8003954 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d902      	bls.n	80066c2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	73fb      	strb	r3, [r7, #15]
        break;
 80066c0:	e005      	b.n	80066ce <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066c2:	4b37      	ldr	r3, [pc, #220]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1ef      	bne.n	80066ae <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d160      	bne.n	8006796 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d111      	bne.n	80066fe <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066da:	4b31      	ldr	r3, [pc, #196]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80066e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6892      	ldr	r2, [r2, #8]
 80066ea:	0211      	lsls	r1, r2, #8
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	68d2      	ldr	r2, [r2, #12]
 80066f0:	0912      	lsrs	r2, r2, #4
 80066f2:	0452      	lsls	r2, r2, #17
 80066f4:	430a      	orrs	r2, r1
 80066f6:	492a      	ldr	r1, [pc, #168]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	610b      	str	r3, [r1, #16]
 80066fc:	e027      	b.n	800674e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d112      	bne.n	800672a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006704:	4b26      	ldr	r3, [pc, #152]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800670c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6892      	ldr	r2, [r2, #8]
 8006714:	0211      	lsls	r1, r2, #8
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6912      	ldr	r2, [r2, #16]
 800671a:	0852      	lsrs	r2, r2, #1
 800671c:	3a01      	subs	r2, #1
 800671e:	0552      	lsls	r2, r2, #21
 8006720:	430a      	orrs	r2, r1
 8006722:	491f      	ldr	r1, [pc, #124]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006724:	4313      	orrs	r3, r2
 8006726:	610b      	str	r3, [r1, #16]
 8006728:	e011      	b.n	800674e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800672a:	4b1d      	ldr	r3, [pc, #116]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006732:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	6892      	ldr	r2, [r2, #8]
 800673a:	0211      	lsls	r1, r2, #8
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6952      	ldr	r2, [r2, #20]
 8006740:	0852      	lsrs	r2, r2, #1
 8006742:	3a01      	subs	r2, #1
 8006744:	0652      	lsls	r2, r2, #25
 8006746:	430a      	orrs	r2, r1
 8006748:	4915      	ldr	r1, [pc, #84]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800674a:	4313      	orrs	r3, r2
 800674c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800674e:	4b14      	ldr	r3, [pc, #80]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a13      	ldr	r2, [pc, #76]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006754:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006758:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800675a:	f7fd f8fb 	bl	8003954 <HAL_GetTick>
 800675e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006760:	e009      	b.n	8006776 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006762:	f7fd f8f7 	bl	8003954 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d902      	bls.n	8006776 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	73fb      	strb	r3, [r7, #15]
          break;
 8006774:	e005      	b.n	8006782 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006776:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d0ef      	beq.n	8006762 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d106      	bne.n	8006796 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006788:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800678a:	691a      	ldr	r2, [r3, #16]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	4903      	ldr	r1, [pc, #12]	; (80067a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006792:	4313      	orrs	r3, r2
 8006794:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006796:	7bfb      	ldrb	r3, [r7, #15]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40021000 	.word	0x40021000

080067a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067b2:	4b68      	ldr	r3, [pc, #416]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d018      	beq.n	80067f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80067be:	4b65      	ldr	r3, [pc, #404]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	f003 0203 	and.w	r2, r3, #3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d10d      	bne.n	80067ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
       ||
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80067d6:	4b5f      	ldr	r3, [pc, #380]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	091b      	lsrs	r3, r3, #4
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
       ||
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d044      	beq.n	8006874 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	73fb      	strb	r3, [r7, #15]
 80067ee:	e041      	b.n	8006874 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d00c      	beq.n	8006812 <RCCEx_PLLSAI2_Config+0x6e>
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d013      	beq.n	8006824 <RCCEx_PLLSAI2_Config+0x80>
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d120      	bne.n	8006842 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006800:	4b54      	ldr	r3, [pc, #336]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d11d      	bne.n	8006848 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006810:	e01a      	b.n	8006848 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006812:	4b50      	ldr	r3, [pc, #320]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800681a:	2b00      	cmp	r3, #0
 800681c:	d116      	bne.n	800684c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006822:	e013      	b.n	800684c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006824:	4b4b      	ldr	r3, [pc, #300]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10f      	bne.n	8006850 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006830:	4b48      	ldr	r3, [pc, #288]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d109      	bne.n	8006850 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006840:	e006      	b.n	8006850 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	73fb      	strb	r3, [r7, #15]
      break;
 8006846:	e004      	b.n	8006852 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006848:	bf00      	nop
 800684a:	e002      	b.n	8006852 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800684c:	bf00      	nop
 800684e:	e000      	b.n	8006852 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8006850:	bf00      	nop
    }

    if(status == HAL_OK)
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10d      	bne.n	8006874 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006858:	4b3e      	ldr	r3, [pc, #248]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6819      	ldr	r1, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	3b01      	subs	r3, #1
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	430b      	orrs	r3, r1
 800686e:	4939      	ldr	r1, [pc, #228]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006870:	4313      	orrs	r3, r2
 8006872:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006874:	7bfb      	ldrb	r3, [r7, #15]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d167      	bne.n	800694a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800687a:	4b36      	ldr	r3, [pc, #216]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a35      	ldr	r2, [pc, #212]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006886:	f7fd f865 	bl	8003954 <HAL_GetTick>
 800688a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800688c:	e009      	b.n	80068a2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800688e:	f7fd f861 	bl	8003954 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d902      	bls.n	80068a2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	73fb      	strb	r3, [r7, #15]
        break;
 80068a0:	e005      	b.n	80068ae <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068a2:	4b2c      	ldr	r3, [pc, #176]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1ef      	bne.n	800688e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d14a      	bne.n	800694a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d111      	bne.n	80068de <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80068ba:	4b26      	ldr	r3, [pc, #152]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80068c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6892      	ldr	r2, [r2, #8]
 80068ca:	0211      	lsls	r1, r2, #8
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	68d2      	ldr	r2, [r2, #12]
 80068d0:	0912      	lsrs	r2, r2, #4
 80068d2:	0452      	lsls	r2, r2, #17
 80068d4:	430a      	orrs	r2, r1
 80068d6:	491f      	ldr	r1, [pc, #124]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	614b      	str	r3, [r1, #20]
 80068dc:	e011      	b.n	8006902 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80068de:	4b1d      	ldr	r3, [pc, #116]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80068e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	6892      	ldr	r2, [r2, #8]
 80068ee:	0211      	lsls	r1, r2, #8
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6912      	ldr	r2, [r2, #16]
 80068f4:	0852      	lsrs	r2, r2, #1
 80068f6:	3a01      	subs	r2, #1
 80068f8:	0652      	lsls	r2, r2, #25
 80068fa:	430a      	orrs	r2, r1
 80068fc:	4915      	ldr	r1, [pc, #84]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006902:	4b14      	ldr	r3, [pc, #80]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a13      	ldr	r2, [pc, #76]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800690c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800690e:	f7fd f821 	bl	8003954 <HAL_GetTick>
 8006912:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006914:	e009      	b.n	800692a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006916:	f7fd f81d 	bl	8003954 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d902      	bls.n	800692a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	73fb      	strb	r3, [r7, #15]
          break;
 8006928:	e005      	b.n	8006936 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800692a:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0ef      	beq.n	8006916 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d106      	bne.n	800694a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800693c:	4b05      	ldr	r3, [pc, #20]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 800693e:	695a      	ldr	r2, [r3, #20]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	4903      	ldr	r1, [pc, #12]	; (8006954 <RCCEx_PLLSAI2_Config+0x1b0>)
 8006946:	4313      	orrs	r3, r2
 8006948:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800694a:	7bfb      	ldrb	r3, [r7, #15]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	40021000 	.word	0x40021000

08006958 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e095      	b.n	8006a96 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	2b00      	cmp	r3, #0
 8006970:	d108      	bne.n	8006984 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800697a:	d009      	beq.n	8006990 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	61da      	str	r2, [r3, #28]
 8006982:	e005      	b.n	8006990 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d106      	bne.n	80069b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7fc fc02 	bl	80031b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069d0:	d902      	bls.n	80069d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	e002      	b.n	80069de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80069d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80069e6:	d007      	beq.n	80069f8 <HAL_SPI_Init+0xa0>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069f0:	d002      	beq.n	80069f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a08:	431a      	orrs	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	431a      	orrs	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3a:	ea42 0103 	orr.w	r1, r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	0c1b      	lsrs	r3, r3, #16
 8006a54:	f003 0204 	and.w	r2, r3, #4
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a66:	f003 0308 	and.w	r3, r3, #8
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006a74:	ea42 0103 	orr.w	r1, r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b082      	sub	sp, #8
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e049      	b.n	8006b44 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d106      	bne.n	8006aca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7fc fbb9 	bl	800323c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2202      	movs	r2, #2
 8006ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	4619      	mov	r1, r3
 8006adc:	4610      	mov	r0, r2
 8006ade:	f000 fd15 	bl	800750c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d001      	beq.n	8006b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e04f      	b.n	8006c04 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68da      	ldr	r2, [r3, #12]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0201 	orr.w	r2, r2, #1
 8006b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a23      	ldr	r2, [pc, #140]	; (8006c10 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d01d      	beq.n	8006bc2 <HAL_TIM_Base_Start_IT+0x76>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b8e:	d018      	beq.n	8006bc2 <HAL_TIM_Base_Start_IT+0x76>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a1f      	ldr	r2, [pc, #124]	; (8006c14 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d013      	beq.n	8006bc2 <HAL_TIM_Base_Start_IT+0x76>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a1e      	ldr	r2, [pc, #120]	; (8006c18 <HAL_TIM_Base_Start_IT+0xcc>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d00e      	beq.n	8006bc2 <HAL_TIM_Base_Start_IT+0x76>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a1c      	ldr	r2, [pc, #112]	; (8006c1c <HAL_TIM_Base_Start_IT+0xd0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d009      	beq.n	8006bc2 <HAL_TIM_Base_Start_IT+0x76>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a1b      	ldr	r2, [pc, #108]	; (8006c20 <HAL_TIM_Base_Start_IT+0xd4>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d004      	beq.n	8006bc2 <HAL_TIM_Base_Start_IT+0x76>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a19      	ldr	r2, [pc, #100]	; (8006c24 <HAL_TIM_Base_Start_IT+0xd8>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d115      	bne.n	8006bee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	4b17      	ldr	r3, [pc, #92]	; (8006c28 <HAL_TIM_Base_Start_IT+0xdc>)
 8006bca:	4013      	ands	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2b06      	cmp	r3, #6
 8006bd2:	d015      	beq.n	8006c00 <HAL_TIM_Base_Start_IT+0xb4>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bda:	d011      	beq.n	8006c00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0201 	orr.w	r2, r2, #1
 8006bea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bec:	e008      	b.n	8006c00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f042 0201 	orr.w	r2, r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	e000      	b.n	8006c02 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	40012c00 	.word	0x40012c00
 8006c14:	40000400 	.word	0x40000400
 8006c18:	40000800 	.word	0x40000800
 8006c1c:	40000c00 	.word	0x40000c00
 8006c20:	40013400 	.word	0x40013400
 8006c24:	40014000 	.word	0x40014000
 8006c28:	00010007 	.word	0x00010007

08006c2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e049      	b.n	8006cd2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7fc fb76 	bl	8003344 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3304      	adds	r3, #4
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4610      	mov	r0, r2
 8006c6c:	f000 fc4e 	bl	800750c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d109      	bne.n	8006d00 <HAL_TIM_PWM_Start+0x24>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	bf14      	ite	ne
 8006cf8:	2301      	movne	r3, #1
 8006cfa:	2300      	moveq	r3, #0
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	e03c      	b.n	8006d7a <HAL_TIM_PWM_Start+0x9e>
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d109      	bne.n	8006d1a <HAL_TIM_PWM_Start+0x3e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	bf14      	ite	ne
 8006d12:	2301      	movne	r3, #1
 8006d14:	2300      	moveq	r3, #0
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	e02f      	b.n	8006d7a <HAL_TIM_PWM_Start+0x9e>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d109      	bne.n	8006d34 <HAL_TIM_PWM_Start+0x58>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	bf14      	ite	ne
 8006d2c:	2301      	movne	r3, #1
 8006d2e:	2300      	moveq	r3, #0
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	e022      	b.n	8006d7a <HAL_TIM_PWM_Start+0x9e>
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b0c      	cmp	r3, #12
 8006d38:	d109      	bne.n	8006d4e <HAL_TIM_PWM_Start+0x72>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	bf14      	ite	ne
 8006d46:	2301      	movne	r3, #1
 8006d48:	2300      	moveq	r3, #0
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	e015      	b.n	8006d7a <HAL_TIM_PWM_Start+0x9e>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b10      	cmp	r3, #16
 8006d52:	d109      	bne.n	8006d68 <HAL_TIM_PWM_Start+0x8c>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	bf14      	ite	ne
 8006d60:	2301      	movne	r3, #1
 8006d62:	2300      	moveq	r3, #0
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	e008      	b.n	8006d7a <HAL_TIM_PWM_Start+0x9e>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	bf14      	ite	ne
 8006d74:	2301      	movne	r3, #1
 8006d76:	2300      	moveq	r3, #0
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e09c      	b.n	8006ebc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d104      	bne.n	8006d92 <HAL_TIM_PWM_Start+0xb6>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d90:	e023      	b.n	8006dda <HAL_TIM_PWM_Start+0xfe>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d104      	bne.n	8006da2 <HAL_TIM_PWM_Start+0xc6>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006da0:	e01b      	b.n	8006dda <HAL_TIM_PWM_Start+0xfe>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b08      	cmp	r3, #8
 8006da6:	d104      	bne.n	8006db2 <HAL_TIM_PWM_Start+0xd6>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006db0:	e013      	b.n	8006dda <HAL_TIM_PWM_Start+0xfe>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b0c      	cmp	r3, #12
 8006db6:	d104      	bne.n	8006dc2 <HAL_TIM_PWM_Start+0xe6>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dc0:	e00b      	b.n	8006dda <HAL_TIM_PWM_Start+0xfe>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b10      	cmp	r3, #16
 8006dc6:	d104      	bne.n	8006dd2 <HAL_TIM_PWM_Start+0xf6>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dd0:	e003      	b.n	8006dda <HAL_TIM_PWM_Start+0xfe>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2201      	movs	r2, #1
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 ff9c 	bl	8007d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a35      	ldr	r2, [pc, #212]	; (8006ec4 <HAL_TIM_PWM_Start+0x1e8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d013      	beq.n	8006e1a <HAL_TIM_PWM_Start+0x13e>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a34      	ldr	r2, [pc, #208]	; (8006ec8 <HAL_TIM_PWM_Start+0x1ec>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d00e      	beq.n	8006e1a <HAL_TIM_PWM_Start+0x13e>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a32      	ldr	r2, [pc, #200]	; (8006ecc <HAL_TIM_PWM_Start+0x1f0>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d009      	beq.n	8006e1a <HAL_TIM_PWM_Start+0x13e>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a31      	ldr	r2, [pc, #196]	; (8006ed0 <HAL_TIM_PWM_Start+0x1f4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d004      	beq.n	8006e1a <HAL_TIM_PWM_Start+0x13e>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a2f      	ldr	r2, [pc, #188]	; (8006ed4 <HAL_TIM_PWM_Start+0x1f8>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d101      	bne.n	8006e1e <HAL_TIM_PWM_Start+0x142>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <HAL_TIM_PWM_Start+0x144>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d007      	beq.n	8006e34 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a22      	ldr	r2, [pc, #136]	; (8006ec4 <HAL_TIM_PWM_Start+0x1e8>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d01d      	beq.n	8006e7a <HAL_TIM_PWM_Start+0x19e>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e46:	d018      	beq.n	8006e7a <HAL_TIM_PWM_Start+0x19e>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a22      	ldr	r2, [pc, #136]	; (8006ed8 <HAL_TIM_PWM_Start+0x1fc>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d013      	beq.n	8006e7a <HAL_TIM_PWM_Start+0x19e>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a21      	ldr	r2, [pc, #132]	; (8006edc <HAL_TIM_PWM_Start+0x200>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d00e      	beq.n	8006e7a <HAL_TIM_PWM_Start+0x19e>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a1f      	ldr	r2, [pc, #124]	; (8006ee0 <HAL_TIM_PWM_Start+0x204>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d009      	beq.n	8006e7a <HAL_TIM_PWM_Start+0x19e>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a17      	ldr	r2, [pc, #92]	; (8006ec8 <HAL_TIM_PWM_Start+0x1ec>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d004      	beq.n	8006e7a <HAL_TIM_PWM_Start+0x19e>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a15      	ldr	r2, [pc, #84]	; (8006ecc <HAL_TIM_PWM_Start+0x1f0>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d115      	bne.n	8006ea6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	4b18      	ldr	r3, [pc, #96]	; (8006ee4 <HAL_TIM_PWM_Start+0x208>)
 8006e82:	4013      	ands	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b06      	cmp	r3, #6
 8006e8a:	d015      	beq.n	8006eb8 <HAL_TIM_PWM_Start+0x1dc>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e92:	d011      	beq.n	8006eb8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0201 	orr.w	r2, r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ea4:	e008      	b.n	8006eb8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f042 0201 	orr.w	r2, r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	e000      	b.n	8006eba <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40013400 	.word	0x40013400
 8006ecc:	40014000 	.word	0x40014000
 8006ed0:	40014400 	.word	0x40014400
 8006ed4:	40014800 	.word	0x40014800
 8006ed8:	40000400 	.word	0x40000400
 8006edc:	40000800 	.word	0x40000800
 8006ee0:	40000c00 	.word	0x40000c00
 8006ee4:	00010007 	.word	0x00010007

08006ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d122      	bne.n	8006f44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d11b      	bne.n	8006f44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f06f 0202 	mvn.w	r2, #2
 8006f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	f003 0303 	and.w	r3, r3, #3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 facf 	bl	80074ce <HAL_TIM_IC_CaptureCallback>
 8006f30:	e005      	b.n	8006f3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fac1 	bl	80074ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fad2 	bl	80074e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	f003 0304 	and.w	r3, r3, #4
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d122      	bne.n	8006f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	f003 0304 	and.w	r3, r3, #4
 8006f5c:	2b04      	cmp	r3, #4
 8006f5e:	d11b      	bne.n	8006f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f06f 0204 	mvn.w	r2, #4
 8006f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 faa5 	bl	80074ce <HAL_TIM_IC_CaptureCallback>
 8006f84:	e005      	b.n	8006f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fa97 	bl	80074ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 faa8 	bl	80074e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0308 	and.w	r3, r3, #8
 8006fa2:	2b08      	cmp	r3, #8
 8006fa4:	d122      	bne.n	8006fec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f003 0308 	and.w	r3, r3, #8
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d11b      	bne.n	8006fec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f06f 0208 	mvn.w	r2, #8
 8006fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2204      	movs	r2, #4
 8006fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	f003 0303 	and.w	r3, r3, #3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fa7b 	bl	80074ce <HAL_TIM_IC_CaptureCallback>
 8006fd8:	e005      	b.n	8006fe6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fa6d 	bl	80074ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fa7e 	bl	80074e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	f003 0310 	and.w	r3, r3, #16
 8006ff6:	2b10      	cmp	r3, #16
 8006ff8:	d122      	bne.n	8007040 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f003 0310 	and.w	r3, r3, #16
 8007004:	2b10      	cmp	r3, #16
 8007006:	d11b      	bne.n	8007040 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f06f 0210 	mvn.w	r2, #16
 8007010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2208      	movs	r2, #8
 8007016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fa51 	bl	80074ce <HAL_TIM_IC_CaptureCallback>
 800702c:	e005      	b.n	800703a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fa43 	bl	80074ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fa54 	bl	80074e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b01      	cmp	r3, #1
 800704c:	d10e      	bne.n	800706c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b01      	cmp	r3, #1
 800705a:	d107      	bne.n	800706c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f06f 0201 	mvn.w	r2, #1
 8007064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fa fa30 	bl	80014cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007076:	2b80      	cmp	r3, #128	; 0x80
 8007078:	d10e      	bne.n	8007098 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007084:	2b80      	cmp	r3, #128	; 0x80
 8007086:	d107      	bne.n	8007098 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 ff7a 	bl	8007f8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a6:	d10e      	bne.n	80070c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b2:	2b80      	cmp	r3, #128	; 0x80
 80070b4:	d107      	bne.n	80070c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80070be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 ff6d 	bl	8007fa0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d0:	2b40      	cmp	r3, #64	; 0x40
 80070d2:	d10e      	bne.n	80070f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070de:	2b40      	cmp	r3, #64	; 0x40
 80070e0:	d107      	bne.n	80070f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fa02 	bl	80074f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d10e      	bne.n	800711e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f003 0320 	and.w	r3, r3, #32
 800710a:	2b20      	cmp	r3, #32
 800710c:	d107      	bne.n	800711e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f06f 0220 	mvn.w	r2, #32
 8007116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 ff2d 	bl	8007f78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800711e:	bf00      	nop
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800713e:	2302      	movs	r3, #2
 8007140:	e0fd      	b.n	800733e <HAL_TIM_PWM_ConfigChannel+0x216>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b14      	cmp	r3, #20
 800714e:	f200 80f0 	bhi.w	8007332 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007152:	a201      	add	r2, pc, #4	; (adr r2, 8007158 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007158:	080071ad 	.word	0x080071ad
 800715c:	08007333 	.word	0x08007333
 8007160:	08007333 	.word	0x08007333
 8007164:	08007333 	.word	0x08007333
 8007168:	080071ed 	.word	0x080071ed
 800716c:	08007333 	.word	0x08007333
 8007170:	08007333 	.word	0x08007333
 8007174:	08007333 	.word	0x08007333
 8007178:	0800722f 	.word	0x0800722f
 800717c:	08007333 	.word	0x08007333
 8007180:	08007333 	.word	0x08007333
 8007184:	08007333 	.word	0x08007333
 8007188:	0800726f 	.word	0x0800726f
 800718c:	08007333 	.word	0x08007333
 8007190:	08007333 	.word	0x08007333
 8007194:	08007333 	.word	0x08007333
 8007198:	080072b1 	.word	0x080072b1
 800719c:	08007333 	.word	0x08007333
 80071a0:	08007333 	.word	0x08007333
 80071a4:	08007333 	.word	0x08007333
 80071a8:	080072f1 	.word	0x080072f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68b9      	ldr	r1, [r7, #8]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 fa44 	bl	8007640 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699a      	ldr	r2, [r3, #24]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f042 0208 	orr.w	r2, r2, #8
 80071c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699a      	ldr	r2, [r3, #24]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0204 	bic.w	r2, r2, #4
 80071d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6999      	ldr	r1, [r3, #24]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	691a      	ldr	r2, [r3, #16]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	619a      	str	r2, [r3, #24]
      break;
 80071ea:	e0a3      	b.n	8007334 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 fab4 	bl	8007760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699a      	ldr	r2, [r3, #24]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699a      	ldr	r2, [r3, #24]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6999      	ldr	r1, [r3, #24]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	021a      	lsls	r2, r3, #8
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	619a      	str	r2, [r3, #24]
      break;
 800722c:	e082      	b.n	8007334 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68b9      	ldr	r1, [r7, #8]
 8007234:	4618      	mov	r0, r3
 8007236:	f000 fb1d 	bl	8007874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69da      	ldr	r2, [r3, #28]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f042 0208 	orr.w	r2, r2, #8
 8007248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69da      	ldr	r2, [r3, #28]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0204 	bic.w	r2, r2, #4
 8007258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69d9      	ldr	r1, [r3, #28]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	691a      	ldr	r2, [r3, #16]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	61da      	str	r2, [r3, #28]
      break;
 800726c:	e062      	b.n	8007334 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fb85 	bl	8007984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	69da      	ldr	r2, [r3, #28]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	69da      	ldr	r2, [r3, #28]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69d9      	ldr	r1, [r3, #28]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	021a      	lsls	r2, r3, #8
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	61da      	str	r2, [r3, #28]
      break;
 80072ae:	e041      	b.n	8007334 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68b9      	ldr	r1, [r7, #8]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fbce 	bl	8007a58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0208 	orr.w	r2, r2, #8
 80072ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0204 	bic.w	r2, r2, #4
 80072da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	691a      	ldr	r2, [r3, #16]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80072ee:	e021      	b.n	8007334 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68b9      	ldr	r1, [r7, #8]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fc12 	bl	8007b20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800730a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800731a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	021a      	lsls	r2, r3, #8
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007330:	e000      	b.n	8007334 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007332:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop

08007348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007358:	2b01      	cmp	r3, #1
 800735a:	d101      	bne.n	8007360 <HAL_TIM_ConfigClockSource+0x18>
 800735c:	2302      	movs	r3, #2
 800735e:	e0a8      	b.n	80074b2 <HAL_TIM_ConfigClockSource+0x16a>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800737e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007382:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800738a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b40      	cmp	r3, #64	; 0x40
 800739a:	d067      	beq.n	800746c <HAL_TIM_ConfigClockSource+0x124>
 800739c:	2b40      	cmp	r3, #64	; 0x40
 800739e:	d80b      	bhi.n	80073b8 <HAL_TIM_ConfigClockSource+0x70>
 80073a0:	2b10      	cmp	r3, #16
 80073a2:	d073      	beq.n	800748c <HAL_TIM_ConfigClockSource+0x144>
 80073a4:	2b10      	cmp	r3, #16
 80073a6:	d802      	bhi.n	80073ae <HAL_TIM_ConfigClockSource+0x66>
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d06f      	beq.n	800748c <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80073ac:	e078      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80073ae:	2b20      	cmp	r3, #32
 80073b0:	d06c      	beq.n	800748c <HAL_TIM_ConfigClockSource+0x144>
 80073b2:	2b30      	cmp	r3, #48	; 0x30
 80073b4:	d06a      	beq.n	800748c <HAL_TIM_ConfigClockSource+0x144>
      break;
 80073b6:	e073      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80073b8:	2b70      	cmp	r3, #112	; 0x70
 80073ba:	d00d      	beq.n	80073d8 <HAL_TIM_ConfigClockSource+0x90>
 80073bc:	2b70      	cmp	r3, #112	; 0x70
 80073be:	d804      	bhi.n	80073ca <HAL_TIM_ConfigClockSource+0x82>
 80073c0:	2b50      	cmp	r3, #80	; 0x50
 80073c2:	d033      	beq.n	800742c <HAL_TIM_ConfigClockSource+0xe4>
 80073c4:	2b60      	cmp	r3, #96	; 0x60
 80073c6:	d041      	beq.n	800744c <HAL_TIM_ConfigClockSource+0x104>
      break;
 80073c8:	e06a      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80073ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ce:	d066      	beq.n	800749e <HAL_TIM_ConfigClockSource+0x156>
 80073d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d4:	d017      	beq.n	8007406 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80073d6:	e063      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	6899      	ldr	r1, [r3, #8]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f000 fc7a 	bl	8007ce0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	609a      	str	r2, [r3, #8]
      break;
 8007404:	e04c      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	6899      	ldr	r1, [r3, #8]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	f000 fc63 	bl	8007ce0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007428:	609a      	str	r2, [r3, #8]
      break;
 800742a:	e039      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6818      	ldr	r0, [r3, #0]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	6859      	ldr	r1, [r3, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	461a      	mov	r2, r3
 800743a:	f000 fbd7 	bl	8007bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2150      	movs	r1, #80	; 0x50
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fc30 	bl	8007caa <TIM_ITRx_SetConfig>
      break;
 800744a:	e029      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6818      	ldr	r0, [r3, #0]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	6859      	ldr	r1, [r3, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	461a      	mov	r2, r3
 800745a:	f000 fbf6 	bl	8007c4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2160      	movs	r1, #96	; 0x60
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fc20 	bl	8007caa <TIM_ITRx_SetConfig>
      break;
 800746a:	e019      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6818      	ldr	r0, [r3, #0]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	6859      	ldr	r1, [r3, #4]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	461a      	mov	r2, r3
 800747a:	f000 fbb7 	bl	8007bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2140      	movs	r1, #64	; 0x40
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fc10 	bl	8007caa <TIM_ITRx_SetConfig>
      break;
 800748a:	e009      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4619      	mov	r1, r3
 8007496:	4610      	mov	r0, r2
 8007498:	f000 fc07 	bl	8007caa <TIM_ITRx_SetConfig>
        break;
 800749c:	e000      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800749e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074c2:	bf00      	nop
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b083      	sub	sp, #12
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
	...

0800750c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a40      	ldr	r2, [pc, #256]	; (8007620 <TIM_Base_SetConfig+0x114>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d013      	beq.n	800754c <TIM_Base_SetConfig+0x40>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800752a:	d00f      	beq.n	800754c <TIM_Base_SetConfig+0x40>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a3d      	ldr	r2, [pc, #244]	; (8007624 <TIM_Base_SetConfig+0x118>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d00b      	beq.n	800754c <TIM_Base_SetConfig+0x40>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a3c      	ldr	r2, [pc, #240]	; (8007628 <TIM_Base_SetConfig+0x11c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d007      	beq.n	800754c <TIM_Base_SetConfig+0x40>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a3b      	ldr	r2, [pc, #236]	; (800762c <TIM_Base_SetConfig+0x120>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d003      	beq.n	800754c <TIM_Base_SetConfig+0x40>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a3a      	ldr	r2, [pc, #232]	; (8007630 <TIM_Base_SetConfig+0x124>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d108      	bne.n	800755e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	4313      	orrs	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a2f      	ldr	r2, [pc, #188]	; (8007620 <TIM_Base_SetConfig+0x114>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d01f      	beq.n	80075a6 <TIM_Base_SetConfig+0x9a>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800756c:	d01b      	beq.n	80075a6 <TIM_Base_SetConfig+0x9a>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a2c      	ldr	r2, [pc, #176]	; (8007624 <TIM_Base_SetConfig+0x118>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d017      	beq.n	80075a6 <TIM_Base_SetConfig+0x9a>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a2b      	ldr	r2, [pc, #172]	; (8007628 <TIM_Base_SetConfig+0x11c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d013      	beq.n	80075a6 <TIM_Base_SetConfig+0x9a>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a2a      	ldr	r2, [pc, #168]	; (800762c <TIM_Base_SetConfig+0x120>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d00f      	beq.n	80075a6 <TIM_Base_SetConfig+0x9a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a29      	ldr	r2, [pc, #164]	; (8007630 <TIM_Base_SetConfig+0x124>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00b      	beq.n	80075a6 <TIM_Base_SetConfig+0x9a>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a28      	ldr	r2, [pc, #160]	; (8007634 <TIM_Base_SetConfig+0x128>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d007      	beq.n	80075a6 <TIM_Base_SetConfig+0x9a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a27      	ldr	r2, [pc, #156]	; (8007638 <TIM_Base_SetConfig+0x12c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d003      	beq.n	80075a6 <TIM_Base_SetConfig+0x9a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a26      	ldr	r2, [pc, #152]	; (800763c <TIM_Base_SetConfig+0x130>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d108      	bne.n	80075b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	689a      	ldr	r2, [r3, #8]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a10      	ldr	r2, [pc, #64]	; (8007620 <TIM_Base_SetConfig+0x114>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00f      	beq.n	8007604 <TIM_Base_SetConfig+0xf8>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a12      	ldr	r2, [pc, #72]	; (8007630 <TIM_Base_SetConfig+0x124>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00b      	beq.n	8007604 <TIM_Base_SetConfig+0xf8>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a11      	ldr	r2, [pc, #68]	; (8007634 <TIM_Base_SetConfig+0x128>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d007      	beq.n	8007604 <TIM_Base_SetConfig+0xf8>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a10      	ldr	r2, [pc, #64]	; (8007638 <TIM_Base_SetConfig+0x12c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d003      	beq.n	8007604 <TIM_Base_SetConfig+0xf8>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a0f      	ldr	r2, [pc, #60]	; (800763c <TIM_Base_SetConfig+0x130>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d103      	bne.n	800760c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	691a      	ldr	r2, [r3, #16]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	615a      	str	r2, [r3, #20]
}
 8007612:	bf00      	nop
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	40012c00 	.word	0x40012c00
 8007624:	40000400 	.word	0x40000400
 8007628:	40000800 	.word	0x40000800
 800762c:	40000c00 	.word	0x40000c00
 8007630:	40013400 	.word	0x40013400
 8007634:	40014000 	.word	0x40014000
 8007638:	40014400 	.word	0x40014400
 800763c:	40014800 	.word	0x40014800

08007640 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	f023 0201 	bic.w	r2, r3, #1
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800766e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f023 0303 	bic.w	r3, r3, #3
 800767a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	4313      	orrs	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f023 0302 	bic.w	r3, r3, #2
 800768c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	4313      	orrs	r3, r2
 8007696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a2c      	ldr	r2, [pc, #176]	; (800774c <TIM_OC1_SetConfig+0x10c>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00f      	beq.n	80076c0 <TIM_OC1_SetConfig+0x80>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a2b      	ldr	r2, [pc, #172]	; (8007750 <TIM_OC1_SetConfig+0x110>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d00b      	beq.n	80076c0 <TIM_OC1_SetConfig+0x80>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a2a      	ldr	r2, [pc, #168]	; (8007754 <TIM_OC1_SetConfig+0x114>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d007      	beq.n	80076c0 <TIM_OC1_SetConfig+0x80>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a29      	ldr	r2, [pc, #164]	; (8007758 <TIM_OC1_SetConfig+0x118>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d003      	beq.n	80076c0 <TIM_OC1_SetConfig+0x80>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a28      	ldr	r2, [pc, #160]	; (800775c <TIM_OC1_SetConfig+0x11c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d10c      	bne.n	80076da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f023 0308 	bic.w	r3, r3, #8
 80076c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f023 0304 	bic.w	r3, r3, #4
 80076d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a1b      	ldr	r2, [pc, #108]	; (800774c <TIM_OC1_SetConfig+0x10c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00f      	beq.n	8007702 <TIM_OC1_SetConfig+0xc2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a1a      	ldr	r2, [pc, #104]	; (8007750 <TIM_OC1_SetConfig+0x110>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d00b      	beq.n	8007702 <TIM_OC1_SetConfig+0xc2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a19      	ldr	r2, [pc, #100]	; (8007754 <TIM_OC1_SetConfig+0x114>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d007      	beq.n	8007702 <TIM_OC1_SetConfig+0xc2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a18      	ldr	r2, [pc, #96]	; (8007758 <TIM_OC1_SetConfig+0x118>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d003      	beq.n	8007702 <TIM_OC1_SetConfig+0xc2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a17      	ldr	r2, [pc, #92]	; (800775c <TIM_OC1_SetConfig+0x11c>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d111      	bne.n	8007726 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	4313      	orrs	r3, r2
 800771a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	4313      	orrs	r3, r2
 8007724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	621a      	str	r2, [r3, #32]
}
 8007740:	bf00      	nop
 8007742:	371c      	adds	r7, #28
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	40012c00 	.word	0x40012c00
 8007750:	40013400 	.word	0x40013400
 8007754:	40014000 	.word	0x40014000
 8007758:	40014400 	.word	0x40014400
 800775c:	40014800 	.word	0x40014800

08007760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	f023 0210 	bic.w	r2, r3, #16
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800778e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800779a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	021b      	lsls	r3, r3, #8
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f023 0320 	bic.w	r3, r3, #32
 80077ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	011b      	lsls	r3, r3, #4
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a28      	ldr	r2, [pc, #160]	; (8007860 <TIM_OC2_SetConfig+0x100>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d003      	beq.n	80077cc <TIM_OC2_SetConfig+0x6c>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a27      	ldr	r2, [pc, #156]	; (8007864 <TIM_OC2_SetConfig+0x104>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d10d      	bne.n	80077e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	011b      	lsls	r3, r3, #4
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a1d      	ldr	r2, [pc, #116]	; (8007860 <TIM_OC2_SetConfig+0x100>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d00f      	beq.n	8007810 <TIM_OC2_SetConfig+0xb0>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a1c      	ldr	r2, [pc, #112]	; (8007864 <TIM_OC2_SetConfig+0x104>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d00b      	beq.n	8007810 <TIM_OC2_SetConfig+0xb0>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a1b      	ldr	r2, [pc, #108]	; (8007868 <TIM_OC2_SetConfig+0x108>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d007      	beq.n	8007810 <TIM_OC2_SetConfig+0xb0>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a1a      	ldr	r2, [pc, #104]	; (800786c <TIM_OC2_SetConfig+0x10c>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d003      	beq.n	8007810 <TIM_OC2_SetConfig+0xb0>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a19      	ldr	r2, [pc, #100]	; (8007870 <TIM_OC2_SetConfig+0x110>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d113      	bne.n	8007838 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007816:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800781e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	695b      	ldr	r3, [r3, #20]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	4313      	orrs	r3, r2
 800782a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4313      	orrs	r3, r2
 8007836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	621a      	str	r2, [r3, #32]
}
 8007852:	bf00      	nop
 8007854:	371c      	adds	r7, #28
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	40012c00 	.word	0x40012c00
 8007864:	40013400 	.word	0x40013400
 8007868:	40014000 	.word	0x40014000
 800786c:	40014400 	.word	0x40014400
 8007870:	40014800 	.word	0x40014800

08007874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 0303 	bic.w	r3, r3, #3
 80078ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	021b      	lsls	r3, r3, #8
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a27      	ldr	r2, [pc, #156]	; (8007970 <TIM_OC3_SetConfig+0xfc>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d003      	beq.n	80078de <TIM_OC3_SetConfig+0x6a>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a26      	ldr	r2, [pc, #152]	; (8007974 <TIM_OC3_SetConfig+0x100>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d10d      	bne.n	80078fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	021b      	lsls	r3, r3, #8
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a1c      	ldr	r2, [pc, #112]	; (8007970 <TIM_OC3_SetConfig+0xfc>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d00f      	beq.n	8007922 <TIM_OC3_SetConfig+0xae>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a1b      	ldr	r2, [pc, #108]	; (8007974 <TIM_OC3_SetConfig+0x100>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00b      	beq.n	8007922 <TIM_OC3_SetConfig+0xae>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a1a      	ldr	r2, [pc, #104]	; (8007978 <TIM_OC3_SetConfig+0x104>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d007      	beq.n	8007922 <TIM_OC3_SetConfig+0xae>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a19      	ldr	r2, [pc, #100]	; (800797c <TIM_OC3_SetConfig+0x108>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d003      	beq.n	8007922 <TIM_OC3_SetConfig+0xae>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a18      	ldr	r2, [pc, #96]	; (8007980 <TIM_OC3_SetConfig+0x10c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d113      	bne.n	800794a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	4313      	orrs	r3, r2
 800793c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	011b      	lsls	r3, r3, #4
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	4313      	orrs	r3, r2
 8007948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	621a      	str	r2, [r3, #32]
}
 8007964:	bf00      	nop
 8007966:	371c      	adds	r7, #28
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	40012c00 	.word	0x40012c00
 8007974:	40013400 	.word	0x40013400
 8007978:	40014000 	.word	0x40014000
 800797c:	40014400 	.word	0x40014400
 8007980:	40014800 	.word	0x40014800

08007984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007984:	b480      	push	{r7}
 8007986:	b087      	sub	sp, #28
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	021b      	lsls	r3, r3, #8
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	031b      	lsls	r3, r3, #12
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	4313      	orrs	r3, r2
 80079de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a18      	ldr	r2, [pc, #96]	; (8007a44 <TIM_OC4_SetConfig+0xc0>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d00f      	beq.n	8007a08 <TIM_OC4_SetConfig+0x84>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a17      	ldr	r2, [pc, #92]	; (8007a48 <TIM_OC4_SetConfig+0xc4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d00b      	beq.n	8007a08 <TIM_OC4_SetConfig+0x84>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a16      	ldr	r2, [pc, #88]	; (8007a4c <TIM_OC4_SetConfig+0xc8>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d007      	beq.n	8007a08 <TIM_OC4_SetConfig+0x84>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a15      	ldr	r2, [pc, #84]	; (8007a50 <TIM_OC4_SetConfig+0xcc>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d003      	beq.n	8007a08 <TIM_OC4_SetConfig+0x84>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a14      	ldr	r2, [pc, #80]	; (8007a54 <TIM_OC4_SetConfig+0xd0>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d109      	bne.n	8007a1c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	019b      	lsls	r3, r3, #6
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	621a      	str	r2, [r3, #32]
}
 8007a36:	bf00      	nop
 8007a38:	371c      	adds	r7, #28
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	40012c00 	.word	0x40012c00
 8007a48:	40013400 	.word	0x40013400
 8007a4c:	40014000 	.word	0x40014000
 8007a50:	40014400 	.word	0x40014400
 8007a54:	40014800 	.word	0x40014800

08007a58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007a9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	041b      	lsls	r3, r3, #16
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a17      	ldr	r2, [pc, #92]	; (8007b0c <TIM_OC5_SetConfig+0xb4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00f      	beq.n	8007ad2 <TIM_OC5_SetConfig+0x7a>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a16      	ldr	r2, [pc, #88]	; (8007b10 <TIM_OC5_SetConfig+0xb8>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d00b      	beq.n	8007ad2 <TIM_OC5_SetConfig+0x7a>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a15      	ldr	r2, [pc, #84]	; (8007b14 <TIM_OC5_SetConfig+0xbc>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d007      	beq.n	8007ad2 <TIM_OC5_SetConfig+0x7a>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a14      	ldr	r2, [pc, #80]	; (8007b18 <TIM_OC5_SetConfig+0xc0>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d003      	beq.n	8007ad2 <TIM_OC5_SetConfig+0x7a>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a13      	ldr	r2, [pc, #76]	; (8007b1c <TIM_OC5_SetConfig+0xc4>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d109      	bne.n	8007ae6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	021b      	lsls	r3, r3, #8
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	621a      	str	r2, [r3, #32]
}
 8007b00:	bf00      	nop
 8007b02:	371c      	adds	r7, #28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	40012c00 	.word	0x40012c00
 8007b10:	40013400 	.word	0x40013400
 8007b14:	40014000 	.word	0x40014000
 8007b18:	40014400 	.word	0x40014400
 8007b1c:	40014800 	.word	0x40014800

08007b20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	021b      	lsls	r3, r3, #8
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	051b      	lsls	r3, r3, #20
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a18      	ldr	r2, [pc, #96]	; (8007bd8 <TIM_OC6_SetConfig+0xb8>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d00f      	beq.n	8007b9c <TIM_OC6_SetConfig+0x7c>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a17      	ldr	r2, [pc, #92]	; (8007bdc <TIM_OC6_SetConfig+0xbc>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00b      	beq.n	8007b9c <TIM_OC6_SetConfig+0x7c>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a16      	ldr	r2, [pc, #88]	; (8007be0 <TIM_OC6_SetConfig+0xc0>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d007      	beq.n	8007b9c <TIM_OC6_SetConfig+0x7c>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a15      	ldr	r2, [pc, #84]	; (8007be4 <TIM_OC6_SetConfig+0xc4>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d003      	beq.n	8007b9c <TIM_OC6_SetConfig+0x7c>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a14      	ldr	r2, [pc, #80]	; (8007be8 <TIM_OC6_SetConfig+0xc8>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d109      	bne.n	8007bb0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	695b      	ldr	r3, [r3, #20]
 8007ba8:	029b      	lsls	r3, r3, #10
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	621a      	str	r2, [r3, #32]
}
 8007bca:	bf00      	nop
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40012c00 	.word	0x40012c00
 8007bdc:	40013400 	.word	0x40013400
 8007be0:	40014000 	.word	0x40014000
 8007be4:	40014400 	.word	0x40014400
 8007be8:	40014800 	.word	0x40014800

08007bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	f023 0201 	bic.w	r2, r3, #1
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f023 030a 	bic.w	r3, r3, #10
 8007c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	621a      	str	r2, [r3, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b087      	sub	sp, #28
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	60f8      	str	r0, [r7, #12]
 8007c52:	60b9      	str	r1, [r7, #8]
 8007c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	f023 0210 	bic.w	r2, r3, #16
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6a1b      	ldr	r3, [r3, #32]
 8007c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	031b      	lsls	r3, r3, #12
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	621a      	str	r2, [r3, #32]
}
 8007c9e:	bf00      	nop
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b085      	sub	sp, #20
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	f043 0307 	orr.w	r3, r3, #7
 8007ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	609a      	str	r2, [r3, #8]
}
 8007cd4:	bf00      	nop
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	021a      	lsls	r2, r3, #8
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	609a      	str	r2, [r3, #8]
}
 8007d14:	bf00      	nop
 8007d16:	371c      	adds	r7, #28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f003 031f 	and.w	r3, r3, #31
 8007d32:	2201      	movs	r2, #1
 8007d34:	fa02 f303 	lsl.w	r3, r2, r3
 8007d38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6a1a      	ldr	r2, [r3, #32]
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	43db      	mvns	r3, r3
 8007d42:	401a      	ands	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6a1a      	ldr	r2, [r3, #32]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f003 031f 	and.w	r3, r3, #31
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	fa01 f303 	lsl.w	r3, r1, r3
 8007d58:	431a      	orrs	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	621a      	str	r2, [r3, #32]
}
 8007d5e:	bf00      	nop
 8007d60:	371c      	adds	r7, #28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
	...

08007d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d101      	bne.n	8007d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d80:	2302      	movs	r3, #2
 8007d82:	e068      	b.n	8007e56 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a2e      	ldr	r2, [pc, #184]	; (8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d004      	beq.n	8007db8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a2d      	ldr	r2, [pc, #180]	; (8007e68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d108      	bne.n	8007dca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007dbe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a1e      	ldr	r2, [pc, #120]	; (8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d01d      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007df6:	d018      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a1b      	ldr	r2, [pc, #108]	; (8007e6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d013      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a1a      	ldr	r2, [pc, #104]	; (8007e70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d00e      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a18      	ldr	r2, [pc, #96]	; (8007e74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d009      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a13      	ldr	r2, [pc, #76]	; (8007e68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d004      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a14      	ldr	r2, [pc, #80]	; (8007e78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d10c      	bne.n	8007e44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	40012c00 	.word	0x40012c00
 8007e68:	40013400 	.word	0x40013400
 8007e6c:	40000400 	.word	0x40000400
 8007e70:	40000800 	.word	0x40000800
 8007e74:	40000c00 	.word	0x40000c00
 8007e78:	40014000 	.word	0x40014000

08007e7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e94:	2302      	movs	r3, #2
 8007e96:	e065      	b.n	8007f64 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efe:	4313      	orrs	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	041b      	lsls	r3, r3, #16
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a16      	ldr	r2, [pc, #88]	; (8007f70 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d004      	beq.n	8007f26 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a14      	ldr	r2, [pc, #80]	; (8007f74 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d115      	bne.n	8007f52 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	051b      	lsls	r3, r3, #20
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	69db      	ldr	r3, [r3, #28]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	40012c00 	.word	0x40012c00
 8007f74:	40013400 	.word	0x40013400

08007f78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e040      	b.n	8008048 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d106      	bne.n	8007fdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7fb fa7c 	bl	80034d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2224      	movs	r2, #36	; 0x24
 8007fe0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 0201 	bic.w	r2, r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f82c 	bl	8008050 <UART_SetConfig>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d101      	bne.n	8008002 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e022      	b.n	8008048 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 faaa 	bl	8008564 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800801e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689a      	ldr	r2, [r3, #8]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800802e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0201 	orr.w	r2, r2, #1
 800803e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fb31 	bl	80086a8 <UART_CheckIdleState>
 8008046:	4603      	mov	r3, r0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008050:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008054:	b088      	sub	sp, #32
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	689a      	ldr	r2, [r3, #8]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	431a      	orrs	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	431a      	orrs	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	4313      	orrs	r3, r2
 8008074:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	4bac      	ldr	r3, [pc, #688]	; (8008330 <UART_SetConfig+0x2e0>)
 800807e:	4013      	ands	r3, r2
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	6812      	ldr	r2, [r2, #0]
 8008084:	69f9      	ldr	r1, [r7, #28]
 8008086:	430b      	orrs	r3, r1
 8008088:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	430a      	orrs	r2, r1
 800809e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4aa2      	ldr	r2, [pc, #648]	; (8008334 <UART_SetConfig+0x2e4>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d004      	beq.n	80080ba <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	69fa      	ldr	r2, [r7, #28]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	69fa      	ldr	r2, [r7, #28]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a99      	ldr	r2, [pc, #612]	; (8008338 <UART_SetConfig+0x2e8>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d121      	bne.n	800811c <UART_SetConfig+0xcc>
 80080d8:	4b98      	ldr	r3, [pc, #608]	; (800833c <UART_SetConfig+0x2ec>)
 80080da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080de:	f003 0303 	and.w	r3, r3, #3
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d816      	bhi.n	8008114 <UART_SetConfig+0xc4>
 80080e6:	a201      	add	r2, pc, #4	; (adr r2, 80080ec <UART_SetConfig+0x9c>)
 80080e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ec:	080080fd 	.word	0x080080fd
 80080f0:	08008109 	.word	0x08008109
 80080f4:	08008103 	.word	0x08008103
 80080f8:	0800810f 	.word	0x0800810f
 80080fc:	2301      	movs	r3, #1
 80080fe:	76fb      	strb	r3, [r7, #27]
 8008100:	e0e8      	b.n	80082d4 <UART_SetConfig+0x284>
 8008102:	2302      	movs	r3, #2
 8008104:	76fb      	strb	r3, [r7, #27]
 8008106:	e0e5      	b.n	80082d4 <UART_SetConfig+0x284>
 8008108:	2304      	movs	r3, #4
 800810a:	76fb      	strb	r3, [r7, #27]
 800810c:	e0e2      	b.n	80082d4 <UART_SetConfig+0x284>
 800810e:	2308      	movs	r3, #8
 8008110:	76fb      	strb	r3, [r7, #27]
 8008112:	e0df      	b.n	80082d4 <UART_SetConfig+0x284>
 8008114:	2310      	movs	r3, #16
 8008116:	76fb      	strb	r3, [r7, #27]
 8008118:	bf00      	nop
 800811a:	e0db      	b.n	80082d4 <UART_SetConfig+0x284>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a87      	ldr	r2, [pc, #540]	; (8008340 <UART_SetConfig+0x2f0>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d134      	bne.n	8008190 <UART_SetConfig+0x140>
 8008126:	4b85      	ldr	r3, [pc, #532]	; (800833c <UART_SetConfig+0x2ec>)
 8008128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800812c:	f003 030c 	and.w	r3, r3, #12
 8008130:	2b0c      	cmp	r3, #12
 8008132:	d829      	bhi.n	8008188 <UART_SetConfig+0x138>
 8008134:	a201      	add	r2, pc, #4	; (adr r2, 800813c <UART_SetConfig+0xec>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	08008171 	.word	0x08008171
 8008140:	08008189 	.word	0x08008189
 8008144:	08008189 	.word	0x08008189
 8008148:	08008189 	.word	0x08008189
 800814c:	0800817d 	.word	0x0800817d
 8008150:	08008189 	.word	0x08008189
 8008154:	08008189 	.word	0x08008189
 8008158:	08008189 	.word	0x08008189
 800815c:	08008177 	.word	0x08008177
 8008160:	08008189 	.word	0x08008189
 8008164:	08008189 	.word	0x08008189
 8008168:	08008189 	.word	0x08008189
 800816c:	08008183 	.word	0x08008183
 8008170:	2300      	movs	r3, #0
 8008172:	76fb      	strb	r3, [r7, #27]
 8008174:	e0ae      	b.n	80082d4 <UART_SetConfig+0x284>
 8008176:	2302      	movs	r3, #2
 8008178:	76fb      	strb	r3, [r7, #27]
 800817a:	e0ab      	b.n	80082d4 <UART_SetConfig+0x284>
 800817c:	2304      	movs	r3, #4
 800817e:	76fb      	strb	r3, [r7, #27]
 8008180:	e0a8      	b.n	80082d4 <UART_SetConfig+0x284>
 8008182:	2308      	movs	r3, #8
 8008184:	76fb      	strb	r3, [r7, #27]
 8008186:	e0a5      	b.n	80082d4 <UART_SetConfig+0x284>
 8008188:	2310      	movs	r3, #16
 800818a:	76fb      	strb	r3, [r7, #27]
 800818c:	bf00      	nop
 800818e:	e0a1      	b.n	80082d4 <UART_SetConfig+0x284>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a6b      	ldr	r2, [pc, #428]	; (8008344 <UART_SetConfig+0x2f4>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d120      	bne.n	80081dc <UART_SetConfig+0x18c>
 800819a:	4b68      	ldr	r3, [pc, #416]	; (800833c <UART_SetConfig+0x2ec>)
 800819c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80081a4:	2b10      	cmp	r3, #16
 80081a6:	d00f      	beq.n	80081c8 <UART_SetConfig+0x178>
 80081a8:	2b10      	cmp	r3, #16
 80081aa:	d802      	bhi.n	80081b2 <UART_SetConfig+0x162>
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d005      	beq.n	80081bc <UART_SetConfig+0x16c>
 80081b0:	e010      	b.n	80081d4 <UART_SetConfig+0x184>
 80081b2:	2b20      	cmp	r3, #32
 80081b4:	d005      	beq.n	80081c2 <UART_SetConfig+0x172>
 80081b6:	2b30      	cmp	r3, #48	; 0x30
 80081b8:	d009      	beq.n	80081ce <UART_SetConfig+0x17e>
 80081ba:	e00b      	b.n	80081d4 <UART_SetConfig+0x184>
 80081bc:	2300      	movs	r3, #0
 80081be:	76fb      	strb	r3, [r7, #27]
 80081c0:	e088      	b.n	80082d4 <UART_SetConfig+0x284>
 80081c2:	2302      	movs	r3, #2
 80081c4:	76fb      	strb	r3, [r7, #27]
 80081c6:	e085      	b.n	80082d4 <UART_SetConfig+0x284>
 80081c8:	2304      	movs	r3, #4
 80081ca:	76fb      	strb	r3, [r7, #27]
 80081cc:	e082      	b.n	80082d4 <UART_SetConfig+0x284>
 80081ce:	2308      	movs	r3, #8
 80081d0:	76fb      	strb	r3, [r7, #27]
 80081d2:	e07f      	b.n	80082d4 <UART_SetConfig+0x284>
 80081d4:	2310      	movs	r3, #16
 80081d6:	76fb      	strb	r3, [r7, #27]
 80081d8:	bf00      	nop
 80081da:	e07b      	b.n	80082d4 <UART_SetConfig+0x284>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a59      	ldr	r2, [pc, #356]	; (8008348 <UART_SetConfig+0x2f8>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d120      	bne.n	8008228 <UART_SetConfig+0x1d8>
 80081e6:	4b55      	ldr	r3, [pc, #340]	; (800833c <UART_SetConfig+0x2ec>)
 80081e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80081f0:	2b40      	cmp	r3, #64	; 0x40
 80081f2:	d00f      	beq.n	8008214 <UART_SetConfig+0x1c4>
 80081f4:	2b40      	cmp	r3, #64	; 0x40
 80081f6:	d802      	bhi.n	80081fe <UART_SetConfig+0x1ae>
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d005      	beq.n	8008208 <UART_SetConfig+0x1b8>
 80081fc:	e010      	b.n	8008220 <UART_SetConfig+0x1d0>
 80081fe:	2b80      	cmp	r3, #128	; 0x80
 8008200:	d005      	beq.n	800820e <UART_SetConfig+0x1be>
 8008202:	2bc0      	cmp	r3, #192	; 0xc0
 8008204:	d009      	beq.n	800821a <UART_SetConfig+0x1ca>
 8008206:	e00b      	b.n	8008220 <UART_SetConfig+0x1d0>
 8008208:	2300      	movs	r3, #0
 800820a:	76fb      	strb	r3, [r7, #27]
 800820c:	e062      	b.n	80082d4 <UART_SetConfig+0x284>
 800820e:	2302      	movs	r3, #2
 8008210:	76fb      	strb	r3, [r7, #27]
 8008212:	e05f      	b.n	80082d4 <UART_SetConfig+0x284>
 8008214:	2304      	movs	r3, #4
 8008216:	76fb      	strb	r3, [r7, #27]
 8008218:	e05c      	b.n	80082d4 <UART_SetConfig+0x284>
 800821a:	2308      	movs	r3, #8
 800821c:	76fb      	strb	r3, [r7, #27]
 800821e:	e059      	b.n	80082d4 <UART_SetConfig+0x284>
 8008220:	2310      	movs	r3, #16
 8008222:	76fb      	strb	r3, [r7, #27]
 8008224:	bf00      	nop
 8008226:	e055      	b.n	80082d4 <UART_SetConfig+0x284>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a47      	ldr	r2, [pc, #284]	; (800834c <UART_SetConfig+0x2fc>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d124      	bne.n	800827c <UART_SetConfig+0x22c>
 8008232:	4b42      	ldr	r3, [pc, #264]	; (800833c <UART_SetConfig+0x2ec>)
 8008234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800823c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008240:	d012      	beq.n	8008268 <UART_SetConfig+0x218>
 8008242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008246:	d802      	bhi.n	800824e <UART_SetConfig+0x1fe>
 8008248:	2b00      	cmp	r3, #0
 800824a:	d007      	beq.n	800825c <UART_SetConfig+0x20c>
 800824c:	e012      	b.n	8008274 <UART_SetConfig+0x224>
 800824e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008252:	d006      	beq.n	8008262 <UART_SetConfig+0x212>
 8008254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008258:	d009      	beq.n	800826e <UART_SetConfig+0x21e>
 800825a:	e00b      	b.n	8008274 <UART_SetConfig+0x224>
 800825c:	2300      	movs	r3, #0
 800825e:	76fb      	strb	r3, [r7, #27]
 8008260:	e038      	b.n	80082d4 <UART_SetConfig+0x284>
 8008262:	2302      	movs	r3, #2
 8008264:	76fb      	strb	r3, [r7, #27]
 8008266:	e035      	b.n	80082d4 <UART_SetConfig+0x284>
 8008268:	2304      	movs	r3, #4
 800826a:	76fb      	strb	r3, [r7, #27]
 800826c:	e032      	b.n	80082d4 <UART_SetConfig+0x284>
 800826e:	2308      	movs	r3, #8
 8008270:	76fb      	strb	r3, [r7, #27]
 8008272:	e02f      	b.n	80082d4 <UART_SetConfig+0x284>
 8008274:	2310      	movs	r3, #16
 8008276:	76fb      	strb	r3, [r7, #27]
 8008278:	bf00      	nop
 800827a:	e02b      	b.n	80082d4 <UART_SetConfig+0x284>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a2c      	ldr	r2, [pc, #176]	; (8008334 <UART_SetConfig+0x2e4>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d124      	bne.n	80082d0 <UART_SetConfig+0x280>
 8008286:	4b2d      	ldr	r3, [pc, #180]	; (800833c <UART_SetConfig+0x2ec>)
 8008288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800828c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008294:	d012      	beq.n	80082bc <UART_SetConfig+0x26c>
 8008296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800829a:	d802      	bhi.n	80082a2 <UART_SetConfig+0x252>
 800829c:	2b00      	cmp	r3, #0
 800829e:	d007      	beq.n	80082b0 <UART_SetConfig+0x260>
 80082a0:	e012      	b.n	80082c8 <UART_SetConfig+0x278>
 80082a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082a6:	d006      	beq.n	80082b6 <UART_SetConfig+0x266>
 80082a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082ac:	d009      	beq.n	80082c2 <UART_SetConfig+0x272>
 80082ae:	e00b      	b.n	80082c8 <UART_SetConfig+0x278>
 80082b0:	2300      	movs	r3, #0
 80082b2:	76fb      	strb	r3, [r7, #27]
 80082b4:	e00e      	b.n	80082d4 <UART_SetConfig+0x284>
 80082b6:	2302      	movs	r3, #2
 80082b8:	76fb      	strb	r3, [r7, #27]
 80082ba:	e00b      	b.n	80082d4 <UART_SetConfig+0x284>
 80082bc:	2304      	movs	r3, #4
 80082be:	76fb      	strb	r3, [r7, #27]
 80082c0:	e008      	b.n	80082d4 <UART_SetConfig+0x284>
 80082c2:	2308      	movs	r3, #8
 80082c4:	76fb      	strb	r3, [r7, #27]
 80082c6:	e005      	b.n	80082d4 <UART_SetConfig+0x284>
 80082c8:	2310      	movs	r3, #16
 80082ca:	76fb      	strb	r3, [r7, #27]
 80082cc:	bf00      	nop
 80082ce:	e001      	b.n	80082d4 <UART_SetConfig+0x284>
 80082d0:	2310      	movs	r3, #16
 80082d2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a16      	ldr	r2, [pc, #88]	; (8008334 <UART_SetConfig+0x2e4>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	f040 8087 	bne.w	80083ee <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082e0:	7efb      	ldrb	r3, [r7, #27]
 80082e2:	2b08      	cmp	r3, #8
 80082e4:	d836      	bhi.n	8008354 <UART_SetConfig+0x304>
 80082e6:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <UART_SetConfig+0x29c>)
 80082e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ec:	08008311 	.word	0x08008311
 80082f0:	08008355 	.word	0x08008355
 80082f4:	08008319 	.word	0x08008319
 80082f8:	08008355 	.word	0x08008355
 80082fc:	0800831f 	.word	0x0800831f
 8008300:	08008355 	.word	0x08008355
 8008304:	08008355 	.word	0x08008355
 8008308:	08008355 	.word	0x08008355
 800830c:	08008327 	.word	0x08008327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008310:	f7fd fdd6 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 8008314:	6178      	str	r0, [r7, #20]
        break;
 8008316:	e022      	b.n	800835e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008318:	4b0d      	ldr	r3, [pc, #52]	; (8008350 <UART_SetConfig+0x300>)
 800831a:	617b      	str	r3, [r7, #20]
        break;
 800831c:	e01f      	b.n	800835e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800831e:	f7fd fd39 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8008322:	6178      	str	r0, [r7, #20]
        break;
 8008324:	e01b      	b.n	800835e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800832a:	617b      	str	r3, [r7, #20]
        break;
 800832c:	e017      	b.n	800835e <UART_SetConfig+0x30e>
 800832e:	bf00      	nop
 8008330:	efff69f3 	.word	0xefff69f3
 8008334:	40008000 	.word	0x40008000
 8008338:	40013800 	.word	0x40013800
 800833c:	40021000 	.word	0x40021000
 8008340:	40004400 	.word	0x40004400
 8008344:	40004800 	.word	0x40004800
 8008348:	40004c00 	.word	0x40004c00
 800834c:	40005000 	.word	0x40005000
 8008350:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	76bb      	strb	r3, [r7, #26]
        break;
 800835c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 80f1 	beq.w	8008548 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	4613      	mov	r3, r2
 800836c:	005b      	lsls	r3, r3, #1
 800836e:	4413      	add	r3, r2
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	429a      	cmp	r2, r3
 8008374:	d305      	bcc.n	8008382 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	429a      	cmp	r2, r3
 8008380:	d902      	bls.n	8008388 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	76bb      	strb	r3, [r7, #26]
 8008386:	e0df      	b.n	8008548 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	4619      	mov	r1, r3
 800838c:	f04f 0200 	mov.w	r2, #0
 8008390:	f04f 0300 	mov.w	r3, #0
 8008394:	f04f 0400 	mov.w	r4, #0
 8008398:	0214      	lsls	r4, r2, #8
 800839a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800839e:	020b      	lsls	r3, r1, #8
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	6852      	ldr	r2, [r2, #4]
 80083a4:	0852      	lsrs	r2, r2, #1
 80083a6:	4611      	mov	r1, r2
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	eb13 0b01 	adds.w	fp, r3, r1
 80083b0:	eb44 0c02 	adc.w	ip, r4, r2
 80083b4:	4658      	mov	r0, fp
 80083b6:	4661      	mov	r1, ip
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f04f 0400 	mov.w	r4, #0
 80083c0:	461a      	mov	r2, r3
 80083c2:	4623      	mov	r3, r4
 80083c4:	f7f8 fc60 	bl	8000c88 <__aeabi_uldivmod>
 80083c8:	4603      	mov	r3, r0
 80083ca:	460c      	mov	r4, r1
 80083cc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083d4:	d308      	bcc.n	80083e8 <UART_SetConfig+0x398>
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083dc:	d204      	bcs.n	80083e8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	60da      	str	r2, [r3, #12]
 80083e6:	e0af      	b.n	8008548 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	76bb      	strb	r3, [r7, #26]
 80083ec:	e0ac      	b.n	8008548 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083f6:	d15b      	bne.n	80084b0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80083f8:	7efb      	ldrb	r3, [r7, #27]
 80083fa:	2b08      	cmp	r3, #8
 80083fc:	d827      	bhi.n	800844e <UART_SetConfig+0x3fe>
 80083fe:	a201      	add	r2, pc, #4	; (adr r2, 8008404 <UART_SetConfig+0x3b4>)
 8008400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008404:	08008429 	.word	0x08008429
 8008408:	08008431 	.word	0x08008431
 800840c:	08008439 	.word	0x08008439
 8008410:	0800844f 	.word	0x0800844f
 8008414:	0800843f 	.word	0x0800843f
 8008418:	0800844f 	.word	0x0800844f
 800841c:	0800844f 	.word	0x0800844f
 8008420:	0800844f 	.word	0x0800844f
 8008424:	08008447 	.word	0x08008447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008428:	f7fd fd4a 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 800842c:	6178      	str	r0, [r7, #20]
        break;
 800842e:	e013      	b.n	8008458 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008430:	f7fd fd5c 	bl	8005eec <HAL_RCC_GetPCLK2Freq>
 8008434:	6178      	str	r0, [r7, #20]
        break;
 8008436:	e00f      	b.n	8008458 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008438:	4b49      	ldr	r3, [pc, #292]	; (8008560 <UART_SetConfig+0x510>)
 800843a:	617b      	str	r3, [r7, #20]
        break;
 800843c:	e00c      	b.n	8008458 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800843e:	f7fd fca9 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8008442:	6178      	str	r0, [r7, #20]
        break;
 8008444:	e008      	b.n	8008458 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800844a:	617b      	str	r3, [r7, #20]
        break;
 800844c:	e004      	b.n	8008458 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	76bb      	strb	r3, [r7, #26]
        break;
 8008456:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d074      	beq.n	8008548 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	005a      	lsls	r2, r3, #1
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	085b      	lsrs	r3, r3, #1
 8008468:	441a      	add	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008472:	b29b      	uxth	r3, r3
 8008474:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	2b0f      	cmp	r3, #15
 800847a:	d916      	bls.n	80084aa <UART_SetConfig+0x45a>
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008482:	d212      	bcs.n	80084aa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	b29b      	uxth	r3, r3
 8008488:	f023 030f 	bic.w	r3, r3, #15
 800848c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	085b      	lsrs	r3, r3, #1
 8008492:	b29b      	uxth	r3, r3
 8008494:	f003 0307 	and.w	r3, r3, #7
 8008498:	b29a      	uxth	r2, r3
 800849a:	89fb      	ldrh	r3, [r7, #14]
 800849c:	4313      	orrs	r3, r2
 800849e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	89fa      	ldrh	r2, [r7, #14]
 80084a6:	60da      	str	r2, [r3, #12]
 80084a8:	e04e      	b.n	8008548 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	76bb      	strb	r3, [r7, #26]
 80084ae:	e04b      	b.n	8008548 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084b0:	7efb      	ldrb	r3, [r7, #27]
 80084b2:	2b08      	cmp	r3, #8
 80084b4:	d827      	bhi.n	8008506 <UART_SetConfig+0x4b6>
 80084b6:	a201      	add	r2, pc, #4	; (adr r2, 80084bc <UART_SetConfig+0x46c>)
 80084b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084bc:	080084e1 	.word	0x080084e1
 80084c0:	080084e9 	.word	0x080084e9
 80084c4:	080084f1 	.word	0x080084f1
 80084c8:	08008507 	.word	0x08008507
 80084cc:	080084f7 	.word	0x080084f7
 80084d0:	08008507 	.word	0x08008507
 80084d4:	08008507 	.word	0x08008507
 80084d8:	08008507 	.word	0x08008507
 80084dc:	080084ff 	.word	0x080084ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084e0:	f7fd fcee 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 80084e4:	6178      	str	r0, [r7, #20]
        break;
 80084e6:	e013      	b.n	8008510 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084e8:	f7fd fd00 	bl	8005eec <HAL_RCC_GetPCLK2Freq>
 80084ec:	6178      	str	r0, [r7, #20]
        break;
 80084ee:	e00f      	b.n	8008510 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084f0:	4b1b      	ldr	r3, [pc, #108]	; (8008560 <UART_SetConfig+0x510>)
 80084f2:	617b      	str	r3, [r7, #20]
        break;
 80084f4:	e00c      	b.n	8008510 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084f6:	f7fd fc4d 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 80084fa:	6178      	str	r0, [r7, #20]
        break;
 80084fc:	e008      	b.n	8008510 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008502:	617b      	str	r3, [r7, #20]
        break;
 8008504:	e004      	b.n	8008510 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008506:	2300      	movs	r3, #0
 8008508:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	76bb      	strb	r3, [r7, #26]
        break;
 800850e:	bf00      	nop
    }

    if (pclk != 0U)
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d018      	beq.n	8008548 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	085a      	lsrs	r2, r3, #1
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	441a      	add	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	fbb2 f3f3 	udiv	r3, r2, r3
 8008528:	b29b      	uxth	r3, r3
 800852a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	2b0f      	cmp	r3, #15
 8008530:	d908      	bls.n	8008544 <UART_SetConfig+0x4f4>
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008538:	d204      	bcs.n	8008544 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	60da      	str	r2, [r3, #12]
 8008542:	e001      	b.n	8008548 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008554:	7ebb      	ldrb	r3, [r7, #26]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3720      	adds	r7, #32
 800855a:	46bd      	mov	sp, r7
 800855c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008560:	00f42400 	.word	0x00f42400

08008564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00a      	beq.n	800858e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008592:	f003 0302 	and.w	r3, r3, #2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00a      	beq.n	80085b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	430a      	orrs	r2, r1
 80085ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b4:	f003 0304 	and.w	r3, r3, #4
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	f003 0308 	and.w	r3, r3, #8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	430a      	orrs	r2, r1
 80085f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d00a      	beq.n	8008616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861a:	f003 0320 	and.w	r3, r3, #32
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008640:	2b00      	cmp	r3, #0
 8008642:	d01a      	beq.n	800867a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008662:	d10a      	bne.n	800867a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00a      	beq.n	800869c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	430a      	orrs	r2, r1
 800869a:	605a      	str	r2, [r3, #4]
  }
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af02      	add	r7, sp, #8
 80086ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80086b6:	f7fb f94d 	bl	8003954 <HAL_GetTick>
 80086ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0308 	and.w	r3, r3, #8
 80086c6:	2b08      	cmp	r3, #8
 80086c8:	d10e      	bne.n	80086e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f82a 	bl	8008732 <UART_WaitOnFlagUntilTimeout>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e020      	b.n	800872a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0304 	and.w	r3, r3, #4
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	d10e      	bne.n	8008714 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f814 	bl	8008732 <UART_WaitOnFlagUntilTimeout>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e00a      	b.n	800872a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2220      	movs	r2, #32
 8008718:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2220      	movs	r2, #32
 800871e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b084      	sub	sp, #16
 8008736:	af00      	add	r7, sp, #0
 8008738:	60f8      	str	r0, [r7, #12]
 800873a:	60b9      	str	r1, [r7, #8]
 800873c:	603b      	str	r3, [r7, #0]
 800873e:	4613      	mov	r3, r2
 8008740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008742:	e05d      	b.n	8008800 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874a:	d059      	beq.n	8008800 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800874c:	f7fb f902 	bl	8003954 <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	429a      	cmp	r2, r3
 800875a:	d302      	bcc.n	8008762 <UART_WaitOnFlagUntilTimeout+0x30>
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d11b      	bne.n	800879a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008770:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f022 0201 	bic.w	r2, r2, #1
 8008780:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2220      	movs	r2, #32
 8008786:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2220      	movs	r2, #32
 800878c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e042      	b.n	8008820 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d02b      	beq.n	8008800 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	69db      	ldr	r3, [r3, #28]
 80087ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087b6:	d123      	bne.n	8008800 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80087d0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689a      	ldr	r2, [r3, #8]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f022 0201 	bic.w	r2, r2, #1
 80087e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2220      	movs	r2, #32
 80087e6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2220      	movs	r2, #32
 80087ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2220      	movs	r2, #32
 80087f2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e00f      	b.n	8008820 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69da      	ldr	r2, [r3, #28]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	4013      	ands	r3, r2
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	429a      	cmp	r2, r3
 800880e:	bf0c      	ite	eq
 8008810:	2301      	moveq	r3, #1
 8008812:	2300      	movne	r3, #0
 8008814:	b2db      	uxtb	r3, r3
 8008816:	461a      	mov	r2, r3
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	429a      	cmp	r2, r3
 800881c:	d092      	beq.n	8008744 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008828:	b084      	sub	sp, #16
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	f107 001c 	add.w	r0, r7, #28
 8008836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	2b01      	cmp	r3, #1
 800883e:	d122      	bne.n	8008886 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008844:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800886a:	2b01      	cmp	r3, #1
 800886c:	d105      	bne.n	800887a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fa30 	bl	8008ce0 <USB_CoreReset>
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]
 8008884:	e01a      	b.n	80088bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fa24 	bl	8008ce0 <USB_CoreReset>
 8008898:	4603      	mov	r3, r0
 800889a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800889c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d106      	bne.n	80088b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	639a      	str	r2, [r3, #56]	; 0x38
 80088ae:	e005      	b.n	80088bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088c8:	b004      	add	sp, #16
 80088ca:	4770      	bx	lr

080088cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	f023 0201 	bic.w	r2, r3, #1
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b082      	sub	sp, #8
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	460b      	mov	r3, r1
 80088f8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008906:	78fb      	ldrb	r3, [r7, #3]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d106      	bne.n	800891a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	60da      	str	r2, [r3, #12]
 8008918:	e00b      	b.n	8008932 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800891a:	78fb      	ldrb	r3, [r7, #3]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d106      	bne.n	800892e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	60da      	str	r2, [r3, #12]
 800892c:	e001      	b.n	8008932 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e003      	b.n	800893a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008932:	2032      	movs	r0, #50	; 0x32
 8008934:	f7fb f81a 	bl	800396c <HAL_Delay>

  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
	...

08008944 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008944:	b084      	sub	sp, #16
 8008946:	b580      	push	{r7, lr}
 8008948:	b086      	sub	sp, #24
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800895e:	2300      	movs	r3, #0
 8008960:	613b      	str	r3, [r7, #16]
 8008962:	e009      	b.n	8008978 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	3340      	adds	r3, #64	; 0x40
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4413      	add	r3, r2
 800896e:	2200      	movs	r2, #0
 8008970:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	3301      	adds	r3, #1
 8008976:	613b      	str	r3, [r7, #16]
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	2b0e      	cmp	r3, #14
 800897c:	d9f2      	bls.n	8008964 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800897e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008980:	2b00      	cmp	r3, #0
 8008982:	d11c      	bne.n	80089be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008992:	f043 0302 	orr.w	r3, r3, #2
 8008996:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	e005      	b.n	80089ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089d0:	461a      	mov	r2, r3
 80089d2:	2300      	movs	r3, #0
 80089d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089dc:	4619      	mov	r1, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e4:	461a      	mov	r2, r3
 80089e6:	680b      	ldr	r3, [r1, #0]
 80089e8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80089ea:	2103      	movs	r1, #3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f93d 	bl	8008c6c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80089f2:	2110      	movs	r1, #16
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f8f1 	bl	8008bdc <USB_FlushTxFifo>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f90f 	bl	8008c28 <USB_FlushRxFifo>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a26:	461a      	mov	r2, r3
 8008a28:	2300      	movs	r3, #0
 8008a2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a32:	461a      	mov	r2, r3
 8008a34:	2300      	movs	r3, #0
 8008a36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	613b      	str	r3, [r7, #16]
 8008a3c:	e043      	b.n	8008ac6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	015a      	lsls	r2, r3, #5
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a54:	d118      	bne.n	8008a88 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10a      	bne.n	8008a72 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a68:	461a      	mov	r2, r3
 8008a6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a6e:	6013      	str	r3, [r2, #0]
 8008a70:	e013      	b.n	8008a9a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7e:	461a      	mov	r2, r3
 8008a80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a84:	6013      	str	r3, [r2, #0]
 8008a86:	e008      	b.n	8008a9a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	015a      	lsls	r2, r3, #5
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	4413      	add	r3, r2
 8008a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a94:	461a      	mov	r2, r3
 8008a96:	2300      	movs	r3, #0
 8008a98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	015a      	lsls	r2, r3, #5
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	015a      	lsls	r2, r3, #5
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab8:	461a      	mov	r2, r3
 8008aba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008abe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	613b      	str	r3, [r7, #16]
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d3b7      	bcc.n	8008a3e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ace:	2300      	movs	r3, #0
 8008ad0:	613b      	str	r3, [r7, #16]
 8008ad2:	e043      	b.n	8008b5c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	4413      	add	r3, r2
 8008adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008aea:	d118      	bne.n	8008b1e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10a      	bne.n	8008b08 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	015a      	lsls	r2, r3, #5
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	4413      	add	r3, r2
 8008afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afe:	461a      	mov	r2, r3
 8008b00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b04:	6013      	str	r3, [r2, #0]
 8008b06:	e013      	b.n	8008b30 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	015a      	lsls	r2, r3, #5
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4413      	add	r3, r2
 8008b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b14:	461a      	mov	r2, r3
 8008b16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b1a:	6013      	str	r3, [r2, #0]
 8008b1c:	e008      	b.n	8008b30 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	015a      	lsls	r2, r3, #5
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	4413      	add	r3, r2
 8008b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	2300      	movs	r3, #0
 8008b40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	613b      	str	r3, [r7, #16]
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d3b7      	bcc.n	8008ad4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008b84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	f043 0210 	orr.w	r2, r3, #16
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	699a      	ldr	r2, [r3, #24]
 8008b96:	4b10      	ldr	r3, [pc, #64]	; (8008bd8 <USB_DevInit+0x294>)
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d005      	beq.n	8008bb0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	f043 0208 	orr.w	r2, r3, #8
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d107      	bne.n	8008bc6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bbe:	f043 0304 	orr.w	r3, r3, #4
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bd2:	b004      	add	sp, #16
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	803c3800 	.word	0x803c3800

08008bdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008be6:	2300      	movs	r3, #0
 8008be8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	019b      	lsls	r3, r3, #6
 8008bee:	f043 0220 	orr.w	r2, r3, #32
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	4a09      	ldr	r2, [pc, #36]	; (8008c24 <USB_FlushTxFifo+0x48>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d901      	bls.n	8008c08 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e006      	b.n	8008c16 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	f003 0320 	and.w	r3, r3, #32
 8008c10:	2b20      	cmp	r3, #32
 8008c12:	d0f0      	beq.n	8008bf6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	00030d40 	.word	0x00030d40

08008c28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2210      	movs	r2, #16
 8008c38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4a09      	ldr	r2, [pc, #36]	; (8008c68 <USB_FlushRxFifo+0x40>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d901      	bls.n	8008c4c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e006      	b.n	8008c5a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	f003 0310 	and.w	r3, r3, #16
 8008c54:	2b10      	cmp	r3, #16
 8008c56:	d0f0      	beq.n	8008c3a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	00030d40 	.word	0x00030d40

08008c6c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	460b      	mov	r3, r1
 8008c76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	78fb      	ldrb	r3, [r7, #3]
 8008c86:	68f9      	ldr	r1, [r7, #12]
 8008c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b085      	sub	sp, #20
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cb8:	f023 0303 	bic.w	r3, r3, #3
 8008cbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ccc:	f043 0302 	orr.w	r3, r3, #2
 8008cd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3714      	adds	r7, #20
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	60fb      	str	r3, [r7, #12]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	4a13      	ldr	r2, [pc, #76]	; (8008d44 <USB_CoreReset+0x64>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d901      	bls.n	8008cfe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e01b      	b.n	8008d36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	daf2      	bge.n	8008cec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	f043 0201 	orr.w	r2, r3, #1
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	60fb      	str	r3, [r7, #12]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4a09      	ldr	r2, [pc, #36]	; (8008d44 <USB_CoreReset+0x64>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d901      	bls.n	8008d28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e006      	b.n	8008d36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	f003 0301 	and.w	r3, r3, #1
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d0f0      	beq.n	8008d16 <USB_CoreReset+0x36>

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	00030d40 	.word	0x00030d40

08008d48 <__errno>:
 8008d48:	4b01      	ldr	r3, [pc, #4]	; (8008d50 <__errno+0x8>)
 8008d4a:	6818      	ldr	r0, [r3, #0]
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	20000088 	.word	0x20000088

08008d54 <__libc_init_array>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	4e0d      	ldr	r6, [pc, #52]	; (8008d8c <__libc_init_array+0x38>)
 8008d58:	4c0d      	ldr	r4, [pc, #52]	; (8008d90 <__libc_init_array+0x3c>)
 8008d5a:	1ba4      	subs	r4, r4, r6
 8008d5c:	10a4      	asrs	r4, r4, #2
 8008d5e:	2500      	movs	r5, #0
 8008d60:	42a5      	cmp	r5, r4
 8008d62:	d109      	bne.n	8008d78 <__libc_init_array+0x24>
 8008d64:	4e0b      	ldr	r6, [pc, #44]	; (8008d94 <__libc_init_array+0x40>)
 8008d66:	4c0c      	ldr	r4, [pc, #48]	; (8008d98 <__libc_init_array+0x44>)
 8008d68:	f004 ffa8 	bl	800dcbc <_init>
 8008d6c:	1ba4      	subs	r4, r4, r6
 8008d6e:	10a4      	asrs	r4, r4, #2
 8008d70:	2500      	movs	r5, #0
 8008d72:	42a5      	cmp	r5, r4
 8008d74:	d105      	bne.n	8008d82 <__libc_init_array+0x2e>
 8008d76:	bd70      	pop	{r4, r5, r6, pc}
 8008d78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d7c:	4798      	blx	r3
 8008d7e:	3501      	adds	r5, #1
 8008d80:	e7ee      	b.n	8008d60 <__libc_init_array+0xc>
 8008d82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d86:	4798      	blx	r3
 8008d88:	3501      	adds	r5, #1
 8008d8a:	e7f2      	b.n	8008d72 <__libc_init_array+0x1e>
 8008d8c:	0800e070 	.word	0x0800e070
 8008d90:	0800e070 	.word	0x0800e070
 8008d94:	0800e070 	.word	0x0800e070
 8008d98:	0800e074 	.word	0x0800e074

08008d9c <memset>:
 8008d9c:	4402      	add	r2, r0
 8008d9e:	4603      	mov	r3, r0
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d100      	bne.n	8008da6 <memset+0xa>
 8008da4:	4770      	bx	lr
 8008da6:	f803 1b01 	strb.w	r1, [r3], #1
 8008daa:	e7f9      	b.n	8008da0 <memset+0x4>

08008dac <__cvt>:
 8008dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008db0:	ec55 4b10 	vmov	r4, r5, d0
 8008db4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008db6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008dba:	2d00      	cmp	r5, #0
 8008dbc:	460e      	mov	r6, r1
 8008dbe:	4691      	mov	r9, r2
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	bfb8      	it	lt
 8008dc4:	4622      	movlt	r2, r4
 8008dc6:	462b      	mov	r3, r5
 8008dc8:	f027 0720 	bic.w	r7, r7, #32
 8008dcc:	bfbb      	ittet	lt
 8008dce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008dd2:	461d      	movlt	r5, r3
 8008dd4:	2300      	movge	r3, #0
 8008dd6:	232d      	movlt	r3, #45	; 0x2d
 8008dd8:	bfb8      	it	lt
 8008dda:	4614      	movlt	r4, r2
 8008ddc:	2f46      	cmp	r7, #70	; 0x46
 8008dde:	700b      	strb	r3, [r1, #0]
 8008de0:	d004      	beq.n	8008dec <__cvt+0x40>
 8008de2:	2f45      	cmp	r7, #69	; 0x45
 8008de4:	d100      	bne.n	8008de8 <__cvt+0x3c>
 8008de6:	3601      	adds	r6, #1
 8008de8:	2102      	movs	r1, #2
 8008dea:	e000      	b.n	8008dee <__cvt+0x42>
 8008dec:	2103      	movs	r1, #3
 8008dee:	ab03      	add	r3, sp, #12
 8008df0:	9301      	str	r3, [sp, #4]
 8008df2:	ab02      	add	r3, sp, #8
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	4632      	mov	r2, r6
 8008df8:	4653      	mov	r3, sl
 8008dfa:	ec45 4b10 	vmov	d0, r4, r5
 8008dfe:	f001 fd77 	bl	800a8f0 <_dtoa_r>
 8008e02:	2f47      	cmp	r7, #71	; 0x47
 8008e04:	4680      	mov	r8, r0
 8008e06:	d102      	bne.n	8008e0e <__cvt+0x62>
 8008e08:	f019 0f01 	tst.w	r9, #1
 8008e0c:	d026      	beq.n	8008e5c <__cvt+0xb0>
 8008e0e:	2f46      	cmp	r7, #70	; 0x46
 8008e10:	eb08 0906 	add.w	r9, r8, r6
 8008e14:	d111      	bne.n	8008e3a <__cvt+0x8e>
 8008e16:	f898 3000 	ldrb.w	r3, [r8]
 8008e1a:	2b30      	cmp	r3, #48	; 0x30
 8008e1c:	d10a      	bne.n	8008e34 <__cvt+0x88>
 8008e1e:	2200      	movs	r2, #0
 8008e20:	2300      	movs	r3, #0
 8008e22:	4620      	mov	r0, r4
 8008e24:	4629      	mov	r1, r5
 8008e26:	f7f7 fe4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e2a:	b918      	cbnz	r0, 8008e34 <__cvt+0x88>
 8008e2c:	f1c6 0601 	rsb	r6, r6, #1
 8008e30:	f8ca 6000 	str.w	r6, [sl]
 8008e34:	f8da 3000 	ldr.w	r3, [sl]
 8008e38:	4499      	add	r9, r3
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	4620      	mov	r0, r4
 8008e40:	4629      	mov	r1, r5
 8008e42:	f7f7 fe41 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e46:	b938      	cbnz	r0, 8008e58 <__cvt+0xac>
 8008e48:	2230      	movs	r2, #48	; 0x30
 8008e4a:	9b03      	ldr	r3, [sp, #12]
 8008e4c:	454b      	cmp	r3, r9
 8008e4e:	d205      	bcs.n	8008e5c <__cvt+0xb0>
 8008e50:	1c59      	adds	r1, r3, #1
 8008e52:	9103      	str	r1, [sp, #12]
 8008e54:	701a      	strb	r2, [r3, #0]
 8008e56:	e7f8      	b.n	8008e4a <__cvt+0x9e>
 8008e58:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e5c:	9b03      	ldr	r3, [sp, #12]
 8008e5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e60:	eba3 0308 	sub.w	r3, r3, r8
 8008e64:	4640      	mov	r0, r8
 8008e66:	6013      	str	r3, [r2, #0]
 8008e68:	b004      	add	sp, #16
 8008e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008e6e <__exponent>:
 8008e6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e70:	2900      	cmp	r1, #0
 8008e72:	4604      	mov	r4, r0
 8008e74:	bfba      	itte	lt
 8008e76:	4249      	neglt	r1, r1
 8008e78:	232d      	movlt	r3, #45	; 0x2d
 8008e7a:	232b      	movge	r3, #43	; 0x2b
 8008e7c:	2909      	cmp	r1, #9
 8008e7e:	f804 2b02 	strb.w	r2, [r4], #2
 8008e82:	7043      	strb	r3, [r0, #1]
 8008e84:	dd20      	ble.n	8008ec8 <__exponent+0x5a>
 8008e86:	f10d 0307 	add.w	r3, sp, #7
 8008e8a:	461f      	mov	r7, r3
 8008e8c:	260a      	movs	r6, #10
 8008e8e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008e92:	fb06 1115 	mls	r1, r6, r5, r1
 8008e96:	3130      	adds	r1, #48	; 0x30
 8008e98:	2d09      	cmp	r5, #9
 8008e9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008e9e:	f103 32ff 	add.w	r2, r3, #4294967295
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	dc09      	bgt.n	8008eba <__exponent+0x4c>
 8008ea6:	3130      	adds	r1, #48	; 0x30
 8008ea8:	3b02      	subs	r3, #2
 8008eaa:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008eae:	42bb      	cmp	r3, r7
 8008eb0:	4622      	mov	r2, r4
 8008eb2:	d304      	bcc.n	8008ebe <__exponent+0x50>
 8008eb4:	1a10      	subs	r0, r2, r0
 8008eb6:	b003      	add	sp, #12
 8008eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eba:	4613      	mov	r3, r2
 8008ebc:	e7e7      	b.n	8008e8e <__exponent+0x20>
 8008ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ec2:	f804 2b01 	strb.w	r2, [r4], #1
 8008ec6:	e7f2      	b.n	8008eae <__exponent+0x40>
 8008ec8:	2330      	movs	r3, #48	; 0x30
 8008eca:	4419      	add	r1, r3
 8008ecc:	7083      	strb	r3, [r0, #2]
 8008ece:	1d02      	adds	r2, r0, #4
 8008ed0:	70c1      	strb	r1, [r0, #3]
 8008ed2:	e7ef      	b.n	8008eb4 <__exponent+0x46>

08008ed4 <_printf_float>:
 8008ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed8:	b08d      	sub	sp, #52	; 0x34
 8008eda:	460c      	mov	r4, r1
 8008edc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008ee0:	4616      	mov	r6, r2
 8008ee2:	461f      	mov	r7, r3
 8008ee4:	4605      	mov	r5, r0
 8008ee6:	f002 fde7 	bl	800bab8 <_localeconv_r>
 8008eea:	6803      	ldr	r3, [r0, #0]
 8008eec:	9304      	str	r3, [sp, #16]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7f7 f96e 	bl	80001d0 <strlen>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8008efc:	9005      	str	r0, [sp, #20]
 8008efe:	3307      	adds	r3, #7
 8008f00:	f023 0307 	bic.w	r3, r3, #7
 8008f04:	f103 0208 	add.w	r2, r3, #8
 8008f08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008f0c:	f8d4 b000 	ldr.w	fp, [r4]
 8008f10:	f8c8 2000 	str.w	r2, [r8]
 8008f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f18:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008f1c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008f20:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f24:	9307      	str	r3, [sp, #28]
 8008f26:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f2e:	4ba7      	ldr	r3, [pc, #668]	; (80091cc <_printf_float+0x2f8>)
 8008f30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f34:	f7f7 fdfa 	bl	8000b2c <__aeabi_dcmpun>
 8008f38:	bb70      	cbnz	r0, 8008f98 <_printf_float+0xc4>
 8008f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f3e:	4ba3      	ldr	r3, [pc, #652]	; (80091cc <_printf_float+0x2f8>)
 8008f40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f44:	f7f7 fdd4 	bl	8000af0 <__aeabi_dcmple>
 8008f48:	bb30      	cbnz	r0, 8008f98 <_printf_float+0xc4>
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	4640      	mov	r0, r8
 8008f50:	4649      	mov	r1, r9
 8008f52:	f7f7 fdc3 	bl	8000adc <__aeabi_dcmplt>
 8008f56:	b110      	cbz	r0, 8008f5e <_printf_float+0x8a>
 8008f58:	232d      	movs	r3, #45	; 0x2d
 8008f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f5e:	4a9c      	ldr	r2, [pc, #624]	; (80091d0 <_printf_float+0x2fc>)
 8008f60:	4b9c      	ldr	r3, [pc, #624]	; (80091d4 <_printf_float+0x300>)
 8008f62:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008f66:	bf8c      	ite	hi
 8008f68:	4690      	movhi	r8, r2
 8008f6a:	4698      	movls	r8, r3
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	f02b 0204 	bic.w	r2, fp, #4
 8008f72:	6123      	str	r3, [r4, #16]
 8008f74:	6022      	str	r2, [r4, #0]
 8008f76:	f04f 0900 	mov.w	r9, #0
 8008f7a:	9700      	str	r7, [sp, #0]
 8008f7c:	4633      	mov	r3, r6
 8008f7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008f80:	4621      	mov	r1, r4
 8008f82:	4628      	mov	r0, r5
 8008f84:	f000 f9e6 	bl	8009354 <_printf_common>
 8008f88:	3001      	adds	r0, #1
 8008f8a:	f040 808d 	bne.w	80090a8 <_printf_float+0x1d4>
 8008f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f92:	b00d      	add	sp, #52	; 0x34
 8008f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f98:	4642      	mov	r2, r8
 8008f9a:	464b      	mov	r3, r9
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	f7f7 fdc4 	bl	8000b2c <__aeabi_dcmpun>
 8008fa4:	b110      	cbz	r0, 8008fac <_printf_float+0xd8>
 8008fa6:	4a8c      	ldr	r2, [pc, #560]	; (80091d8 <_printf_float+0x304>)
 8008fa8:	4b8c      	ldr	r3, [pc, #560]	; (80091dc <_printf_float+0x308>)
 8008faa:	e7da      	b.n	8008f62 <_printf_float+0x8e>
 8008fac:	6861      	ldr	r1, [r4, #4]
 8008fae:	1c4b      	adds	r3, r1, #1
 8008fb0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008fb4:	a80a      	add	r0, sp, #40	; 0x28
 8008fb6:	d13e      	bne.n	8009036 <_printf_float+0x162>
 8008fb8:	2306      	movs	r3, #6
 8008fba:	6063      	str	r3, [r4, #4]
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008fc2:	ab09      	add	r3, sp, #36	; 0x24
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	ec49 8b10 	vmov	d0, r8, r9
 8008fca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008fce:	6022      	str	r2, [r4, #0]
 8008fd0:	f8cd a004 	str.w	sl, [sp, #4]
 8008fd4:	6861      	ldr	r1, [r4, #4]
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	f7ff fee8 	bl	8008dac <__cvt>
 8008fdc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008fe0:	2b47      	cmp	r3, #71	; 0x47
 8008fe2:	4680      	mov	r8, r0
 8008fe4:	d109      	bne.n	8008ffa <_printf_float+0x126>
 8008fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe8:	1cd8      	adds	r0, r3, #3
 8008fea:	db02      	blt.n	8008ff2 <_printf_float+0x11e>
 8008fec:	6862      	ldr	r2, [r4, #4]
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	dd47      	ble.n	8009082 <_printf_float+0x1ae>
 8008ff2:	f1aa 0a02 	sub.w	sl, sl, #2
 8008ff6:	fa5f fa8a 	uxtb.w	sl, sl
 8008ffa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008ffe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009000:	d824      	bhi.n	800904c <_printf_float+0x178>
 8009002:	3901      	subs	r1, #1
 8009004:	4652      	mov	r2, sl
 8009006:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800900a:	9109      	str	r1, [sp, #36]	; 0x24
 800900c:	f7ff ff2f 	bl	8008e6e <__exponent>
 8009010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009012:	1813      	adds	r3, r2, r0
 8009014:	2a01      	cmp	r2, #1
 8009016:	4681      	mov	r9, r0
 8009018:	6123      	str	r3, [r4, #16]
 800901a:	dc02      	bgt.n	8009022 <_printf_float+0x14e>
 800901c:	6822      	ldr	r2, [r4, #0]
 800901e:	07d1      	lsls	r1, r2, #31
 8009020:	d501      	bpl.n	8009026 <_printf_float+0x152>
 8009022:	3301      	adds	r3, #1
 8009024:	6123      	str	r3, [r4, #16]
 8009026:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0a5      	beq.n	8008f7a <_printf_float+0xa6>
 800902e:	232d      	movs	r3, #45	; 0x2d
 8009030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009034:	e7a1      	b.n	8008f7a <_printf_float+0xa6>
 8009036:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800903a:	f000 8177 	beq.w	800932c <_printf_float+0x458>
 800903e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009042:	d1bb      	bne.n	8008fbc <_printf_float+0xe8>
 8009044:	2900      	cmp	r1, #0
 8009046:	d1b9      	bne.n	8008fbc <_printf_float+0xe8>
 8009048:	2301      	movs	r3, #1
 800904a:	e7b6      	b.n	8008fba <_printf_float+0xe6>
 800904c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009050:	d119      	bne.n	8009086 <_printf_float+0x1b2>
 8009052:	2900      	cmp	r1, #0
 8009054:	6863      	ldr	r3, [r4, #4]
 8009056:	dd0c      	ble.n	8009072 <_printf_float+0x19e>
 8009058:	6121      	str	r1, [r4, #16]
 800905a:	b913      	cbnz	r3, 8009062 <_printf_float+0x18e>
 800905c:	6822      	ldr	r2, [r4, #0]
 800905e:	07d2      	lsls	r2, r2, #31
 8009060:	d502      	bpl.n	8009068 <_printf_float+0x194>
 8009062:	3301      	adds	r3, #1
 8009064:	440b      	add	r3, r1
 8009066:	6123      	str	r3, [r4, #16]
 8009068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800906a:	65a3      	str	r3, [r4, #88]	; 0x58
 800906c:	f04f 0900 	mov.w	r9, #0
 8009070:	e7d9      	b.n	8009026 <_printf_float+0x152>
 8009072:	b913      	cbnz	r3, 800907a <_printf_float+0x1a6>
 8009074:	6822      	ldr	r2, [r4, #0]
 8009076:	07d0      	lsls	r0, r2, #31
 8009078:	d501      	bpl.n	800907e <_printf_float+0x1aa>
 800907a:	3302      	adds	r3, #2
 800907c:	e7f3      	b.n	8009066 <_printf_float+0x192>
 800907e:	2301      	movs	r3, #1
 8009080:	e7f1      	b.n	8009066 <_printf_float+0x192>
 8009082:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009086:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800908a:	4293      	cmp	r3, r2
 800908c:	db05      	blt.n	800909a <_printf_float+0x1c6>
 800908e:	6822      	ldr	r2, [r4, #0]
 8009090:	6123      	str	r3, [r4, #16]
 8009092:	07d1      	lsls	r1, r2, #31
 8009094:	d5e8      	bpl.n	8009068 <_printf_float+0x194>
 8009096:	3301      	adds	r3, #1
 8009098:	e7e5      	b.n	8009066 <_printf_float+0x192>
 800909a:	2b00      	cmp	r3, #0
 800909c:	bfd4      	ite	le
 800909e:	f1c3 0302 	rsble	r3, r3, #2
 80090a2:	2301      	movgt	r3, #1
 80090a4:	4413      	add	r3, r2
 80090a6:	e7de      	b.n	8009066 <_printf_float+0x192>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	055a      	lsls	r2, r3, #21
 80090ac:	d407      	bmi.n	80090be <_printf_float+0x1ea>
 80090ae:	6923      	ldr	r3, [r4, #16]
 80090b0:	4642      	mov	r2, r8
 80090b2:	4631      	mov	r1, r6
 80090b4:	4628      	mov	r0, r5
 80090b6:	47b8      	blx	r7
 80090b8:	3001      	adds	r0, #1
 80090ba:	d12b      	bne.n	8009114 <_printf_float+0x240>
 80090bc:	e767      	b.n	8008f8e <_printf_float+0xba>
 80090be:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80090c2:	f240 80dc 	bls.w	800927e <_printf_float+0x3aa>
 80090c6:	2200      	movs	r2, #0
 80090c8:	2300      	movs	r3, #0
 80090ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090ce:	f7f7 fcfb 	bl	8000ac8 <__aeabi_dcmpeq>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d033      	beq.n	800913e <_printf_float+0x26a>
 80090d6:	2301      	movs	r3, #1
 80090d8:	4a41      	ldr	r2, [pc, #260]	; (80091e0 <_printf_float+0x30c>)
 80090da:	4631      	mov	r1, r6
 80090dc:	4628      	mov	r0, r5
 80090de:	47b8      	blx	r7
 80090e0:	3001      	adds	r0, #1
 80090e2:	f43f af54 	beq.w	8008f8e <_printf_float+0xba>
 80090e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090ea:	429a      	cmp	r2, r3
 80090ec:	db02      	blt.n	80090f4 <_printf_float+0x220>
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	07d8      	lsls	r0, r3, #31
 80090f2:	d50f      	bpl.n	8009114 <_printf_float+0x240>
 80090f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090f8:	4631      	mov	r1, r6
 80090fa:	4628      	mov	r0, r5
 80090fc:	47b8      	blx	r7
 80090fe:	3001      	adds	r0, #1
 8009100:	f43f af45 	beq.w	8008f8e <_printf_float+0xba>
 8009104:	f04f 0800 	mov.w	r8, #0
 8009108:	f104 091a 	add.w	r9, r4, #26
 800910c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800910e:	3b01      	subs	r3, #1
 8009110:	4543      	cmp	r3, r8
 8009112:	dc09      	bgt.n	8009128 <_printf_float+0x254>
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	079b      	lsls	r3, r3, #30
 8009118:	f100 8103 	bmi.w	8009322 <_printf_float+0x44e>
 800911c:	68e0      	ldr	r0, [r4, #12]
 800911e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009120:	4298      	cmp	r0, r3
 8009122:	bfb8      	it	lt
 8009124:	4618      	movlt	r0, r3
 8009126:	e734      	b.n	8008f92 <_printf_float+0xbe>
 8009128:	2301      	movs	r3, #1
 800912a:	464a      	mov	r2, r9
 800912c:	4631      	mov	r1, r6
 800912e:	4628      	mov	r0, r5
 8009130:	47b8      	blx	r7
 8009132:	3001      	adds	r0, #1
 8009134:	f43f af2b 	beq.w	8008f8e <_printf_float+0xba>
 8009138:	f108 0801 	add.w	r8, r8, #1
 800913c:	e7e6      	b.n	800910c <_printf_float+0x238>
 800913e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009140:	2b00      	cmp	r3, #0
 8009142:	dc2b      	bgt.n	800919c <_printf_float+0x2c8>
 8009144:	2301      	movs	r3, #1
 8009146:	4a26      	ldr	r2, [pc, #152]	; (80091e0 <_printf_float+0x30c>)
 8009148:	4631      	mov	r1, r6
 800914a:	4628      	mov	r0, r5
 800914c:	47b8      	blx	r7
 800914e:	3001      	adds	r0, #1
 8009150:	f43f af1d 	beq.w	8008f8e <_printf_float+0xba>
 8009154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009156:	b923      	cbnz	r3, 8009162 <_printf_float+0x28e>
 8009158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800915a:	b913      	cbnz	r3, 8009162 <_printf_float+0x28e>
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	07d9      	lsls	r1, r3, #31
 8009160:	d5d8      	bpl.n	8009114 <_printf_float+0x240>
 8009162:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009166:	4631      	mov	r1, r6
 8009168:	4628      	mov	r0, r5
 800916a:	47b8      	blx	r7
 800916c:	3001      	adds	r0, #1
 800916e:	f43f af0e 	beq.w	8008f8e <_printf_float+0xba>
 8009172:	f04f 0900 	mov.w	r9, #0
 8009176:	f104 0a1a 	add.w	sl, r4, #26
 800917a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800917c:	425b      	negs	r3, r3
 800917e:	454b      	cmp	r3, r9
 8009180:	dc01      	bgt.n	8009186 <_printf_float+0x2b2>
 8009182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009184:	e794      	b.n	80090b0 <_printf_float+0x1dc>
 8009186:	2301      	movs	r3, #1
 8009188:	4652      	mov	r2, sl
 800918a:	4631      	mov	r1, r6
 800918c:	4628      	mov	r0, r5
 800918e:	47b8      	blx	r7
 8009190:	3001      	adds	r0, #1
 8009192:	f43f aefc 	beq.w	8008f8e <_printf_float+0xba>
 8009196:	f109 0901 	add.w	r9, r9, #1
 800919a:	e7ee      	b.n	800917a <_printf_float+0x2a6>
 800919c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800919e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091a0:	429a      	cmp	r2, r3
 80091a2:	bfa8      	it	ge
 80091a4:	461a      	movge	r2, r3
 80091a6:	2a00      	cmp	r2, #0
 80091a8:	4691      	mov	r9, r2
 80091aa:	dd07      	ble.n	80091bc <_printf_float+0x2e8>
 80091ac:	4613      	mov	r3, r2
 80091ae:	4631      	mov	r1, r6
 80091b0:	4642      	mov	r2, r8
 80091b2:	4628      	mov	r0, r5
 80091b4:	47b8      	blx	r7
 80091b6:	3001      	adds	r0, #1
 80091b8:	f43f aee9 	beq.w	8008f8e <_printf_float+0xba>
 80091bc:	f104 031a 	add.w	r3, r4, #26
 80091c0:	f04f 0b00 	mov.w	fp, #0
 80091c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091c8:	9306      	str	r3, [sp, #24]
 80091ca:	e015      	b.n	80091f8 <_printf_float+0x324>
 80091cc:	7fefffff 	.word	0x7fefffff
 80091d0:	0800dd24 	.word	0x0800dd24
 80091d4:	0800dd20 	.word	0x0800dd20
 80091d8:	0800dd2c 	.word	0x0800dd2c
 80091dc:	0800dd28 	.word	0x0800dd28
 80091e0:	0800dd30 	.word	0x0800dd30
 80091e4:	2301      	movs	r3, #1
 80091e6:	9a06      	ldr	r2, [sp, #24]
 80091e8:	4631      	mov	r1, r6
 80091ea:	4628      	mov	r0, r5
 80091ec:	47b8      	blx	r7
 80091ee:	3001      	adds	r0, #1
 80091f0:	f43f aecd 	beq.w	8008f8e <_printf_float+0xba>
 80091f4:	f10b 0b01 	add.w	fp, fp, #1
 80091f8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80091fc:	ebaa 0309 	sub.w	r3, sl, r9
 8009200:	455b      	cmp	r3, fp
 8009202:	dcef      	bgt.n	80091e4 <_printf_float+0x310>
 8009204:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009208:	429a      	cmp	r2, r3
 800920a:	44d0      	add	r8, sl
 800920c:	db15      	blt.n	800923a <_printf_float+0x366>
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	07da      	lsls	r2, r3, #31
 8009212:	d412      	bmi.n	800923a <_printf_float+0x366>
 8009214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009216:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009218:	eba3 020a 	sub.w	r2, r3, sl
 800921c:	eba3 0a01 	sub.w	sl, r3, r1
 8009220:	4592      	cmp	sl, r2
 8009222:	bfa8      	it	ge
 8009224:	4692      	movge	sl, r2
 8009226:	f1ba 0f00 	cmp.w	sl, #0
 800922a:	dc0e      	bgt.n	800924a <_printf_float+0x376>
 800922c:	f04f 0800 	mov.w	r8, #0
 8009230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009234:	f104 091a 	add.w	r9, r4, #26
 8009238:	e019      	b.n	800926e <_printf_float+0x39a>
 800923a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800923e:	4631      	mov	r1, r6
 8009240:	4628      	mov	r0, r5
 8009242:	47b8      	blx	r7
 8009244:	3001      	adds	r0, #1
 8009246:	d1e5      	bne.n	8009214 <_printf_float+0x340>
 8009248:	e6a1      	b.n	8008f8e <_printf_float+0xba>
 800924a:	4653      	mov	r3, sl
 800924c:	4642      	mov	r2, r8
 800924e:	4631      	mov	r1, r6
 8009250:	4628      	mov	r0, r5
 8009252:	47b8      	blx	r7
 8009254:	3001      	adds	r0, #1
 8009256:	d1e9      	bne.n	800922c <_printf_float+0x358>
 8009258:	e699      	b.n	8008f8e <_printf_float+0xba>
 800925a:	2301      	movs	r3, #1
 800925c:	464a      	mov	r2, r9
 800925e:	4631      	mov	r1, r6
 8009260:	4628      	mov	r0, r5
 8009262:	47b8      	blx	r7
 8009264:	3001      	adds	r0, #1
 8009266:	f43f ae92 	beq.w	8008f8e <_printf_float+0xba>
 800926a:	f108 0801 	add.w	r8, r8, #1
 800926e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009272:	1a9b      	subs	r3, r3, r2
 8009274:	eba3 030a 	sub.w	r3, r3, sl
 8009278:	4543      	cmp	r3, r8
 800927a:	dcee      	bgt.n	800925a <_printf_float+0x386>
 800927c:	e74a      	b.n	8009114 <_printf_float+0x240>
 800927e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009280:	2a01      	cmp	r2, #1
 8009282:	dc01      	bgt.n	8009288 <_printf_float+0x3b4>
 8009284:	07db      	lsls	r3, r3, #31
 8009286:	d53a      	bpl.n	80092fe <_printf_float+0x42a>
 8009288:	2301      	movs	r3, #1
 800928a:	4642      	mov	r2, r8
 800928c:	4631      	mov	r1, r6
 800928e:	4628      	mov	r0, r5
 8009290:	47b8      	blx	r7
 8009292:	3001      	adds	r0, #1
 8009294:	f43f ae7b 	beq.w	8008f8e <_printf_float+0xba>
 8009298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800929c:	4631      	mov	r1, r6
 800929e:	4628      	mov	r0, r5
 80092a0:	47b8      	blx	r7
 80092a2:	3001      	adds	r0, #1
 80092a4:	f108 0801 	add.w	r8, r8, #1
 80092a8:	f43f ae71 	beq.w	8008f8e <_printf_float+0xba>
 80092ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092ae:	2200      	movs	r2, #0
 80092b0:	f103 3aff 	add.w	sl, r3, #4294967295
 80092b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092b8:	2300      	movs	r3, #0
 80092ba:	f7f7 fc05 	bl	8000ac8 <__aeabi_dcmpeq>
 80092be:	b9c8      	cbnz	r0, 80092f4 <_printf_float+0x420>
 80092c0:	4653      	mov	r3, sl
 80092c2:	4642      	mov	r2, r8
 80092c4:	4631      	mov	r1, r6
 80092c6:	4628      	mov	r0, r5
 80092c8:	47b8      	blx	r7
 80092ca:	3001      	adds	r0, #1
 80092cc:	d10e      	bne.n	80092ec <_printf_float+0x418>
 80092ce:	e65e      	b.n	8008f8e <_printf_float+0xba>
 80092d0:	2301      	movs	r3, #1
 80092d2:	4652      	mov	r2, sl
 80092d4:	4631      	mov	r1, r6
 80092d6:	4628      	mov	r0, r5
 80092d8:	47b8      	blx	r7
 80092da:	3001      	adds	r0, #1
 80092dc:	f43f ae57 	beq.w	8008f8e <_printf_float+0xba>
 80092e0:	f108 0801 	add.w	r8, r8, #1
 80092e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092e6:	3b01      	subs	r3, #1
 80092e8:	4543      	cmp	r3, r8
 80092ea:	dcf1      	bgt.n	80092d0 <_printf_float+0x3fc>
 80092ec:	464b      	mov	r3, r9
 80092ee:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80092f2:	e6de      	b.n	80090b2 <_printf_float+0x1de>
 80092f4:	f04f 0800 	mov.w	r8, #0
 80092f8:	f104 0a1a 	add.w	sl, r4, #26
 80092fc:	e7f2      	b.n	80092e4 <_printf_float+0x410>
 80092fe:	2301      	movs	r3, #1
 8009300:	e7df      	b.n	80092c2 <_printf_float+0x3ee>
 8009302:	2301      	movs	r3, #1
 8009304:	464a      	mov	r2, r9
 8009306:	4631      	mov	r1, r6
 8009308:	4628      	mov	r0, r5
 800930a:	47b8      	blx	r7
 800930c:	3001      	adds	r0, #1
 800930e:	f43f ae3e 	beq.w	8008f8e <_printf_float+0xba>
 8009312:	f108 0801 	add.w	r8, r8, #1
 8009316:	68e3      	ldr	r3, [r4, #12]
 8009318:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800931a:	1a9b      	subs	r3, r3, r2
 800931c:	4543      	cmp	r3, r8
 800931e:	dcf0      	bgt.n	8009302 <_printf_float+0x42e>
 8009320:	e6fc      	b.n	800911c <_printf_float+0x248>
 8009322:	f04f 0800 	mov.w	r8, #0
 8009326:	f104 0919 	add.w	r9, r4, #25
 800932a:	e7f4      	b.n	8009316 <_printf_float+0x442>
 800932c:	2900      	cmp	r1, #0
 800932e:	f43f ae8b 	beq.w	8009048 <_printf_float+0x174>
 8009332:	2300      	movs	r3, #0
 8009334:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009338:	ab09      	add	r3, sp, #36	; 0x24
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	ec49 8b10 	vmov	d0, r8, r9
 8009340:	6022      	str	r2, [r4, #0]
 8009342:	f8cd a004 	str.w	sl, [sp, #4]
 8009346:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800934a:	4628      	mov	r0, r5
 800934c:	f7ff fd2e 	bl	8008dac <__cvt>
 8009350:	4680      	mov	r8, r0
 8009352:	e648      	b.n	8008fe6 <_printf_float+0x112>

08009354 <_printf_common>:
 8009354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009358:	4691      	mov	r9, r2
 800935a:	461f      	mov	r7, r3
 800935c:	688a      	ldr	r2, [r1, #8]
 800935e:	690b      	ldr	r3, [r1, #16]
 8009360:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009364:	4293      	cmp	r3, r2
 8009366:	bfb8      	it	lt
 8009368:	4613      	movlt	r3, r2
 800936a:	f8c9 3000 	str.w	r3, [r9]
 800936e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009372:	4606      	mov	r6, r0
 8009374:	460c      	mov	r4, r1
 8009376:	b112      	cbz	r2, 800937e <_printf_common+0x2a>
 8009378:	3301      	adds	r3, #1
 800937a:	f8c9 3000 	str.w	r3, [r9]
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	0699      	lsls	r1, r3, #26
 8009382:	bf42      	ittt	mi
 8009384:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009388:	3302      	addmi	r3, #2
 800938a:	f8c9 3000 	strmi.w	r3, [r9]
 800938e:	6825      	ldr	r5, [r4, #0]
 8009390:	f015 0506 	ands.w	r5, r5, #6
 8009394:	d107      	bne.n	80093a6 <_printf_common+0x52>
 8009396:	f104 0a19 	add.w	sl, r4, #25
 800939a:	68e3      	ldr	r3, [r4, #12]
 800939c:	f8d9 2000 	ldr.w	r2, [r9]
 80093a0:	1a9b      	subs	r3, r3, r2
 80093a2:	42ab      	cmp	r3, r5
 80093a4:	dc28      	bgt.n	80093f8 <_printf_common+0xa4>
 80093a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80093aa:	6822      	ldr	r2, [r4, #0]
 80093ac:	3300      	adds	r3, #0
 80093ae:	bf18      	it	ne
 80093b0:	2301      	movne	r3, #1
 80093b2:	0692      	lsls	r2, r2, #26
 80093b4:	d42d      	bmi.n	8009412 <_printf_common+0xbe>
 80093b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093ba:	4639      	mov	r1, r7
 80093bc:	4630      	mov	r0, r6
 80093be:	47c0      	blx	r8
 80093c0:	3001      	adds	r0, #1
 80093c2:	d020      	beq.n	8009406 <_printf_common+0xb2>
 80093c4:	6823      	ldr	r3, [r4, #0]
 80093c6:	68e5      	ldr	r5, [r4, #12]
 80093c8:	f8d9 2000 	ldr.w	r2, [r9]
 80093cc:	f003 0306 	and.w	r3, r3, #6
 80093d0:	2b04      	cmp	r3, #4
 80093d2:	bf08      	it	eq
 80093d4:	1aad      	subeq	r5, r5, r2
 80093d6:	68a3      	ldr	r3, [r4, #8]
 80093d8:	6922      	ldr	r2, [r4, #16]
 80093da:	bf0c      	ite	eq
 80093dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093e0:	2500      	movne	r5, #0
 80093e2:	4293      	cmp	r3, r2
 80093e4:	bfc4      	itt	gt
 80093e6:	1a9b      	subgt	r3, r3, r2
 80093e8:	18ed      	addgt	r5, r5, r3
 80093ea:	f04f 0900 	mov.w	r9, #0
 80093ee:	341a      	adds	r4, #26
 80093f0:	454d      	cmp	r5, r9
 80093f2:	d11a      	bne.n	800942a <_printf_common+0xd6>
 80093f4:	2000      	movs	r0, #0
 80093f6:	e008      	b.n	800940a <_printf_common+0xb6>
 80093f8:	2301      	movs	r3, #1
 80093fa:	4652      	mov	r2, sl
 80093fc:	4639      	mov	r1, r7
 80093fe:	4630      	mov	r0, r6
 8009400:	47c0      	blx	r8
 8009402:	3001      	adds	r0, #1
 8009404:	d103      	bne.n	800940e <_printf_common+0xba>
 8009406:	f04f 30ff 	mov.w	r0, #4294967295
 800940a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940e:	3501      	adds	r5, #1
 8009410:	e7c3      	b.n	800939a <_printf_common+0x46>
 8009412:	18e1      	adds	r1, r4, r3
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	2030      	movs	r0, #48	; 0x30
 8009418:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800941c:	4422      	add	r2, r4
 800941e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009422:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009426:	3302      	adds	r3, #2
 8009428:	e7c5      	b.n	80093b6 <_printf_common+0x62>
 800942a:	2301      	movs	r3, #1
 800942c:	4622      	mov	r2, r4
 800942e:	4639      	mov	r1, r7
 8009430:	4630      	mov	r0, r6
 8009432:	47c0      	blx	r8
 8009434:	3001      	adds	r0, #1
 8009436:	d0e6      	beq.n	8009406 <_printf_common+0xb2>
 8009438:	f109 0901 	add.w	r9, r9, #1
 800943c:	e7d8      	b.n	80093f0 <_printf_common+0x9c>
	...

08009440 <_printf_i>:
 8009440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009444:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009448:	460c      	mov	r4, r1
 800944a:	7e09      	ldrb	r1, [r1, #24]
 800944c:	b085      	sub	sp, #20
 800944e:	296e      	cmp	r1, #110	; 0x6e
 8009450:	4617      	mov	r7, r2
 8009452:	4606      	mov	r6, r0
 8009454:	4698      	mov	r8, r3
 8009456:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009458:	f000 80b3 	beq.w	80095c2 <_printf_i+0x182>
 800945c:	d822      	bhi.n	80094a4 <_printf_i+0x64>
 800945e:	2963      	cmp	r1, #99	; 0x63
 8009460:	d036      	beq.n	80094d0 <_printf_i+0x90>
 8009462:	d80a      	bhi.n	800947a <_printf_i+0x3a>
 8009464:	2900      	cmp	r1, #0
 8009466:	f000 80b9 	beq.w	80095dc <_printf_i+0x19c>
 800946a:	2958      	cmp	r1, #88	; 0x58
 800946c:	f000 8083 	beq.w	8009576 <_printf_i+0x136>
 8009470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009474:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009478:	e032      	b.n	80094e0 <_printf_i+0xa0>
 800947a:	2964      	cmp	r1, #100	; 0x64
 800947c:	d001      	beq.n	8009482 <_printf_i+0x42>
 800947e:	2969      	cmp	r1, #105	; 0x69
 8009480:	d1f6      	bne.n	8009470 <_printf_i+0x30>
 8009482:	6820      	ldr	r0, [r4, #0]
 8009484:	6813      	ldr	r3, [r2, #0]
 8009486:	0605      	lsls	r5, r0, #24
 8009488:	f103 0104 	add.w	r1, r3, #4
 800948c:	d52a      	bpl.n	80094e4 <_printf_i+0xa4>
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6011      	str	r1, [r2, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	da03      	bge.n	800949e <_printf_i+0x5e>
 8009496:	222d      	movs	r2, #45	; 0x2d
 8009498:	425b      	negs	r3, r3
 800949a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800949e:	486f      	ldr	r0, [pc, #444]	; (800965c <_printf_i+0x21c>)
 80094a0:	220a      	movs	r2, #10
 80094a2:	e039      	b.n	8009518 <_printf_i+0xd8>
 80094a4:	2973      	cmp	r1, #115	; 0x73
 80094a6:	f000 809d 	beq.w	80095e4 <_printf_i+0x1a4>
 80094aa:	d808      	bhi.n	80094be <_printf_i+0x7e>
 80094ac:	296f      	cmp	r1, #111	; 0x6f
 80094ae:	d020      	beq.n	80094f2 <_printf_i+0xb2>
 80094b0:	2970      	cmp	r1, #112	; 0x70
 80094b2:	d1dd      	bne.n	8009470 <_printf_i+0x30>
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	f043 0320 	orr.w	r3, r3, #32
 80094ba:	6023      	str	r3, [r4, #0]
 80094bc:	e003      	b.n	80094c6 <_printf_i+0x86>
 80094be:	2975      	cmp	r1, #117	; 0x75
 80094c0:	d017      	beq.n	80094f2 <_printf_i+0xb2>
 80094c2:	2978      	cmp	r1, #120	; 0x78
 80094c4:	d1d4      	bne.n	8009470 <_printf_i+0x30>
 80094c6:	2378      	movs	r3, #120	; 0x78
 80094c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094cc:	4864      	ldr	r0, [pc, #400]	; (8009660 <_printf_i+0x220>)
 80094ce:	e055      	b.n	800957c <_printf_i+0x13c>
 80094d0:	6813      	ldr	r3, [r2, #0]
 80094d2:	1d19      	adds	r1, r3, #4
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	6011      	str	r1, [r2, #0]
 80094d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094e0:	2301      	movs	r3, #1
 80094e2:	e08c      	b.n	80095fe <_printf_i+0x1be>
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6011      	str	r1, [r2, #0]
 80094e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094ec:	bf18      	it	ne
 80094ee:	b21b      	sxthne	r3, r3
 80094f0:	e7cf      	b.n	8009492 <_printf_i+0x52>
 80094f2:	6813      	ldr	r3, [r2, #0]
 80094f4:	6825      	ldr	r5, [r4, #0]
 80094f6:	1d18      	adds	r0, r3, #4
 80094f8:	6010      	str	r0, [r2, #0]
 80094fa:	0628      	lsls	r0, r5, #24
 80094fc:	d501      	bpl.n	8009502 <_printf_i+0xc2>
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	e002      	b.n	8009508 <_printf_i+0xc8>
 8009502:	0668      	lsls	r0, r5, #25
 8009504:	d5fb      	bpl.n	80094fe <_printf_i+0xbe>
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	4854      	ldr	r0, [pc, #336]	; (800965c <_printf_i+0x21c>)
 800950a:	296f      	cmp	r1, #111	; 0x6f
 800950c:	bf14      	ite	ne
 800950e:	220a      	movne	r2, #10
 8009510:	2208      	moveq	r2, #8
 8009512:	2100      	movs	r1, #0
 8009514:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009518:	6865      	ldr	r5, [r4, #4]
 800951a:	60a5      	str	r5, [r4, #8]
 800951c:	2d00      	cmp	r5, #0
 800951e:	f2c0 8095 	blt.w	800964c <_printf_i+0x20c>
 8009522:	6821      	ldr	r1, [r4, #0]
 8009524:	f021 0104 	bic.w	r1, r1, #4
 8009528:	6021      	str	r1, [r4, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d13d      	bne.n	80095aa <_printf_i+0x16a>
 800952e:	2d00      	cmp	r5, #0
 8009530:	f040 808e 	bne.w	8009650 <_printf_i+0x210>
 8009534:	4665      	mov	r5, ip
 8009536:	2a08      	cmp	r2, #8
 8009538:	d10b      	bne.n	8009552 <_printf_i+0x112>
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	07db      	lsls	r3, r3, #31
 800953e:	d508      	bpl.n	8009552 <_printf_i+0x112>
 8009540:	6923      	ldr	r3, [r4, #16]
 8009542:	6862      	ldr	r2, [r4, #4]
 8009544:	429a      	cmp	r2, r3
 8009546:	bfde      	ittt	le
 8009548:	2330      	movle	r3, #48	; 0x30
 800954a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800954e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009552:	ebac 0305 	sub.w	r3, ip, r5
 8009556:	6123      	str	r3, [r4, #16]
 8009558:	f8cd 8000 	str.w	r8, [sp]
 800955c:	463b      	mov	r3, r7
 800955e:	aa03      	add	r2, sp, #12
 8009560:	4621      	mov	r1, r4
 8009562:	4630      	mov	r0, r6
 8009564:	f7ff fef6 	bl	8009354 <_printf_common>
 8009568:	3001      	adds	r0, #1
 800956a:	d14d      	bne.n	8009608 <_printf_i+0x1c8>
 800956c:	f04f 30ff 	mov.w	r0, #4294967295
 8009570:	b005      	add	sp, #20
 8009572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009576:	4839      	ldr	r0, [pc, #228]	; (800965c <_printf_i+0x21c>)
 8009578:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800957c:	6813      	ldr	r3, [r2, #0]
 800957e:	6821      	ldr	r1, [r4, #0]
 8009580:	1d1d      	adds	r5, r3, #4
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6015      	str	r5, [r2, #0]
 8009586:	060a      	lsls	r2, r1, #24
 8009588:	d50b      	bpl.n	80095a2 <_printf_i+0x162>
 800958a:	07ca      	lsls	r2, r1, #31
 800958c:	bf44      	itt	mi
 800958e:	f041 0120 	orrmi.w	r1, r1, #32
 8009592:	6021      	strmi	r1, [r4, #0]
 8009594:	b91b      	cbnz	r3, 800959e <_printf_i+0x15e>
 8009596:	6822      	ldr	r2, [r4, #0]
 8009598:	f022 0220 	bic.w	r2, r2, #32
 800959c:	6022      	str	r2, [r4, #0]
 800959e:	2210      	movs	r2, #16
 80095a0:	e7b7      	b.n	8009512 <_printf_i+0xd2>
 80095a2:	064d      	lsls	r5, r1, #25
 80095a4:	bf48      	it	mi
 80095a6:	b29b      	uxthmi	r3, r3
 80095a8:	e7ef      	b.n	800958a <_printf_i+0x14a>
 80095aa:	4665      	mov	r5, ip
 80095ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80095b0:	fb02 3311 	mls	r3, r2, r1, r3
 80095b4:	5cc3      	ldrb	r3, [r0, r3]
 80095b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80095ba:	460b      	mov	r3, r1
 80095bc:	2900      	cmp	r1, #0
 80095be:	d1f5      	bne.n	80095ac <_printf_i+0x16c>
 80095c0:	e7b9      	b.n	8009536 <_printf_i+0xf6>
 80095c2:	6813      	ldr	r3, [r2, #0]
 80095c4:	6825      	ldr	r5, [r4, #0]
 80095c6:	6961      	ldr	r1, [r4, #20]
 80095c8:	1d18      	adds	r0, r3, #4
 80095ca:	6010      	str	r0, [r2, #0]
 80095cc:	0628      	lsls	r0, r5, #24
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	d501      	bpl.n	80095d6 <_printf_i+0x196>
 80095d2:	6019      	str	r1, [r3, #0]
 80095d4:	e002      	b.n	80095dc <_printf_i+0x19c>
 80095d6:	066a      	lsls	r2, r5, #25
 80095d8:	d5fb      	bpl.n	80095d2 <_printf_i+0x192>
 80095da:	8019      	strh	r1, [r3, #0]
 80095dc:	2300      	movs	r3, #0
 80095de:	6123      	str	r3, [r4, #16]
 80095e0:	4665      	mov	r5, ip
 80095e2:	e7b9      	b.n	8009558 <_printf_i+0x118>
 80095e4:	6813      	ldr	r3, [r2, #0]
 80095e6:	1d19      	adds	r1, r3, #4
 80095e8:	6011      	str	r1, [r2, #0]
 80095ea:	681d      	ldr	r5, [r3, #0]
 80095ec:	6862      	ldr	r2, [r4, #4]
 80095ee:	2100      	movs	r1, #0
 80095f0:	4628      	mov	r0, r5
 80095f2:	f7f6 fdf5 	bl	80001e0 <memchr>
 80095f6:	b108      	cbz	r0, 80095fc <_printf_i+0x1bc>
 80095f8:	1b40      	subs	r0, r0, r5
 80095fa:	6060      	str	r0, [r4, #4]
 80095fc:	6863      	ldr	r3, [r4, #4]
 80095fe:	6123      	str	r3, [r4, #16]
 8009600:	2300      	movs	r3, #0
 8009602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009606:	e7a7      	b.n	8009558 <_printf_i+0x118>
 8009608:	6923      	ldr	r3, [r4, #16]
 800960a:	462a      	mov	r2, r5
 800960c:	4639      	mov	r1, r7
 800960e:	4630      	mov	r0, r6
 8009610:	47c0      	blx	r8
 8009612:	3001      	adds	r0, #1
 8009614:	d0aa      	beq.n	800956c <_printf_i+0x12c>
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	079b      	lsls	r3, r3, #30
 800961a:	d413      	bmi.n	8009644 <_printf_i+0x204>
 800961c:	68e0      	ldr	r0, [r4, #12]
 800961e:	9b03      	ldr	r3, [sp, #12]
 8009620:	4298      	cmp	r0, r3
 8009622:	bfb8      	it	lt
 8009624:	4618      	movlt	r0, r3
 8009626:	e7a3      	b.n	8009570 <_printf_i+0x130>
 8009628:	2301      	movs	r3, #1
 800962a:	464a      	mov	r2, r9
 800962c:	4639      	mov	r1, r7
 800962e:	4630      	mov	r0, r6
 8009630:	47c0      	blx	r8
 8009632:	3001      	adds	r0, #1
 8009634:	d09a      	beq.n	800956c <_printf_i+0x12c>
 8009636:	3501      	adds	r5, #1
 8009638:	68e3      	ldr	r3, [r4, #12]
 800963a:	9a03      	ldr	r2, [sp, #12]
 800963c:	1a9b      	subs	r3, r3, r2
 800963e:	42ab      	cmp	r3, r5
 8009640:	dcf2      	bgt.n	8009628 <_printf_i+0x1e8>
 8009642:	e7eb      	b.n	800961c <_printf_i+0x1dc>
 8009644:	2500      	movs	r5, #0
 8009646:	f104 0919 	add.w	r9, r4, #25
 800964a:	e7f5      	b.n	8009638 <_printf_i+0x1f8>
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1ac      	bne.n	80095aa <_printf_i+0x16a>
 8009650:	7803      	ldrb	r3, [r0, #0]
 8009652:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009656:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800965a:	e76c      	b.n	8009536 <_printf_i+0xf6>
 800965c:	0800dd32 	.word	0x0800dd32
 8009660:	0800dd43 	.word	0x0800dd43

08009664 <_scanf_float>:
 8009664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009668:	469a      	mov	sl, r3
 800966a:	688b      	ldr	r3, [r1, #8]
 800966c:	4616      	mov	r6, r2
 800966e:	1e5a      	subs	r2, r3, #1
 8009670:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009674:	b087      	sub	sp, #28
 8009676:	bf83      	ittte	hi
 8009678:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800967c:	189b      	addhi	r3, r3, r2
 800967e:	9301      	strhi	r3, [sp, #4]
 8009680:	2300      	movls	r3, #0
 8009682:	bf86      	itte	hi
 8009684:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009688:	608b      	strhi	r3, [r1, #8]
 800968a:	9301      	strls	r3, [sp, #4]
 800968c:	680b      	ldr	r3, [r1, #0]
 800968e:	4688      	mov	r8, r1
 8009690:	f04f 0b00 	mov.w	fp, #0
 8009694:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009698:	f848 3b1c 	str.w	r3, [r8], #28
 800969c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80096a0:	4607      	mov	r7, r0
 80096a2:	460c      	mov	r4, r1
 80096a4:	4645      	mov	r5, r8
 80096a6:	465a      	mov	r2, fp
 80096a8:	46d9      	mov	r9, fp
 80096aa:	f8cd b008 	str.w	fp, [sp, #8]
 80096ae:	68a1      	ldr	r1, [r4, #8]
 80096b0:	b181      	cbz	r1, 80096d4 <_scanf_float+0x70>
 80096b2:	6833      	ldr	r3, [r6, #0]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	2b49      	cmp	r3, #73	; 0x49
 80096b8:	d071      	beq.n	800979e <_scanf_float+0x13a>
 80096ba:	d84d      	bhi.n	8009758 <_scanf_float+0xf4>
 80096bc:	2b39      	cmp	r3, #57	; 0x39
 80096be:	d840      	bhi.n	8009742 <_scanf_float+0xde>
 80096c0:	2b31      	cmp	r3, #49	; 0x31
 80096c2:	f080 8088 	bcs.w	80097d6 <_scanf_float+0x172>
 80096c6:	2b2d      	cmp	r3, #45	; 0x2d
 80096c8:	f000 8090 	beq.w	80097ec <_scanf_float+0x188>
 80096cc:	d815      	bhi.n	80096fa <_scanf_float+0x96>
 80096ce:	2b2b      	cmp	r3, #43	; 0x2b
 80096d0:	f000 808c 	beq.w	80097ec <_scanf_float+0x188>
 80096d4:	f1b9 0f00 	cmp.w	r9, #0
 80096d8:	d003      	beq.n	80096e2 <_scanf_float+0x7e>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096e0:	6023      	str	r3, [r4, #0]
 80096e2:	3a01      	subs	r2, #1
 80096e4:	2a01      	cmp	r2, #1
 80096e6:	f200 80ea 	bhi.w	80098be <_scanf_float+0x25a>
 80096ea:	4545      	cmp	r5, r8
 80096ec:	f200 80dc 	bhi.w	80098a8 <_scanf_float+0x244>
 80096f0:	2601      	movs	r6, #1
 80096f2:	4630      	mov	r0, r6
 80096f4:	b007      	add	sp, #28
 80096f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fa:	2b2e      	cmp	r3, #46	; 0x2e
 80096fc:	f000 809f 	beq.w	800983e <_scanf_float+0x1da>
 8009700:	2b30      	cmp	r3, #48	; 0x30
 8009702:	d1e7      	bne.n	80096d4 <_scanf_float+0x70>
 8009704:	6820      	ldr	r0, [r4, #0]
 8009706:	f410 7f80 	tst.w	r0, #256	; 0x100
 800970a:	d064      	beq.n	80097d6 <_scanf_float+0x172>
 800970c:	9b01      	ldr	r3, [sp, #4]
 800970e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8009712:	6020      	str	r0, [r4, #0]
 8009714:	f109 0901 	add.w	r9, r9, #1
 8009718:	b11b      	cbz	r3, 8009722 <_scanf_float+0xbe>
 800971a:	3b01      	subs	r3, #1
 800971c:	3101      	adds	r1, #1
 800971e:	9301      	str	r3, [sp, #4]
 8009720:	60a1      	str	r1, [r4, #8]
 8009722:	68a3      	ldr	r3, [r4, #8]
 8009724:	3b01      	subs	r3, #1
 8009726:	60a3      	str	r3, [r4, #8]
 8009728:	6923      	ldr	r3, [r4, #16]
 800972a:	3301      	adds	r3, #1
 800972c:	6123      	str	r3, [r4, #16]
 800972e:	6873      	ldr	r3, [r6, #4]
 8009730:	3b01      	subs	r3, #1
 8009732:	2b00      	cmp	r3, #0
 8009734:	6073      	str	r3, [r6, #4]
 8009736:	f340 80ac 	ble.w	8009892 <_scanf_float+0x22e>
 800973a:	6833      	ldr	r3, [r6, #0]
 800973c:	3301      	adds	r3, #1
 800973e:	6033      	str	r3, [r6, #0]
 8009740:	e7b5      	b.n	80096ae <_scanf_float+0x4a>
 8009742:	2b45      	cmp	r3, #69	; 0x45
 8009744:	f000 8085 	beq.w	8009852 <_scanf_float+0x1ee>
 8009748:	2b46      	cmp	r3, #70	; 0x46
 800974a:	d06a      	beq.n	8009822 <_scanf_float+0x1be>
 800974c:	2b41      	cmp	r3, #65	; 0x41
 800974e:	d1c1      	bne.n	80096d4 <_scanf_float+0x70>
 8009750:	2a01      	cmp	r2, #1
 8009752:	d1bf      	bne.n	80096d4 <_scanf_float+0x70>
 8009754:	2202      	movs	r2, #2
 8009756:	e046      	b.n	80097e6 <_scanf_float+0x182>
 8009758:	2b65      	cmp	r3, #101	; 0x65
 800975a:	d07a      	beq.n	8009852 <_scanf_float+0x1ee>
 800975c:	d818      	bhi.n	8009790 <_scanf_float+0x12c>
 800975e:	2b54      	cmp	r3, #84	; 0x54
 8009760:	d066      	beq.n	8009830 <_scanf_float+0x1cc>
 8009762:	d811      	bhi.n	8009788 <_scanf_float+0x124>
 8009764:	2b4e      	cmp	r3, #78	; 0x4e
 8009766:	d1b5      	bne.n	80096d4 <_scanf_float+0x70>
 8009768:	2a00      	cmp	r2, #0
 800976a:	d146      	bne.n	80097fa <_scanf_float+0x196>
 800976c:	f1b9 0f00 	cmp.w	r9, #0
 8009770:	d145      	bne.n	80097fe <_scanf_float+0x19a>
 8009772:	6821      	ldr	r1, [r4, #0]
 8009774:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009778:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800977c:	d13f      	bne.n	80097fe <_scanf_float+0x19a>
 800977e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009782:	6021      	str	r1, [r4, #0]
 8009784:	2201      	movs	r2, #1
 8009786:	e02e      	b.n	80097e6 <_scanf_float+0x182>
 8009788:	2b59      	cmp	r3, #89	; 0x59
 800978a:	d01e      	beq.n	80097ca <_scanf_float+0x166>
 800978c:	2b61      	cmp	r3, #97	; 0x61
 800978e:	e7de      	b.n	800974e <_scanf_float+0xea>
 8009790:	2b6e      	cmp	r3, #110	; 0x6e
 8009792:	d0e9      	beq.n	8009768 <_scanf_float+0x104>
 8009794:	d815      	bhi.n	80097c2 <_scanf_float+0x15e>
 8009796:	2b66      	cmp	r3, #102	; 0x66
 8009798:	d043      	beq.n	8009822 <_scanf_float+0x1be>
 800979a:	2b69      	cmp	r3, #105	; 0x69
 800979c:	d19a      	bne.n	80096d4 <_scanf_float+0x70>
 800979e:	f1bb 0f00 	cmp.w	fp, #0
 80097a2:	d138      	bne.n	8009816 <_scanf_float+0x1b2>
 80097a4:	f1b9 0f00 	cmp.w	r9, #0
 80097a8:	d197      	bne.n	80096da <_scanf_float+0x76>
 80097aa:	6821      	ldr	r1, [r4, #0]
 80097ac:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80097b0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80097b4:	d195      	bne.n	80096e2 <_scanf_float+0x7e>
 80097b6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80097ba:	6021      	str	r1, [r4, #0]
 80097bc:	f04f 0b01 	mov.w	fp, #1
 80097c0:	e011      	b.n	80097e6 <_scanf_float+0x182>
 80097c2:	2b74      	cmp	r3, #116	; 0x74
 80097c4:	d034      	beq.n	8009830 <_scanf_float+0x1cc>
 80097c6:	2b79      	cmp	r3, #121	; 0x79
 80097c8:	d184      	bne.n	80096d4 <_scanf_float+0x70>
 80097ca:	f1bb 0f07 	cmp.w	fp, #7
 80097ce:	d181      	bne.n	80096d4 <_scanf_float+0x70>
 80097d0:	f04f 0b08 	mov.w	fp, #8
 80097d4:	e007      	b.n	80097e6 <_scanf_float+0x182>
 80097d6:	eb12 0f0b 	cmn.w	r2, fp
 80097da:	f47f af7b 	bne.w	80096d4 <_scanf_float+0x70>
 80097de:	6821      	ldr	r1, [r4, #0]
 80097e0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80097e4:	6021      	str	r1, [r4, #0]
 80097e6:	702b      	strb	r3, [r5, #0]
 80097e8:	3501      	adds	r5, #1
 80097ea:	e79a      	b.n	8009722 <_scanf_float+0xbe>
 80097ec:	6821      	ldr	r1, [r4, #0]
 80097ee:	0608      	lsls	r0, r1, #24
 80097f0:	f57f af70 	bpl.w	80096d4 <_scanf_float+0x70>
 80097f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80097f8:	e7f4      	b.n	80097e4 <_scanf_float+0x180>
 80097fa:	2a02      	cmp	r2, #2
 80097fc:	d047      	beq.n	800988e <_scanf_float+0x22a>
 80097fe:	f1bb 0f01 	cmp.w	fp, #1
 8009802:	d003      	beq.n	800980c <_scanf_float+0x1a8>
 8009804:	f1bb 0f04 	cmp.w	fp, #4
 8009808:	f47f af64 	bne.w	80096d4 <_scanf_float+0x70>
 800980c:	f10b 0b01 	add.w	fp, fp, #1
 8009810:	fa5f fb8b 	uxtb.w	fp, fp
 8009814:	e7e7      	b.n	80097e6 <_scanf_float+0x182>
 8009816:	f1bb 0f03 	cmp.w	fp, #3
 800981a:	d0f7      	beq.n	800980c <_scanf_float+0x1a8>
 800981c:	f1bb 0f05 	cmp.w	fp, #5
 8009820:	e7f2      	b.n	8009808 <_scanf_float+0x1a4>
 8009822:	f1bb 0f02 	cmp.w	fp, #2
 8009826:	f47f af55 	bne.w	80096d4 <_scanf_float+0x70>
 800982a:	f04f 0b03 	mov.w	fp, #3
 800982e:	e7da      	b.n	80097e6 <_scanf_float+0x182>
 8009830:	f1bb 0f06 	cmp.w	fp, #6
 8009834:	f47f af4e 	bne.w	80096d4 <_scanf_float+0x70>
 8009838:	f04f 0b07 	mov.w	fp, #7
 800983c:	e7d3      	b.n	80097e6 <_scanf_float+0x182>
 800983e:	6821      	ldr	r1, [r4, #0]
 8009840:	0588      	lsls	r0, r1, #22
 8009842:	f57f af47 	bpl.w	80096d4 <_scanf_float+0x70>
 8009846:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800984a:	6021      	str	r1, [r4, #0]
 800984c:	f8cd 9008 	str.w	r9, [sp, #8]
 8009850:	e7c9      	b.n	80097e6 <_scanf_float+0x182>
 8009852:	6821      	ldr	r1, [r4, #0]
 8009854:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8009858:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800985c:	d006      	beq.n	800986c <_scanf_float+0x208>
 800985e:	0548      	lsls	r0, r1, #21
 8009860:	f57f af38 	bpl.w	80096d4 <_scanf_float+0x70>
 8009864:	f1b9 0f00 	cmp.w	r9, #0
 8009868:	f43f af3b 	beq.w	80096e2 <_scanf_float+0x7e>
 800986c:	0588      	lsls	r0, r1, #22
 800986e:	bf58      	it	pl
 8009870:	9802      	ldrpl	r0, [sp, #8]
 8009872:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009876:	bf58      	it	pl
 8009878:	eba9 0000 	subpl.w	r0, r9, r0
 800987c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8009880:	bf58      	it	pl
 8009882:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8009886:	6021      	str	r1, [r4, #0]
 8009888:	f04f 0900 	mov.w	r9, #0
 800988c:	e7ab      	b.n	80097e6 <_scanf_float+0x182>
 800988e:	2203      	movs	r2, #3
 8009890:	e7a9      	b.n	80097e6 <_scanf_float+0x182>
 8009892:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009896:	9205      	str	r2, [sp, #20]
 8009898:	4631      	mov	r1, r6
 800989a:	4638      	mov	r0, r7
 800989c:	4798      	blx	r3
 800989e:	9a05      	ldr	r2, [sp, #20]
 80098a0:	2800      	cmp	r0, #0
 80098a2:	f43f af04 	beq.w	80096ae <_scanf_float+0x4a>
 80098a6:	e715      	b.n	80096d4 <_scanf_float+0x70>
 80098a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80098b0:	4632      	mov	r2, r6
 80098b2:	4638      	mov	r0, r7
 80098b4:	4798      	blx	r3
 80098b6:	6923      	ldr	r3, [r4, #16]
 80098b8:	3b01      	subs	r3, #1
 80098ba:	6123      	str	r3, [r4, #16]
 80098bc:	e715      	b.n	80096ea <_scanf_float+0x86>
 80098be:	f10b 33ff 	add.w	r3, fp, #4294967295
 80098c2:	2b06      	cmp	r3, #6
 80098c4:	d80a      	bhi.n	80098dc <_scanf_float+0x278>
 80098c6:	f1bb 0f02 	cmp.w	fp, #2
 80098ca:	d968      	bls.n	800999e <_scanf_float+0x33a>
 80098cc:	f1ab 0b03 	sub.w	fp, fp, #3
 80098d0:	fa5f fb8b 	uxtb.w	fp, fp
 80098d4:	eba5 0b0b 	sub.w	fp, r5, fp
 80098d8:	455d      	cmp	r5, fp
 80098da:	d14b      	bne.n	8009974 <_scanf_float+0x310>
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	05da      	lsls	r2, r3, #23
 80098e0:	d51f      	bpl.n	8009922 <_scanf_float+0x2be>
 80098e2:	055b      	lsls	r3, r3, #21
 80098e4:	d468      	bmi.n	80099b8 <_scanf_float+0x354>
 80098e6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80098ea:	6923      	ldr	r3, [r4, #16]
 80098ec:	2965      	cmp	r1, #101	; 0x65
 80098ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80098f2:	f105 3bff 	add.w	fp, r5, #4294967295
 80098f6:	6123      	str	r3, [r4, #16]
 80098f8:	d00d      	beq.n	8009916 <_scanf_float+0x2b2>
 80098fa:	2945      	cmp	r1, #69	; 0x45
 80098fc:	d00b      	beq.n	8009916 <_scanf_float+0x2b2>
 80098fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009902:	4632      	mov	r2, r6
 8009904:	4638      	mov	r0, r7
 8009906:	4798      	blx	r3
 8009908:	6923      	ldr	r3, [r4, #16]
 800990a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800990e:	3b01      	subs	r3, #1
 8009910:	f1a5 0b02 	sub.w	fp, r5, #2
 8009914:	6123      	str	r3, [r4, #16]
 8009916:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800991a:	4632      	mov	r2, r6
 800991c:	4638      	mov	r0, r7
 800991e:	4798      	blx	r3
 8009920:	465d      	mov	r5, fp
 8009922:	6826      	ldr	r6, [r4, #0]
 8009924:	f016 0610 	ands.w	r6, r6, #16
 8009928:	d17a      	bne.n	8009a20 <_scanf_float+0x3bc>
 800992a:	702e      	strb	r6, [r5, #0]
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009936:	d142      	bne.n	80099be <_scanf_float+0x35a>
 8009938:	9b02      	ldr	r3, [sp, #8]
 800993a:	eba9 0303 	sub.w	r3, r9, r3
 800993e:	425a      	negs	r2, r3
 8009940:	2b00      	cmp	r3, #0
 8009942:	d149      	bne.n	80099d8 <_scanf_float+0x374>
 8009944:	2200      	movs	r2, #0
 8009946:	4641      	mov	r1, r8
 8009948:	4638      	mov	r0, r7
 800994a:	f000 fea5 	bl	800a698 <_strtod_r>
 800994e:	6825      	ldr	r5, [r4, #0]
 8009950:	f8da 3000 	ldr.w	r3, [sl]
 8009954:	f015 0f02 	tst.w	r5, #2
 8009958:	f103 0204 	add.w	r2, r3, #4
 800995c:	ec59 8b10 	vmov	r8, r9, d0
 8009960:	f8ca 2000 	str.w	r2, [sl]
 8009964:	d043      	beq.n	80099ee <_scanf_float+0x38a>
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	e9c3 8900 	strd	r8, r9, [r3]
 800996c:	68e3      	ldr	r3, [r4, #12]
 800996e:	3301      	adds	r3, #1
 8009970:	60e3      	str	r3, [r4, #12]
 8009972:	e6be      	b.n	80096f2 <_scanf_float+0x8e>
 8009974:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009978:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800997c:	4632      	mov	r2, r6
 800997e:	4638      	mov	r0, r7
 8009980:	4798      	blx	r3
 8009982:	6923      	ldr	r3, [r4, #16]
 8009984:	3b01      	subs	r3, #1
 8009986:	6123      	str	r3, [r4, #16]
 8009988:	e7a6      	b.n	80098d8 <_scanf_float+0x274>
 800998a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800998e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009992:	4632      	mov	r2, r6
 8009994:	4638      	mov	r0, r7
 8009996:	4798      	blx	r3
 8009998:	6923      	ldr	r3, [r4, #16]
 800999a:	3b01      	subs	r3, #1
 800999c:	6123      	str	r3, [r4, #16]
 800999e:	4545      	cmp	r5, r8
 80099a0:	d8f3      	bhi.n	800998a <_scanf_float+0x326>
 80099a2:	e6a5      	b.n	80096f0 <_scanf_float+0x8c>
 80099a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80099ac:	4632      	mov	r2, r6
 80099ae:	4638      	mov	r0, r7
 80099b0:	4798      	blx	r3
 80099b2:	6923      	ldr	r3, [r4, #16]
 80099b4:	3b01      	subs	r3, #1
 80099b6:	6123      	str	r3, [r4, #16]
 80099b8:	4545      	cmp	r5, r8
 80099ba:	d8f3      	bhi.n	80099a4 <_scanf_float+0x340>
 80099bc:	e698      	b.n	80096f0 <_scanf_float+0x8c>
 80099be:	9b03      	ldr	r3, [sp, #12]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d0bf      	beq.n	8009944 <_scanf_float+0x2e0>
 80099c4:	9904      	ldr	r1, [sp, #16]
 80099c6:	230a      	movs	r3, #10
 80099c8:	4632      	mov	r2, r6
 80099ca:	3101      	adds	r1, #1
 80099cc:	4638      	mov	r0, r7
 80099ce:	f000 feef 	bl	800a7b0 <_strtol_r>
 80099d2:	9b03      	ldr	r3, [sp, #12]
 80099d4:	9d04      	ldr	r5, [sp, #16]
 80099d6:	1ac2      	subs	r2, r0, r3
 80099d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80099dc:	429d      	cmp	r5, r3
 80099de:	bf28      	it	cs
 80099e0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80099e4:	490f      	ldr	r1, [pc, #60]	; (8009a24 <_scanf_float+0x3c0>)
 80099e6:	4628      	mov	r0, r5
 80099e8:	f000 f824 	bl	8009a34 <siprintf>
 80099ec:	e7aa      	b.n	8009944 <_scanf_float+0x2e0>
 80099ee:	f015 0504 	ands.w	r5, r5, #4
 80099f2:	d1b8      	bne.n	8009966 <_scanf_float+0x302>
 80099f4:	681f      	ldr	r7, [r3, #0]
 80099f6:	ee10 2a10 	vmov	r2, s0
 80099fa:	464b      	mov	r3, r9
 80099fc:	ee10 0a10 	vmov	r0, s0
 8009a00:	4649      	mov	r1, r9
 8009a02:	f7f7 f893 	bl	8000b2c <__aeabi_dcmpun>
 8009a06:	b128      	cbz	r0, 8009a14 <_scanf_float+0x3b0>
 8009a08:	4628      	mov	r0, r5
 8009a0a:	f000 f80d 	bl	8009a28 <nanf>
 8009a0e:	ed87 0a00 	vstr	s0, [r7]
 8009a12:	e7ab      	b.n	800996c <_scanf_float+0x308>
 8009a14:	4640      	mov	r0, r8
 8009a16:	4649      	mov	r1, r9
 8009a18:	f7f7 f8e6 	bl	8000be8 <__aeabi_d2f>
 8009a1c:	6038      	str	r0, [r7, #0]
 8009a1e:	e7a5      	b.n	800996c <_scanf_float+0x308>
 8009a20:	2600      	movs	r6, #0
 8009a22:	e666      	b.n	80096f2 <_scanf_float+0x8e>
 8009a24:	0800dd54 	.word	0x0800dd54

08009a28 <nanf>:
 8009a28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009a30 <nanf+0x8>
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	7fc00000 	.word	0x7fc00000

08009a34 <siprintf>:
 8009a34:	b40e      	push	{r1, r2, r3}
 8009a36:	b500      	push	{lr}
 8009a38:	b09c      	sub	sp, #112	; 0x70
 8009a3a:	ab1d      	add	r3, sp, #116	; 0x74
 8009a3c:	9002      	str	r0, [sp, #8]
 8009a3e:	9006      	str	r0, [sp, #24]
 8009a40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a44:	4809      	ldr	r0, [pc, #36]	; (8009a6c <siprintf+0x38>)
 8009a46:	9107      	str	r1, [sp, #28]
 8009a48:	9104      	str	r1, [sp, #16]
 8009a4a:	4909      	ldr	r1, [pc, #36]	; (8009a70 <siprintf+0x3c>)
 8009a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a50:	9105      	str	r1, [sp, #20]
 8009a52:	6800      	ldr	r0, [r0, #0]
 8009a54:	9301      	str	r3, [sp, #4]
 8009a56:	a902      	add	r1, sp, #8
 8009a58:	f002 fd70 	bl	800c53c <_svfiprintf_r>
 8009a5c:	9b02      	ldr	r3, [sp, #8]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	701a      	strb	r2, [r3, #0]
 8009a62:	b01c      	add	sp, #112	; 0x70
 8009a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a68:	b003      	add	sp, #12
 8009a6a:	4770      	bx	lr
 8009a6c:	20000088 	.word	0x20000088
 8009a70:	ffff0208 	.word	0xffff0208

08009a74 <sulp>:
 8009a74:	b570      	push	{r4, r5, r6, lr}
 8009a76:	4604      	mov	r4, r0
 8009a78:	460d      	mov	r5, r1
 8009a7a:	ec45 4b10 	vmov	d0, r4, r5
 8009a7e:	4616      	mov	r6, r2
 8009a80:	f002 fb18 	bl	800c0b4 <__ulp>
 8009a84:	ec51 0b10 	vmov	r0, r1, d0
 8009a88:	b17e      	cbz	r6, 8009aaa <sulp+0x36>
 8009a8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	dd09      	ble.n	8009aaa <sulp+0x36>
 8009a96:	051b      	lsls	r3, r3, #20
 8009a98:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009a9c:	2400      	movs	r4, #0
 8009a9e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009aa2:	4622      	mov	r2, r4
 8009aa4:	462b      	mov	r3, r5
 8009aa6:	f7f6 fda7 	bl	80005f8 <__aeabi_dmul>
 8009aaa:	bd70      	pop	{r4, r5, r6, pc}
 8009aac:	0000      	movs	r0, r0
	...

08009ab0 <_strtod_l>:
 8009ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab4:	461f      	mov	r7, r3
 8009ab6:	b0a1      	sub	sp, #132	; 0x84
 8009ab8:	2300      	movs	r3, #0
 8009aba:	4681      	mov	r9, r0
 8009abc:	4638      	mov	r0, r7
 8009abe:	460e      	mov	r6, r1
 8009ac0:	9217      	str	r2, [sp, #92]	; 0x5c
 8009ac2:	931c      	str	r3, [sp, #112]	; 0x70
 8009ac4:	f001 fff5 	bl	800bab2 <__localeconv_l>
 8009ac8:	4680      	mov	r8, r0
 8009aca:	6800      	ldr	r0, [r0, #0]
 8009acc:	f7f6 fb80 	bl	80001d0 <strlen>
 8009ad0:	f04f 0a00 	mov.w	sl, #0
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	f04f 0b00 	mov.w	fp, #0
 8009ada:	961b      	str	r6, [sp, #108]	; 0x6c
 8009adc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ade:	781a      	ldrb	r2, [r3, #0]
 8009ae0:	2a0d      	cmp	r2, #13
 8009ae2:	d832      	bhi.n	8009b4a <_strtod_l+0x9a>
 8009ae4:	2a09      	cmp	r2, #9
 8009ae6:	d236      	bcs.n	8009b56 <_strtod_l+0xa6>
 8009ae8:	2a00      	cmp	r2, #0
 8009aea:	d03e      	beq.n	8009b6a <_strtod_l+0xba>
 8009aec:	2300      	movs	r3, #0
 8009aee:	930d      	str	r3, [sp, #52]	; 0x34
 8009af0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009af2:	782b      	ldrb	r3, [r5, #0]
 8009af4:	2b30      	cmp	r3, #48	; 0x30
 8009af6:	f040 80ac 	bne.w	8009c52 <_strtod_l+0x1a2>
 8009afa:	786b      	ldrb	r3, [r5, #1]
 8009afc:	2b58      	cmp	r3, #88	; 0x58
 8009afe:	d001      	beq.n	8009b04 <_strtod_l+0x54>
 8009b00:	2b78      	cmp	r3, #120	; 0x78
 8009b02:	d167      	bne.n	8009bd4 <_strtod_l+0x124>
 8009b04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b06:	9301      	str	r3, [sp, #4]
 8009b08:	ab1c      	add	r3, sp, #112	; 0x70
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	9702      	str	r7, [sp, #8]
 8009b0e:	ab1d      	add	r3, sp, #116	; 0x74
 8009b10:	4a88      	ldr	r2, [pc, #544]	; (8009d34 <_strtod_l+0x284>)
 8009b12:	a91b      	add	r1, sp, #108	; 0x6c
 8009b14:	4648      	mov	r0, r9
 8009b16:	f001 fcf2 	bl	800b4fe <__gethex>
 8009b1a:	f010 0407 	ands.w	r4, r0, #7
 8009b1e:	4606      	mov	r6, r0
 8009b20:	d005      	beq.n	8009b2e <_strtod_l+0x7e>
 8009b22:	2c06      	cmp	r4, #6
 8009b24:	d12b      	bne.n	8009b7e <_strtod_l+0xce>
 8009b26:	3501      	adds	r5, #1
 8009b28:	2300      	movs	r3, #0
 8009b2a:	951b      	str	r5, [sp, #108]	; 0x6c
 8009b2c:	930d      	str	r3, [sp, #52]	; 0x34
 8009b2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f040 859a 	bne.w	800a66a <_strtod_l+0xbba>
 8009b36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b38:	b1e3      	cbz	r3, 8009b74 <_strtod_l+0xc4>
 8009b3a:	4652      	mov	r2, sl
 8009b3c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009b40:	ec43 2b10 	vmov	d0, r2, r3
 8009b44:	b021      	add	sp, #132	; 0x84
 8009b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4a:	2a2b      	cmp	r2, #43	; 0x2b
 8009b4c:	d015      	beq.n	8009b7a <_strtod_l+0xca>
 8009b4e:	2a2d      	cmp	r2, #45	; 0x2d
 8009b50:	d004      	beq.n	8009b5c <_strtod_l+0xac>
 8009b52:	2a20      	cmp	r2, #32
 8009b54:	d1ca      	bne.n	8009aec <_strtod_l+0x3c>
 8009b56:	3301      	adds	r3, #1
 8009b58:	931b      	str	r3, [sp, #108]	; 0x6c
 8009b5a:	e7bf      	b.n	8009adc <_strtod_l+0x2c>
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	920d      	str	r2, [sp, #52]	; 0x34
 8009b60:	1c5a      	adds	r2, r3, #1
 8009b62:	921b      	str	r2, [sp, #108]	; 0x6c
 8009b64:	785b      	ldrb	r3, [r3, #1]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1c2      	bne.n	8009af0 <_strtod_l+0x40>
 8009b6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b6c:	961b      	str	r6, [sp, #108]	; 0x6c
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f040 8579 	bne.w	800a666 <_strtod_l+0xbb6>
 8009b74:	4652      	mov	r2, sl
 8009b76:	465b      	mov	r3, fp
 8009b78:	e7e2      	b.n	8009b40 <_strtod_l+0x90>
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	e7ef      	b.n	8009b5e <_strtod_l+0xae>
 8009b7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009b80:	b13a      	cbz	r2, 8009b92 <_strtod_l+0xe2>
 8009b82:	2135      	movs	r1, #53	; 0x35
 8009b84:	a81e      	add	r0, sp, #120	; 0x78
 8009b86:	f002 fb8d 	bl	800c2a4 <__copybits>
 8009b8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b8c:	4648      	mov	r0, r9
 8009b8e:	f001 fffa 	bl	800bb86 <_Bfree>
 8009b92:	3c01      	subs	r4, #1
 8009b94:	2c04      	cmp	r4, #4
 8009b96:	d806      	bhi.n	8009ba6 <_strtod_l+0xf6>
 8009b98:	e8df f004 	tbb	[pc, r4]
 8009b9c:	1714030a 	.word	0x1714030a
 8009ba0:	0a          	.byte	0x0a
 8009ba1:	00          	.byte	0x00
 8009ba2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8009ba6:	0730      	lsls	r0, r6, #28
 8009ba8:	d5c1      	bpl.n	8009b2e <_strtod_l+0x7e>
 8009baa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009bae:	e7be      	b.n	8009b2e <_strtod_l+0x7e>
 8009bb0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8009bb4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009bb6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009bba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009bbe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009bc2:	e7f0      	b.n	8009ba6 <_strtod_l+0xf6>
 8009bc4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009d38 <_strtod_l+0x288>
 8009bc8:	e7ed      	b.n	8009ba6 <_strtod_l+0xf6>
 8009bca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009bce:	f04f 3aff 	mov.w	sl, #4294967295
 8009bd2:	e7e8      	b.n	8009ba6 <_strtod_l+0xf6>
 8009bd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009bd6:	1c5a      	adds	r2, r3, #1
 8009bd8:	921b      	str	r2, [sp, #108]	; 0x6c
 8009bda:	785b      	ldrb	r3, [r3, #1]
 8009bdc:	2b30      	cmp	r3, #48	; 0x30
 8009bde:	d0f9      	beq.n	8009bd4 <_strtod_l+0x124>
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d0a4      	beq.n	8009b2e <_strtod_l+0x7e>
 8009be4:	2301      	movs	r3, #1
 8009be6:	2500      	movs	r5, #0
 8009be8:	9306      	str	r3, [sp, #24]
 8009bea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009bec:	9308      	str	r3, [sp, #32]
 8009bee:	9507      	str	r5, [sp, #28]
 8009bf0:	9505      	str	r5, [sp, #20]
 8009bf2:	220a      	movs	r2, #10
 8009bf4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009bf6:	7807      	ldrb	r7, [r0, #0]
 8009bf8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009bfc:	b2d9      	uxtb	r1, r3
 8009bfe:	2909      	cmp	r1, #9
 8009c00:	d929      	bls.n	8009c56 <_strtod_l+0x1a6>
 8009c02:	4622      	mov	r2, r4
 8009c04:	f8d8 1000 	ldr.w	r1, [r8]
 8009c08:	f002 fda0 	bl	800c74c <strncmp>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d031      	beq.n	8009c74 <_strtod_l+0x1c4>
 8009c10:	2000      	movs	r0, #0
 8009c12:	9c05      	ldr	r4, [sp, #20]
 8009c14:	9004      	str	r0, [sp, #16]
 8009c16:	463b      	mov	r3, r7
 8009c18:	4602      	mov	r2, r0
 8009c1a:	2b65      	cmp	r3, #101	; 0x65
 8009c1c:	d001      	beq.n	8009c22 <_strtod_l+0x172>
 8009c1e:	2b45      	cmp	r3, #69	; 0x45
 8009c20:	d114      	bne.n	8009c4c <_strtod_l+0x19c>
 8009c22:	b924      	cbnz	r4, 8009c2e <_strtod_l+0x17e>
 8009c24:	b910      	cbnz	r0, 8009c2c <_strtod_l+0x17c>
 8009c26:	9b06      	ldr	r3, [sp, #24]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d09e      	beq.n	8009b6a <_strtod_l+0xba>
 8009c2c:	2400      	movs	r4, #0
 8009c2e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009c30:	1c73      	adds	r3, r6, #1
 8009c32:	931b      	str	r3, [sp, #108]	; 0x6c
 8009c34:	7873      	ldrb	r3, [r6, #1]
 8009c36:	2b2b      	cmp	r3, #43	; 0x2b
 8009c38:	d078      	beq.n	8009d2c <_strtod_l+0x27c>
 8009c3a:	2b2d      	cmp	r3, #45	; 0x2d
 8009c3c:	d070      	beq.n	8009d20 <_strtod_l+0x270>
 8009c3e:	f04f 0c00 	mov.w	ip, #0
 8009c42:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009c46:	2f09      	cmp	r7, #9
 8009c48:	d97c      	bls.n	8009d44 <_strtod_l+0x294>
 8009c4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8009c4c:	f04f 0e00 	mov.w	lr, #0
 8009c50:	e09a      	b.n	8009d88 <_strtod_l+0x2d8>
 8009c52:	2300      	movs	r3, #0
 8009c54:	e7c7      	b.n	8009be6 <_strtod_l+0x136>
 8009c56:	9905      	ldr	r1, [sp, #20]
 8009c58:	2908      	cmp	r1, #8
 8009c5a:	bfdd      	ittte	le
 8009c5c:	9907      	ldrle	r1, [sp, #28]
 8009c5e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c62:	9307      	strle	r3, [sp, #28]
 8009c64:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009c68:	9b05      	ldr	r3, [sp, #20]
 8009c6a:	3001      	adds	r0, #1
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	9305      	str	r3, [sp, #20]
 8009c70:	901b      	str	r0, [sp, #108]	; 0x6c
 8009c72:	e7bf      	b.n	8009bf4 <_strtod_l+0x144>
 8009c74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c76:	191a      	adds	r2, r3, r4
 8009c78:	921b      	str	r2, [sp, #108]	; 0x6c
 8009c7a:	9a05      	ldr	r2, [sp, #20]
 8009c7c:	5d1b      	ldrb	r3, [r3, r4]
 8009c7e:	2a00      	cmp	r2, #0
 8009c80:	d037      	beq.n	8009cf2 <_strtod_l+0x242>
 8009c82:	9c05      	ldr	r4, [sp, #20]
 8009c84:	4602      	mov	r2, r0
 8009c86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009c8a:	2909      	cmp	r1, #9
 8009c8c:	d913      	bls.n	8009cb6 <_strtod_l+0x206>
 8009c8e:	2101      	movs	r1, #1
 8009c90:	9104      	str	r1, [sp, #16]
 8009c92:	e7c2      	b.n	8009c1a <_strtod_l+0x16a>
 8009c94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c96:	1c5a      	adds	r2, r3, #1
 8009c98:	921b      	str	r2, [sp, #108]	; 0x6c
 8009c9a:	785b      	ldrb	r3, [r3, #1]
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	2b30      	cmp	r3, #48	; 0x30
 8009ca0:	d0f8      	beq.n	8009c94 <_strtod_l+0x1e4>
 8009ca2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009ca6:	2a08      	cmp	r2, #8
 8009ca8:	f200 84e4 	bhi.w	800a674 <_strtod_l+0xbc4>
 8009cac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009cae:	9208      	str	r2, [sp, #32]
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009cba:	f100 0101 	add.w	r1, r0, #1
 8009cbe:	d012      	beq.n	8009ce6 <_strtod_l+0x236>
 8009cc0:	440a      	add	r2, r1
 8009cc2:	eb00 0c04 	add.w	ip, r0, r4
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	270a      	movs	r7, #10
 8009cca:	458c      	cmp	ip, r1
 8009ccc:	d113      	bne.n	8009cf6 <_strtod_l+0x246>
 8009cce:	1821      	adds	r1, r4, r0
 8009cd0:	2908      	cmp	r1, #8
 8009cd2:	f104 0401 	add.w	r4, r4, #1
 8009cd6:	4404      	add	r4, r0
 8009cd8:	dc19      	bgt.n	8009d0e <_strtod_l+0x25e>
 8009cda:	9b07      	ldr	r3, [sp, #28]
 8009cdc:	210a      	movs	r1, #10
 8009cde:	fb01 e303 	mla	r3, r1, r3, lr
 8009ce2:	9307      	str	r3, [sp, #28]
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ce8:	1c58      	adds	r0, r3, #1
 8009cea:	901b      	str	r0, [sp, #108]	; 0x6c
 8009cec:	785b      	ldrb	r3, [r3, #1]
 8009cee:	4608      	mov	r0, r1
 8009cf0:	e7c9      	b.n	8009c86 <_strtod_l+0x1d6>
 8009cf2:	9805      	ldr	r0, [sp, #20]
 8009cf4:	e7d3      	b.n	8009c9e <_strtod_l+0x1ee>
 8009cf6:	2908      	cmp	r1, #8
 8009cf8:	f101 0101 	add.w	r1, r1, #1
 8009cfc:	dc03      	bgt.n	8009d06 <_strtod_l+0x256>
 8009cfe:	9b07      	ldr	r3, [sp, #28]
 8009d00:	437b      	muls	r3, r7
 8009d02:	9307      	str	r3, [sp, #28]
 8009d04:	e7e1      	b.n	8009cca <_strtod_l+0x21a>
 8009d06:	2910      	cmp	r1, #16
 8009d08:	bfd8      	it	le
 8009d0a:	437d      	mulle	r5, r7
 8009d0c:	e7dd      	b.n	8009cca <_strtod_l+0x21a>
 8009d0e:	2c10      	cmp	r4, #16
 8009d10:	bfdc      	itt	le
 8009d12:	210a      	movle	r1, #10
 8009d14:	fb01 e505 	mlale	r5, r1, r5, lr
 8009d18:	e7e4      	b.n	8009ce4 <_strtod_l+0x234>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	9304      	str	r3, [sp, #16]
 8009d1e:	e781      	b.n	8009c24 <_strtod_l+0x174>
 8009d20:	f04f 0c01 	mov.w	ip, #1
 8009d24:	1cb3      	adds	r3, r6, #2
 8009d26:	931b      	str	r3, [sp, #108]	; 0x6c
 8009d28:	78b3      	ldrb	r3, [r6, #2]
 8009d2a:	e78a      	b.n	8009c42 <_strtod_l+0x192>
 8009d2c:	f04f 0c00 	mov.w	ip, #0
 8009d30:	e7f8      	b.n	8009d24 <_strtod_l+0x274>
 8009d32:	bf00      	nop
 8009d34:	0800dd5c 	.word	0x0800dd5c
 8009d38:	7ff00000 	.word	0x7ff00000
 8009d3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d3e:	1c5f      	adds	r7, r3, #1
 8009d40:	971b      	str	r7, [sp, #108]	; 0x6c
 8009d42:	785b      	ldrb	r3, [r3, #1]
 8009d44:	2b30      	cmp	r3, #48	; 0x30
 8009d46:	d0f9      	beq.n	8009d3c <_strtod_l+0x28c>
 8009d48:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009d4c:	2f08      	cmp	r7, #8
 8009d4e:	f63f af7d 	bhi.w	8009c4c <_strtod_l+0x19c>
 8009d52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009d56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d58:	930a      	str	r3, [sp, #40]	; 0x28
 8009d5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d5c:	1c5f      	adds	r7, r3, #1
 8009d5e:	971b      	str	r7, [sp, #108]	; 0x6c
 8009d60:	785b      	ldrb	r3, [r3, #1]
 8009d62:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8009d66:	f1b8 0f09 	cmp.w	r8, #9
 8009d6a:	d937      	bls.n	8009ddc <_strtod_l+0x32c>
 8009d6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d6e:	1a7f      	subs	r7, r7, r1
 8009d70:	2f08      	cmp	r7, #8
 8009d72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009d76:	dc37      	bgt.n	8009de8 <_strtod_l+0x338>
 8009d78:	45be      	cmp	lr, r7
 8009d7a:	bfa8      	it	ge
 8009d7c:	46be      	movge	lr, r7
 8009d7e:	f1bc 0f00 	cmp.w	ip, #0
 8009d82:	d001      	beq.n	8009d88 <_strtod_l+0x2d8>
 8009d84:	f1ce 0e00 	rsb	lr, lr, #0
 8009d88:	2c00      	cmp	r4, #0
 8009d8a:	d151      	bne.n	8009e30 <_strtod_l+0x380>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	f47f aece 	bne.w	8009b2e <_strtod_l+0x7e>
 8009d92:	9a06      	ldr	r2, [sp, #24]
 8009d94:	2a00      	cmp	r2, #0
 8009d96:	f47f aeca 	bne.w	8009b2e <_strtod_l+0x7e>
 8009d9a:	9a04      	ldr	r2, [sp, #16]
 8009d9c:	2a00      	cmp	r2, #0
 8009d9e:	f47f aee4 	bne.w	8009b6a <_strtod_l+0xba>
 8009da2:	2b4e      	cmp	r3, #78	; 0x4e
 8009da4:	d027      	beq.n	8009df6 <_strtod_l+0x346>
 8009da6:	dc21      	bgt.n	8009dec <_strtod_l+0x33c>
 8009da8:	2b49      	cmp	r3, #73	; 0x49
 8009daa:	f47f aede 	bne.w	8009b6a <_strtod_l+0xba>
 8009dae:	49a0      	ldr	r1, [pc, #640]	; (800a030 <_strtod_l+0x580>)
 8009db0:	a81b      	add	r0, sp, #108	; 0x6c
 8009db2:	f001 fdd7 	bl	800b964 <__match>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	f43f aed7 	beq.w	8009b6a <_strtod_l+0xba>
 8009dbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dbe:	499d      	ldr	r1, [pc, #628]	; (800a034 <_strtod_l+0x584>)
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	a81b      	add	r0, sp, #108	; 0x6c
 8009dc4:	931b      	str	r3, [sp, #108]	; 0x6c
 8009dc6:	f001 fdcd 	bl	800b964 <__match>
 8009dca:	b910      	cbnz	r0, 8009dd2 <_strtod_l+0x322>
 8009dcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dce:	3301      	adds	r3, #1
 8009dd0:	931b      	str	r3, [sp, #108]	; 0x6c
 8009dd2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800a048 <_strtod_l+0x598>
 8009dd6:	f04f 0a00 	mov.w	sl, #0
 8009dda:	e6a8      	b.n	8009b2e <_strtod_l+0x7e>
 8009ddc:	210a      	movs	r1, #10
 8009dde:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009de2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009de6:	e7b8      	b.n	8009d5a <_strtod_l+0x2aa>
 8009de8:	46be      	mov	lr, r7
 8009dea:	e7c8      	b.n	8009d7e <_strtod_l+0x2ce>
 8009dec:	2b69      	cmp	r3, #105	; 0x69
 8009dee:	d0de      	beq.n	8009dae <_strtod_l+0x2fe>
 8009df0:	2b6e      	cmp	r3, #110	; 0x6e
 8009df2:	f47f aeba 	bne.w	8009b6a <_strtod_l+0xba>
 8009df6:	4990      	ldr	r1, [pc, #576]	; (800a038 <_strtod_l+0x588>)
 8009df8:	a81b      	add	r0, sp, #108	; 0x6c
 8009dfa:	f001 fdb3 	bl	800b964 <__match>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	f43f aeb3 	beq.w	8009b6a <_strtod_l+0xba>
 8009e04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	2b28      	cmp	r3, #40	; 0x28
 8009e0a:	d10e      	bne.n	8009e2a <_strtod_l+0x37a>
 8009e0c:	aa1e      	add	r2, sp, #120	; 0x78
 8009e0e:	498b      	ldr	r1, [pc, #556]	; (800a03c <_strtod_l+0x58c>)
 8009e10:	a81b      	add	r0, sp, #108	; 0x6c
 8009e12:	f001 fdbb 	bl	800b98c <__hexnan>
 8009e16:	2805      	cmp	r0, #5
 8009e18:	d107      	bne.n	8009e2a <_strtod_l+0x37a>
 8009e1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e1c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009e20:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009e24:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009e28:	e681      	b.n	8009b2e <_strtod_l+0x7e>
 8009e2a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800a050 <_strtod_l+0x5a0>
 8009e2e:	e7d2      	b.n	8009dd6 <_strtod_l+0x326>
 8009e30:	ebae 0302 	sub.w	r3, lr, r2
 8009e34:	9306      	str	r3, [sp, #24]
 8009e36:	9b05      	ldr	r3, [sp, #20]
 8009e38:	9807      	ldr	r0, [sp, #28]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	bf08      	it	eq
 8009e3e:	4623      	moveq	r3, r4
 8009e40:	2c10      	cmp	r4, #16
 8009e42:	9305      	str	r3, [sp, #20]
 8009e44:	46a0      	mov	r8, r4
 8009e46:	bfa8      	it	ge
 8009e48:	f04f 0810 	movge.w	r8, #16
 8009e4c:	f7f6 fb5a 	bl	8000504 <__aeabi_ui2d>
 8009e50:	2c09      	cmp	r4, #9
 8009e52:	4682      	mov	sl, r0
 8009e54:	468b      	mov	fp, r1
 8009e56:	dc13      	bgt.n	8009e80 <_strtod_l+0x3d0>
 8009e58:	9b06      	ldr	r3, [sp, #24]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f43f ae67 	beq.w	8009b2e <_strtod_l+0x7e>
 8009e60:	9b06      	ldr	r3, [sp, #24]
 8009e62:	dd7a      	ble.n	8009f5a <_strtod_l+0x4aa>
 8009e64:	2b16      	cmp	r3, #22
 8009e66:	dc61      	bgt.n	8009f2c <_strtod_l+0x47c>
 8009e68:	4a75      	ldr	r2, [pc, #468]	; (800a040 <_strtod_l+0x590>)
 8009e6a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009e6e:	e9de 0100 	ldrd	r0, r1, [lr]
 8009e72:	4652      	mov	r2, sl
 8009e74:	465b      	mov	r3, fp
 8009e76:	f7f6 fbbf 	bl	80005f8 <__aeabi_dmul>
 8009e7a:	4682      	mov	sl, r0
 8009e7c:	468b      	mov	fp, r1
 8009e7e:	e656      	b.n	8009b2e <_strtod_l+0x7e>
 8009e80:	4b6f      	ldr	r3, [pc, #444]	; (800a040 <_strtod_l+0x590>)
 8009e82:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009e86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009e8a:	f7f6 fbb5 	bl	80005f8 <__aeabi_dmul>
 8009e8e:	4606      	mov	r6, r0
 8009e90:	4628      	mov	r0, r5
 8009e92:	460f      	mov	r7, r1
 8009e94:	f7f6 fb36 	bl	8000504 <__aeabi_ui2d>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	4639      	mov	r1, r7
 8009ea0:	f7f6 f9f4 	bl	800028c <__adddf3>
 8009ea4:	2c0f      	cmp	r4, #15
 8009ea6:	4682      	mov	sl, r0
 8009ea8:	468b      	mov	fp, r1
 8009eaa:	ddd5      	ble.n	8009e58 <_strtod_l+0x3a8>
 8009eac:	9b06      	ldr	r3, [sp, #24]
 8009eae:	eba4 0808 	sub.w	r8, r4, r8
 8009eb2:	4498      	add	r8, r3
 8009eb4:	f1b8 0f00 	cmp.w	r8, #0
 8009eb8:	f340 8096 	ble.w	8009fe8 <_strtod_l+0x538>
 8009ebc:	f018 030f 	ands.w	r3, r8, #15
 8009ec0:	d00a      	beq.n	8009ed8 <_strtod_l+0x428>
 8009ec2:	495f      	ldr	r1, [pc, #380]	; (800a040 <_strtod_l+0x590>)
 8009ec4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ec8:	4652      	mov	r2, sl
 8009eca:	465b      	mov	r3, fp
 8009ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ed0:	f7f6 fb92 	bl	80005f8 <__aeabi_dmul>
 8009ed4:	4682      	mov	sl, r0
 8009ed6:	468b      	mov	fp, r1
 8009ed8:	f038 080f 	bics.w	r8, r8, #15
 8009edc:	d073      	beq.n	8009fc6 <_strtod_l+0x516>
 8009ede:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009ee2:	dd47      	ble.n	8009f74 <_strtod_l+0x4c4>
 8009ee4:	2400      	movs	r4, #0
 8009ee6:	46a0      	mov	r8, r4
 8009ee8:	9407      	str	r4, [sp, #28]
 8009eea:	9405      	str	r4, [sp, #20]
 8009eec:	2322      	movs	r3, #34	; 0x22
 8009eee:	f8df b158 	ldr.w	fp, [pc, #344]	; 800a048 <_strtod_l+0x598>
 8009ef2:	f8c9 3000 	str.w	r3, [r9]
 8009ef6:	f04f 0a00 	mov.w	sl, #0
 8009efa:	9b07      	ldr	r3, [sp, #28]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f43f ae16 	beq.w	8009b2e <_strtod_l+0x7e>
 8009f02:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009f04:	4648      	mov	r0, r9
 8009f06:	f001 fe3e 	bl	800bb86 <_Bfree>
 8009f0a:	9905      	ldr	r1, [sp, #20]
 8009f0c:	4648      	mov	r0, r9
 8009f0e:	f001 fe3a 	bl	800bb86 <_Bfree>
 8009f12:	4641      	mov	r1, r8
 8009f14:	4648      	mov	r0, r9
 8009f16:	f001 fe36 	bl	800bb86 <_Bfree>
 8009f1a:	9907      	ldr	r1, [sp, #28]
 8009f1c:	4648      	mov	r0, r9
 8009f1e:	f001 fe32 	bl	800bb86 <_Bfree>
 8009f22:	4621      	mov	r1, r4
 8009f24:	4648      	mov	r0, r9
 8009f26:	f001 fe2e 	bl	800bb86 <_Bfree>
 8009f2a:	e600      	b.n	8009b2e <_strtod_l+0x7e>
 8009f2c:	9a06      	ldr	r2, [sp, #24]
 8009f2e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009f32:	4293      	cmp	r3, r2
 8009f34:	dbba      	blt.n	8009eac <_strtod_l+0x3fc>
 8009f36:	4d42      	ldr	r5, [pc, #264]	; (800a040 <_strtod_l+0x590>)
 8009f38:	f1c4 040f 	rsb	r4, r4, #15
 8009f3c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009f40:	4652      	mov	r2, sl
 8009f42:	465b      	mov	r3, fp
 8009f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f48:	f7f6 fb56 	bl	80005f8 <__aeabi_dmul>
 8009f4c:	9b06      	ldr	r3, [sp, #24]
 8009f4e:	1b1c      	subs	r4, r3, r4
 8009f50:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009f54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f58:	e78d      	b.n	8009e76 <_strtod_l+0x3c6>
 8009f5a:	f113 0f16 	cmn.w	r3, #22
 8009f5e:	dba5      	blt.n	8009eac <_strtod_l+0x3fc>
 8009f60:	4a37      	ldr	r2, [pc, #220]	; (800a040 <_strtod_l+0x590>)
 8009f62:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009f66:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009f6a:	4650      	mov	r0, sl
 8009f6c:	4659      	mov	r1, fp
 8009f6e:	f7f6 fc6d 	bl	800084c <__aeabi_ddiv>
 8009f72:	e782      	b.n	8009e7a <_strtod_l+0x3ca>
 8009f74:	2300      	movs	r3, #0
 8009f76:	4e33      	ldr	r6, [pc, #204]	; (800a044 <_strtod_l+0x594>)
 8009f78:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009f7c:	4650      	mov	r0, sl
 8009f7e:	4659      	mov	r1, fp
 8009f80:	461d      	mov	r5, r3
 8009f82:	f1b8 0f01 	cmp.w	r8, #1
 8009f86:	dc21      	bgt.n	8009fcc <_strtod_l+0x51c>
 8009f88:	b10b      	cbz	r3, 8009f8e <_strtod_l+0x4de>
 8009f8a:	4682      	mov	sl, r0
 8009f8c:	468b      	mov	fp, r1
 8009f8e:	4b2d      	ldr	r3, [pc, #180]	; (800a044 <_strtod_l+0x594>)
 8009f90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009f94:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009f98:	4652      	mov	r2, sl
 8009f9a:	465b      	mov	r3, fp
 8009f9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009fa0:	f7f6 fb2a 	bl	80005f8 <__aeabi_dmul>
 8009fa4:	4b28      	ldr	r3, [pc, #160]	; (800a048 <_strtod_l+0x598>)
 8009fa6:	460a      	mov	r2, r1
 8009fa8:	400b      	ands	r3, r1
 8009faa:	4928      	ldr	r1, [pc, #160]	; (800a04c <_strtod_l+0x59c>)
 8009fac:	428b      	cmp	r3, r1
 8009fae:	4682      	mov	sl, r0
 8009fb0:	d898      	bhi.n	8009ee4 <_strtod_l+0x434>
 8009fb2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009fb6:	428b      	cmp	r3, r1
 8009fb8:	bf86      	itte	hi
 8009fba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a054 <_strtod_l+0x5a4>
 8009fbe:	f04f 3aff 	movhi.w	sl, #4294967295
 8009fc2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	9304      	str	r3, [sp, #16]
 8009fca:	e077      	b.n	800a0bc <_strtod_l+0x60c>
 8009fcc:	f018 0f01 	tst.w	r8, #1
 8009fd0:	d006      	beq.n	8009fe0 <_strtod_l+0x530>
 8009fd2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8009fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fda:	f7f6 fb0d 	bl	80005f8 <__aeabi_dmul>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	3501      	adds	r5, #1
 8009fe2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009fe6:	e7cc      	b.n	8009f82 <_strtod_l+0x4d2>
 8009fe8:	d0ed      	beq.n	8009fc6 <_strtod_l+0x516>
 8009fea:	f1c8 0800 	rsb	r8, r8, #0
 8009fee:	f018 020f 	ands.w	r2, r8, #15
 8009ff2:	d00a      	beq.n	800a00a <_strtod_l+0x55a>
 8009ff4:	4b12      	ldr	r3, [pc, #72]	; (800a040 <_strtod_l+0x590>)
 8009ff6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ffa:	4650      	mov	r0, sl
 8009ffc:	4659      	mov	r1, fp
 8009ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a002:	f7f6 fc23 	bl	800084c <__aeabi_ddiv>
 800a006:	4682      	mov	sl, r0
 800a008:	468b      	mov	fp, r1
 800a00a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a00e:	d0da      	beq.n	8009fc6 <_strtod_l+0x516>
 800a010:	f1b8 0f1f 	cmp.w	r8, #31
 800a014:	dd20      	ble.n	800a058 <_strtod_l+0x5a8>
 800a016:	2400      	movs	r4, #0
 800a018:	46a0      	mov	r8, r4
 800a01a:	9407      	str	r4, [sp, #28]
 800a01c:	9405      	str	r4, [sp, #20]
 800a01e:	2322      	movs	r3, #34	; 0x22
 800a020:	f04f 0a00 	mov.w	sl, #0
 800a024:	f04f 0b00 	mov.w	fp, #0
 800a028:	f8c9 3000 	str.w	r3, [r9]
 800a02c:	e765      	b.n	8009efa <_strtod_l+0x44a>
 800a02e:	bf00      	nop
 800a030:	0800dd25 	.word	0x0800dd25
 800a034:	0800ddb3 	.word	0x0800ddb3
 800a038:	0800dd2d 	.word	0x0800dd2d
 800a03c:	0800dd70 	.word	0x0800dd70
 800a040:	0800ddf0 	.word	0x0800ddf0
 800a044:	0800ddc8 	.word	0x0800ddc8
 800a048:	7ff00000 	.word	0x7ff00000
 800a04c:	7ca00000 	.word	0x7ca00000
 800a050:	fff80000 	.word	0xfff80000
 800a054:	7fefffff 	.word	0x7fefffff
 800a058:	f018 0310 	ands.w	r3, r8, #16
 800a05c:	bf18      	it	ne
 800a05e:	236a      	movne	r3, #106	; 0x6a
 800a060:	4da0      	ldr	r5, [pc, #640]	; (800a2e4 <_strtod_l+0x834>)
 800a062:	9304      	str	r3, [sp, #16]
 800a064:	4650      	mov	r0, sl
 800a066:	4659      	mov	r1, fp
 800a068:	2300      	movs	r3, #0
 800a06a:	f1b8 0f00 	cmp.w	r8, #0
 800a06e:	f300 810a 	bgt.w	800a286 <_strtod_l+0x7d6>
 800a072:	b10b      	cbz	r3, 800a078 <_strtod_l+0x5c8>
 800a074:	4682      	mov	sl, r0
 800a076:	468b      	mov	fp, r1
 800a078:	9b04      	ldr	r3, [sp, #16]
 800a07a:	b1bb      	cbz	r3, 800a0ac <_strtod_l+0x5fc>
 800a07c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a080:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a084:	2b00      	cmp	r3, #0
 800a086:	4659      	mov	r1, fp
 800a088:	dd10      	ble.n	800a0ac <_strtod_l+0x5fc>
 800a08a:	2b1f      	cmp	r3, #31
 800a08c:	f340 8107 	ble.w	800a29e <_strtod_l+0x7ee>
 800a090:	2b34      	cmp	r3, #52	; 0x34
 800a092:	bfde      	ittt	le
 800a094:	3b20      	suble	r3, #32
 800a096:	f04f 32ff 	movle.w	r2, #4294967295
 800a09a:	fa02 f303 	lslle.w	r3, r2, r3
 800a09e:	f04f 0a00 	mov.w	sl, #0
 800a0a2:	bfcc      	ite	gt
 800a0a4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a0a8:	ea03 0b01 	andle.w	fp, r3, r1
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	4650      	mov	r0, sl
 800a0b2:	4659      	mov	r1, fp
 800a0b4:	f7f6 fd08 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d1ac      	bne.n	800a016 <_strtod_l+0x566>
 800a0bc:	9b07      	ldr	r3, [sp, #28]
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	9a05      	ldr	r2, [sp, #20]
 800a0c2:	9908      	ldr	r1, [sp, #32]
 800a0c4:	4623      	mov	r3, r4
 800a0c6:	4648      	mov	r0, r9
 800a0c8:	f001 fdaf 	bl	800bc2a <__s2b>
 800a0cc:	9007      	str	r0, [sp, #28]
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	f43f af08 	beq.w	8009ee4 <_strtod_l+0x434>
 800a0d4:	9a06      	ldr	r2, [sp, #24]
 800a0d6:	9b06      	ldr	r3, [sp, #24]
 800a0d8:	2a00      	cmp	r2, #0
 800a0da:	f1c3 0300 	rsb	r3, r3, #0
 800a0de:	bfa8      	it	ge
 800a0e0:	2300      	movge	r3, #0
 800a0e2:	930e      	str	r3, [sp, #56]	; 0x38
 800a0e4:	2400      	movs	r4, #0
 800a0e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a0ea:	9316      	str	r3, [sp, #88]	; 0x58
 800a0ec:	46a0      	mov	r8, r4
 800a0ee:	9b07      	ldr	r3, [sp, #28]
 800a0f0:	4648      	mov	r0, r9
 800a0f2:	6859      	ldr	r1, [r3, #4]
 800a0f4:	f001 fd13 	bl	800bb1e <_Balloc>
 800a0f8:	9005      	str	r0, [sp, #20]
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	f43f aef6 	beq.w	8009eec <_strtod_l+0x43c>
 800a100:	9b07      	ldr	r3, [sp, #28]
 800a102:	691a      	ldr	r2, [r3, #16]
 800a104:	3202      	adds	r2, #2
 800a106:	f103 010c 	add.w	r1, r3, #12
 800a10a:	0092      	lsls	r2, r2, #2
 800a10c:	300c      	adds	r0, #12
 800a10e:	f001 fcfb 	bl	800bb08 <memcpy>
 800a112:	aa1e      	add	r2, sp, #120	; 0x78
 800a114:	a91d      	add	r1, sp, #116	; 0x74
 800a116:	ec4b ab10 	vmov	d0, sl, fp
 800a11a:	4648      	mov	r0, r9
 800a11c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a120:	f002 f83e 	bl	800c1a0 <__d2b>
 800a124:	901c      	str	r0, [sp, #112]	; 0x70
 800a126:	2800      	cmp	r0, #0
 800a128:	f43f aee0 	beq.w	8009eec <_strtod_l+0x43c>
 800a12c:	2101      	movs	r1, #1
 800a12e:	4648      	mov	r0, r9
 800a130:	f001 fe07 	bl	800bd42 <__i2b>
 800a134:	4680      	mov	r8, r0
 800a136:	2800      	cmp	r0, #0
 800a138:	f43f aed8 	beq.w	8009eec <_strtod_l+0x43c>
 800a13c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a13e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a140:	2e00      	cmp	r6, #0
 800a142:	bfab      	itete	ge
 800a144:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a146:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a148:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a14a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800a14c:	bfac      	ite	ge
 800a14e:	18f7      	addge	r7, r6, r3
 800a150:	1b9d      	sublt	r5, r3, r6
 800a152:	9b04      	ldr	r3, [sp, #16]
 800a154:	1af6      	subs	r6, r6, r3
 800a156:	4416      	add	r6, r2
 800a158:	4b63      	ldr	r3, [pc, #396]	; (800a2e8 <_strtod_l+0x838>)
 800a15a:	3e01      	subs	r6, #1
 800a15c:	429e      	cmp	r6, r3
 800a15e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a162:	f280 80af 	bge.w	800a2c4 <_strtod_l+0x814>
 800a166:	1b9b      	subs	r3, r3, r6
 800a168:	2b1f      	cmp	r3, #31
 800a16a:	eba2 0203 	sub.w	r2, r2, r3
 800a16e:	f04f 0101 	mov.w	r1, #1
 800a172:	f300 809b 	bgt.w	800a2ac <_strtod_l+0x7fc>
 800a176:	fa01 f303 	lsl.w	r3, r1, r3
 800a17a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a17c:	2300      	movs	r3, #0
 800a17e:	930a      	str	r3, [sp, #40]	; 0x28
 800a180:	18be      	adds	r6, r7, r2
 800a182:	9b04      	ldr	r3, [sp, #16]
 800a184:	42b7      	cmp	r7, r6
 800a186:	4415      	add	r5, r2
 800a188:	441d      	add	r5, r3
 800a18a:	463b      	mov	r3, r7
 800a18c:	bfa8      	it	ge
 800a18e:	4633      	movge	r3, r6
 800a190:	42ab      	cmp	r3, r5
 800a192:	bfa8      	it	ge
 800a194:	462b      	movge	r3, r5
 800a196:	2b00      	cmp	r3, #0
 800a198:	bfc2      	ittt	gt
 800a19a:	1af6      	subgt	r6, r6, r3
 800a19c:	1aed      	subgt	r5, r5, r3
 800a19e:	1aff      	subgt	r7, r7, r3
 800a1a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1a2:	b1bb      	cbz	r3, 800a1d4 <_strtod_l+0x724>
 800a1a4:	4641      	mov	r1, r8
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	4648      	mov	r0, r9
 800a1aa:	f001 fe69 	bl	800be80 <__pow5mult>
 800a1ae:	4680      	mov	r8, r0
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	f43f ae9b 	beq.w	8009eec <_strtod_l+0x43c>
 800a1b6:	4601      	mov	r1, r0
 800a1b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a1ba:	4648      	mov	r0, r9
 800a1bc:	f001 fdca 	bl	800bd54 <__multiply>
 800a1c0:	900c      	str	r0, [sp, #48]	; 0x30
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	f43f ae92 	beq.w	8009eec <_strtod_l+0x43c>
 800a1c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a1ca:	4648      	mov	r0, r9
 800a1cc:	f001 fcdb 	bl	800bb86 <_Bfree>
 800a1d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1d2:	931c      	str	r3, [sp, #112]	; 0x70
 800a1d4:	2e00      	cmp	r6, #0
 800a1d6:	dc7a      	bgt.n	800a2ce <_strtod_l+0x81e>
 800a1d8:	9b06      	ldr	r3, [sp, #24]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	dd08      	ble.n	800a1f0 <_strtod_l+0x740>
 800a1de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a1e0:	9905      	ldr	r1, [sp, #20]
 800a1e2:	4648      	mov	r0, r9
 800a1e4:	f001 fe4c 	bl	800be80 <__pow5mult>
 800a1e8:	9005      	str	r0, [sp, #20]
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	f43f ae7e 	beq.w	8009eec <_strtod_l+0x43c>
 800a1f0:	2d00      	cmp	r5, #0
 800a1f2:	dd08      	ble.n	800a206 <_strtod_l+0x756>
 800a1f4:	462a      	mov	r2, r5
 800a1f6:	9905      	ldr	r1, [sp, #20]
 800a1f8:	4648      	mov	r0, r9
 800a1fa:	f001 fe8f 	bl	800bf1c <__lshift>
 800a1fe:	9005      	str	r0, [sp, #20]
 800a200:	2800      	cmp	r0, #0
 800a202:	f43f ae73 	beq.w	8009eec <_strtod_l+0x43c>
 800a206:	2f00      	cmp	r7, #0
 800a208:	dd08      	ble.n	800a21c <_strtod_l+0x76c>
 800a20a:	4641      	mov	r1, r8
 800a20c:	463a      	mov	r2, r7
 800a20e:	4648      	mov	r0, r9
 800a210:	f001 fe84 	bl	800bf1c <__lshift>
 800a214:	4680      	mov	r8, r0
 800a216:	2800      	cmp	r0, #0
 800a218:	f43f ae68 	beq.w	8009eec <_strtod_l+0x43c>
 800a21c:	9a05      	ldr	r2, [sp, #20]
 800a21e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a220:	4648      	mov	r0, r9
 800a222:	f001 fee9 	bl	800bff8 <__mdiff>
 800a226:	4604      	mov	r4, r0
 800a228:	2800      	cmp	r0, #0
 800a22a:	f43f ae5f 	beq.w	8009eec <_strtod_l+0x43c>
 800a22e:	68c3      	ldr	r3, [r0, #12]
 800a230:	930c      	str	r3, [sp, #48]	; 0x30
 800a232:	2300      	movs	r3, #0
 800a234:	60c3      	str	r3, [r0, #12]
 800a236:	4641      	mov	r1, r8
 800a238:	f001 fec4 	bl	800bfc4 <__mcmp>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	da55      	bge.n	800a2ec <_strtod_l+0x83c>
 800a240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a242:	b9e3      	cbnz	r3, 800a27e <_strtod_l+0x7ce>
 800a244:	f1ba 0f00 	cmp.w	sl, #0
 800a248:	d119      	bne.n	800a27e <_strtod_l+0x7ce>
 800a24a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a24e:	b9b3      	cbnz	r3, 800a27e <_strtod_l+0x7ce>
 800a250:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a254:	0d1b      	lsrs	r3, r3, #20
 800a256:	051b      	lsls	r3, r3, #20
 800a258:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a25c:	d90f      	bls.n	800a27e <_strtod_l+0x7ce>
 800a25e:	6963      	ldr	r3, [r4, #20]
 800a260:	b913      	cbnz	r3, 800a268 <_strtod_l+0x7b8>
 800a262:	6923      	ldr	r3, [r4, #16]
 800a264:	2b01      	cmp	r3, #1
 800a266:	dd0a      	ble.n	800a27e <_strtod_l+0x7ce>
 800a268:	4621      	mov	r1, r4
 800a26a:	2201      	movs	r2, #1
 800a26c:	4648      	mov	r0, r9
 800a26e:	f001 fe55 	bl	800bf1c <__lshift>
 800a272:	4641      	mov	r1, r8
 800a274:	4604      	mov	r4, r0
 800a276:	f001 fea5 	bl	800bfc4 <__mcmp>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	dc67      	bgt.n	800a34e <_strtod_l+0x89e>
 800a27e:	9b04      	ldr	r3, [sp, #16]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d171      	bne.n	800a368 <_strtod_l+0x8b8>
 800a284:	e63d      	b.n	8009f02 <_strtod_l+0x452>
 800a286:	f018 0f01 	tst.w	r8, #1
 800a28a:	d004      	beq.n	800a296 <_strtod_l+0x7e6>
 800a28c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a290:	f7f6 f9b2 	bl	80005f8 <__aeabi_dmul>
 800a294:	2301      	movs	r3, #1
 800a296:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a29a:	3508      	adds	r5, #8
 800a29c:	e6e5      	b.n	800a06a <_strtod_l+0x5ba>
 800a29e:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a6:	ea03 0a0a 	and.w	sl, r3, sl
 800a2aa:	e6ff      	b.n	800a0ac <_strtod_l+0x5fc>
 800a2ac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a2b0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a2b4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a2b8:	36e2      	adds	r6, #226	; 0xe2
 800a2ba:	fa01 f306 	lsl.w	r3, r1, r6
 800a2be:	930a      	str	r3, [sp, #40]	; 0x28
 800a2c0:	910f      	str	r1, [sp, #60]	; 0x3c
 800a2c2:	e75d      	b.n	800a180 <_strtod_l+0x6d0>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2cc:	e758      	b.n	800a180 <_strtod_l+0x6d0>
 800a2ce:	4632      	mov	r2, r6
 800a2d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a2d2:	4648      	mov	r0, r9
 800a2d4:	f001 fe22 	bl	800bf1c <__lshift>
 800a2d8:	901c      	str	r0, [sp, #112]	; 0x70
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	f47f af7c 	bne.w	800a1d8 <_strtod_l+0x728>
 800a2e0:	e604      	b.n	8009eec <_strtod_l+0x43c>
 800a2e2:	bf00      	nop
 800a2e4:	0800dd88 	.word	0x0800dd88
 800a2e8:	fffffc02 	.word	0xfffffc02
 800a2ec:	465d      	mov	r5, fp
 800a2ee:	f040 8086 	bne.w	800a3fe <_strtod_l+0x94e>
 800a2f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2f8:	b32a      	cbz	r2, 800a346 <_strtod_l+0x896>
 800a2fa:	4aaf      	ldr	r2, [pc, #700]	; (800a5b8 <_strtod_l+0xb08>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d153      	bne.n	800a3a8 <_strtod_l+0x8f8>
 800a300:	9b04      	ldr	r3, [sp, #16]
 800a302:	4650      	mov	r0, sl
 800a304:	b1d3      	cbz	r3, 800a33c <_strtod_l+0x88c>
 800a306:	4aad      	ldr	r2, [pc, #692]	; (800a5bc <_strtod_l+0xb0c>)
 800a308:	402a      	ands	r2, r5
 800a30a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a30e:	f04f 31ff 	mov.w	r1, #4294967295
 800a312:	d816      	bhi.n	800a342 <_strtod_l+0x892>
 800a314:	0d12      	lsrs	r2, r2, #20
 800a316:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a31a:	fa01 f303 	lsl.w	r3, r1, r3
 800a31e:	4298      	cmp	r0, r3
 800a320:	d142      	bne.n	800a3a8 <_strtod_l+0x8f8>
 800a322:	4ba7      	ldr	r3, [pc, #668]	; (800a5c0 <_strtod_l+0xb10>)
 800a324:	429d      	cmp	r5, r3
 800a326:	d102      	bne.n	800a32e <_strtod_l+0x87e>
 800a328:	3001      	adds	r0, #1
 800a32a:	f43f addf 	beq.w	8009eec <_strtod_l+0x43c>
 800a32e:	4ba3      	ldr	r3, [pc, #652]	; (800a5bc <_strtod_l+0xb0c>)
 800a330:	402b      	ands	r3, r5
 800a332:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a336:	f04f 0a00 	mov.w	sl, #0
 800a33a:	e7a0      	b.n	800a27e <_strtod_l+0x7ce>
 800a33c:	f04f 33ff 	mov.w	r3, #4294967295
 800a340:	e7ed      	b.n	800a31e <_strtod_l+0x86e>
 800a342:	460b      	mov	r3, r1
 800a344:	e7eb      	b.n	800a31e <_strtod_l+0x86e>
 800a346:	bb7b      	cbnz	r3, 800a3a8 <_strtod_l+0x8f8>
 800a348:	f1ba 0f00 	cmp.w	sl, #0
 800a34c:	d12c      	bne.n	800a3a8 <_strtod_l+0x8f8>
 800a34e:	9904      	ldr	r1, [sp, #16]
 800a350:	4a9a      	ldr	r2, [pc, #616]	; (800a5bc <_strtod_l+0xb0c>)
 800a352:	465b      	mov	r3, fp
 800a354:	b1f1      	cbz	r1, 800a394 <_strtod_l+0x8e4>
 800a356:	ea02 010b 	and.w	r1, r2, fp
 800a35a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a35e:	dc19      	bgt.n	800a394 <_strtod_l+0x8e4>
 800a360:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a364:	f77f ae5b 	ble.w	800a01e <_strtod_l+0x56e>
 800a368:	4a96      	ldr	r2, [pc, #600]	; (800a5c4 <_strtod_l+0xb14>)
 800a36a:	2300      	movs	r3, #0
 800a36c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a370:	4650      	mov	r0, sl
 800a372:	4659      	mov	r1, fp
 800a374:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a378:	f7f6 f93e 	bl	80005f8 <__aeabi_dmul>
 800a37c:	4682      	mov	sl, r0
 800a37e:	468b      	mov	fp, r1
 800a380:	2900      	cmp	r1, #0
 800a382:	f47f adbe 	bne.w	8009f02 <_strtod_l+0x452>
 800a386:	2800      	cmp	r0, #0
 800a388:	f47f adbb 	bne.w	8009f02 <_strtod_l+0x452>
 800a38c:	2322      	movs	r3, #34	; 0x22
 800a38e:	f8c9 3000 	str.w	r3, [r9]
 800a392:	e5b6      	b.n	8009f02 <_strtod_l+0x452>
 800a394:	4013      	ands	r3, r2
 800a396:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a39a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a39e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a3a2:	f04f 3aff 	mov.w	sl, #4294967295
 800a3a6:	e76a      	b.n	800a27e <_strtod_l+0x7ce>
 800a3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3aa:	b193      	cbz	r3, 800a3d2 <_strtod_l+0x922>
 800a3ac:	422b      	tst	r3, r5
 800a3ae:	f43f af66 	beq.w	800a27e <_strtod_l+0x7ce>
 800a3b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3b4:	9a04      	ldr	r2, [sp, #16]
 800a3b6:	4650      	mov	r0, sl
 800a3b8:	4659      	mov	r1, fp
 800a3ba:	b173      	cbz	r3, 800a3da <_strtod_l+0x92a>
 800a3bc:	f7ff fb5a 	bl	8009a74 <sulp>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a3c8:	f7f5 ff60 	bl	800028c <__adddf3>
 800a3cc:	4682      	mov	sl, r0
 800a3ce:	468b      	mov	fp, r1
 800a3d0:	e755      	b.n	800a27e <_strtod_l+0x7ce>
 800a3d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3d4:	ea13 0f0a 	tst.w	r3, sl
 800a3d8:	e7e9      	b.n	800a3ae <_strtod_l+0x8fe>
 800a3da:	f7ff fb4b 	bl	8009a74 <sulp>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a3e6:	f7f5 ff4f 	bl	8000288 <__aeabi_dsub>
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	4682      	mov	sl, r0
 800a3f0:	468b      	mov	fp, r1
 800a3f2:	f7f6 fb69 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	f47f ae11 	bne.w	800a01e <_strtod_l+0x56e>
 800a3fc:	e73f      	b.n	800a27e <_strtod_l+0x7ce>
 800a3fe:	4641      	mov	r1, r8
 800a400:	4620      	mov	r0, r4
 800a402:	f001 ff1c 	bl	800c23e <__ratio>
 800a406:	ec57 6b10 	vmov	r6, r7, d0
 800a40a:	2200      	movs	r2, #0
 800a40c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a410:	ee10 0a10 	vmov	r0, s0
 800a414:	4639      	mov	r1, r7
 800a416:	f7f6 fb6b 	bl	8000af0 <__aeabi_dcmple>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d077      	beq.n	800a50e <_strtod_l+0xa5e>
 800a41e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a420:	2b00      	cmp	r3, #0
 800a422:	d04a      	beq.n	800a4ba <_strtod_l+0xa0a>
 800a424:	4b68      	ldr	r3, [pc, #416]	; (800a5c8 <_strtod_l+0xb18>)
 800a426:	2200      	movs	r2, #0
 800a428:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a42c:	4f66      	ldr	r7, [pc, #408]	; (800a5c8 <_strtod_l+0xb18>)
 800a42e:	2600      	movs	r6, #0
 800a430:	4b62      	ldr	r3, [pc, #392]	; (800a5bc <_strtod_l+0xb0c>)
 800a432:	402b      	ands	r3, r5
 800a434:	930f      	str	r3, [sp, #60]	; 0x3c
 800a436:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a438:	4b64      	ldr	r3, [pc, #400]	; (800a5cc <_strtod_l+0xb1c>)
 800a43a:	429a      	cmp	r2, r3
 800a43c:	f040 80ce 	bne.w	800a5dc <_strtod_l+0xb2c>
 800a440:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a444:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a448:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800a44c:	ec4b ab10 	vmov	d0, sl, fp
 800a450:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a454:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a458:	f001 fe2c 	bl	800c0b4 <__ulp>
 800a45c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a460:	ec53 2b10 	vmov	r2, r3, d0
 800a464:	f7f6 f8c8 	bl	80005f8 <__aeabi_dmul>
 800a468:	4652      	mov	r2, sl
 800a46a:	465b      	mov	r3, fp
 800a46c:	f7f5 ff0e 	bl	800028c <__adddf3>
 800a470:	460b      	mov	r3, r1
 800a472:	4952      	ldr	r1, [pc, #328]	; (800a5bc <_strtod_l+0xb0c>)
 800a474:	4a56      	ldr	r2, [pc, #344]	; (800a5d0 <_strtod_l+0xb20>)
 800a476:	4019      	ands	r1, r3
 800a478:	4291      	cmp	r1, r2
 800a47a:	4682      	mov	sl, r0
 800a47c:	d95b      	bls.n	800a536 <_strtod_l+0xa86>
 800a47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a480:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a484:	4293      	cmp	r3, r2
 800a486:	d103      	bne.n	800a490 <_strtod_l+0x9e0>
 800a488:	9b08      	ldr	r3, [sp, #32]
 800a48a:	3301      	adds	r3, #1
 800a48c:	f43f ad2e 	beq.w	8009eec <_strtod_l+0x43c>
 800a490:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800a5c0 <_strtod_l+0xb10>
 800a494:	f04f 3aff 	mov.w	sl, #4294967295
 800a498:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a49a:	4648      	mov	r0, r9
 800a49c:	f001 fb73 	bl	800bb86 <_Bfree>
 800a4a0:	9905      	ldr	r1, [sp, #20]
 800a4a2:	4648      	mov	r0, r9
 800a4a4:	f001 fb6f 	bl	800bb86 <_Bfree>
 800a4a8:	4641      	mov	r1, r8
 800a4aa:	4648      	mov	r0, r9
 800a4ac:	f001 fb6b 	bl	800bb86 <_Bfree>
 800a4b0:	4621      	mov	r1, r4
 800a4b2:	4648      	mov	r0, r9
 800a4b4:	f001 fb67 	bl	800bb86 <_Bfree>
 800a4b8:	e619      	b.n	800a0ee <_strtod_l+0x63e>
 800a4ba:	f1ba 0f00 	cmp.w	sl, #0
 800a4be:	d11a      	bne.n	800a4f6 <_strtod_l+0xa46>
 800a4c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4c4:	b9eb      	cbnz	r3, 800a502 <_strtod_l+0xa52>
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	4b3f      	ldr	r3, [pc, #252]	; (800a5c8 <_strtod_l+0xb18>)
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	4639      	mov	r1, r7
 800a4ce:	f7f6 fb05 	bl	8000adc <__aeabi_dcmplt>
 800a4d2:	b9c8      	cbnz	r0, 800a508 <_strtod_l+0xa58>
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	4639      	mov	r1, r7
 800a4d8:	2200      	movs	r2, #0
 800a4da:	4b3e      	ldr	r3, [pc, #248]	; (800a5d4 <_strtod_l+0xb24>)
 800a4dc:	f7f6 f88c 	bl	80005f8 <__aeabi_dmul>
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	460f      	mov	r7, r1
 800a4e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a4e8:	9618      	str	r6, [sp, #96]	; 0x60
 800a4ea:	9319      	str	r3, [sp, #100]	; 0x64
 800a4ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a4f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a4f4:	e79c      	b.n	800a430 <_strtod_l+0x980>
 800a4f6:	f1ba 0f01 	cmp.w	sl, #1
 800a4fa:	d102      	bne.n	800a502 <_strtod_l+0xa52>
 800a4fc:	2d00      	cmp	r5, #0
 800a4fe:	f43f ad8e 	beq.w	800a01e <_strtod_l+0x56e>
 800a502:	2200      	movs	r2, #0
 800a504:	4b34      	ldr	r3, [pc, #208]	; (800a5d8 <_strtod_l+0xb28>)
 800a506:	e78f      	b.n	800a428 <_strtod_l+0x978>
 800a508:	2600      	movs	r6, #0
 800a50a:	4f32      	ldr	r7, [pc, #200]	; (800a5d4 <_strtod_l+0xb24>)
 800a50c:	e7ea      	b.n	800a4e4 <_strtod_l+0xa34>
 800a50e:	4b31      	ldr	r3, [pc, #196]	; (800a5d4 <_strtod_l+0xb24>)
 800a510:	4630      	mov	r0, r6
 800a512:	4639      	mov	r1, r7
 800a514:	2200      	movs	r2, #0
 800a516:	f7f6 f86f 	bl	80005f8 <__aeabi_dmul>
 800a51a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a51c:	4606      	mov	r6, r0
 800a51e:	460f      	mov	r7, r1
 800a520:	b933      	cbnz	r3, 800a530 <_strtod_l+0xa80>
 800a522:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a526:	9010      	str	r0, [sp, #64]	; 0x40
 800a528:	9311      	str	r3, [sp, #68]	; 0x44
 800a52a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a52e:	e7df      	b.n	800a4f0 <_strtod_l+0xa40>
 800a530:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a534:	e7f9      	b.n	800a52a <_strtod_l+0xa7a>
 800a536:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a53a:	9b04      	ldr	r3, [sp, #16]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1ab      	bne.n	800a498 <_strtod_l+0x9e8>
 800a540:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a544:	0d1b      	lsrs	r3, r3, #20
 800a546:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a548:	051b      	lsls	r3, r3, #20
 800a54a:	429a      	cmp	r2, r3
 800a54c:	465d      	mov	r5, fp
 800a54e:	d1a3      	bne.n	800a498 <_strtod_l+0x9e8>
 800a550:	4639      	mov	r1, r7
 800a552:	4630      	mov	r0, r6
 800a554:	f7f6 fb00 	bl	8000b58 <__aeabi_d2iz>
 800a558:	f7f5 ffe4 	bl	8000524 <__aeabi_i2d>
 800a55c:	460b      	mov	r3, r1
 800a55e:	4602      	mov	r2, r0
 800a560:	4639      	mov	r1, r7
 800a562:	4630      	mov	r0, r6
 800a564:	f7f5 fe90 	bl	8000288 <__aeabi_dsub>
 800a568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a56a:	4606      	mov	r6, r0
 800a56c:	460f      	mov	r7, r1
 800a56e:	b933      	cbnz	r3, 800a57e <_strtod_l+0xace>
 800a570:	f1ba 0f00 	cmp.w	sl, #0
 800a574:	d103      	bne.n	800a57e <_strtod_l+0xace>
 800a576:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800a57a:	2d00      	cmp	r5, #0
 800a57c:	d06d      	beq.n	800a65a <_strtod_l+0xbaa>
 800a57e:	a30a      	add	r3, pc, #40	; (adr r3, 800a5a8 <_strtod_l+0xaf8>)
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	4630      	mov	r0, r6
 800a586:	4639      	mov	r1, r7
 800a588:	f7f6 faa8 	bl	8000adc <__aeabi_dcmplt>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	f47f acb8 	bne.w	8009f02 <_strtod_l+0x452>
 800a592:	a307      	add	r3, pc, #28	; (adr r3, 800a5b0 <_strtod_l+0xb00>)
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	4630      	mov	r0, r6
 800a59a:	4639      	mov	r1, r7
 800a59c:	f7f6 fabc 	bl	8000b18 <__aeabi_dcmpgt>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	f43f af79 	beq.w	800a498 <_strtod_l+0x9e8>
 800a5a6:	e4ac      	b.n	8009f02 <_strtod_l+0x452>
 800a5a8:	94a03595 	.word	0x94a03595
 800a5ac:	3fdfffff 	.word	0x3fdfffff
 800a5b0:	35afe535 	.word	0x35afe535
 800a5b4:	3fe00000 	.word	0x3fe00000
 800a5b8:	000fffff 	.word	0x000fffff
 800a5bc:	7ff00000 	.word	0x7ff00000
 800a5c0:	7fefffff 	.word	0x7fefffff
 800a5c4:	39500000 	.word	0x39500000
 800a5c8:	3ff00000 	.word	0x3ff00000
 800a5cc:	7fe00000 	.word	0x7fe00000
 800a5d0:	7c9fffff 	.word	0x7c9fffff
 800a5d4:	3fe00000 	.word	0x3fe00000
 800a5d8:	bff00000 	.word	0xbff00000
 800a5dc:	9b04      	ldr	r3, [sp, #16]
 800a5de:	b333      	cbz	r3, 800a62e <_strtod_l+0xb7e>
 800a5e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a5e6:	d822      	bhi.n	800a62e <_strtod_l+0xb7e>
 800a5e8:	a327      	add	r3, pc, #156	; (adr r3, 800a688 <_strtod_l+0xbd8>)
 800a5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	4639      	mov	r1, r7
 800a5f2:	f7f6 fa7d 	bl	8000af0 <__aeabi_dcmple>
 800a5f6:	b1a0      	cbz	r0, 800a622 <_strtod_l+0xb72>
 800a5f8:	4639      	mov	r1, r7
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	f7f6 fad4 	bl	8000ba8 <__aeabi_d2uiz>
 800a600:	2800      	cmp	r0, #0
 800a602:	bf08      	it	eq
 800a604:	2001      	moveq	r0, #1
 800a606:	f7f5 ff7d 	bl	8000504 <__aeabi_ui2d>
 800a60a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a60c:	4606      	mov	r6, r0
 800a60e:	460f      	mov	r7, r1
 800a610:	bb03      	cbnz	r3, 800a654 <_strtod_l+0xba4>
 800a612:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a616:	9012      	str	r0, [sp, #72]	; 0x48
 800a618:	9313      	str	r3, [sp, #76]	; 0x4c
 800a61a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a61e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a624:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a626:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a62a:	1a9b      	subs	r3, r3, r2
 800a62c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a62e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800a632:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800a636:	f001 fd3d 	bl	800c0b4 <__ulp>
 800a63a:	4650      	mov	r0, sl
 800a63c:	ec53 2b10 	vmov	r2, r3, d0
 800a640:	4659      	mov	r1, fp
 800a642:	f7f5 ffd9 	bl	80005f8 <__aeabi_dmul>
 800a646:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a64a:	f7f5 fe1f 	bl	800028c <__adddf3>
 800a64e:	4682      	mov	sl, r0
 800a650:	468b      	mov	fp, r1
 800a652:	e772      	b.n	800a53a <_strtod_l+0xa8a>
 800a654:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800a658:	e7df      	b.n	800a61a <_strtod_l+0xb6a>
 800a65a:	a30d      	add	r3, pc, #52	; (adr r3, 800a690 <_strtod_l+0xbe0>)
 800a65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a660:	f7f6 fa3c 	bl	8000adc <__aeabi_dcmplt>
 800a664:	e79c      	b.n	800a5a0 <_strtod_l+0xaf0>
 800a666:	2300      	movs	r3, #0
 800a668:	930d      	str	r3, [sp, #52]	; 0x34
 800a66a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a66c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a66e:	6013      	str	r3, [r2, #0]
 800a670:	f7ff ba61 	b.w	8009b36 <_strtod_l+0x86>
 800a674:	2b65      	cmp	r3, #101	; 0x65
 800a676:	f04f 0200 	mov.w	r2, #0
 800a67a:	f43f ab4e 	beq.w	8009d1a <_strtod_l+0x26a>
 800a67e:	2101      	movs	r1, #1
 800a680:	4614      	mov	r4, r2
 800a682:	9104      	str	r1, [sp, #16]
 800a684:	f7ff bacb 	b.w	8009c1e <_strtod_l+0x16e>
 800a688:	ffc00000 	.word	0xffc00000
 800a68c:	41dfffff 	.word	0x41dfffff
 800a690:	94a03595 	.word	0x94a03595
 800a694:	3fcfffff 	.word	0x3fcfffff

0800a698 <_strtod_r>:
 800a698:	4b05      	ldr	r3, [pc, #20]	; (800a6b0 <_strtod_r+0x18>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	b410      	push	{r4}
 800a69e:	6a1b      	ldr	r3, [r3, #32]
 800a6a0:	4c04      	ldr	r4, [pc, #16]	; (800a6b4 <_strtod_r+0x1c>)
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	bf08      	it	eq
 800a6a6:	4623      	moveq	r3, r4
 800a6a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6ac:	f7ff ba00 	b.w	8009ab0 <_strtod_l>
 800a6b0:	20000088 	.word	0x20000088
 800a6b4:	200000ec 	.word	0x200000ec

0800a6b8 <_strtol_l.isra.0>:
 800a6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	4680      	mov	r8, r0
 800a6be:	4689      	mov	r9, r1
 800a6c0:	4692      	mov	sl, r2
 800a6c2:	461e      	mov	r6, r3
 800a6c4:	460f      	mov	r7, r1
 800a6c6:	463d      	mov	r5, r7
 800a6c8:	9808      	ldr	r0, [sp, #32]
 800a6ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6ce:	f001 f9ed 	bl	800baac <__locale_ctype_ptr_l>
 800a6d2:	4420      	add	r0, r4
 800a6d4:	7843      	ldrb	r3, [r0, #1]
 800a6d6:	f013 0308 	ands.w	r3, r3, #8
 800a6da:	d132      	bne.n	800a742 <_strtol_l.isra.0+0x8a>
 800a6dc:	2c2d      	cmp	r4, #45	; 0x2d
 800a6de:	d132      	bne.n	800a746 <_strtol_l.isra.0+0x8e>
 800a6e0:	787c      	ldrb	r4, [r7, #1]
 800a6e2:	1cbd      	adds	r5, r7, #2
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	2e00      	cmp	r6, #0
 800a6e8:	d05d      	beq.n	800a7a6 <_strtol_l.isra.0+0xee>
 800a6ea:	2e10      	cmp	r6, #16
 800a6ec:	d109      	bne.n	800a702 <_strtol_l.isra.0+0x4a>
 800a6ee:	2c30      	cmp	r4, #48	; 0x30
 800a6f0:	d107      	bne.n	800a702 <_strtol_l.isra.0+0x4a>
 800a6f2:	782b      	ldrb	r3, [r5, #0]
 800a6f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6f8:	2b58      	cmp	r3, #88	; 0x58
 800a6fa:	d14f      	bne.n	800a79c <_strtol_l.isra.0+0xe4>
 800a6fc:	786c      	ldrb	r4, [r5, #1]
 800a6fe:	2610      	movs	r6, #16
 800a700:	3502      	adds	r5, #2
 800a702:	2a00      	cmp	r2, #0
 800a704:	bf14      	ite	ne
 800a706:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a70a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a70e:	2700      	movs	r7, #0
 800a710:	fbb1 fcf6 	udiv	ip, r1, r6
 800a714:	4638      	mov	r0, r7
 800a716:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a71a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a71e:	2b09      	cmp	r3, #9
 800a720:	d817      	bhi.n	800a752 <_strtol_l.isra.0+0x9a>
 800a722:	461c      	mov	r4, r3
 800a724:	42a6      	cmp	r6, r4
 800a726:	dd23      	ble.n	800a770 <_strtol_l.isra.0+0xb8>
 800a728:	1c7b      	adds	r3, r7, #1
 800a72a:	d007      	beq.n	800a73c <_strtol_l.isra.0+0x84>
 800a72c:	4584      	cmp	ip, r0
 800a72e:	d31c      	bcc.n	800a76a <_strtol_l.isra.0+0xb2>
 800a730:	d101      	bne.n	800a736 <_strtol_l.isra.0+0x7e>
 800a732:	45a6      	cmp	lr, r4
 800a734:	db19      	blt.n	800a76a <_strtol_l.isra.0+0xb2>
 800a736:	fb00 4006 	mla	r0, r0, r6, r4
 800a73a:	2701      	movs	r7, #1
 800a73c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a740:	e7eb      	b.n	800a71a <_strtol_l.isra.0+0x62>
 800a742:	462f      	mov	r7, r5
 800a744:	e7bf      	b.n	800a6c6 <_strtol_l.isra.0+0xe>
 800a746:	2c2b      	cmp	r4, #43	; 0x2b
 800a748:	bf04      	itt	eq
 800a74a:	1cbd      	addeq	r5, r7, #2
 800a74c:	787c      	ldrbeq	r4, [r7, #1]
 800a74e:	461a      	mov	r2, r3
 800a750:	e7c9      	b.n	800a6e6 <_strtol_l.isra.0+0x2e>
 800a752:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a756:	2b19      	cmp	r3, #25
 800a758:	d801      	bhi.n	800a75e <_strtol_l.isra.0+0xa6>
 800a75a:	3c37      	subs	r4, #55	; 0x37
 800a75c:	e7e2      	b.n	800a724 <_strtol_l.isra.0+0x6c>
 800a75e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a762:	2b19      	cmp	r3, #25
 800a764:	d804      	bhi.n	800a770 <_strtol_l.isra.0+0xb8>
 800a766:	3c57      	subs	r4, #87	; 0x57
 800a768:	e7dc      	b.n	800a724 <_strtol_l.isra.0+0x6c>
 800a76a:	f04f 37ff 	mov.w	r7, #4294967295
 800a76e:	e7e5      	b.n	800a73c <_strtol_l.isra.0+0x84>
 800a770:	1c7b      	adds	r3, r7, #1
 800a772:	d108      	bne.n	800a786 <_strtol_l.isra.0+0xce>
 800a774:	2322      	movs	r3, #34	; 0x22
 800a776:	f8c8 3000 	str.w	r3, [r8]
 800a77a:	4608      	mov	r0, r1
 800a77c:	f1ba 0f00 	cmp.w	sl, #0
 800a780:	d107      	bne.n	800a792 <_strtol_l.isra.0+0xda>
 800a782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a786:	b102      	cbz	r2, 800a78a <_strtol_l.isra.0+0xd2>
 800a788:	4240      	negs	r0, r0
 800a78a:	f1ba 0f00 	cmp.w	sl, #0
 800a78e:	d0f8      	beq.n	800a782 <_strtol_l.isra.0+0xca>
 800a790:	b10f      	cbz	r7, 800a796 <_strtol_l.isra.0+0xde>
 800a792:	f105 39ff 	add.w	r9, r5, #4294967295
 800a796:	f8ca 9000 	str.w	r9, [sl]
 800a79a:	e7f2      	b.n	800a782 <_strtol_l.isra.0+0xca>
 800a79c:	2430      	movs	r4, #48	; 0x30
 800a79e:	2e00      	cmp	r6, #0
 800a7a0:	d1af      	bne.n	800a702 <_strtol_l.isra.0+0x4a>
 800a7a2:	2608      	movs	r6, #8
 800a7a4:	e7ad      	b.n	800a702 <_strtol_l.isra.0+0x4a>
 800a7a6:	2c30      	cmp	r4, #48	; 0x30
 800a7a8:	d0a3      	beq.n	800a6f2 <_strtol_l.isra.0+0x3a>
 800a7aa:	260a      	movs	r6, #10
 800a7ac:	e7a9      	b.n	800a702 <_strtol_l.isra.0+0x4a>
	...

0800a7b0 <_strtol_r>:
 800a7b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7b2:	4c06      	ldr	r4, [pc, #24]	; (800a7cc <_strtol_r+0x1c>)
 800a7b4:	4d06      	ldr	r5, [pc, #24]	; (800a7d0 <_strtol_r+0x20>)
 800a7b6:	6824      	ldr	r4, [r4, #0]
 800a7b8:	6a24      	ldr	r4, [r4, #32]
 800a7ba:	2c00      	cmp	r4, #0
 800a7bc:	bf08      	it	eq
 800a7be:	462c      	moveq	r4, r5
 800a7c0:	9400      	str	r4, [sp, #0]
 800a7c2:	f7ff ff79 	bl	800a6b8 <_strtol_l.isra.0>
 800a7c6:	b003      	add	sp, #12
 800a7c8:	bd30      	pop	{r4, r5, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20000088 	.word	0x20000088
 800a7d0:	200000ec 	.word	0x200000ec

0800a7d4 <quorem>:
 800a7d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d8:	6903      	ldr	r3, [r0, #16]
 800a7da:	690c      	ldr	r4, [r1, #16]
 800a7dc:	42a3      	cmp	r3, r4
 800a7de:	4680      	mov	r8, r0
 800a7e0:	f2c0 8082 	blt.w	800a8e8 <quorem+0x114>
 800a7e4:	3c01      	subs	r4, #1
 800a7e6:	f101 0714 	add.w	r7, r1, #20
 800a7ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a7ee:	f100 0614 	add.w	r6, r0, #20
 800a7f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a7f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a7fa:	eb06 030c 	add.w	r3, r6, ip
 800a7fe:	3501      	adds	r5, #1
 800a800:	eb07 090c 	add.w	r9, r7, ip
 800a804:	9301      	str	r3, [sp, #4]
 800a806:	fbb0 f5f5 	udiv	r5, r0, r5
 800a80a:	b395      	cbz	r5, 800a872 <quorem+0x9e>
 800a80c:	f04f 0a00 	mov.w	sl, #0
 800a810:	4638      	mov	r0, r7
 800a812:	46b6      	mov	lr, r6
 800a814:	46d3      	mov	fp, sl
 800a816:	f850 2b04 	ldr.w	r2, [r0], #4
 800a81a:	b293      	uxth	r3, r2
 800a81c:	fb05 a303 	mla	r3, r5, r3, sl
 800a820:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a824:	b29b      	uxth	r3, r3
 800a826:	ebab 0303 	sub.w	r3, fp, r3
 800a82a:	0c12      	lsrs	r2, r2, #16
 800a82c:	f8de b000 	ldr.w	fp, [lr]
 800a830:	fb05 a202 	mla	r2, r5, r2, sl
 800a834:	fa13 f38b 	uxtah	r3, r3, fp
 800a838:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a83c:	fa1f fb82 	uxth.w	fp, r2
 800a840:	f8de 2000 	ldr.w	r2, [lr]
 800a844:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a848:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a852:	4581      	cmp	r9, r0
 800a854:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a858:	f84e 3b04 	str.w	r3, [lr], #4
 800a85c:	d2db      	bcs.n	800a816 <quorem+0x42>
 800a85e:	f856 300c 	ldr.w	r3, [r6, ip]
 800a862:	b933      	cbnz	r3, 800a872 <quorem+0x9e>
 800a864:	9b01      	ldr	r3, [sp, #4]
 800a866:	3b04      	subs	r3, #4
 800a868:	429e      	cmp	r6, r3
 800a86a:	461a      	mov	r2, r3
 800a86c:	d330      	bcc.n	800a8d0 <quorem+0xfc>
 800a86e:	f8c8 4010 	str.w	r4, [r8, #16]
 800a872:	4640      	mov	r0, r8
 800a874:	f001 fba6 	bl	800bfc4 <__mcmp>
 800a878:	2800      	cmp	r0, #0
 800a87a:	db25      	blt.n	800a8c8 <quorem+0xf4>
 800a87c:	3501      	adds	r5, #1
 800a87e:	4630      	mov	r0, r6
 800a880:	f04f 0c00 	mov.w	ip, #0
 800a884:	f857 2b04 	ldr.w	r2, [r7], #4
 800a888:	f8d0 e000 	ldr.w	lr, [r0]
 800a88c:	b293      	uxth	r3, r2
 800a88e:	ebac 0303 	sub.w	r3, ip, r3
 800a892:	0c12      	lsrs	r2, r2, #16
 800a894:	fa13 f38e 	uxtah	r3, r3, lr
 800a898:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a89c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8a6:	45b9      	cmp	r9, r7
 800a8a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a8ac:	f840 3b04 	str.w	r3, [r0], #4
 800a8b0:	d2e8      	bcs.n	800a884 <quorem+0xb0>
 800a8b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a8b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a8ba:	b92a      	cbnz	r2, 800a8c8 <quorem+0xf4>
 800a8bc:	3b04      	subs	r3, #4
 800a8be:	429e      	cmp	r6, r3
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	d30b      	bcc.n	800a8dc <quorem+0x108>
 800a8c4:	f8c8 4010 	str.w	r4, [r8, #16]
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	b003      	add	sp, #12
 800a8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d0:	6812      	ldr	r2, [r2, #0]
 800a8d2:	3b04      	subs	r3, #4
 800a8d4:	2a00      	cmp	r2, #0
 800a8d6:	d1ca      	bne.n	800a86e <quorem+0x9a>
 800a8d8:	3c01      	subs	r4, #1
 800a8da:	e7c5      	b.n	800a868 <quorem+0x94>
 800a8dc:	6812      	ldr	r2, [r2, #0]
 800a8de:	3b04      	subs	r3, #4
 800a8e0:	2a00      	cmp	r2, #0
 800a8e2:	d1ef      	bne.n	800a8c4 <quorem+0xf0>
 800a8e4:	3c01      	subs	r4, #1
 800a8e6:	e7ea      	b.n	800a8be <quorem+0xea>
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	e7ee      	b.n	800a8ca <quorem+0xf6>
 800a8ec:	0000      	movs	r0, r0
	...

0800a8f0 <_dtoa_r>:
 800a8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f4:	ec57 6b10 	vmov	r6, r7, d0
 800a8f8:	b097      	sub	sp, #92	; 0x5c
 800a8fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a8fc:	9106      	str	r1, [sp, #24]
 800a8fe:	4604      	mov	r4, r0
 800a900:	920b      	str	r2, [sp, #44]	; 0x2c
 800a902:	9312      	str	r3, [sp, #72]	; 0x48
 800a904:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a908:	e9cd 6700 	strd	r6, r7, [sp]
 800a90c:	b93d      	cbnz	r5, 800a91e <_dtoa_r+0x2e>
 800a90e:	2010      	movs	r0, #16
 800a910:	f001 f8e0 	bl	800bad4 <malloc>
 800a914:	6260      	str	r0, [r4, #36]	; 0x24
 800a916:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a91a:	6005      	str	r5, [r0, #0]
 800a91c:	60c5      	str	r5, [r0, #12]
 800a91e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a920:	6819      	ldr	r1, [r3, #0]
 800a922:	b151      	cbz	r1, 800a93a <_dtoa_r+0x4a>
 800a924:	685a      	ldr	r2, [r3, #4]
 800a926:	604a      	str	r2, [r1, #4]
 800a928:	2301      	movs	r3, #1
 800a92a:	4093      	lsls	r3, r2
 800a92c:	608b      	str	r3, [r1, #8]
 800a92e:	4620      	mov	r0, r4
 800a930:	f001 f929 	bl	800bb86 <_Bfree>
 800a934:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a936:	2200      	movs	r2, #0
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	1e3b      	subs	r3, r7, #0
 800a93c:	bfbb      	ittet	lt
 800a93e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a942:	9301      	strlt	r3, [sp, #4]
 800a944:	2300      	movge	r3, #0
 800a946:	2201      	movlt	r2, #1
 800a948:	bfac      	ite	ge
 800a94a:	f8c8 3000 	strge.w	r3, [r8]
 800a94e:	f8c8 2000 	strlt.w	r2, [r8]
 800a952:	4baf      	ldr	r3, [pc, #700]	; (800ac10 <_dtoa_r+0x320>)
 800a954:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a958:	ea33 0308 	bics.w	r3, r3, r8
 800a95c:	d114      	bne.n	800a988 <_dtoa_r+0x98>
 800a95e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a960:	f242 730f 	movw	r3, #9999	; 0x270f
 800a964:	6013      	str	r3, [r2, #0]
 800a966:	9b00      	ldr	r3, [sp, #0]
 800a968:	b923      	cbnz	r3, 800a974 <_dtoa_r+0x84>
 800a96a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a96e:	2800      	cmp	r0, #0
 800a970:	f000 8542 	beq.w	800b3f8 <_dtoa_r+0xb08>
 800a974:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a976:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ac24 <_dtoa_r+0x334>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f000 8544 	beq.w	800b408 <_dtoa_r+0xb18>
 800a980:	f10b 0303 	add.w	r3, fp, #3
 800a984:	f000 bd3e 	b.w	800b404 <_dtoa_r+0xb14>
 800a988:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a98c:	2200      	movs	r2, #0
 800a98e:	2300      	movs	r3, #0
 800a990:	4630      	mov	r0, r6
 800a992:	4639      	mov	r1, r7
 800a994:	f7f6 f898 	bl	8000ac8 <__aeabi_dcmpeq>
 800a998:	4681      	mov	r9, r0
 800a99a:	b168      	cbz	r0, 800a9b8 <_dtoa_r+0xc8>
 800a99c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a99e:	2301      	movs	r3, #1
 800a9a0:	6013      	str	r3, [r2, #0]
 800a9a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f000 8524 	beq.w	800b3f2 <_dtoa_r+0xb02>
 800a9aa:	4b9a      	ldr	r3, [pc, #616]	; (800ac14 <_dtoa_r+0x324>)
 800a9ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a9ae:	f103 3bff 	add.w	fp, r3, #4294967295
 800a9b2:	6013      	str	r3, [r2, #0]
 800a9b4:	f000 bd28 	b.w	800b408 <_dtoa_r+0xb18>
 800a9b8:	aa14      	add	r2, sp, #80	; 0x50
 800a9ba:	a915      	add	r1, sp, #84	; 0x54
 800a9bc:	ec47 6b10 	vmov	d0, r6, r7
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f001 fbed 	bl	800c1a0 <__d2b>
 800a9c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a9ca:	9004      	str	r0, [sp, #16]
 800a9cc:	2d00      	cmp	r5, #0
 800a9ce:	d07c      	beq.n	800aaca <_dtoa_r+0x1da>
 800a9d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a9d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a9d8:	46b2      	mov	sl, r6
 800a9da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a9de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a9e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	4b8b      	ldr	r3, [pc, #556]	; (800ac18 <_dtoa_r+0x328>)
 800a9ea:	4650      	mov	r0, sl
 800a9ec:	4659      	mov	r1, fp
 800a9ee:	f7f5 fc4b 	bl	8000288 <__aeabi_dsub>
 800a9f2:	a381      	add	r3, pc, #516	; (adr r3, 800abf8 <_dtoa_r+0x308>)
 800a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f8:	f7f5 fdfe 	bl	80005f8 <__aeabi_dmul>
 800a9fc:	a380      	add	r3, pc, #512	; (adr r3, 800ac00 <_dtoa_r+0x310>)
 800a9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa02:	f7f5 fc43 	bl	800028c <__adddf3>
 800aa06:	4606      	mov	r6, r0
 800aa08:	4628      	mov	r0, r5
 800aa0a:	460f      	mov	r7, r1
 800aa0c:	f7f5 fd8a 	bl	8000524 <__aeabi_i2d>
 800aa10:	a37d      	add	r3, pc, #500	; (adr r3, 800ac08 <_dtoa_r+0x318>)
 800aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa16:	f7f5 fdef 	bl	80005f8 <__aeabi_dmul>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	4630      	mov	r0, r6
 800aa20:	4639      	mov	r1, r7
 800aa22:	f7f5 fc33 	bl	800028c <__adddf3>
 800aa26:	4606      	mov	r6, r0
 800aa28:	460f      	mov	r7, r1
 800aa2a:	f7f6 f895 	bl	8000b58 <__aeabi_d2iz>
 800aa2e:	2200      	movs	r2, #0
 800aa30:	4682      	mov	sl, r0
 800aa32:	2300      	movs	r3, #0
 800aa34:	4630      	mov	r0, r6
 800aa36:	4639      	mov	r1, r7
 800aa38:	f7f6 f850 	bl	8000adc <__aeabi_dcmplt>
 800aa3c:	b148      	cbz	r0, 800aa52 <_dtoa_r+0x162>
 800aa3e:	4650      	mov	r0, sl
 800aa40:	f7f5 fd70 	bl	8000524 <__aeabi_i2d>
 800aa44:	4632      	mov	r2, r6
 800aa46:	463b      	mov	r3, r7
 800aa48:	f7f6 f83e 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa4c:	b908      	cbnz	r0, 800aa52 <_dtoa_r+0x162>
 800aa4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa52:	f1ba 0f16 	cmp.w	sl, #22
 800aa56:	d859      	bhi.n	800ab0c <_dtoa_r+0x21c>
 800aa58:	4970      	ldr	r1, [pc, #448]	; (800ac1c <_dtoa_r+0x32c>)
 800aa5a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800aa5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa66:	f7f6 f857 	bl	8000b18 <__aeabi_dcmpgt>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d050      	beq.n	800ab10 <_dtoa_r+0x220>
 800aa6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa72:	2300      	movs	r3, #0
 800aa74:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa78:	1b5d      	subs	r5, r3, r5
 800aa7a:	f1b5 0801 	subs.w	r8, r5, #1
 800aa7e:	bf49      	itett	mi
 800aa80:	f1c5 0301 	rsbmi	r3, r5, #1
 800aa84:	2300      	movpl	r3, #0
 800aa86:	9305      	strmi	r3, [sp, #20]
 800aa88:	f04f 0800 	movmi.w	r8, #0
 800aa8c:	bf58      	it	pl
 800aa8e:	9305      	strpl	r3, [sp, #20]
 800aa90:	f1ba 0f00 	cmp.w	sl, #0
 800aa94:	db3e      	blt.n	800ab14 <_dtoa_r+0x224>
 800aa96:	2300      	movs	r3, #0
 800aa98:	44d0      	add	r8, sl
 800aa9a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800aa9e:	9307      	str	r3, [sp, #28]
 800aaa0:	9b06      	ldr	r3, [sp, #24]
 800aaa2:	2b09      	cmp	r3, #9
 800aaa4:	f200 8090 	bhi.w	800abc8 <_dtoa_r+0x2d8>
 800aaa8:	2b05      	cmp	r3, #5
 800aaaa:	bfc4      	itt	gt
 800aaac:	3b04      	subgt	r3, #4
 800aaae:	9306      	strgt	r3, [sp, #24]
 800aab0:	9b06      	ldr	r3, [sp, #24]
 800aab2:	f1a3 0302 	sub.w	r3, r3, #2
 800aab6:	bfcc      	ite	gt
 800aab8:	2500      	movgt	r5, #0
 800aaba:	2501      	movle	r5, #1
 800aabc:	2b03      	cmp	r3, #3
 800aabe:	f200 808f 	bhi.w	800abe0 <_dtoa_r+0x2f0>
 800aac2:	e8df f003 	tbb	[pc, r3]
 800aac6:	7f7d      	.short	0x7f7d
 800aac8:	7131      	.short	0x7131
 800aaca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800aace:	441d      	add	r5, r3
 800aad0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800aad4:	2820      	cmp	r0, #32
 800aad6:	dd13      	ble.n	800ab00 <_dtoa_r+0x210>
 800aad8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800aadc:	9b00      	ldr	r3, [sp, #0]
 800aade:	fa08 f800 	lsl.w	r8, r8, r0
 800aae2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800aae6:	fa23 f000 	lsr.w	r0, r3, r0
 800aaea:	ea48 0000 	orr.w	r0, r8, r0
 800aaee:	f7f5 fd09 	bl	8000504 <__aeabi_ui2d>
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	4682      	mov	sl, r0
 800aaf6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800aafa:	3d01      	subs	r5, #1
 800aafc:	9313      	str	r3, [sp, #76]	; 0x4c
 800aafe:	e772      	b.n	800a9e6 <_dtoa_r+0xf6>
 800ab00:	9b00      	ldr	r3, [sp, #0]
 800ab02:	f1c0 0020 	rsb	r0, r0, #32
 800ab06:	fa03 f000 	lsl.w	r0, r3, r0
 800ab0a:	e7f0      	b.n	800aaee <_dtoa_r+0x1fe>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e7b1      	b.n	800aa74 <_dtoa_r+0x184>
 800ab10:	900f      	str	r0, [sp, #60]	; 0x3c
 800ab12:	e7b0      	b.n	800aa76 <_dtoa_r+0x186>
 800ab14:	9b05      	ldr	r3, [sp, #20]
 800ab16:	eba3 030a 	sub.w	r3, r3, sl
 800ab1a:	9305      	str	r3, [sp, #20]
 800ab1c:	f1ca 0300 	rsb	r3, sl, #0
 800ab20:	9307      	str	r3, [sp, #28]
 800ab22:	2300      	movs	r3, #0
 800ab24:	930e      	str	r3, [sp, #56]	; 0x38
 800ab26:	e7bb      	b.n	800aaa0 <_dtoa_r+0x1b0>
 800ab28:	2301      	movs	r3, #1
 800ab2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ab2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	dd59      	ble.n	800abe6 <_dtoa_r+0x2f6>
 800ab32:	9302      	str	r3, [sp, #8]
 800ab34:	4699      	mov	r9, r3
 800ab36:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab38:	2200      	movs	r2, #0
 800ab3a:	6072      	str	r2, [r6, #4]
 800ab3c:	2204      	movs	r2, #4
 800ab3e:	f102 0014 	add.w	r0, r2, #20
 800ab42:	4298      	cmp	r0, r3
 800ab44:	6871      	ldr	r1, [r6, #4]
 800ab46:	d953      	bls.n	800abf0 <_dtoa_r+0x300>
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f000 ffe8 	bl	800bb1e <_Balloc>
 800ab4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab50:	6030      	str	r0, [r6, #0]
 800ab52:	f1b9 0f0e 	cmp.w	r9, #14
 800ab56:	f8d3 b000 	ldr.w	fp, [r3]
 800ab5a:	f200 80e6 	bhi.w	800ad2a <_dtoa_r+0x43a>
 800ab5e:	2d00      	cmp	r5, #0
 800ab60:	f000 80e3 	beq.w	800ad2a <_dtoa_r+0x43a>
 800ab64:	ed9d 7b00 	vldr	d7, [sp]
 800ab68:	f1ba 0f00 	cmp.w	sl, #0
 800ab6c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ab70:	dd74      	ble.n	800ac5c <_dtoa_r+0x36c>
 800ab72:	4a2a      	ldr	r2, [pc, #168]	; (800ac1c <_dtoa_r+0x32c>)
 800ab74:	f00a 030f 	and.w	r3, sl, #15
 800ab78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ab7c:	ed93 7b00 	vldr	d7, [r3]
 800ab80:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ab84:	06f0      	lsls	r0, r6, #27
 800ab86:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ab8a:	d565      	bpl.n	800ac58 <_dtoa_r+0x368>
 800ab8c:	4b24      	ldr	r3, [pc, #144]	; (800ac20 <_dtoa_r+0x330>)
 800ab8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab96:	f7f5 fe59 	bl	800084c <__aeabi_ddiv>
 800ab9a:	e9cd 0100 	strd	r0, r1, [sp]
 800ab9e:	f006 060f 	and.w	r6, r6, #15
 800aba2:	2503      	movs	r5, #3
 800aba4:	4f1e      	ldr	r7, [pc, #120]	; (800ac20 <_dtoa_r+0x330>)
 800aba6:	e04c      	b.n	800ac42 <_dtoa_r+0x352>
 800aba8:	2301      	movs	r3, #1
 800abaa:	930a      	str	r3, [sp, #40]	; 0x28
 800abac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abae:	4453      	add	r3, sl
 800abb0:	f103 0901 	add.w	r9, r3, #1
 800abb4:	9302      	str	r3, [sp, #8]
 800abb6:	464b      	mov	r3, r9
 800abb8:	2b01      	cmp	r3, #1
 800abba:	bfb8      	it	lt
 800abbc:	2301      	movlt	r3, #1
 800abbe:	e7ba      	b.n	800ab36 <_dtoa_r+0x246>
 800abc0:	2300      	movs	r3, #0
 800abc2:	e7b2      	b.n	800ab2a <_dtoa_r+0x23a>
 800abc4:	2300      	movs	r3, #0
 800abc6:	e7f0      	b.n	800abaa <_dtoa_r+0x2ba>
 800abc8:	2501      	movs	r5, #1
 800abca:	2300      	movs	r3, #0
 800abcc:	9306      	str	r3, [sp, #24]
 800abce:	950a      	str	r5, [sp, #40]	; 0x28
 800abd0:	f04f 33ff 	mov.w	r3, #4294967295
 800abd4:	9302      	str	r3, [sp, #8]
 800abd6:	4699      	mov	r9, r3
 800abd8:	2200      	movs	r2, #0
 800abda:	2312      	movs	r3, #18
 800abdc:	920b      	str	r2, [sp, #44]	; 0x2c
 800abde:	e7aa      	b.n	800ab36 <_dtoa_r+0x246>
 800abe0:	2301      	movs	r3, #1
 800abe2:	930a      	str	r3, [sp, #40]	; 0x28
 800abe4:	e7f4      	b.n	800abd0 <_dtoa_r+0x2e0>
 800abe6:	2301      	movs	r3, #1
 800abe8:	9302      	str	r3, [sp, #8]
 800abea:	4699      	mov	r9, r3
 800abec:	461a      	mov	r2, r3
 800abee:	e7f5      	b.n	800abdc <_dtoa_r+0x2ec>
 800abf0:	3101      	adds	r1, #1
 800abf2:	6071      	str	r1, [r6, #4]
 800abf4:	0052      	lsls	r2, r2, #1
 800abf6:	e7a2      	b.n	800ab3e <_dtoa_r+0x24e>
 800abf8:	636f4361 	.word	0x636f4361
 800abfc:	3fd287a7 	.word	0x3fd287a7
 800ac00:	8b60c8b3 	.word	0x8b60c8b3
 800ac04:	3fc68a28 	.word	0x3fc68a28
 800ac08:	509f79fb 	.word	0x509f79fb
 800ac0c:	3fd34413 	.word	0x3fd34413
 800ac10:	7ff00000 	.word	0x7ff00000
 800ac14:	0800dd31 	.word	0x0800dd31
 800ac18:	3ff80000 	.word	0x3ff80000
 800ac1c:	0800ddf0 	.word	0x0800ddf0
 800ac20:	0800ddc8 	.word	0x0800ddc8
 800ac24:	0800ddb9 	.word	0x0800ddb9
 800ac28:	07f1      	lsls	r1, r6, #31
 800ac2a:	d508      	bpl.n	800ac3e <_dtoa_r+0x34e>
 800ac2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac34:	f7f5 fce0 	bl	80005f8 <__aeabi_dmul>
 800ac38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac3c:	3501      	adds	r5, #1
 800ac3e:	1076      	asrs	r6, r6, #1
 800ac40:	3708      	adds	r7, #8
 800ac42:	2e00      	cmp	r6, #0
 800ac44:	d1f0      	bne.n	800ac28 <_dtoa_r+0x338>
 800ac46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ac4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac4e:	f7f5 fdfd 	bl	800084c <__aeabi_ddiv>
 800ac52:	e9cd 0100 	strd	r0, r1, [sp]
 800ac56:	e01a      	b.n	800ac8e <_dtoa_r+0x39e>
 800ac58:	2502      	movs	r5, #2
 800ac5a:	e7a3      	b.n	800aba4 <_dtoa_r+0x2b4>
 800ac5c:	f000 80a0 	beq.w	800ada0 <_dtoa_r+0x4b0>
 800ac60:	f1ca 0600 	rsb	r6, sl, #0
 800ac64:	4b9f      	ldr	r3, [pc, #636]	; (800aee4 <_dtoa_r+0x5f4>)
 800ac66:	4fa0      	ldr	r7, [pc, #640]	; (800aee8 <_dtoa_r+0x5f8>)
 800ac68:	f006 020f 	and.w	r2, r6, #15
 800ac6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac78:	f7f5 fcbe 	bl	80005f8 <__aeabi_dmul>
 800ac7c:	e9cd 0100 	strd	r0, r1, [sp]
 800ac80:	1136      	asrs	r6, r6, #4
 800ac82:	2300      	movs	r3, #0
 800ac84:	2502      	movs	r5, #2
 800ac86:	2e00      	cmp	r6, #0
 800ac88:	d17f      	bne.n	800ad8a <_dtoa_r+0x49a>
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1e1      	bne.n	800ac52 <_dtoa_r+0x362>
 800ac8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f000 8087 	beq.w	800ada4 <_dtoa_r+0x4b4>
 800ac96:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	4b93      	ldr	r3, [pc, #588]	; (800aeec <_dtoa_r+0x5fc>)
 800ac9e:	4630      	mov	r0, r6
 800aca0:	4639      	mov	r1, r7
 800aca2:	f7f5 ff1b 	bl	8000adc <__aeabi_dcmplt>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d07c      	beq.n	800ada4 <_dtoa_r+0x4b4>
 800acaa:	f1b9 0f00 	cmp.w	r9, #0
 800acae:	d079      	beq.n	800ada4 <_dtoa_r+0x4b4>
 800acb0:	9b02      	ldr	r3, [sp, #8]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	dd35      	ble.n	800ad22 <_dtoa_r+0x432>
 800acb6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800acba:	9308      	str	r3, [sp, #32]
 800acbc:	4639      	mov	r1, r7
 800acbe:	2200      	movs	r2, #0
 800acc0:	4b8b      	ldr	r3, [pc, #556]	; (800aef0 <_dtoa_r+0x600>)
 800acc2:	4630      	mov	r0, r6
 800acc4:	f7f5 fc98 	bl	80005f8 <__aeabi_dmul>
 800acc8:	e9cd 0100 	strd	r0, r1, [sp]
 800accc:	9f02      	ldr	r7, [sp, #8]
 800acce:	3501      	adds	r5, #1
 800acd0:	4628      	mov	r0, r5
 800acd2:	f7f5 fc27 	bl	8000524 <__aeabi_i2d>
 800acd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acda:	f7f5 fc8d 	bl	80005f8 <__aeabi_dmul>
 800acde:	2200      	movs	r2, #0
 800ace0:	4b84      	ldr	r3, [pc, #528]	; (800aef4 <_dtoa_r+0x604>)
 800ace2:	f7f5 fad3 	bl	800028c <__adddf3>
 800ace6:	4605      	mov	r5, r0
 800ace8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800acec:	2f00      	cmp	r7, #0
 800acee:	d15d      	bne.n	800adac <_dtoa_r+0x4bc>
 800acf0:	2200      	movs	r2, #0
 800acf2:	4b81      	ldr	r3, [pc, #516]	; (800aef8 <_dtoa_r+0x608>)
 800acf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acf8:	f7f5 fac6 	bl	8000288 <__aeabi_dsub>
 800acfc:	462a      	mov	r2, r5
 800acfe:	4633      	mov	r3, r6
 800ad00:	e9cd 0100 	strd	r0, r1, [sp]
 800ad04:	f7f5 ff08 	bl	8000b18 <__aeabi_dcmpgt>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	f040 8288 	bne.w	800b21e <_dtoa_r+0x92e>
 800ad0e:	462a      	mov	r2, r5
 800ad10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ad14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad18:	f7f5 fee0 	bl	8000adc <__aeabi_dcmplt>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	f040 827c 	bne.w	800b21a <_dtoa_r+0x92a>
 800ad22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad26:	e9cd 2300 	strd	r2, r3, [sp]
 800ad2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f2c0 8150 	blt.w	800afd2 <_dtoa_r+0x6e2>
 800ad32:	f1ba 0f0e 	cmp.w	sl, #14
 800ad36:	f300 814c 	bgt.w	800afd2 <_dtoa_r+0x6e2>
 800ad3a:	4b6a      	ldr	r3, [pc, #424]	; (800aee4 <_dtoa_r+0x5f4>)
 800ad3c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ad40:	ed93 7b00 	vldr	d7, [r3]
 800ad44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad4c:	f280 80d8 	bge.w	800af00 <_dtoa_r+0x610>
 800ad50:	f1b9 0f00 	cmp.w	r9, #0
 800ad54:	f300 80d4 	bgt.w	800af00 <_dtoa_r+0x610>
 800ad58:	f040 825e 	bne.w	800b218 <_dtoa_r+0x928>
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	4b66      	ldr	r3, [pc, #408]	; (800aef8 <_dtoa_r+0x608>)
 800ad60:	ec51 0b17 	vmov	r0, r1, d7
 800ad64:	f7f5 fc48 	bl	80005f8 <__aeabi_dmul>
 800ad68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad6c:	f7f5 feca 	bl	8000b04 <__aeabi_dcmpge>
 800ad70:	464f      	mov	r7, r9
 800ad72:	464e      	mov	r6, r9
 800ad74:	2800      	cmp	r0, #0
 800ad76:	f040 8234 	bne.w	800b1e2 <_dtoa_r+0x8f2>
 800ad7a:	2331      	movs	r3, #49	; 0x31
 800ad7c:	f10b 0501 	add.w	r5, fp, #1
 800ad80:	f88b 3000 	strb.w	r3, [fp]
 800ad84:	f10a 0a01 	add.w	sl, sl, #1
 800ad88:	e22f      	b.n	800b1ea <_dtoa_r+0x8fa>
 800ad8a:	07f2      	lsls	r2, r6, #31
 800ad8c:	d505      	bpl.n	800ad9a <_dtoa_r+0x4aa>
 800ad8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad92:	f7f5 fc31 	bl	80005f8 <__aeabi_dmul>
 800ad96:	3501      	adds	r5, #1
 800ad98:	2301      	movs	r3, #1
 800ad9a:	1076      	asrs	r6, r6, #1
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	e772      	b.n	800ac86 <_dtoa_r+0x396>
 800ada0:	2502      	movs	r5, #2
 800ada2:	e774      	b.n	800ac8e <_dtoa_r+0x39e>
 800ada4:	f8cd a020 	str.w	sl, [sp, #32]
 800ada8:	464f      	mov	r7, r9
 800adaa:	e791      	b.n	800acd0 <_dtoa_r+0x3e0>
 800adac:	4b4d      	ldr	r3, [pc, #308]	; (800aee4 <_dtoa_r+0x5f4>)
 800adae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800adb2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800adb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d047      	beq.n	800ae4c <_dtoa_r+0x55c>
 800adbc:	4602      	mov	r2, r0
 800adbe:	460b      	mov	r3, r1
 800adc0:	2000      	movs	r0, #0
 800adc2:	494e      	ldr	r1, [pc, #312]	; (800aefc <_dtoa_r+0x60c>)
 800adc4:	f7f5 fd42 	bl	800084c <__aeabi_ddiv>
 800adc8:	462a      	mov	r2, r5
 800adca:	4633      	mov	r3, r6
 800adcc:	f7f5 fa5c 	bl	8000288 <__aeabi_dsub>
 800add0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800add4:	465d      	mov	r5, fp
 800add6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adda:	f7f5 febd 	bl	8000b58 <__aeabi_d2iz>
 800adde:	4606      	mov	r6, r0
 800ade0:	f7f5 fba0 	bl	8000524 <__aeabi_i2d>
 800ade4:	4602      	mov	r2, r0
 800ade6:	460b      	mov	r3, r1
 800ade8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adec:	f7f5 fa4c 	bl	8000288 <__aeabi_dsub>
 800adf0:	3630      	adds	r6, #48	; 0x30
 800adf2:	f805 6b01 	strb.w	r6, [r5], #1
 800adf6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800adfa:	e9cd 0100 	strd	r0, r1, [sp]
 800adfe:	f7f5 fe6d 	bl	8000adc <__aeabi_dcmplt>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d163      	bne.n	800aece <_dtoa_r+0x5de>
 800ae06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae0a:	2000      	movs	r0, #0
 800ae0c:	4937      	ldr	r1, [pc, #220]	; (800aeec <_dtoa_r+0x5fc>)
 800ae0e:	f7f5 fa3b 	bl	8000288 <__aeabi_dsub>
 800ae12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ae16:	f7f5 fe61 	bl	8000adc <__aeabi_dcmplt>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	f040 80b7 	bne.w	800af8e <_dtoa_r+0x69e>
 800ae20:	eba5 030b 	sub.w	r3, r5, fp
 800ae24:	429f      	cmp	r7, r3
 800ae26:	f77f af7c 	ble.w	800ad22 <_dtoa_r+0x432>
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	4b30      	ldr	r3, [pc, #192]	; (800aef0 <_dtoa_r+0x600>)
 800ae2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae32:	f7f5 fbe1 	bl	80005f8 <__aeabi_dmul>
 800ae36:	2200      	movs	r2, #0
 800ae38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ae3c:	4b2c      	ldr	r3, [pc, #176]	; (800aef0 <_dtoa_r+0x600>)
 800ae3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae42:	f7f5 fbd9 	bl	80005f8 <__aeabi_dmul>
 800ae46:	e9cd 0100 	strd	r0, r1, [sp]
 800ae4a:	e7c4      	b.n	800add6 <_dtoa_r+0x4e6>
 800ae4c:	462a      	mov	r2, r5
 800ae4e:	4633      	mov	r3, r6
 800ae50:	f7f5 fbd2 	bl	80005f8 <__aeabi_dmul>
 800ae54:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ae58:	eb0b 0507 	add.w	r5, fp, r7
 800ae5c:	465e      	mov	r6, fp
 800ae5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae62:	f7f5 fe79 	bl	8000b58 <__aeabi_d2iz>
 800ae66:	4607      	mov	r7, r0
 800ae68:	f7f5 fb5c 	bl	8000524 <__aeabi_i2d>
 800ae6c:	3730      	adds	r7, #48	; 0x30
 800ae6e:	4602      	mov	r2, r0
 800ae70:	460b      	mov	r3, r1
 800ae72:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae76:	f7f5 fa07 	bl	8000288 <__aeabi_dsub>
 800ae7a:	f806 7b01 	strb.w	r7, [r6], #1
 800ae7e:	42ae      	cmp	r6, r5
 800ae80:	e9cd 0100 	strd	r0, r1, [sp]
 800ae84:	f04f 0200 	mov.w	r2, #0
 800ae88:	d126      	bne.n	800aed8 <_dtoa_r+0x5e8>
 800ae8a:	4b1c      	ldr	r3, [pc, #112]	; (800aefc <_dtoa_r+0x60c>)
 800ae8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae90:	f7f5 f9fc 	bl	800028c <__adddf3>
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae9c:	f7f5 fe3c 	bl	8000b18 <__aeabi_dcmpgt>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	d174      	bne.n	800af8e <_dtoa_r+0x69e>
 800aea4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aea8:	2000      	movs	r0, #0
 800aeaa:	4914      	ldr	r1, [pc, #80]	; (800aefc <_dtoa_r+0x60c>)
 800aeac:	f7f5 f9ec 	bl	8000288 <__aeabi_dsub>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aeb8:	f7f5 fe10 	bl	8000adc <__aeabi_dcmplt>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	f43f af30 	beq.w	800ad22 <_dtoa_r+0x432>
 800aec2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aec6:	2b30      	cmp	r3, #48	; 0x30
 800aec8:	f105 32ff 	add.w	r2, r5, #4294967295
 800aecc:	d002      	beq.n	800aed4 <_dtoa_r+0x5e4>
 800aece:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aed2:	e04a      	b.n	800af6a <_dtoa_r+0x67a>
 800aed4:	4615      	mov	r5, r2
 800aed6:	e7f4      	b.n	800aec2 <_dtoa_r+0x5d2>
 800aed8:	4b05      	ldr	r3, [pc, #20]	; (800aef0 <_dtoa_r+0x600>)
 800aeda:	f7f5 fb8d 	bl	80005f8 <__aeabi_dmul>
 800aede:	e9cd 0100 	strd	r0, r1, [sp]
 800aee2:	e7bc      	b.n	800ae5e <_dtoa_r+0x56e>
 800aee4:	0800ddf0 	.word	0x0800ddf0
 800aee8:	0800ddc8 	.word	0x0800ddc8
 800aeec:	3ff00000 	.word	0x3ff00000
 800aef0:	40240000 	.word	0x40240000
 800aef4:	401c0000 	.word	0x401c0000
 800aef8:	40140000 	.word	0x40140000
 800aefc:	3fe00000 	.word	0x3fe00000
 800af00:	e9dd 6700 	ldrd	r6, r7, [sp]
 800af04:	465d      	mov	r5, fp
 800af06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af0a:	4630      	mov	r0, r6
 800af0c:	4639      	mov	r1, r7
 800af0e:	f7f5 fc9d 	bl	800084c <__aeabi_ddiv>
 800af12:	f7f5 fe21 	bl	8000b58 <__aeabi_d2iz>
 800af16:	4680      	mov	r8, r0
 800af18:	f7f5 fb04 	bl	8000524 <__aeabi_i2d>
 800af1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af20:	f7f5 fb6a 	bl	80005f8 <__aeabi_dmul>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	4630      	mov	r0, r6
 800af2a:	4639      	mov	r1, r7
 800af2c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800af30:	f7f5 f9aa 	bl	8000288 <__aeabi_dsub>
 800af34:	f805 6b01 	strb.w	r6, [r5], #1
 800af38:	eba5 060b 	sub.w	r6, r5, fp
 800af3c:	45b1      	cmp	r9, r6
 800af3e:	4602      	mov	r2, r0
 800af40:	460b      	mov	r3, r1
 800af42:	d139      	bne.n	800afb8 <_dtoa_r+0x6c8>
 800af44:	f7f5 f9a2 	bl	800028c <__adddf3>
 800af48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af4c:	4606      	mov	r6, r0
 800af4e:	460f      	mov	r7, r1
 800af50:	f7f5 fde2 	bl	8000b18 <__aeabi_dcmpgt>
 800af54:	b9c8      	cbnz	r0, 800af8a <_dtoa_r+0x69a>
 800af56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af5a:	4630      	mov	r0, r6
 800af5c:	4639      	mov	r1, r7
 800af5e:	f7f5 fdb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800af62:	b110      	cbz	r0, 800af6a <_dtoa_r+0x67a>
 800af64:	f018 0f01 	tst.w	r8, #1
 800af68:	d10f      	bne.n	800af8a <_dtoa_r+0x69a>
 800af6a:	9904      	ldr	r1, [sp, #16]
 800af6c:	4620      	mov	r0, r4
 800af6e:	f000 fe0a 	bl	800bb86 <_Bfree>
 800af72:	2300      	movs	r3, #0
 800af74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af76:	702b      	strb	r3, [r5, #0]
 800af78:	f10a 0301 	add.w	r3, sl, #1
 800af7c:	6013      	str	r3, [r2, #0]
 800af7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af80:	2b00      	cmp	r3, #0
 800af82:	f000 8241 	beq.w	800b408 <_dtoa_r+0xb18>
 800af86:	601d      	str	r5, [r3, #0]
 800af88:	e23e      	b.n	800b408 <_dtoa_r+0xb18>
 800af8a:	f8cd a020 	str.w	sl, [sp, #32]
 800af8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800af92:	2a39      	cmp	r2, #57	; 0x39
 800af94:	f105 33ff 	add.w	r3, r5, #4294967295
 800af98:	d108      	bne.n	800afac <_dtoa_r+0x6bc>
 800af9a:	459b      	cmp	fp, r3
 800af9c:	d10a      	bne.n	800afb4 <_dtoa_r+0x6c4>
 800af9e:	9b08      	ldr	r3, [sp, #32]
 800afa0:	3301      	adds	r3, #1
 800afa2:	9308      	str	r3, [sp, #32]
 800afa4:	2330      	movs	r3, #48	; 0x30
 800afa6:	f88b 3000 	strb.w	r3, [fp]
 800afaa:	465b      	mov	r3, fp
 800afac:	781a      	ldrb	r2, [r3, #0]
 800afae:	3201      	adds	r2, #1
 800afb0:	701a      	strb	r2, [r3, #0]
 800afb2:	e78c      	b.n	800aece <_dtoa_r+0x5de>
 800afb4:	461d      	mov	r5, r3
 800afb6:	e7ea      	b.n	800af8e <_dtoa_r+0x69e>
 800afb8:	2200      	movs	r2, #0
 800afba:	4b9b      	ldr	r3, [pc, #620]	; (800b228 <_dtoa_r+0x938>)
 800afbc:	f7f5 fb1c 	bl	80005f8 <__aeabi_dmul>
 800afc0:	2200      	movs	r2, #0
 800afc2:	2300      	movs	r3, #0
 800afc4:	4606      	mov	r6, r0
 800afc6:	460f      	mov	r7, r1
 800afc8:	f7f5 fd7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800afcc:	2800      	cmp	r0, #0
 800afce:	d09a      	beq.n	800af06 <_dtoa_r+0x616>
 800afd0:	e7cb      	b.n	800af6a <_dtoa_r+0x67a>
 800afd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afd4:	2a00      	cmp	r2, #0
 800afd6:	f000 808b 	beq.w	800b0f0 <_dtoa_r+0x800>
 800afda:	9a06      	ldr	r2, [sp, #24]
 800afdc:	2a01      	cmp	r2, #1
 800afde:	dc6e      	bgt.n	800b0be <_dtoa_r+0x7ce>
 800afe0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800afe2:	2a00      	cmp	r2, #0
 800afe4:	d067      	beq.n	800b0b6 <_dtoa_r+0x7c6>
 800afe6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800afea:	9f07      	ldr	r7, [sp, #28]
 800afec:	9d05      	ldr	r5, [sp, #20]
 800afee:	9a05      	ldr	r2, [sp, #20]
 800aff0:	2101      	movs	r1, #1
 800aff2:	441a      	add	r2, r3
 800aff4:	4620      	mov	r0, r4
 800aff6:	9205      	str	r2, [sp, #20]
 800aff8:	4498      	add	r8, r3
 800affa:	f000 fea2 	bl	800bd42 <__i2b>
 800affe:	4606      	mov	r6, r0
 800b000:	2d00      	cmp	r5, #0
 800b002:	dd0c      	ble.n	800b01e <_dtoa_r+0x72e>
 800b004:	f1b8 0f00 	cmp.w	r8, #0
 800b008:	dd09      	ble.n	800b01e <_dtoa_r+0x72e>
 800b00a:	4545      	cmp	r5, r8
 800b00c:	9a05      	ldr	r2, [sp, #20]
 800b00e:	462b      	mov	r3, r5
 800b010:	bfa8      	it	ge
 800b012:	4643      	movge	r3, r8
 800b014:	1ad2      	subs	r2, r2, r3
 800b016:	9205      	str	r2, [sp, #20]
 800b018:	1aed      	subs	r5, r5, r3
 800b01a:	eba8 0803 	sub.w	r8, r8, r3
 800b01e:	9b07      	ldr	r3, [sp, #28]
 800b020:	b1eb      	cbz	r3, 800b05e <_dtoa_r+0x76e>
 800b022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b024:	2b00      	cmp	r3, #0
 800b026:	d067      	beq.n	800b0f8 <_dtoa_r+0x808>
 800b028:	b18f      	cbz	r7, 800b04e <_dtoa_r+0x75e>
 800b02a:	4631      	mov	r1, r6
 800b02c:	463a      	mov	r2, r7
 800b02e:	4620      	mov	r0, r4
 800b030:	f000 ff26 	bl	800be80 <__pow5mult>
 800b034:	9a04      	ldr	r2, [sp, #16]
 800b036:	4601      	mov	r1, r0
 800b038:	4606      	mov	r6, r0
 800b03a:	4620      	mov	r0, r4
 800b03c:	f000 fe8a 	bl	800bd54 <__multiply>
 800b040:	9904      	ldr	r1, [sp, #16]
 800b042:	9008      	str	r0, [sp, #32]
 800b044:	4620      	mov	r0, r4
 800b046:	f000 fd9e 	bl	800bb86 <_Bfree>
 800b04a:	9b08      	ldr	r3, [sp, #32]
 800b04c:	9304      	str	r3, [sp, #16]
 800b04e:	9b07      	ldr	r3, [sp, #28]
 800b050:	1bda      	subs	r2, r3, r7
 800b052:	d004      	beq.n	800b05e <_dtoa_r+0x76e>
 800b054:	9904      	ldr	r1, [sp, #16]
 800b056:	4620      	mov	r0, r4
 800b058:	f000 ff12 	bl	800be80 <__pow5mult>
 800b05c:	9004      	str	r0, [sp, #16]
 800b05e:	2101      	movs	r1, #1
 800b060:	4620      	mov	r0, r4
 800b062:	f000 fe6e 	bl	800bd42 <__i2b>
 800b066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b068:	4607      	mov	r7, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f000 81d0 	beq.w	800b410 <_dtoa_r+0xb20>
 800b070:	461a      	mov	r2, r3
 800b072:	4601      	mov	r1, r0
 800b074:	4620      	mov	r0, r4
 800b076:	f000 ff03 	bl	800be80 <__pow5mult>
 800b07a:	9b06      	ldr	r3, [sp, #24]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	4607      	mov	r7, r0
 800b080:	dc40      	bgt.n	800b104 <_dtoa_r+0x814>
 800b082:	9b00      	ldr	r3, [sp, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d139      	bne.n	800b0fc <_dtoa_r+0x80c>
 800b088:	9b01      	ldr	r3, [sp, #4]
 800b08a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d136      	bne.n	800b100 <_dtoa_r+0x810>
 800b092:	9b01      	ldr	r3, [sp, #4]
 800b094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b098:	0d1b      	lsrs	r3, r3, #20
 800b09a:	051b      	lsls	r3, r3, #20
 800b09c:	b12b      	cbz	r3, 800b0aa <_dtoa_r+0x7ba>
 800b09e:	9b05      	ldr	r3, [sp, #20]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	9305      	str	r3, [sp, #20]
 800b0a4:	f108 0801 	add.w	r8, r8, #1
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	9307      	str	r3, [sp, #28]
 800b0ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d12a      	bne.n	800b108 <_dtoa_r+0x818>
 800b0b2:	2001      	movs	r0, #1
 800b0b4:	e030      	b.n	800b118 <_dtoa_r+0x828>
 800b0b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b0bc:	e795      	b.n	800afea <_dtoa_r+0x6fa>
 800b0be:	9b07      	ldr	r3, [sp, #28]
 800b0c0:	f109 37ff 	add.w	r7, r9, #4294967295
 800b0c4:	42bb      	cmp	r3, r7
 800b0c6:	bfbf      	itttt	lt
 800b0c8:	9b07      	ldrlt	r3, [sp, #28]
 800b0ca:	9707      	strlt	r7, [sp, #28]
 800b0cc:	1afa      	sublt	r2, r7, r3
 800b0ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b0d0:	bfbb      	ittet	lt
 800b0d2:	189b      	addlt	r3, r3, r2
 800b0d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b0d6:	1bdf      	subge	r7, r3, r7
 800b0d8:	2700      	movlt	r7, #0
 800b0da:	f1b9 0f00 	cmp.w	r9, #0
 800b0de:	bfb5      	itete	lt
 800b0e0:	9b05      	ldrlt	r3, [sp, #20]
 800b0e2:	9d05      	ldrge	r5, [sp, #20]
 800b0e4:	eba3 0509 	sublt.w	r5, r3, r9
 800b0e8:	464b      	movge	r3, r9
 800b0ea:	bfb8      	it	lt
 800b0ec:	2300      	movlt	r3, #0
 800b0ee:	e77e      	b.n	800afee <_dtoa_r+0x6fe>
 800b0f0:	9f07      	ldr	r7, [sp, #28]
 800b0f2:	9d05      	ldr	r5, [sp, #20]
 800b0f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b0f6:	e783      	b.n	800b000 <_dtoa_r+0x710>
 800b0f8:	9a07      	ldr	r2, [sp, #28]
 800b0fa:	e7ab      	b.n	800b054 <_dtoa_r+0x764>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	e7d4      	b.n	800b0aa <_dtoa_r+0x7ba>
 800b100:	9b00      	ldr	r3, [sp, #0]
 800b102:	e7d2      	b.n	800b0aa <_dtoa_r+0x7ba>
 800b104:	2300      	movs	r3, #0
 800b106:	9307      	str	r3, [sp, #28]
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b10e:	6918      	ldr	r0, [r3, #16]
 800b110:	f000 fdc9 	bl	800bca6 <__hi0bits>
 800b114:	f1c0 0020 	rsb	r0, r0, #32
 800b118:	4440      	add	r0, r8
 800b11a:	f010 001f 	ands.w	r0, r0, #31
 800b11e:	d047      	beq.n	800b1b0 <_dtoa_r+0x8c0>
 800b120:	f1c0 0320 	rsb	r3, r0, #32
 800b124:	2b04      	cmp	r3, #4
 800b126:	dd3b      	ble.n	800b1a0 <_dtoa_r+0x8b0>
 800b128:	9b05      	ldr	r3, [sp, #20]
 800b12a:	f1c0 001c 	rsb	r0, r0, #28
 800b12e:	4403      	add	r3, r0
 800b130:	9305      	str	r3, [sp, #20]
 800b132:	4405      	add	r5, r0
 800b134:	4480      	add	r8, r0
 800b136:	9b05      	ldr	r3, [sp, #20]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	dd05      	ble.n	800b148 <_dtoa_r+0x858>
 800b13c:	461a      	mov	r2, r3
 800b13e:	9904      	ldr	r1, [sp, #16]
 800b140:	4620      	mov	r0, r4
 800b142:	f000 feeb 	bl	800bf1c <__lshift>
 800b146:	9004      	str	r0, [sp, #16]
 800b148:	f1b8 0f00 	cmp.w	r8, #0
 800b14c:	dd05      	ble.n	800b15a <_dtoa_r+0x86a>
 800b14e:	4639      	mov	r1, r7
 800b150:	4642      	mov	r2, r8
 800b152:	4620      	mov	r0, r4
 800b154:	f000 fee2 	bl	800bf1c <__lshift>
 800b158:	4607      	mov	r7, r0
 800b15a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b15c:	b353      	cbz	r3, 800b1b4 <_dtoa_r+0x8c4>
 800b15e:	4639      	mov	r1, r7
 800b160:	9804      	ldr	r0, [sp, #16]
 800b162:	f000 ff2f 	bl	800bfc4 <__mcmp>
 800b166:	2800      	cmp	r0, #0
 800b168:	da24      	bge.n	800b1b4 <_dtoa_r+0x8c4>
 800b16a:	2300      	movs	r3, #0
 800b16c:	220a      	movs	r2, #10
 800b16e:	9904      	ldr	r1, [sp, #16]
 800b170:	4620      	mov	r0, r4
 800b172:	f000 fd1f 	bl	800bbb4 <__multadd>
 800b176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b178:	9004      	str	r0, [sp, #16]
 800b17a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b17e:	2b00      	cmp	r3, #0
 800b180:	f000 814d 	beq.w	800b41e <_dtoa_r+0xb2e>
 800b184:	2300      	movs	r3, #0
 800b186:	4631      	mov	r1, r6
 800b188:	220a      	movs	r2, #10
 800b18a:	4620      	mov	r0, r4
 800b18c:	f000 fd12 	bl	800bbb4 <__multadd>
 800b190:	9b02      	ldr	r3, [sp, #8]
 800b192:	2b00      	cmp	r3, #0
 800b194:	4606      	mov	r6, r0
 800b196:	dc4f      	bgt.n	800b238 <_dtoa_r+0x948>
 800b198:	9b06      	ldr	r3, [sp, #24]
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	dd4c      	ble.n	800b238 <_dtoa_r+0x948>
 800b19e:	e011      	b.n	800b1c4 <_dtoa_r+0x8d4>
 800b1a0:	d0c9      	beq.n	800b136 <_dtoa_r+0x846>
 800b1a2:	9a05      	ldr	r2, [sp, #20]
 800b1a4:	331c      	adds	r3, #28
 800b1a6:	441a      	add	r2, r3
 800b1a8:	9205      	str	r2, [sp, #20]
 800b1aa:	441d      	add	r5, r3
 800b1ac:	4498      	add	r8, r3
 800b1ae:	e7c2      	b.n	800b136 <_dtoa_r+0x846>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	e7f6      	b.n	800b1a2 <_dtoa_r+0x8b2>
 800b1b4:	f1b9 0f00 	cmp.w	r9, #0
 800b1b8:	dc38      	bgt.n	800b22c <_dtoa_r+0x93c>
 800b1ba:	9b06      	ldr	r3, [sp, #24]
 800b1bc:	2b02      	cmp	r3, #2
 800b1be:	dd35      	ble.n	800b22c <_dtoa_r+0x93c>
 800b1c0:	f8cd 9008 	str.w	r9, [sp, #8]
 800b1c4:	9b02      	ldr	r3, [sp, #8]
 800b1c6:	b963      	cbnz	r3, 800b1e2 <_dtoa_r+0x8f2>
 800b1c8:	4639      	mov	r1, r7
 800b1ca:	2205      	movs	r2, #5
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f000 fcf1 	bl	800bbb4 <__multadd>
 800b1d2:	4601      	mov	r1, r0
 800b1d4:	4607      	mov	r7, r0
 800b1d6:	9804      	ldr	r0, [sp, #16]
 800b1d8:	f000 fef4 	bl	800bfc4 <__mcmp>
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	f73f adcc 	bgt.w	800ad7a <_dtoa_r+0x48a>
 800b1e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1e4:	465d      	mov	r5, fp
 800b1e6:	ea6f 0a03 	mvn.w	sl, r3
 800b1ea:	f04f 0900 	mov.w	r9, #0
 800b1ee:	4639      	mov	r1, r7
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f000 fcc8 	bl	800bb86 <_Bfree>
 800b1f6:	2e00      	cmp	r6, #0
 800b1f8:	f43f aeb7 	beq.w	800af6a <_dtoa_r+0x67a>
 800b1fc:	f1b9 0f00 	cmp.w	r9, #0
 800b200:	d005      	beq.n	800b20e <_dtoa_r+0x91e>
 800b202:	45b1      	cmp	r9, r6
 800b204:	d003      	beq.n	800b20e <_dtoa_r+0x91e>
 800b206:	4649      	mov	r1, r9
 800b208:	4620      	mov	r0, r4
 800b20a:	f000 fcbc 	bl	800bb86 <_Bfree>
 800b20e:	4631      	mov	r1, r6
 800b210:	4620      	mov	r0, r4
 800b212:	f000 fcb8 	bl	800bb86 <_Bfree>
 800b216:	e6a8      	b.n	800af6a <_dtoa_r+0x67a>
 800b218:	2700      	movs	r7, #0
 800b21a:	463e      	mov	r6, r7
 800b21c:	e7e1      	b.n	800b1e2 <_dtoa_r+0x8f2>
 800b21e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b222:	463e      	mov	r6, r7
 800b224:	e5a9      	b.n	800ad7a <_dtoa_r+0x48a>
 800b226:	bf00      	nop
 800b228:	40240000 	.word	0x40240000
 800b22c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b22e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b232:	2b00      	cmp	r3, #0
 800b234:	f000 80fa 	beq.w	800b42c <_dtoa_r+0xb3c>
 800b238:	2d00      	cmp	r5, #0
 800b23a:	dd05      	ble.n	800b248 <_dtoa_r+0x958>
 800b23c:	4631      	mov	r1, r6
 800b23e:	462a      	mov	r2, r5
 800b240:	4620      	mov	r0, r4
 800b242:	f000 fe6b 	bl	800bf1c <__lshift>
 800b246:	4606      	mov	r6, r0
 800b248:	9b07      	ldr	r3, [sp, #28]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d04c      	beq.n	800b2e8 <_dtoa_r+0x9f8>
 800b24e:	6871      	ldr	r1, [r6, #4]
 800b250:	4620      	mov	r0, r4
 800b252:	f000 fc64 	bl	800bb1e <_Balloc>
 800b256:	6932      	ldr	r2, [r6, #16]
 800b258:	3202      	adds	r2, #2
 800b25a:	4605      	mov	r5, r0
 800b25c:	0092      	lsls	r2, r2, #2
 800b25e:	f106 010c 	add.w	r1, r6, #12
 800b262:	300c      	adds	r0, #12
 800b264:	f000 fc50 	bl	800bb08 <memcpy>
 800b268:	2201      	movs	r2, #1
 800b26a:	4629      	mov	r1, r5
 800b26c:	4620      	mov	r0, r4
 800b26e:	f000 fe55 	bl	800bf1c <__lshift>
 800b272:	9b00      	ldr	r3, [sp, #0]
 800b274:	f8cd b014 	str.w	fp, [sp, #20]
 800b278:	f003 0301 	and.w	r3, r3, #1
 800b27c:	46b1      	mov	r9, r6
 800b27e:	9307      	str	r3, [sp, #28]
 800b280:	4606      	mov	r6, r0
 800b282:	4639      	mov	r1, r7
 800b284:	9804      	ldr	r0, [sp, #16]
 800b286:	f7ff faa5 	bl	800a7d4 <quorem>
 800b28a:	4649      	mov	r1, r9
 800b28c:	4605      	mov	r5, r0
 800b28e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b292:	9804      	ldr	r0, [sp, #16]
 800b294:	f000 fe96 	bl	800bfc4 <__mcmp>
 800b298:	4632      	mov	r2, r6
 800b29a:	9000      	str	r0, [sp, #0]
 800b29c:	4639      	mov	r1, r7
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f000 feaa 	bl	800bff8 <__mdiff>
 800b2a4:	68c3      	ldr	r3, [r0, #12]
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	bb03      	cbnz	r3, 800b2ec <_dtoa_r+0x9fc>
 800b2aa:	4601      	mov	r1, r0
 800b2ac:	9008      	str	r0, [sp, #32]
 800b2ae:	9804      	ldr	r0, [sp, #16]
 800b2b0:	f000 fe88 	bl	800bfc4 <__mcmp>
 800b2b4:	9a08      	ldr	r2, [sp, #32]
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	9308      	str	r3, [sp, #32]
 800b2be:	f000 fc62 	bl	800bb86 <_Bfree>
 800b2c2:	9b08      	ldr	r3, [sp, #32]
 800b2c4:	b9a3      	cbnz	r3, 800b2f0 <_dtoa_r+0xa00>
 800b2c6:	9a06      	ldr	r2, [sp, #24]
 800b2c8:	b992      	cbnz	r2, 800b2f0 <_dtoa_r+0xa00>
 800b2ca:	9a07      	ldr	r2, [sp, #28]
 800b2cc:	b982      	cbnz	r2, 800b2f0 <_dtoa_r+0xa00>
 800b2ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b2d2:	d029      	beq.n	800b328 <_dtoa_r+0xa38>
 800b2d4:	9b00      	ldr	r3, [sp, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	dd01      	ble.n	800b2de <_dtoa_r+0x9ee>
 800b2da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b2de:	9b05      	ldr	r3, [sp, #20]
 800b2e0:	1c5d      	adds	r5, r3, #1
 800b2e2:	f883 8000 	strb.w	r8, [r3]
 800b2e6:	e782      	b.n	800b1ee <_dtoa_r+0x8fe>
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	e7c2      	b.n	800b272 <_dtoa_r+0x982>
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e7e3      	b.n	800b2b8 <_dtoa_r+0x9c8>
 800b2f0:	9a00      	ldr	r2, [sp, #0]
 800b2f2:	2a00      	cmp	r2, #0
 800b2f4:	db04      	blt.n	800b300 <_dtoa_r+0xa10>
 800b2f6:	d125      	bne.n	800b344 <_dtoa_r+0xa54>
 800b2f8:	9a06      	ldr	r2, [sp, #24]
 800b2fa:	bb1a      	cbnz	r2, 800b344 <_dtoa_r+0xa54>
 800b2fc:	9a07      	ldr	r2, [sp, #28]
 800b2fe:	bb0a      	cbnz	r2, 800b344 <_dtoa_r+0xa54>
 800b300:	2b00      	cmp	r3, #0
 800b302:	ddec      	ble.n	800b2de <_dtoa_r+0x9ee>
 800b304:	2201      	movs	r2, #1
 800b306:	9904      	ldr	r1, [sp, #16]
 800b308:	4620      	mov	r0, r4
 800b30a:	f000 fe07 	bl	800bf1c <__lshift>
 800b30e:	4639      	mov	r1, r7
 800b310:	9004      	str	r0, [sp, #16]
 800b312:	f000 fe57 	bl	800bfc4 <__mcmp>
 800b316:	2800      	cmp	r0, #0
 800b318:	dc03      	bgt.n	800b322 <_dtoa_r+0xa32>
 800b31a:	d1e0      	bne.n	800b2de <_dtoa_r+0x9ee>
 800b31c:	f018 0f01 	tst.w	r8, #1
 800b320:	d0dd      	beq.n	800b2de <_dtoa_r+0x9ee>
 800b322:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b326:	d1d8      	bne.n	800b2da <_dtoa_r+0x9ea>
 800b328:	9b05      	ldr	r3, [sp, #20]
 800b32a:	9a05      	ldr	r2, [sp, #20]
 800b32c:	1c5d      	adds	r5, r3, #1
 800b32e:	2339      	movs	r3, #57	; 0x39
 800b330:	7013      	strb	r3, [r2, #0]
 800b332:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b336:	2b39      	cmp	r3, #57	; 0x39
 800b338:	f105 32ff 	add.w	r2, r5, #4294967295
 800b33c:	d04f      	beq.n	800b3de <_dtoa_r+0xaee>
 800b33e:	3301      	adds	r3, #1
 800b340:	7013      	strb	r3, [r2, #0]
 800b342:	e754      	b.n	800b1ee <_dtoa_r+0x8fe>
 800b344:	9a05      	ldr	r2, [sp, #20]
 800b346:	2b00      	cmp	r3, #0
 800b348:	f102 0501 	add.w	r5, r2, #1
 800b34c:	dd06      	ble.n	800b35c <_dtoa_r+0xa6c>
 800b34e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b352:	d0e9      	beq.n	800b328 <_dtoa_r+0xa38>
 800b354:	f108 0801 	add.w	r8, r8, #1
 800b358:	9b05      	ldr	r3, [sp, #20]
 800b35a:	e7c2      	b.n	800b2e2 <_dtoa_r+0x9f2>
 800b35c:	9a02      	ldr	r2, [sp, #8]
 800b35e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b362:	eba5 030b 	sub.w	r3, r5, fp
 800b366:	4293      	cmp	r3, r2
 800b368:	d021      	beq.n	800b3ae <_dtoa_r+0xabe>
 800b36a:	2300      	movs	r3, #0
 800b36c:	220a      	movs	r2, #10
 800b36e:	9904      	ldr	r1, [sp, #16]
 800b370:	4620      	mov	r0, r4
 800b372:	f000 fc1f 	bl	800bbb4 <__multadd>
 800b376:	45b1      	cmp	r9, r6
 800b378:	9004      	str	r0, [sp, #16]
 800b37a:	f04f 0300 	mov.w	r3, #0
 800b37e:	f04f 020a 	mov.w	r2, #10
 800b382:	4649      	mov	r1, r9
 800b384:	4620      	mov	r0, r4
 800b386:	d105      	bne.n	800b394 <_dtoa_r+0xaa4>
 800b388:	f000 fc14 	bl	800bbb4 <__multadd>
 800b38c:	4681      	mov	r9, r0
 800b38e:	4606      	mov	r6, r0
 800b390:	9505      	str	r5, [sp, #20]
 800b392:	e776      	b.n	800b282 <_dtoa_r+0x992>
 800b394:	f000 fc0e 	bl	800bbb4 <__multadd>
 800b398:	4631      	mov	r1, r6
 800b39a:	4681      	mov	r9, r0
 800b39c:	2300      	movs	r3, #0
 800b39e:	220a      	movs	r2, #10
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f000 fc07 	bl	800bbb4 <__multadd>
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	e7f2      	b.n	800b390 <_dtoa_r+0xaa0>
 800b3aa:	f04f 0900 	mov.w	r9, #0
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	9904      	ldr	r1, [sp, #16]
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f000 fdb2 	bl	800bf1c <__lshift>
 800b3b8:	4639      	mov	r1, r7
 800b3ba:	9004      	str	r0, [sp, #16]
 800b3bc:	f000 fe02 	bl	800bfc4 <__mcmp>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	dcb6      	bgt.n	800b332 <_dtoa_r+0xa42>
 800b3c4:	d102      	bne.n	800b3cc <_dtoa_r+0xadc>
 800b3c6:	f018 0f01 	tst.w	r8, #1
 800b3ca:	d1b2      	bne.n	800b332 <_dtoa_r+0xa42>
 800b3cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b3d0:	2b30      	cmp	r3, #48	; 0x30
 800b3d2:	f105 32ff 	add.w	r2, r5, #4294967295
 800b3d6:	f47f af0a 	bne.w	800b1ee <_dtoa_r+0x8fe>
 800b3da:	4615      	mov	r5, r2
 800b3dc:	e7f6      	b.n	800b3cc <_dtoa_r+0xadc>
 800b3de:	4593      	cmp	fp, r2
 800b3e0:	d105      	bne.n	800b3ee <_dtoa_r+0xafe>
 800b3e2:	2331      	movs	r3, #49	; 0x31
 800b3e4:	f10a 0a01 	add.w	sl, sl, #1
 800b3e8:	f88b 3000 	strb.w	r3, [fp]
 800b3ec:	e6ff      	b.n	800b1ee <_dtoa_r+0x8fe>
 800b3ee:	4615      	mov	r5, r2
 800b3f0:	e79f      	b.n	800b332 <_dtoa_r+0xa42>
 800b3f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b458 <_dtoa_r+0xb68>
 800b3f6:	e007      	b.n	800b408 <_dtoa_r+0xb18>
 800b3f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b45c <_dtoa_r+0xb6c>
 800b3fe:	b11b      	cbz	r3, 800b408 <_dtoa_r+0xb18>
 800b400:	f10b 0308 	add.w	r3, fp, #8
 800b404:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b406:	6013      	str	r3, [r2, #0]
 800b408:	4658      	mov	r0, fp
 800b40a:	b017      	add	sp, #92	; 0x5c
 800b40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b410:	9b06      	ldr	r3, [sp, #24]
 800b412:	2b01      	cmp	r3, #1
 800b414:	f77f ae35 	ble.w	800b082 <_dtoa_r+0x792>
 800b418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b41a:	9307      	str	r3, [sp, #28]
 800b41c:	e649      	b.n	800b0b2 <_dtoa_r+0x7c2>
 800b41e:	9b02      	ldr	r3, [sp, #8]
 800b420:	2b00      	cmp	r3, #0
 800b422:	dc03      	bgt.n	800b42c <_dtoa_r+0xb3c>
 800b424:	9b06      	ldr	r3, [sp, #24]
 800b426:	2b02      	cmp	r3, #2
 800b428:	f73f aecc 	bgt.w	800b1c4 <_dtoa_r+0x8d4>
 800b42c:	465d      	mov	r5, fp
 800b42e:	4639      	mov	r1, r7
 800b430:	9804      	ldr	r0, [sp, #16]
 800b432:	f7ff f9cf 	bl	800a7d4 <quorem>
 800b436:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b43a:	f805 8b01 	strb.w	r8, [r5], #1
 800b43e:	9a02      	ldr	r2, [sp, #8]
 800b440:	eba5 030b 	sub.w	r3, r5, fp
 800b444:	429a      	cmp	r2, r3
 800b446:	ddb0      	ble.n	800b3aa <_dtoa_r+0xaba>
 800b448:	2300      	movs	r3, #0
 800b44a:	220a      	movs	r2, #10
 800b44c:	9904      	ldr	r1, [sp, #16]
 800b44e:	4620      	mov	r0, r4
 800b450:	f000 fbb0 	bl	800bbb4 <__multadd>
 800b454:	9004      	str	r0, [sp, #16]
 800b456:	e7ea      	b.n	800b42e <_dtoa_r+0xb3e>
 800b458:	0800dd30 	.word	0x0800dd30
 800b45c:	0800ddb0 	.word	0x0800ddb0

0800b460 <rshift>:
 800b460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b462:	6906      	ldr	r6, [r0, #16]
 800b464:	114b      	asrs	r3, r1, #5
 800b466:	429e      	cmp	r6, r3
 800b468:	f100 0414 	add.w	r4, r0, #20
 800b46c:	dd30      	ble.n	800b4d0 <rshift+0x70>
 800b46e:	f011 011f 	ands.w	r1, r1, #31
 800b472:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b476:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b47a:	d108      	bne.n	800b48e <rshift+0x2e>
 800b47c:	4621      	mov	r1, r4
 800b47e:	42b2      	cmp	r2, r6
 800b480:	460b      	mov	r3, r1
 800b482:	d211      	bcs.n	800b4a8 <rshift+0x48>
 800b484:	f852 3b04 	ldr.w	r3, [r2], #4
 800b488:	f841 3b04 	str.w	r3, [r1], #4
 800b48c:	e7f7      	b.n	800b47e <rshift+0x1e>
 800b48e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800b492:	f1c1 0c20 	rsb	ip, r1, #32
 800b496:	40cd      	lsrs	r5, r1
 800b498:	3204      	adds	r2, #4
 800b49a:	4623      	mov	r3, r4
 800b49c:	42b2      	cmp	r2, r6
 800b49e:	4617      	mov	r7, r2
 800b4a0:	d30c      	bcc.n	800b4bc <rshift+0x5c>
 800b4a2:	601d      	str	r5, [r3, #0]
 800b4a4:	b105      	cbz	r5, 800b4a8 <rshift+0x48>
 800b4a6:	3304      	adds	r3, #4
 800b4a8:	1b1a      	subs	r2, r3, r4
 800b4aa:	42a3      	cmp	r3, r4
 800b4ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b4b0:	bf08      	it	eq
 800b4b2:	2300      	moveq	r3, #0
 800b4b4:	6102      	str	r2, [r0, #16]
 800b4b6:	bf08      	it	eq
 800b4b8:	6143      	streq	r3, [r0, #20]
 800b4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4bc:	683f      	ldr	r7, [r7, #0]
 800b4be:	fa07 f70c 	lsl.w	r7, r7, ip
 800b4c2:	433d      	orrs	r5, r7
 800b4c4:	f843 5b04 	str.w	r5, [r3], #4
 800b4c8:	f852 5b04 	ldr.w	r5, [r2], #4
 800b4cc:	40cd      	lsrs	r5, r1
 800b4ce:	e7e5      	b.n	800b49c <rshift+0x3c>
 800b4d0:	4623      	mov	r3, r4
 800b4d2:	e7e9      	b.n	800b4a8 <rshift+0x48>

0800b4d4 <__hexdig_fun>:
 800b4d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b4d8:	2b09      	cmp	r3, #9
 800b4da:	d802      	bhi.n	800b4e2 <__hexdig_fun+0xe>
 800b4dc:	3820      	subs	r0, #32
 800b4de:	b2c0      	uxtb	r0, r0
 800b4e0:	4770      	bx	lr
 800b4e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b4e6:	2b05      	cmp	r3, #5
 800b4e8:	d801      	bhi.n	800b4ee <__hexdig_fun+0x1a>
 800b4ea:	3847      	subs	r0, #71	; 0x47
 800b4ec:	e7f7      	b.n	800b4de <__hexdig_fun+0xa>
 800b4ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b4f2:	2b05      	cmp	r3, #5
 800b4f4:	d801      	bhi.n	800b4fa <__hexdig_fun+0x26>
 800b4f6:	3827      	subs	r0, #39	; 0x27
 800b4f8:	e7f1      	b.n	800b4de <__hexdig_fun+0xa>
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	4770      	bx	lr

0800b4fe <__gethex>:
 800b4fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b502:	b08b      	sub	sp, #44	; 0x2c
 800b504:	468a      	mov	sl, r1
 800b506:	9002      	str	r0, [sp, #8]
 800b508:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b50a:	9306      	str	r3, [sp, #24]
 800b50c:	4690      	mov	r8, r2
 800b50e:	f000 fad0 	bl	800bab2 <__localeconv_l>
 800b512:	6803      	ldr	r3, [r0, #0]
 800b514:	9303      	str	r3, [sp, #12]
 800b516:	4618      	mov	r0, r3
 800b518:	f7f4 fe5a 	bl	80001d0 <strlen>
 800b51c:	9b03      	ldr	r3, [sp, #12]
 800b51e:	9001      	str	r0, [sp, #4]
 800b520:	4403      	add	r3, r0
 800b522:	f04f 0b00 	mov.w	fp, #0
 800b526:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b52a:	9307      	str	r3, [sp, #28]
 800b52c:	f8da 3000 	ldr.w	r3, [sl]
 800b530:	3302      	adds	r3, #2
 800b532:	461f      	mov	r7, r3
 800b534:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b538:	2830      	cmp	r0, #48	; 0x30
 800b53a:	d06c      	beq.n	800b616 <__gethex+0x118>
 800b53c:	f7ff ffca 	bl	800b4d4 <__hexdig_fun>
 800b540:	4604      	mov	r4, r0
 800b542:	2800      	cmp	r0, #0
 800b544:	d16a      	bne.n	800b61c <__gethex+0x11e>
 800b546:	9a01      	ldr	r2, [sp, #4]
 800b548:	9903      	ldr	r1, [sp, #12]
 800b54a:	4638      	mov	r0, r7
 800b54c:	f001 f8fe 	bl	800c74c <strncmp>
 800b550:	2800      	cmp	r0, #0
 800b552:	d166      	bne.n	800b622 <__gethex+0x124>
 800b554:	9b01      	ldr	r3, [sp, #4]
 800b556:	5cf8      	ldrb	r0, [r7, r3]
 800b558:	18fe      	adds	r6, r7, r3
 800b55a:	f7ff ffbb 	bl	800b4d4 <__hexdig_fun>
 800b55e:	2800      	cmp	r0, #0
 800b560:	d062      	beq.n	800b628 <__gethex+0x12a>
 800b562:	4633      	mov	r3, r6
 800b564:	7818      	ldrb	r0, [r3, #0]
 800b566:	2830      	cmp	r0, #48	; 0x30
 800b568:	461f      	mov	r7, r3
 800b56a:	f103 0301 	add.w	r3, r3, #1
 800b56e:	d0f9      	beq.n	800b564 <__gethex+0x66>
 800b570:	f7ff ffb0 	bl	800b4d4 <__hexdig_fun>
 800b574:	fab0 f580 	clz	r5, r0
 800b578:	096d      	lsrs	r5, r5, #5
 800b57a:	4634      	mov	r4, r6
 800b57c:	f04f 0b01 	mov.w	fp, #1
 800b580:	463a      	mov	r2, r7
 800b582:	4616      	mov	r6, r2
 800b584:	3201      	adds	r2, #1
 800b586:	7830      	ldrb	r0, [r6, #0]
 800b588:	f7ff ffa4 	bl	800b4d4 <__hexdig_fun>
 800b58c:	2800      	cmp	r0, #0
 800b58e:	d1f8      	bne.n	800b582 <__gethex+0x84>
 800b590:	9a01      	ldr	r2, [sp, #4]
 800b592:	9903      	ldr	r1, [sp, #12]
 800b594:	4630      	mov	r0, r6
 800b596:	f001 f8d9 	bl	800c74c <strncmp>
 800b59a:	b950      	cbnz	r0, 800b5b2 <__gethex+0xb4>
 800b59c:	b954      	cbnz	r4, 800b5b4 <__gethex+0xb6>
 800b59e:	9b01      	ldr	r3, [sp, #4]
 800b5a0:	18f4      	adds	r4, r6, r3
 800b5a2:	4622      	mov	r2, r4
 800b5a4:	4616      	mov	r6, r2
 800b5a6:	3201      	adds	r2, #1
 800b5a8:	7830      	ldrb	r0, [r6, #0]
 800b5aa:	f7ff ff93 	bl	800b4d4 <__hexdig_fun>
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	d1f8      	bne.n	800b5a4 <__gethex+0xa6>
 800b5b2:	b10c      	cbz	r4, 800b5b8 <__gethex+0xba>
 800b5b4:	1ba4      	subs	r4, r4, r6
 800b5b6:	00a4      	lsls	r4, r4, #2
 800b5b8:	7833      	ldrb	r3, [r6, #0]
 800b5ba:	2b50      	cmp	r3, #80	; 0x50
 800b5bc:	d001      	beq.n	800b5c2 <__gethex+0xc4>
 800b5be:	2b70      	cmp	r3, #112	; 0x70
 800b5c0:	d140      	bne.n	800b644 <__gethex+0x146>
 800b5c2:	7873      	ldrb	r3, [r6, #1]
 800b5c4:	2b2b      	cmp	r3, #43	; 0x2b
 800b5c6:	d031      	beq.n	800b62c <__gethex+0x12e>
 800b5c8:	2b2d      	cmp	r3, #45	; 0x2d
 800b5ca:	d033      	beq.n	800b634 <__gethex+0x136>
 800b5cc:	1c71      	adds	r1, r6, #1
 800b5ce:	f04f 0900 	mov.w	r9, #0
 800b5d2:	7808      	ldrb	r0, [r1, #0]
 800b5d4:	f7ff ff7e 	bl	800b4d4 <__hexdig_fun>
 800b5d8:	1e43      	subs	r3, r0, #1
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	2b18      	cmp	r3, #24
 800b5de:	d831      	bhi.n	800b644 <__gethex+0x146>
 800b5e0:	f1a0 0210 	sub.w	r2, r0, #16
 800b5e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b5e8:	f7ff ff74 	bl	800b4d4 <__hexdig_fun>
 800b5ec:	1e43      	subs	r3, r0, #1
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	2b18      	cmp	r3, #24
 800b5f2:	d922      	bls.n	800b63a <__gethex+0x13c>
 800b5f4:	f1b9 0f00 	cmp.w	r9, #0
 800b5f8:	d000      	beq.n	800b5fc <__gethex+0xfe>
 800b5fa:	4252      	negs	r2, r2
 800b5fc:	4414      	add	r4, r2
 800b5fe:	f8ca 1000 	str.w	r1, [sl]
 800b602:	b30d      	cbz	r5, 800b648 <__gethex+0x14a>
 800b604:	f1bb 0f00 	cmp.w	fp, #0
 800b608:	bf0c      	ite	eq
 800b60a:	2706      	moveq	r7, #6
 800b60c:	2700      	movne	r7, #0
 800b60e:	4638      	mov	r0, r7
 800b610:	b00b      	add	sp, #44	; 0x2c
 800b612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b616:	f10b 0b01 	add.w	fp, fp, #1
 800b61a:	e78a      	b.n	800b532 <__gethex+0x34>
 800b61c:	2500      	movs	r5, #0
 800b61e:	462c      	mov	r4, r5
 800b620:	e7ae      	b.n	800b580 <__gethex+0x82>
 800b622:	463e      	mov	r6, r7
 800b624:	2501      	movs	r5, #1
 800b626:	e7c7      	b.n	800b5b8 <__gethex+0xba>
 800b628:	4604      	mov	r4, r0
 800b62a:	e7fb      	b.n	800b624 <__gethex+0x126>
 800b62c:	f04f 0900 	mov.w	r9, #0
 800b630:	1cb1      	adds	r1, r6, #2
 800b632:	e7ce      	b.n	800b5d2 <__gethex+0xd4>
 800b634:	f04f 0901 	mov.w	r9, #1
 800b638:	e7fa      	b.n	800b630 <__gethex+0x132>
 800b63a:	230a      	movs	r3, #10
 800b63c:	fb03 0202 	mla	r2, r3, r2, r0
 800b640:	3a10      	subs	r2, #16
 800b642:	e7cf      	b.n	800b5e4 <__gethex+0xe6>
 800b644:	4631      	mov	r1, r6
 800b646:	e7da      	b.n	800b5fe <__gethex+0x100>
 800b648:	1bf3      	subs	r3, r6, r7
 800b64a:	3b01      	subs	r3, #1
 800b64c:	4629      	mov	r1, r5
 800b64e:	2b07      	cmp	r3, #7
 800b650:	dc49      	bgt.n	800b6e6 <__gethex+0x1e8>
 800b652:	9802      	ldr	r0, [sp, #8]
 800b654:	f000 fa63 	bl	800bb1e <_Balloc>
 800b658:	9b01      	ldr	r3, [sp, #4]
 800b65a:	f100 0914 	add.w	r9, r0, #20
 800b65e:	f04f 0b00 	mov.w	fp, #0
 800b662:	f1c3 0301 	rsb	r3, r3, #1
 800b666:	4605      	mov	r5, r0
 800b668:	f8cd 9010 	str.w	r9, [sp, #16]
 800b66c:	46da      	mov	sl, fp
 800b66e:	9308      	str	r3, [sp, #32]
 800b670:	42b7      	cmp	r7, r6
 800b672:	d33b      	bcc.n	800b6ec <__gethex+0x1ee>
 800b674:	9804      	ldr	r0, [sp, #16]
 800b676:	f840 ab04 	str.w	sl, [r0], #4
 800b67a:	eba0 0009 	sub.w	r0, r0, r9
 800b67e:	1080      	asrs	r0, r0, #2
 800b680:	6128      	str	r0, [r5, #16]
 800b682:	0147      	lsls	r7, r0, #5
 800b684:	4650      	mov	r0, sl
 800b686:	f000 fb0e 	bl	800bca6 <__hi0bits>
 800b68a:	f8d8 6000 	ldr.w	r6, [r8]
 800b68e:	1a3f      	subs	r7, r7, r0
 800b690:	42b7      	cmp	r7, r6
 800b692:	dd64      	ble.n	800b75e <__gethex+0x260>
 800b694:	1bbf      	subs	r7, r7, r6
 800b696:	4639      	mov	r1, r7
 800b698:	4628      	mov	r0, r5
 800b69a:	f000 fe1d 	bl	800c2d8 <__any_on>
 800b69e:	4682      	mov	sl, r0
 800b6a0:	b178      	cbz	r0, 800b6c2 <__gethex+0x1c4>
 800b6a2:	1e7b      	subs	r3, r7, #1
 800b6a4:	1159      	asrs	r1, r3, #5
 800b6a6:	f003 021f 	and.w	r2, r3, #31
 800b6aa:	f04f 0a01 	mov.w	sl, #1
 800b6ae:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b6b2:	fa0a f202 	lsl.w	r2, sl, r2
 800b6b6:	420a      	tst	r2, r1
 800b6b8:	d003      	beq.n	800b6c2 <__gethex+0x1c4>
 800b6ba:	4553      	cmp	r3, sl
 800b6bc:	dc46      	bgt.n	800b74c <__gethex+0x24e>
 800b6be:	f04f 0a02 	mov.w	sl, #2
 800b6c2:	4639      	mov	r1, r7
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	f7ff fecb 	bl	800b460 <rshift>
 800b6ca:	443c      	add	r4, r7
 800b6cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6d0:	42a3      	cmp	r3, r4
 800b6d2:	da52      	bge.n	800b77a <__gethex+0x27c>
 800b6d4:	4629      	mov	r1, r5
 800b6d6:	9802      	ldr	r0, [sp, #8]
 800b6d8:	f000 fa55 	bl	800bb86 <_Bfree>
 800b6dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b6de:	2300      	movs	r3, #0
 800b6e0:	6013      	str	r3, [r2, #0]
 800b6e2:	27a3      	movs	r7, #163	; 0xa3
 800b6e4:	e793      	b.n	800b60e <__gethex+0x110>
 800b6e6:	3101      	adds	r1, #1
 800b6e8:	105b      	asrs	r3, r3, #1
 800b6ea:	e7b0      	b.n	800b64e <__gethex+0x150>
 800b6ec:	1e73      	subs	r3, r6, #1
 800b6ee:	9305      	str	r3, [sp, #20]
 800b6f0:	9a07      	ldr	r2, [sp, #28]
 800b6f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d018      	beq.n	800b72c <__gethex+0x22e>
 800b6fa:	f1bb 0f20 	cmp.w	fp, #32
 800b6fe:	d107      	bne.n	800b710 <__gethex+0x212>
 800b700:	9b04      	ldr	r3, [sp, #16]
 800b702:	f8c3 a000 	str.w	sl, [r3]
 800b706:	3304      	adds	r3, #4
 800b708:	f04f 0a00 	mov.w	sl, #0
 800b70c:	9304      	str	r3, [sp, #16]
 800b70e:	46d3      	mov	fp, sl
 800b710:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b714:	f7ff fede 	bl	800b4d4 <__hexdig_fun>
 800b718:	f000 000f 	and.w	r0, r0, #15
 800b71c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b720:	ea4a 0a00 	orr.w	sl, sl, r0
 800b724:	f10b 0b04 	add.w	fp, fp, #4
 800b728:	9b05      	ldr	r3, [sp, #20]
 800b72a:	e00d      	b.n	800b748 <__gethex+0x24a>
 800b72c:	9b05      	ldr	r3, [sp, #20]
 800b72e:	9a08      	ldr	r2, [sp, #32]
 800b730:	4413      	add	r3, r2
 800b732:	42bb      	cmp	r3, r7
 800b734:	d3e1      	bcc.n	800b6fa <__gethex+0x1fc>
 800b736:	4618      	mov	r0, r3
 800b738:	9a01      	ldr	r2, [sp, #4]
 800b73a:	9903      	ldr	r1, [sp, #12]
 800b73c:	9309      	str	r3, [sp, #36]	; 0x24
 800b73e:	f001 f805 	bl	800c74c <strncmp>
 800b742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b744:	2800      	cmp	r0, #0
 800b746:	d1d8      	bne.n	800b6fa <__gethex+0x1fc>
 800b748:	461e      	mov	r6, r3
 800b74a:	e791      	b.n	800b670 <__gethex+0x172>
 800b74c:	1eb9      	subs	r1, r7, #2
 800b74e:	4628      	mov	r0, r5
 800b750:	f000 fdc2 	bl	800c2d8 <__any_on>
 800b754:	2800      	cmp	r0, #0
 800b756:	d0b2      	beq.n	800b6be <__gethex+0x1c0>
 800b758:	f04f 0a03 	mov.w	sl, #3
 800b75c:	e7b1      	b.n	800b6c2 <__gethex+0x1c4>
 800b75e:	da09      	bge.n	800b774 <__gethex+0x276>
 800b760:	1bf7      	subs	r7, r6, r7
 800b762:	4629      	mov	r1, r5
 800b764:	463a      	mov	r2, r7
 800b766:	9802      	ldr	r0, [sp, #8]
 800b768:	f000 fbd8 	bl	800bf1c <__lshift>
 800b76c:	1be4      	subs	r4, r4, r7
 800b76e:	4605      	mov	r5, r0
 800b770:	f100 0914 	add.w	r9, r0, #20
 800b774:	f04f 0a00 	mov.w	sl, #0
 800b778:	e7a8      	b.n	800b6cc <__gethex+0x1ce>
 800b77a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b77e:	42a0      	cmp	r0, r4
 800b780:	dd6a      	ble.n	800b858 <__gethex+0x35a>
 800b782:	1b04      	subs	r4, r0, r4
 800b784:	42a6      	cmp	r6, r4
 800b786:	dc2e      	bgt.n	800b7e6 <__gethex+0x2e8>
 800b788:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	d022      	beq.n	800b7d6 <__gethex+0x2d8>
 800b790:	2b03      	cmp	r3, #3
 800b792:	d024      	beq.n	800b7de <__gethex+0x2e0>
 800b794:	2b01      	cmp	r3, #1
 800b796:	d115      	bne.n	800b7c4 <__gethex+0x2c6>
 800b798:	42a6      	cmp	r6, r4
 800b79a:	d113      	bne.n	800b7c4 <__gethex+0x2c6>
 800b79c:	2e01      	cmp	r6, #1
 800b79e:	dc0b      	bgt.n	800b7b8 <__gethex+0x2ba>
 800b7a0:	9a06      	ldr	r2, [sp, #24]
 800b7a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b7a6:	6013      	str	r3, [r2, #0]
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	612b      	str	r3, [r5, #16]
 800b7ac:	f8c9 3000 	str.w	r3, [r9]
 800b7b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7b2:	2762      	movs	r7, #98	; 0x62
 800b7b4:	601d      	str	r5, [r3, #0]
 800b7b6:	e72a      	b.n	800b60e <__gethex+0x110>
 800b7b8:	1e71      	subs	r1, r6, #1
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	f000 fd8c 	bl	800c2d8 <__any_on>
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d1ed      	bne.n	800b7a0 <__gethex+0x2a2>
 800b7c4:	4629      	mov	r1, r5
 800b7c6:	9802      	ldr	r0, [sp, #8]
 800b7c8:	f000 f9dd 	bl	800bb86 <_Bfree>
 800b7cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	6013      	str	r3, [r2, #0]
 800b7d2:	2750      	movs	r7, #80	; 0x50
 800b7d4:	e71b      	b.n	800b60e <__gethex+0x110>
 800b7d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d0e1      	beq.n	800b7a0 <__gethex+0x2a2>
 800b7dc:	e7f2      	b.n	800b7c4 <__gethex+0x2c6>
 800b7de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1dd      	bne.n	800b7a0 <__gethex+0x2a2>
 800b7e4:	e7ee      	b.n	800b7c4 <__gethex+0x2c6>
 800b7e6:	1e67      	subs	r7, r4, #1
 800b7e8:	f1ba 0f00 	cmp.w	sl, #0
 800b7ec:	d131      	bne.n	800b852 <__gethex+0x354>
 800b7ee:	b127      	cbz	r7, 800b7fa <__gethex+0x2fc>
 800b7f0:	4639      	mov	r1, r7
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	f000 fd70 	bl	800c2d8 <__any_on>
 800b7f8:	4682      	mov	sl, r0
 800b7fa:	117a      	asrs	r2, r7, #5
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	f007 071f 	and.w	r7, r7, #31
 800b802:	fa03 f707 	lsl.w	r7, r3, r7
 800b806:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b80a:	4621      	mov	r1, r4
 800b80c:	421f      	tst	r7, r3
 800b80e:	4628      	mov	r0, r5
 800b810:	bf18      	it	ne
 800b812:	f04a 0a02 	orrne.w	sl, sl, #2
 800b816:	1b36      	subs	r6, r6, r4
 800b818:	f7ff fe22 	bl	800b460 <rshift>
 800b81c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b820:	2702      	movs	r7, #2
 800b822:	f1ba 0f00 	cmp.w	sl, #0
 800b826:	d048      	beq.n	800b8ba <__gethex+0x3bc>
 800b828:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	d015      	beq.n	800b85c <__gethex+0x35e>
 800b830:	2b03      	cmp	r3, #3
 800b832:	d017      	beq.n	800b864 <__gethex+0x366>
 800b834:	2b01      	cmp	r3, #1
 800b836:	d109      	bne.n	800b84c <__gethex+0x34e>
 800b838:	f01a 0f02 	tst.w	sl, #2
 800b83c:	d006      	beq.n	800b84c <__gethex+0x34e>
 800b83e:	f8d9 3000 	ldr.w	r3, [r9]
 800b842:	ea4a 0a03 	orr.w	sl, sl, r3
 800b846:	f01a 0f01 	tst.w	sl, #1
 800b84a:	d10e      	bne.n	800b86a <__gethex+0x36c>
 800b84c:	f047 0710 	orr.w	r7, r7, #16
 800b850:	e033      	b.n	800b8ba <__gethex+0x3bc>
 800b852:	f04f 0a01 	mov.w	sl, #1
 800b856:	e7d0      	b.n	800b7fa <__gethex+0x2fc>
 800b858:	2701      	movs	r7, #1
 800b85a:	e7e2      	b.n	800b822 <__gethex+0x324>
 800b85c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b85e:	f1c3 0301 	rsb	r3, r3, #1
 800b862:	9315      	str	r3, [sp, #84]	; 0x54
 800b864:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b866:	2b00      	cmp	r3, #0
 800b868:	d0f0      	beq.n	800b84c <__gethex+0x34e>
 800b86a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b86e:	f105 0314 	add.w	r3, r5, #20
 800b872:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b876:	eb03 010a 	add.w	r1, r3, sl
 800b87a:	f04f 0c00 	mov.w	ip, #0
 800b87e:	4618      	mov	r0, r3
 800b880:	f853 2b04 	ldr.w	r2, [r3], #4
 800b884:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b888:	d01c      	beq.n	800b8c4 <__gethex+0x3c6>
 800b88a:	3201      	adds	r2, #1
 800b88c:	6002      	str	r2, [r0, #0]
 800b88e:	2f02      	cmp	r7, #2
 800b890:	f105 0314 	add.w	r3, r5, #20
 800b894:	d138      	bne.n	800b908 <__gethex+0x40a>
 800b896:	f8d8 2000 	ldr.w	r2, [r8]
 800b89a:	3a01      	subs	r2, #1
 800b89c:	42b2      	cmp	r2, r6
 800b89e:	d10a      	bne.n	800b8b6 <__gethex+0x3b8>
 800b8a0:	1171      	asrs	r1, r6, #5
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f006 061f 	and.w	r6, r6, #31
 800b8a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b8ac:	fa02 f606 	lsl.w	r6, r2, r6
 800b8b0:	421e      	tst	r6, r3
 800b8b2:	bf18      	it	ne
 800b8b4:	4617      	movne	r7, r2
 800b8b6:	f047 0720 	orr.w	r7, r7, #32
 800b8ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b8bc:	601d      	str	r5, [r3, #0]
 800b8be:	9b06      	ldr	r3, [sp, #24]
 800b8c0:	601c      	str	r4, [r3, #0]
 800b8c2:	e6a4      	b.n	800b60e <__gethex+0x110>
 800b8c4:	4299      	cmp	r1, r3
 800b8c6:	f843 cc04 	str.w	ip, [r3, #-4]
 800b8ca:	d8d8      	bhi.n	800b87e <__gethex+0x380>
 800b8cc:	68ab      	ldr	r3, [r5, #8]
 800b8ce:	4599      	cmp	r9, r3
 800b8d0:	db12      	blt.n	800b8f8 <__gethex+0x3fa>
 800b8d2:	6869      	ldr	r1, [r5, #4]
 800b8d4:	9802      	ldr	r0, [sp, #8]
 800b8d6:	3101      	adds	r1, #1
 800b8d8:	f000 f921 	bl	800bb1e <_Balloc>
 800b8dc:	692a      	ldr	r2, [r5, #16]
 800b8de:	3202      	adds	r2, #2
 800b8e0:	f105 010c 	add.w	r1, r5, #12
 800b8e4:	4683      	mov	fp, r0
 800b8e6:	0092      	lsls	r2, r2, #2
 800b8e8:	300c      	adds	r0, #12
 800b8ea:	f000 f90d 	bl	800bb08 <memcpy>
 800b8ee:	4629      	mov	r1, r5
 800b8f0:	9802      	ldr	r0, [sp, #8]
 800b8f2:	f000 f948 	bl	800bb86 <_Bfree>
 800b8f6:	465d      	mov	r5, fp
 800b8f8:	692b      	ldr	r3, [r5, #16]
 800b8fa:	1c5a      	adds	r2, r3, #1
 800b8fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b900:	612a      	str	r2, [r5, #16]
 800b902:	2201      	movs	r2, #1
 800b904:	615a      	str	r2, [r3, #20]
 800b906:	e7c2      	b.n	800b88e <__gethex+0x390>
 800b908:	692a      	ldr	r2, [r5, #16]
 800b90a:	454a      	cmp	r2, r9
 800b90c:	dd0b      	ble.n	800b926 <__gethex+0x428>
 800b90e:	2101      	movs	r1, #1
 800b910:	4628      	mov	r0, r5
 800b912:	f7ff fda5 	bl	800b460 <rshift>
 800b916:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b91a:	3401      	adds	r4, #1
 800b91c:	42a3      	cmp	r3, r4
 800b91e:	f6ff aed9 	blt.w	800b6d4 <__gethex+0x1d6>
 800b922:	2701      	movs	r7, #1
 800b924:	e7c7      	b.n	800b8b6 <__gethex+0x3b8>
 800b926:	f016 061f 	ands.w	r6, r6, #31
 800b92a:	d0fa      	beq.n	800b922 <__gethex+0x424>
 800b92c:	449a      	add	sl, r3
 800b92e:	f1c6 0620 	rsb	r6, r6, #32
 800b932:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b936:	f000 f9b6 	bl	800bca6 <__hi0bits>
 800b93a:	42b0      	cmp	r0, r6
 800b93c:	dbe7      	blt.n	800b90e <__gethex+0x410>
 800b93e:	e7f0      	b.n	800b922 <__gethex+0x424>

0800b940 <L_shift>:
 800b940:	f1c2 0208 	rsb	r2, r2, #8
 800b944:	0092      	lsls	r2, r2, #2
 800b946:	b570      	push	{r4, r5, r6, lr}
 800b948:	f1c2 0620 	rsb	r6, r2, #32
 800b94c:	6843      	ldr	r3, [r0, #4]
 800b94e:	6804      	ldr	r4, [r0, #0]
 800b950:	fa03 f506 	lsl.w	r5, r3, r6
 800b954:	432c      	orrs	r4, r5
 800b956:	40d3      	lsrs	r3, r2
 800b958:	6004      	str	r4, [r0, #0]
 800b95a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b95e:	4288      	cmp	r0, r1
 800b960:	d3f4      	bcc.n	800b94c <L_shift+0xc>
 800b962:	bd70      	pop	{r4, r5, r6, pc}

0800b964 <__match>:
 800b964:	b530      	push	{r4, r5, lr}
 800b966:	6803      	ldr	r3, [r0, #0]
 800b968:	3301      	adds	r3, #1
 800b96a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b96e:	b914      	cbnz	r4, 800b976 <__match+0x12>
 800b970:	6003      	str	r3, [r0, #0]
 800b972:	2001      	movs	r0, #1
 800b974:	bd30      	pop	{r4, r5, pc}
 800b976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b97a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b97e:	2d19      	cmp	r5, #25
 800b980:	bf98      	it	ls
 800b982:	3220      	addls	r2, #32
 800b984:	42a2      	cmp	r2, r4
 800b986:	d0f0      	beq.n	800b96a <__match+0x6>
 800b988:	2000      	movs	r0, #0
 800b98a:	e7f3      	b.n	800b974 <__match+0x10>

0800b98c <__hexnan>:
 800b98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b990:	680b      	ldr	r3, [r1, #0]
 800b992:	6801      	ldr	r1, [r0, #0]
 800b994:	115f      	asrs	r7, r3, #5
 800b996:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b99a:	f013 031f 	ands.w	r3, r3, #31
 800b99e:	b087      	sub	sp, #28
 800b9a0:	bf18      	it	ne
 800b9a2:	3704      	addne	r7, #4
 800b9a4:	2500      	movs	r5, #0
 800b9a6:	1f3e      	subs	r6, r7, #4
 800b9a8:	4682      	mov	sl, r0
 800b9aa:	4690      	mov	r8, r2
 800b9ac:	9301      	str	r3, [sp, #4]
 800b9ae:	f847 5c04 	str.w	r5, [r7, #-4]
 800b9b2:	46b1      	mov	r9, r6
 800b9b4:	4634      	mov	r4, r6
 800b9b6:	9502      	str	r5, [sp, #8]
 800b9b8:	46ab      	mov	fp, r5
 800b9ba:	784a      	ldrb	r2, [r1, #1]
 800b9bc:	1c4b      	adds	r3, r1, #1
 800b9be:	9303      	str	r3, [sp, #12]
 800b9c0:	b342      	cbz	r2, 800ba14 <__hexnan+0x88>
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	9105      	str	r1, [sp, #20]
 800b9c6:	9204      	str	r2, [sp, #16]
 800b9c8:	f7ff fd84 	bl	800b4d4 <__hexdig_fun>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d143      	bne.n	800ba58 <__hexnan+0xcc>
 800b9d0:	9a04      	ldr	r2, [sp, #16]
 800b9d2:	9905      	ldr	r1, [sp, #20]
 800b9d4:	2a20      	cmp	r2, #32
 800b9d6:	d818      	bhi.n	800ba0a <__hexnan+0x7e>
 800b9d8:	9b02      	ldr	r3, [sp, #8]
 800b9da:	459b      	cmp	fp, r3
 800b9dc:	dd13      	ble.n	800ba06 <__hexnan+0x7a>
 800b9de:	454c      	cmp	r4, r9
 800b9e0:	d206      	bcs.n	800b9f0 <__hexnan+0x64>
 800b9e2:	2d07      	cmp	r5, #7
 800b9e4:	dc04      	bgt.n	800b9f0 <__hexnan+0x64>
 800b9e6:	462a      	mov	r2, r5
 800b9e8:	4649      	mov	r1, r9
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f7ff ffa8 	bl	800b940 <L_shift>
 800b9f0:	4544      	cmp	r4, r8
 800b9f2:	d944      	bls.n	800ba7e <__hexnan+0xf2>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	f1a4 0904 	sub.w	r9, r4, #4
 800b9fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800b9fe:	f8cd b008 	str.w	fp, [sp, #8]
 800ba02:	464c      	mov	r4, r9
 800ba04:	461d      	mov	r5, r3
 800ba06:	9903      	ldr	r1, [sp, #12]
 800ba08:	e7d7      	b.n	800b9ba <__hexnan+0x2e>
 800ba0a:	2a29      	cmp	r2, #41	; 0x29
 800ba0c:	d14a      	bne.n	800baa4 <__hexnan+0x118>
 800ba0e:	3102      	adds	r1, #2
 800ba10:	f8ca 1000 	str.w	r1, [sl]
 800ba14:	f1bb 0f00 	cmp.w	fp, #0
 800ba18:	d044      	beq.n	800baa4 <__hexnan+0x118>
 800ba1a:	454c      	cmp	r4, r9
 800ba1c:	d206      	bcs.n	800ba2c <__hexnan+0xa0>
 800ba1e:	2d07      	cmp	r5, #7
 800ba20:	dc04      	bgt.n	800ba2c <__hexnan+0xa0>
 800ba22:	462a      	mov	r2, r5
 800ba24:	4649      	mov	r1, r9
 800ba26:	4620      	mov	r0, r4
 800ba28:	f7ff ff8a 	bl	800b940 <L_shift>
 800ba2c:	4544      	cmp	r4, r8
 800ba2e:	d928      	bls.n	800ba82 <__hexnan+0xf6>
 800ba30:	4643      	mov	r3, r8
 800ba32:	f854 2b04 	ldr.w	r2, [r4], #4
 800ba36:	f843 2b04 	str.w	r2, [r3], #4
 800ba3a:	42a6      	cmp	r6, r4
 800ba3c:	d2f9      	bcs.n	800ba32 <__hexnan+0xa6>
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f843 2b04 	str.w	r2, [r3], #4
 800ba44:	429e      	cmp	r6, r3
 800ba46:	d2fb      	bcs.n	800ba40 <__hexnan+0xb4>
 800ba48:	6833      	ldr	r3, [r6, #0]
 800ba4a:	b91b      	cbnz	r3, 800ba54 <__hexnan+0xc8>
 800ba4c:	4546      	cmp	r6, r8
 800ba4e:	d127      	bne.n	800baa0 <__hexnan+0x114>
 800ba50:	2301      	movs	r3, #1
 800ba52:	6033      	str	r3, [r6, #0]
 800ba54:	2005      	movs	r0, #5
 800ba56:	e026      	b.n	800baa6 <__hexnan+0x11a>
 800ba58:	3501      	adds	r5, #1
 800ba5a:	2d08      	cmp	r5, #8
 800ba5c:	f10b 0b01 	add.w	fp, fp, #1
 800ba60:	dd06      	ble.n	800ba70 <__hexnan+0xe4>
 800ba62:	4544      	cmp	r4, r8
 800ba64:	d9cf      	bls.n	800ba06 <__hexnan+0x7a>
 800ba66:	2300      	movs	r3, #0
 800ba68:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba6c:	2501      	movs	r5, #1
 800ba6e:	3c04      	subs	r4, #4
 800ba70:	6822      	ldr	r2, [r4, #0]
 800ba72:	f000 000f 	and.w	r0, r0, #15
 800ba76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ba7a:	6020      	str	r0, [r4, #0]
 800ba7c:	e7c3      	b.n	800ba06 <__hexnan+0x7a>
 800ba7e:	2508      	movs	r5, #8
 800ba80:	e7c1      	b.n	800ba06 <__hexnan+0x7a>
 800ba82:	9b01      	ldr	r3, [sp, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d0df      	beq.n	800ba48 <__hexnan+0xbc>
 800ba88:	f04f 32ff 	mov.w	r2, #4294967295
 800ba8c:	f1c3 0320 	rsb	r3, r3, #32
 800ba90:	fa22 f303 	lsr.w	r3, r2, r3
 800ba94:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ba98:	401a      	ands	r2, r3
 800ba9a:	f847 2c04 	str.w	r2, [r7, #-4]
 800ba9e:	e7d3      	b.n	800ba48 <__hexnan+0xbc>
 800baa0:	3e04      	subs	r6, #4
 800baa2:	e7d1      	b.n	800ba48 <__hexnan+0xbc>
 800baa4:	2004      	movs	r0, #4
 800baa6:	b007      	add	sp, #28
 800baa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800baac <__locale_ctype_ptr_l>:
 800baac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800bab0:	4770      	bx	lr

0800bab2 <__localeconv_l>:
 800bab2:	30f0      	adds	r0, #240	; 0xf0
 800bab4:	4770      	bx	lr
	...

0800bab8 <_localeconv_r>:
 800bab8:	4b04      	ldr	r3, [pc, #16]	; (800bacc <_localeconv_r+0x14>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	6a18      	ldr	r0, [r3, #32]
 800babe:	4b04      	ldr	r3, [pc, #16]	; (800bad0 <_localeconv_r+0x18>)
 800bac0:	2800      	cmp	r0, #0
 800bac2:	bf08      	it	eq
 800bac4:	4618      	moveq	r0, r3
 800bac6:	30f0      	adds	r0, #240	; 0xf0
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	20000088 	.word	0x20000088
 800bad0:	200000ec 	.word	0x200000ec

0800bad4 <malloc>:
 800bad4:	4b02      	ldr	r3, [pc, #8]	; (800bae0 <malloc+0xc>)
 800bad6:	4601      	mov	r1, r0
 800bad8:	6818      	ldr	r0, [r3, #0]
 800bada:	f000 bc7b 	b.w	800c3d4 <_malloc_r>
 800bade:	bf00      	nop
 800bae0:	20000088 	.word	0x20000088

0800bae4 <__ascii_mbtowc>:
 800bae4:	b082      	sub	sp, #8
 800bae6:	b901      	cbnz	r1, 800baea <__ascii_mbtowc+0x6>
 800bae8:	a901      	add	r1, sp, #4
 800baea:	b142      	cbz	r2, 800bafe <__ascii_mbtowc+0x1a>
 800baec:	b14b      	cbz	r3, 800bb02 <__ascii_mbtowc+0x1e>
 800baee:	7813      	ldrb	r3, [r2, #0]
 800baf0:	600b      	str	r3, [r1, #0]
 800baf2:	7812      	ldrb	r2, [r2, #0]
 800baf4:	1c10      	adds	r0, r2, #0
 800baf6:	bf18      	it	ne
 800baf8:	2001      	movne	r0, #1
 800bafa:	b002      	add	sp, #8
 800bafc:	4770      	bx	lr
 800bafe:	4610      	mov	r0, r2
 800bb00:	e7fb      	b.n	800bafa <__ascii_mbtowc+0x16>
 800bb02:	f06f 0001 	mvn.w	r0, #1
 800bb06:	e7f8      	b.n	800bafa <__ascii_mbtowc+0x16>

0800bb08 <memcpy>:
 800bb08:	b510      	push	{r4, lr}
 800bb0a:	1e43      	subs	r3, r0, #1
 800bb0c:	440a      	add	r2, r1
 800bb0e:	4291      	cmp	r1, r2
 800bb10:	d100      	bne.n	800bb14 <memcpy+0xc>
 800bb12:	bd10      	pop	{r4, pc}
 800bb14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb1c:	e7f7      	b.n	800bb0e <memcpy+0x6>

0800bb1e <_Balloc>:
 800bb1e:	b570      	push	{r4, r5, r6, lr}
 800bb20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bb22:	4604      	mov	r4, r0
 800bb24:	460e      	mov	r6, r1
 800bb26:	b93d      	cbnz	r5, 800bb38 <_Balloc+0x1a>
 800bb28:	2010      	movs	r0, #16
 800bb2a:	f7ff ffd3 	bl	800bad4 <malloc>
 800bb2e:	6260      	str	r0, [r4, #36]	; 0x24
 800bb30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bb34:	6005      	str	r5, [r0, #0]
 800bb36:	60c5      	str	r5, [r0, #12]
 800bb38:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bb3a:	68eb      	ldr	r3, [r5, #12]
 800bb3c:	b183      	cbz	r3, 800bb60 <_Balloc+0x42>
 800bb3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bb46:	b9b8      	cbnz	r0, 800bb78 <_Balloc+0x5a>
 800bb48:	2101      	movs	r1, #1
 800bb4a:	fa01 f506 	lsl.w	r5, r1, r6
 800bb4e:	1d6a      	adds	r2, r5, #5
 800bb50:	0092      	lsls	r2, r2, #2
 800bb52:	4620      	mov	r0, r4
 800bb54:	f000 fbe1 	bl	800c31a <_calloc_r>
 800bb58:	b160      	cbz	r0, 800bb74 <_Balloc+0x56>
 800bb5a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800bb5e:	e00e      	b.n	800bb7e <_Balloc+0x60>
 800bb60:	2221      	movs	r2, #33	; 0x21
 800bb62:	2104      	movs	r1, #4
 800bb64:	4620      	mov	r0, r4
 800bb66:	f000 fbd8 	bl	800c31a <_calloc_r>
 800bb6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb6c:	60e8      	str	r0, [r5, #12]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1e4      	bne.n	800bb3e <_Balloc+0x20>
 800bb74:	2000      	movs	r0, #0
 800bb76:	bd70      	pop	{r4, r5, r6, pc}
 800bb78:	6802      	ldr	r2, [r0, #0]
 800bb7a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800bb7e:	2300      	movs	r3, #0
 800bb80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb84:	e7f7      	b.n	800bb76 <_Balloc+0x58>

0800bb86 <_Bfree>:
 800bb86:	b570      	push	{r4, r5, r6, lr}
 800bb88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bb8a:	4606      	mov	r6, r0
 800bb8c:	460d      	mov	r5, r1
 800bb8e:	b93c      	cbnz	r4, 800bba0 <_Bfree+0x1a>
 800bb90:	2010      	movs	r0, #16
 800bb92:	f7ff ff9f 	bl	800bad4 <malloc>
 800bb96:	6270      	str	r0, [r6, #36]	; 0x24
 800bb98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb9c:	6004      	str	r4, [r0, #0]
 800bb9e:	60c4      	str	r4, [r0, #12]
 800bba0:	b13d      	cbz	r5, 800bbb2 <_Bfree+0x2c>
 800bba2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bba4:	686a      	ldr	r2, [r5, #4]
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbac:	6029      	str	r1, [r5, #0]
 800bbae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800bbb2:	bd70      	pop	{r4, r5, r6, pc}

0800bbb4 <__multadd>:
 800bbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb8:	690d      	ldr	r5, [r1, #16]
 800bbba:	461f      	mov	r7, r3
 800bbbc:	4606      	mov	r6, r0
 800bbbe:	460c      	mov	r4, r1
 800bbc0:	f101 0c14 	add.w	ip, r1, #20
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f8dc 0000 	ldr.w	r0, [ip]
 800bbca:	b281      	uxth	r1, r0
 800bbcc:	fb02 7101 	mla	r1, r2, r1, r7
 800bbd0:	0c0f      	lsrs	r7, r1, #16
 800bbd2:	0c00      	lsrs	r0, r0, #16
 800bbd4:	fb02 7000 	mla	r0, r2, r0, r7
 800bbd8:	b289      	uxth	r1, r1
 800bbda:	3301      	adds	r3, #1
 800bbdc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800bbe0:	429d      	cmp	r5, r3
 800bbe2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800bbe6:	f84c 1b04 	str.w	r1, [ip], #4
 800bbea:	dcec      	bgt.n	800bbc6 <__multadd+0x12>
 800bbec:	b1d7      	cbz	r7, 800bc24 <__multadd+0x70>
 800bbee:	68a3      	ldr	r3, [r4, #8]
 800bbf0:	42ab      	cmp	r3, r5
 800bbf2:	dc12      	bgt.n	800bc1a <__multadd+0x66>
 800bbf4:	6861      	ldr	r1, [r4, #4]
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	3101      	adds	r1, #1
 800bbfa:	f7ff ff90 	bl	800bb1e <_Balloc>
 800bbfe:	6922      	ldr	r2, [r4, #16]
 800bc00:	3202      	adds	r2, #2
 800bc02:	f104 010c 	add.w	r1, r4, #12
 800bc06:	4680      	mov	r8, r0
 800bc08:	0092      	lsls	r2, r2, #2
 800bc0a:	300c      	adds	r0, #12
 800bc0c:	f7ff ff7c 	bl	800bb08 <memcpy>
 800bc10:	4621      	mov	r1, r4
 800bc12:	4630      	mov	r0, r6
 800bc14:	f7ff ffb7 	bl	800bb86 <_Bfree>
 800bc18:	4644      	mov	r4, r8
 800bc1a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc1e:	3501      	adds	r5, #1
 800bc20:	615f      	str	r7, [r3, #20]
 800bc22:	6125      	str	r5, [r4, #16]
 800bc24:	4620      	mov	r0, r4
 800bc26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bc2a <__s2b>:
 800bc2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc2e:	460c      	mov	r4, r1
 800bc30:	4615      	mov	r5, r2
 800bc32:	461f      	mov	r7, r3
 800bc34:	2209      	movs	r2, #9
 800bc36:	3308      	adds	r3, #8
 800bc38:	4606      	mov	r6, r0
 800bc3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc3e:	2100      	movs	r1, #0
 800bc40:	2201      	movs	r2, #1
 800bc42:	429a      	cmp	r2, r3
 800bc44:	db20      	blt.n	800bc88 <__s2b+0x5e>
 800bc46:	4630      	mov	r0, r6
 800bc48:	f7ff ff69 	bl	800bb1e <_Balloc>
 800bc4c:	9b08      	ldr	r3, [sp, #32]
 800bc4e:	6143      	str	r3, [r0, #20]
 800bc50:	2d09      	cmp	r5, #9
 800bc52:	f04f 0301 	mov.w	r3, #1
 800bc56:	6103      	str	r3, [r0, #16]
 800bc58:	dd19      	ble.n	800bc8e <__s2b+0x64>
 800bc5a:	f104 0809 	add.w	r8, r4, #9
 800bc5e:	46c1      	mov	r9, r8
 800bc60:	442c      	add	r4, r5
 800bc62:	f819 3b01 	ldrb.w	r3, [r9], #1
 800bc66:	4601      	mov	r1, r0
 800bc68:	3b30      	subs	r3, #48	; 0x30
 800bc6a:	220a      	movs	r2, #10
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	f7ff ffa1 	bl	800bbb4 <__multadd>
 800bc72:	45a1      	cmp	r9, r4
 800bc74:	d1f5      	bne.n	800bc62 <__s2b+0x38>
 800bc76:	eb08 0405 	add.w	r4, r8, r5
 800bc7a:	3c08      	subs	r4, #8
 800bc7c:	1b2d      	subs	r5, r5, r4
 800bc7e:	1963      	adds	r3, r4, r5
 800bc80:	42bb      	cmp	r3, r7
 800bc82:	db07      	blt.n	800bc94 <__s2b+0x6a>
 800bc84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc88:	0052      	lsls	r2, r2, #1
 800bc8a:	3101      	adds	r1, #1
 800bc8c:	e7d9      	b.n	800bc42 <__s2b+0x18>
 800bc8e:	340a      	adds	r4, #10
 800bc90:	2509      	movs	r5, #9
 800bc92:	e7f3      	b.n	800bc7c <__s2b+0x52>
 800bc94:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bc98:	4601      	mov	r1, r0
 800bc9a:	3b30      	subs	r3, #48	; 0x30
 800bc9c:	220a      	movs	r2, #10
 800bc9e:	4630      	mov	r0, r6
 800bca0:	f7ff ff88 	bl	800bbb4 <__multadd>
 800bca4:	e7eb      	b.n	800bc7e <__s2b+0x54>

0800bca6 <__hi0bits>:
 800bca6:	0c02      	lsrs	r2, r0, #16
 800bca8:	0412      	lsls	r2, r2, #16
 800bcaa:	4603      	mov	r3, r0
 800bcac:	b9b2      	cbnz	r2, 800bcdc <__hi0bits+0x36>
 800bcae:	0403      	lsls	r3, r0, #16
 800bcb0:	2010      	movs	r0, #16
 800bcb2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bcb6:	bf04      	itt	eq
 800bcb8:	021b      	lsleq	r3, r3, #8
 800bcba:	3008      	addeq	r0, #8
 800bcbc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bcc0:	bf04      	itt	eq
 800bcc2:	011b      	lsleq	r3, r3, #4
 800bcc4:	3004      	addeq	r0, #4
 800bcc6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bcca:	bf04      	itt	eq
 800bccc:	009b      	lsleq	r3, r3, #2
 800bcce:	3002      	addeq	r0, #2
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	db06      	blt.n	800bce2 <__hi0bits+0x3c>
 800bcd4:	005b      	lsls	r3, r3, #1
 800bcd6:	d503      	bpl.n	800bce0 <__hi0bits+0x3a>
 800bcd8:	3001      	adds	r0, #1
 800bcda:	4770      	bx	lr
 800bcdc:	2000      	movs	r0, #0
 800bcde:	e7e8      	b.n	800bcb2 <__hi0bits+0xc>
 800bce0:	2020      	movs	r0, #32
 800bce2:	4770      	bx	lr

0800bce4 <__lo0bits>:
 800bce4:	6803      	ldr	r3, [r0, #0]
 800bce6:	f013 0207 	ands.w	r2, r3, #7
 800bcea:	4601      	mov	r1, r0
 800bcec:	d00b      	beq.n	800bd06 <__lo0bits+0x22>
 800bcee:	07da      	lsls	r2, r3, #31
 800bcf0:	d423      	bmi.n	800bd3a <__lo0bits+0x56>
 800bcf2:	0798      	lsls	r0, r3, #30
 800bcf4:	bf49      	itett	mi
 800bcf6:	085b      	lsrmi	r3, r3, #1
 800bcf8:	089b      	lsrpl	r3, r3, #2
 800bcfa:	2001      	movmi	r0, #1
 800bcfc:	600b      	strmi	r3, [r1, #0]
 800bcfe:	bf5c      	itt	pl
 800bd00:	600b      	strpl	r3, [r1, #0]
 800bd02:	2002      	movpl	r0, #2
 800bd04:	4770      	bx	lr
 800bd06:	b298      	uxth	r0, r3
 800bd08:	b9a8      	cbnz	r0, 800bd36 <__lo0bits+0x52>
 800bd0a:	0c1b      	lsrs	r3, r3, #16
 800bd0c:	2010      	movs	r0, #16
 800bd0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bd12:	bf04      	itt	eq
 800bd14:	0a1b      	lsreq	r3, r3, #8
 800bd16:	3008      	addeq	r0, #8
 800bd18:	071a      	lsls	r2, r3, #28
 800bd1a:	bf04      	itt	eq
 800bd1c:	091b      	lsreq	r3, r3, #4
 800bd1e:	3004      	addeq	r0, #4
 800bd20:	079a      	lsls	r2, r3, #30
 800bd22:	bf04      	itt	eq
 800bd24:	089b      	lsreq	r3, r3, #2
 800bd26:	3002      	addeq	r0, #2
 800bd28:	07da      	lsls	r2, r3, #31
 800bd2a:	d402      	bmi.n	800bd32 <__lo0bits+0x4e>
 800bd2c:	085b      	lsrs	r3, r3, #1
 800bd2e:	d006      	beq.n	800bd3e <__lo0bits+0x5a>
 800bd30:	3001      	adds	r0, #1
 800bd32:	600b      	str	r3, [r1, #0]
 800bd34:	4770      	bx	lr
 800bd36:	4610      	mov	r0, r2
 800bd38:	e7e9      	b.n	800bd0e <__lo0bits+0x2a>
 800bd3a:	2000      	movs	r0, #0
 800bd3c:	4770      	bx	lr
 800bd3e:	2020      	movs	r0, #32
 800bd40:	4770      	bx	lr

0800bd42 <__i2b>:
 800bd42:	b510      	push	{r4, lr}
 800bd44:	460c      	mov	r4, r1
 800bd46:	2101      	movs	r1, #1
 800bd48:	f7ff fee9 	bl	800bb1e <_Balloc>
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	6144      	str	r4, [r0, #20]
 800bd50:	6102      	str	r2, [r0, #16]
 800bd52:	bd10      	pop	{r4, pc}

0800bd54 <__multiply>:
 800bd54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd58:	4614      	mov	r4, r2
 800bd5a:	690a      	ldr	r2, [r1, #16]
 800bd5c:	6923      	ldr	r3, [r4, #16]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	bfb8      	it	lt
 800bd62:	460b      	movlt	r3, r1
 800bd64:	4688      	mov	r8, r1
 800bd66:	bfbc      	itt	lt
 800bd68:	46a0      	movlt	r8, r4
 800bd6a:	461c      	movlt	r4, r3
 800bd6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bd74:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd7c:	eb07 0609 	add.w	r6, r7, r9
 800bd80:	42b3      	cmp	r3, r6
 800bd82:	bfb8      	it	lt
 800bd84:	3101      	addlt	r1, #1
 800bd86:	f7ff feca 	bl	800bb1e <_Balloc>
 800bd8a:	f100 0514 	add.w	r5, r0, #20
 800bd8e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800bd92:	462b      	mov	r3, r5
 800bd94:	2200      	movs	r2, #0
 800bd96:	4573      	cmp	r3, lr
 800bd98:	d316      	bcc.n	800bdc8 <__multiply+0x74>
 800bd9a:	f104 0214 	add.w	r2, r4, #20
 800bd9e:	f108 0114 	add.w	r1, r8, #20
 800bda2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800bda6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	9b00      	ldr	r3, [sp, #0]
 800bdae:	9201      	str	r2, [sp, #4]
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d80c      	bhi.n	800bdce <__multiply+0x7a>
 800bdb4:	2e00      	cmp	r6, #0
 800bdb6:	dd03      	ble.n	800bdc0 <__multiply+0x6c>
 800bdb8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d05d      	beq.n	800be7c <__multiply+0x128>
 800bdc0:	6106      	str	r6, [r0, #16]
 800bdc2:	b003      	add	sp, #12
 800bdc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc8:	f843 2b04 	str.w	r2, [r3], #4
 800bdcc:	e7e3      	b.n	800bd96 <__multiply+0x42>
 800bdce:	f8b2 b000 	ldrh.w	fp, [r2]
 800bdd2:	f1bb 0f00 	cmp.w	fp, #0
 800bdd6:	d023      	beq.n	800be20 <__multiply+0xcc>
 800bdd8:	4689      	mov	r9, r1
 800bdda:	46ac      	mov	ip, r5
 800bddc:	f04f 0800 	mov.w	r8, #0
 800bde0:	f859 4b04 	ldr.w	r4, [r9], #4
 800bde4:	f8dc a000 	ldr.w	sl, [ip]
 800bde8:	b2a3      	uxth	r3, r4
 800bdea:	fa1f fa8a 	uxth.w	sl, sl
 800bdee:	fb0b a303 	mla	r3, fp, r3, sl
 800bdf2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bdf6:	f8dc 4000 	ldr.w	r4, [ip]
 800bdfa:	4443      	add	r3, r8
 800bdfc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800be00:	fb0b 840a 	mla	r4, fp, sl, r8
 800be04:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800be08:	46e2      	mov	sl, ip
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800be10:	454f      	cmp	r7, r9
 800be12:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800be16:	f84a 3b04 	str.w	r3, [sl], #4
 800be1a:	d82b      	bhi.n	800be74 <__multiply+0x120>
 800be1c:	f8cc 8004 	str.w	r8, [ip, #4]
 800be20:	9b01      	ldr	r3, [sp, #4]
 800be22:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800be26:	3204      	adds	r2, #4
 800be28:	f1ba 0f00 	cmp.w	sl, #0
 800be2c:	d020      	beq.n	800be70 <__multiply+0x11c>
 800be2e:	682b      	ldr	r3, [r5, #0]
 800be30:	4689      	mov	r9, r1
 800be32:	46a8      	mov	r8, r5
 800be34:	f04f 0b00 	mov.w	fp, #0
 800be38:	f8b9 c000 	ldrh.w	ip, [r9]
 800be3c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800be40:	fb0a 440c 	mla	r4, sl, ip, r4
 800be44:	445c      	add	r4, fp
 800be46:	46c4      	mov	ip, r8
 800be48:	b29b      	uxth	r3, r3
 800be4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800be4e:	f84c 3b04 	str.w	r3, [ip], #4
 800be52:	f859 3b04 	ldr.w	r3, [r9], #4
 800be56:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800be5a:	0c1b      	lsrs	r3, r3, #16
 800be5c:	fb0a b303 	mla	r3, sl, r3, fp
 800be60:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800be64:	454f      	cmp	r7, r9
 800be66:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800be6a:	d805      	bhi.n	800be78 <__multiply+0x124>
 800be6c:	f8c8 3004 	str.w	r3, [r8, #4]
 800be70:	3504      	adds	r5, #4
 800be72:	e79b      	b.n	800bdac <__multiply+0x58>
 800be74:	46d4      	mov	ip, sl
 800be76:	e7b3      	b.n	800bde0 <__multiply+0x8c>
 800be78:	46e0      	mov	r8, ip
 800be7a:	e7dd      	b.n	800be38 <__multiply+0xe4>
 800be7c:	3e01      	subs	r6, #1
 800be7e:	e799      	b.n	800bdb4 <__multiply+0x60>

0800be80 <__pow5mult>:
 800be80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be84:	4615      	mov	r5, r2
 800be86:	f012 0203 	ands.w	r2, r2, #3
 800be8a:	4606      	mov	r6, r0
 800be8c:	460f      	mov	r7, r1
 800be8e:	d007      	beq.n	800bea0 <__pow5mult+0x20>
 800be90:	3a01      	subs	r2, #1
 800be92:	4c21      	ldr	r4, [pc, #132]	; (800bf18 <__pow5mult+0x98>)
 800be94:	2300      	movs	r3, #0
 800be96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be9a:	f7ff fe8b 	bl	800bbb4 <__multadd>
 800be9e:	4607      	mov	r7, r0
 800bea0:	10ad      	asrs	r5, r5, #2
 800bea2:	d035      	beq.n	800bf10 <__pow5mult+0x90>
 800bea4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bea6:	b93c      	cbnz	r4, 800beb8 <__pow5mult+0x38>
 800bea8:	2010      	movs	r0, #16
 800beaa:	f7ff fe13 	bl	800bad4 <malloc>
 800beae:	6270      	str	r0, [r6, #36]	; 0x24
 800beb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800beb4:	6004      	str	r4, [r0, #0]
 800beb6:	60c4      	str	r4, [r0, #12]
 800beb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bebc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bec0:	b94c      	cbnz	r4, 800bed6 <__pow5mult+0x56>
 800bec2:	f240 2171 	movw	r1, #625	; 0x271
 800bec6:	4630      	mov	r0, r6
 800bec8:	f7ff ff3b 	bl	800bd42 <__i2b>
 800becc:	2300      	movs	r3, #0
 800bece:	f8c8 0008 	str.w	r0, [r8, #8]
 800bed2:	4604      	mov	r4, r0
 800bed4:	6003      	str	r3, [r0, #0]
 800bed6:	f04f 0800 	mov.w	r8, #0
 800beda:	07eb      	lsls	r3, r5, #31
 800bedc:	d50a      	bpl.n	800bef4 <__pow5mult+0x74>
 800bede:	4639      	mov	r1, r7
 800bee0:	4622      	mov	r2, r4
 800bee2:	4630      	mov	r0, r6
 800bee4:	f7ff ff36 	bl	800bd54 <__multiply>
 800bee8:	4639      	mov	r1, r7
 800beea:	4681      	mov	r9, r0
 800beec:	4630      	mov	r0, r6
 800beee:	f7ff fe4a 	bl	800bb86 <_Bfree>
 800bef2:	464f      	mov	r7, r9
 800bef4:	106d      	asrs	r5, r5, #1
 800bef6:	d00b      	beq.n	800bf10 <__pow5mult+0x90>
 800bef8:	6820      	ldr	r0, [r4, #0]
 800befa:	b938      	cbnz	r0, 800bf0c <__pow5mult+0x8c>
 800befc:	4622      	mov	r2, r4
 800befe:	4621      	mov	r1, r4
 800bf00:	4630      	mov	r0, r6
 800bf02:	f7ff ff27 	bl	800bd54 <__multiply>
 800bf06:	6020      	str	r0, [r4, #0]
 800bf08:	f8c0 8000 	str.w	r8, [r0]
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	e7e4      	b.n	800beda <__pow5mult+0x5a>
 800bf10:	4638      	mov	r0, r7
 800bf12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf16:	bf00      	nop
 800bf18:	0800deb8 	.word	0x0800deb8

0800bf1c <__lshift>:
 800bf1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf20:	460c      	mov	r4, r1
 800bf22:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf26:	6923      	ldr	r3, [r4, #16]
 800bf28:	6849      	ldr	r1, [r1, #4]
 800bf2a:	eb0a 0903 	add.w	r9, sl, r3
 800bf2e:	68a3      	ldr	r3, [r4, #8]
 800bf30:	4607      	mov	r7, r0
 800bf32:	4616      	mov	r6, r2
 800bf34:	f109 0501 	add.w	r5, r9, #1
 800bf38:	42ab      	cmp	r3, r5
 800bf3a:	db32      	blt.n	800bfa2 <__lshift+0x86>
 800bf3c:	4638      	mov	r0, r7
 800bf3e:	f7ff fdee 	bl	800bb1e <_Balloc>
 800bf42:	2300      	movs	r3, #0
 800bf44:	4680      	mov	r8, r0
 800bf46:	f100 0114 	add.w	r1, r0, #20
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	4553      	cmp	r3, sl
 800bf4e:	db2b      	blt.n	800bfa8 <__lshift+0x8c>
 800bf50:	6920      	ldr	r0, [r4, #16]
 800bf52:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf56:	f104 0314 	add.w	r3, r4, #20
 800bf5a:	f016 021f 	ands.w	r2, r6, #31
 800bf5e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf62:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf66:	d025      	beq.n	800bfb4 <__lshift+0x98>
 800bf68:	f1c2 0e20 	rsb	lr, r2, #32
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	681e      	ldr	r6, [r3, #0]
 800bf70:	468a      	mov	sl, r1
 800bf72:	4096      	lsls	r6, r2
 800bf74:	4330      	orrs	r0, r6
 800bf76:	f84a 0b04 	str.w	r0, [sl], #4
 800bf7a:	f853 0b04 	ldr.w	r0, [r3], #4
 800bf7e:	459c      	cmp	ip, r3
 800bf80:	fa20 f00e 	lsr.w	r0, r0, lr
 800bf84:	d814      	bhi.n	800bfb0 <__lshift+0x94>
 800bf86:	6048      	str	r0, [r1, #4]
 800bf88:	b108      	cbz	r0, 800bf8e <__lshift+0x72>
 800bf8a:	f109 0502 	add.w	r5, r9, #2
 800bf8e:	3d01      	subs	r5, #1
 800bf90:	4638      	mov	r0, r7
 800bf92:	f8c8 5010 	str.w	r5, [r8, #16]
 800bf96:	4621      	mov	r1, r4
 800bf98:	f7ff fdf5 	bl	800bb86 <_Bfree>
 800bf9c:	4640      	mov	r0, r8
 800bf9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfa2:	3101      	adds	r1, #1
 800bfa4:	005b      	lsls	r3, r3, #1
 800bfa6:	e7c7      	b.n	800bf38 <__lshift+0x1c>
 800bfa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bfac:	3301      	adds	r3, #1
 800bfae:	e7cd      	b.n	800bf4c <__lshift+0x30>
 800bfb0:	4651      	mov	r1, sl
 800bfb2:	e7dc      	b.n	800bf6e <__lshift+0x52>
 800bfb4:	3904      	subs	r1, #4
 800bfb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfba:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfbe:	459c      	cmp	ip, r3
 800bfc0:	d8f9      	bhi.n	800bfb6 <__lshift+0x9a>
 800bfc2:	e7e4      	b.n	800bf8e <__lshift+0x72>

0800bfc4 <__mcmp>:
 800bfc4:	6903      	ldr	r3, [r0, #16]
 800bfc6:	690a      	ldr	r2, [r1, #16]
 800bfc8:	1a9b      	subs	r3, r3, r2
 800bfca:	b530      	push	{r4, r5, lr}
 800bfcc:	d10c      	bne.n	800bfe8 <__mcmp+0x24>
 800bfce:	0092      	lsls	r2, r2, #2
 800bfd0:	3014      	adds	r0, #20
 800bfd2:	3114      	adds	r1, #20
 800bfd4:	1884      	adds	r4, r0, r2
 800bfd6:	4411      	add	r1, r2
 800bfd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bfdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bfe0:	4295      	cmp	r5, r2
 800bfe2:	d003      	beq.n	800bfec <__mcmp+0x28>
 800bfe4:	d305      	bcc.n	800bff2 <__mcmp+0x2e>
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	4618      	mov	r0, r3
 800bfea:	bd30      	pop	{r4, r5, pc}
 800bfec:	42a0      	cmp	r0, r4
 800bfee:	d3f3      	bcc.n	800bfd8 <__mcmp+0x14>
 800bff0:	e7fa      	b.n	800bfe8 <__mcmp+0x24>
 800bff2:	f04f 33ff 	mov.w	r3, #4294967295
 800bff6:	e7f7      	b.n	800bfe8 <__mcmp+0x24>

0800bff8 <__mdiff>:
 800bff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bffc:	460d      	mov	r5, r1
 800bffe:	4607      	mov	r7, r0
 800c000:	4611      	mov	r1, r2
 800c002:	4628      	mov	r0, r5
 800c004:	4614      	mov	r4, r2
 800c006:	f7ff ffdd 	bl	800bfc4 <__mcmp>
 800c00a:	1e06      	subs	r6, r0, #0
 800c00c:	d108      	bne.n	800c020 <__mdiff+0x28>
 800c00e:	4631      	mov	r1, r6
 800c010:	4638      	mov	r0, r7
 800c012:	f7ff fd84 	bl	800bb1e <_Balloc>
 800c016:	2301      	movs	r3, #1
 800c018:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c020:	bfa4      	itt	ge
 800c022:	4623      	movge	r3, r4
 800c024:	462c      	movge	r4, r5
 800c026:	4638      	mov	r0, r7
 800c028:	6861      	ldr	r1, [r4, #4]
 800c02a:	bfa6      	itte	ge
 800c02c:	461d      	movge	r5, r3
 800c02e:	2600      	movge	r6, #0
 800c030:	2601      	movlt	r6, #1
 800c032:	f7ff fd74 	bl	800bb1e <_Balloc>
 800c036:	692b      	ldr	r3, [r5, #16]
 800c038:	60c6      	str	r6, [r0, #12]
 800c03a:	6926      	ldr	r6, [r4, #16]
 800c03c:	f105 0914 	add.w	r9, r5, #20
 800c040:	f104 0214 	add.w	r2, r4, #20
 800c044:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c048:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c04c:	f100 0514 	add.w	r5, r0, #20
 800c050:	f04f 0e00 	mov.w	lr, #0
 800c054:	f852 ab04 	ldr.w	sl, [r2], #4
 800c058:	f859 4b04 	ldr.w	r4, [r9], #4
 800c05c:	fa1e f18a 	uxtah	r1, lr, sl
 800c060:	b2a3      	uxth	r3, r4
 800c062:	1ac9      	subs	r1, r1, r3
 800c064:	0c23      	lsrs	r3, r4, #16
 800c066:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c06a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c06e:	b289      	uxth	r1, r1
 800c070:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c074:	45c8      	cmp	r8, r9
 800c076:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c07a:	4694      	mov	ip, r2
 800c07c:	f845 3b04 	str.w	r3, [r5], #4
 800c080:	d8e8      	bhi.n	800c054 <__mdiff+0x5c>
 800c082:	45bc      	cmp	ip, r7
 800c084:	d304      	bcc.n	800c090 <__mdiff+0x98>
 800c086:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c08a:	b183      	cbz	r3, 800c0ae <__mdiff+0xb6>
 800c08c:	6106      	str	r6, [r0, #16]
 800c08e:	e7c5      	b.n	800c01c <__mdiff+0x24>
 800c090:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c094:	fa1e f381 	uxtah	r3, lr, r1
 800c098:	141a      	asrs	r2, r3, #16
 800c09a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0a4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c0a8:	f845 3b04 	str.w	r3, [r5], #4
 800c0ac:	e7e9      	b.n	800c082 <__mdiff+0x8a>
 800c0ae:	3e01      	subs	r6, #1
 800c0b0:	e7e9      	b.n	800c086 <__mdiff+0x8e>
	...

0800c0b4 <__ulp>:
 800c0b4:	4b12      	ldr	r3, [pc, #72]	; (800c100 <__ulp+0x4c>)
 800c0b6:	ee10 2a90 	vmov	r2, s1
 800c0ba:	401a      	ands	r2, r3
 800c0bc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	dd04      	ble.n	800c0ce <__ulp+0x1a>
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	ec41 0b10 	vmov	d0, r0, r1
 800c0cc:	4770      	bx	lr
 800c0ce:	425b      	negs	r3, r3
 800c0d0:	151b      	asrs	r3, r3, #20
 800c0d2:	2b13      	cmp	r3, #19
 800c0d4:	f04f 0000 	mov.w	r0, #0
 800c0d8:	f04f 0100 	mov.w	r1, #0
 800c0dc:	dc04      	bgt.n	800c0e8 <__ulp+0x34>
 800c0de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c0e2:	fa42 f103 	asr.w	r1, r2, r3
 800c0e6:	e7ef      	b.n	800c0c8 <__ulp+0x14>
 800c0e8:	3b14      	subs	r3, #20
 800c0ea:	2b1e      	cmp	r3, #30
 800c0ec:	f04f 0201 	mov.w	r2, #1
 800c0f0:	bfda      	itte	le
 800c0f2:	f1c3 031f 	rsble	r3, r3, #31
 800c0f6:	fa02 f303 	lslle.w	r3, r2, r3
 800c0fa:	4613      	movgt	r3, r2
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	e7e3      	b.n	800c0c8 <__ulp+0x14>
 800c100:	7ff00000 	.word	0x7ff00000

0800c104 <__b2d>:
 800c104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c106:	6905      	ldr	r5, [r0, #16]
 800c108:	f100 0714 	add.w	r7, r0, #20
 800c10c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c110:	1f2e      	subs	r6, r5, #4
 800c112:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c116:	4620      	mov	r0, r4
 800c118:	f7ff fdc5 	bl	800bca6 <__hi0bits>
 800c11c:	f1c0 0320 	rsb	r3, r0, #32
 800c120:	280a      	cmp	r0, #10
 800c122:	600b      	str	r3, [r1, #0]
 800c124:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c19c <__b2d+0x98>
 800c128:	dc14      	bgt.n	800c154 <__b2d+0x50>
 800c12a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c12e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c132:	42b7      	cmp	r7, r6
 800c134:	ea41 030c 	orr.w	r3, r1, ip
 800c138:	bf34      	ite	cc
 800c13a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c13e:	2100      	movcs	r1, #0
 800c140:	3015      	adds	r0, #21
 800c142:	fa04 f000 	lsl.w	r0, r4, r0
 800c146:	fa21 f10e 	lsr.w	r1, r1, lr
 800c14a:	ea40 0201 	orr.w	r2, r0, r1
 800c14e:	ec43 2b10 	vmov	d0, r2, r3
 800c152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c154:	42b7      	cmp	r7, r6
 800c156:	bf3a      	itte	cc
 800c158:	f1a5 0608 	subcc.w	r6, r5, #8
 800c15c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c160:	2100      	movcs	r1, #0
 800c162:	380b      	subs	r0, #11
 800c164:	d015      	beq.n	800c192 <__b2d+0x8e>
 800c166:	4084      	lsls	r4, r0
 800c168:	f1c0 0520 	rsb	r5, r0, #32
 800c16c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800c170:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800c174:	42be      	cmp	r6, r7
 800c176:	fa21 fc05 	lsr.w	ip, r1, r5
 800c17a:	ea44 030c 	orr.w	r3, r4, ip
 800c17e:	bf8c      	ite	hi
 800c180:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c184:	2400      	movls	r4, #0
 800c186:	fa01 f000 	lsl.w	r0, r1, r0
 800c18a:	40ec      	lsrs	r4, r5
 800c18c:	ea40 0204 	orr.w	r2, r0, r4
 800c190:	e7dd      	b.n	800c14e <__b2d+0x4a>
 800c192:	ea44 030c 	orr.w	r3, r4, ip
 800c196:	460a      	mov	r2, r1
 800c198:	e7d9      	b.n	800c14e <__b2d+0x4a>
 800c19a:	bf00      	nop
 800c19c:	3ff00000 	.word	0x3ff00000

0800c1a0 <__d2b>:
 800c1a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1a4:	460e      	mov	r6, r1
 800c1a6:	2101      	movs	r1, #1
 800c1a8:	ec59 8b10 	vmov	r8, r9, d0
 800c1ac:	4615      	mov	r5, r2
 800c1ae:	f7ff fcb6 	bl	800bb1e <_Balloc>
 800c1b2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c1b6:	4607      	mov	r7, r0
 800c1b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c1bc:	bb34      	cbnz	r4, 800c20c <__d2b+0x6c>
 800c1be:	9301      	str	r3, [sp, #4]
 800c1c0:	f1b8 0300 	subs.w	r3, r8, #0
 800c1c4:	d027      	beq.n	800c216 <__d2b+0x76>
 800c1c6:	a802      	add	r0, sp, #8
 800c1c8:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c1cc:	f7ff fd8a 	bl	800bce4 <__lo0bits>
 800c1d0:	9900      	ldr	r1, [sp, #0]
 800c1d2:	b1f0      	cbz	r0, 800c212 <__d2b+0x72>
 800c1d4:	9a01      	ldr	r2, [sp, #4]
 800c1d6:	f1c0 0320 	rsb	r3, r0, #32
 800c1da:	fa02 f303 	lsl.w	r3, r2, r3
 800c1de:	430b      	orrs	r3, r1
 800c1e0:	40c2      	lsrs	r2, r0
 800c1e2:	617b      	str	r3, [r7, #20]
 800c1e4:	9201      	str	r2, [sp, #4]
 800c1e6:	9b01      	ldr	r3, [sp, #4]
 800c1e8:	61bb      	str	r3, [r7, #24]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	bf14      	ite	ne
 800c1ee:	2102      	movne	r1, #2
 800c1f0:	2101      	moveq	r1, #1
 800c1f2:	6139      	str	r1, [r7, #16]
 800c1f4:	b1c4      	cbz	r4, 800c228 <__d2b+0x88>
 800c1f6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c1fa:	4404      	add	r4, r0
 800c1fc:	6034      	str	r4, [r6, #0]
 800c1fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c202:	6028      	str	r0, [r5, #0]
 800c204:	4638      	mov	r0, r7
 800c206:	b003      	add	sp, #12
 800c208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c20c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c210:	e7d5      	b.n	800c1be <__d2b+0x1e>
 800c212:	6179      	str	r1, [r7, #20]
 800c214:	e7e7      	b.n	800c1e6 <__d2b+0x46>
 800c216:	a801      	add	r0, sp, #4
 800c218:	f7ff fd64 	bl	800bce4 <__lo0bits>
 800c21c:	9b01      	ldr	r3, [sp, #4]
 800c21e:	617b      	str	r3, [r7, #20]
 800c220:	2101      	movs	r1, #1
 800c222:	6139      	str	r1, [r7, #16]
 800c224:	3020      	adds	r0, #32
 800c226:	e7e5      	b.n	800c1f4 <__d2b+0x54>
 800c228:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c22c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c230:	6030      	str	r0, [r6, #0]
 800c232:	6918      	ldr	r0, [r3, #16]
 800c234:	f7ff fd37 	bl	800bca6 <__hi0bits>
 800c238:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c23c:	e7e1      	b.n	800c202 <__d2b+0x62>

0800c23e <__ratio>:
 800c23e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c242:	4688      	mov	r8, r1
 800c244:	4669      	mov	r1, sp
 800c246:	4681      	mov	r9, r0
 800c248:	f7ff ff5c 	bl	800c104 <__b2d>
 800c24c:	a901      	add	r1, sp, #4
 800c24e:	4640      	mov	r0, r8
 800c250:	ec57 6b10 	vmov	r6, r7, d0
 800c254:	f7ff ff56 	bl	800c104 <__b2d>
 800c258:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c25c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c260:	eba3 0c02 	sub.w	ip, r3, r2
 800c264:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c268:	1a9b      	subs	r3, r3, r2
 800c26a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c26e:	ec5b ab10 	vmov	sl, fp, d0
 800c272:	2b00      	cmp	r3, #0
 800c274:	bfce      	itee	gt
 800c276:	463a      	movgt	r2, r7
 800c278:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c27c:	465a      	movle	r2, fp
 800c27e:	4659      	mov	r1, fp
 800c280:	463d      	mov	r5, r7
 800c282:	bfd4      	ite	le
 800c284:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800c288:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800c28c:	4630      	mov	r0, r6
 800c28e:	ee10 2a10 	vmov	r2, s0
 800c292:	460b      	mov	r3, r1
 800c294:	4629      	mov	r1, r5
 800c296:	f7f4 fad9 	bl	800084c <__aeabi_ddiv>
 800c29a:	ec41 0b10 	vmov	d0, r0, r1
 800c29e:	b003      	add	sp, #12
 800c2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c2a4 <__copybits>:
 800c2a4:	3901      	subs	r1, #1
 800c2a6:	b510      	push	{r4, lr}
 800c2a8:	1149      	asrs	r1, r1, #5
 800c2aa:	6914      	ldr	r4, [r2, #16]
 800c2ac:	3101      	adds	r1, #1
 800c2ae:	f102 0314 	add.w	r3, r2, #20
 800c2b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c2b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c2ba:	42a3      	cmp	r3, r4
 800c2bc:	4602      	mov	r2, r0
 800c2be:	d303      	bcc.n	800c2c8 <__copybits+0x24>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	428a      	cmp	r2, r1
 800c2c4:	d305      	bcc.n	800c2d2 <__copybits+0x2e>
 800c2c6:	bd10      	pop	{r4, pc}
 800c2c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2cc:	f840 2b04 	str.w	r2, [r0], #4
 800c2d0:	e7f3      	b.n	800c2ba <__copybits+0x16>
 800c2d2:	f842 3b04 	str.w	r3, [r2], #4
 800c2d6:	e7f4      	b.n	800c2c2 <__copybits+0x1e>

0800c2d8 <__any_on>:
 800c2d8:	f100 0214 	add.w	r2, r0, #20
 800c2dc:	6900      	ldr	r0, [r0, #16]
 800c2de:	114b      	asrs	r3, r1, #5
 800c2e0:	4298      	cmp	r0, r3
 800c2e2:	b510      	push	{r4, lr}
 800c2e4:	db11      	blt.n	800c30a <__any_on+0x32>
 800c2e6:	dd0a      	ble.n	800c2fe <__any_on+0x26>
 800c2e8:	f011 011f 	ands.w	r1, r1, #31
 800c2ec:	d007      	beq.n	800c2fe <__any_on+0x26>
 800c2ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c2f2:	fa24 f001 	lsr.w	r0, r4, r1
 800c2f6:	fa00 f101 	lsl.w	r1, r0, r1
 800c2fa:	428c      	cmp	r4, r1
 800c2fc:	d10b      	bne.n	800c316 <__any_on+0x3e>
 800c2fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c302:	4293      	cmp	r3, r2
 800c304:	d803      	bhi.n	800c30e <__any_on+0x36>
 800c306:	2000      	movs	r0, #0
 800c308:	bd10      	pop	{r4, pc}
 800c30a:	4603      	mov	r3, r0
 800c30c:	e7f7      	b.n	800c2fe <__any_on+0x26>
 800c30e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c312:	2900      	cmp	r1, #0
 800c314:	d0f5      	beq.n	800c302 <__any_on+0x2a>
 800c316:	2001      	movs	r0, #1
 800c318:	e7f6      	b.n	800c308 <__any_on+0x30>

0800c31a <_calloc_r>:
 800c31a:	b538      	push	{r3, r4, r5, lr}
 800c31c:	fb02 f401 	mul.w	r4, r2, r1
 800c320:	4621      	mov	r1, r4
 800c322:	f000 f857 	bl	800c3d4 <_malloc_r>
 800c326:	4605      	mov	r5, r0
 800c328:	b118      	cbz	r0, 800c332 <_calloc_r+0x18>
 800c32a:	4622      	mov	r2, r4
 800c32c:	2100      	movs	r1, #0
 800c32e:	f7fc fd35 	bl	8008d9c <memset>
 800c332:	4628      	mov	r0, r5
 800c334:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c338 <_free_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	4605      	mov	r5, r0
 800c33c:	2900      	cmp	r1, #0
 800c33e:	d045      	beq.n	800c3cc <_free_r+0x94>
 800c340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c344:	1f0c      	subs	r4, r1, #4
 800c346:	2b00      	cmp	r3, #0
 800c348:	bfb8      	it	lt
 800c34a:	18e4      	addlt	r4, r4, r3
 800c34c:	f000 fa36 	bl	800c7bc <__malloc_lock>
 800c350:	4a1f      	ldr	r2, [pc, #124]	; (800c3d0 <_free_r+0x98>)
 800c352:	6813      	ldr	r3, [r2, #0]
 800c354:	4610      	mov	r0, r2
 800c356:	b933      	cbnz	r3, 800c366 <_free_r+0x2e>
 800c358:	6063      	str	r3, [r4, #4]
 800c35a:	6014      	str	r4, [r2, #0]
 800c35c:	4628      	mov	r0, r5
 800c35e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c362:	f000 ba2c 	b.w	800c7be <__malloc_unlock>
 800c366:	42a3      	cmp	r3, r4
 800c368:	d90c      	bls.n	800c384 <_free_r+0x4c>
 800c36a:	6821      	ldr	r1, [r4, #0]
 800c36c:	1862      	adds	r2, r4, r1
 800c36e:	4293      	cmp	r3, r2
 800c370:	bf04      	itt	eq
 800c372:	681a      	ldreq	r2, [r3, #0]
 800c374:	685b      	ldreq	r3, [r3, #4]
 800c376:	6063      	str	r3, [r4, #4]
 800c378:	bf04      	itt	eq
 800c37a:	1852      	addeq	r2, r2, r1
 800c37c:	6022      	streq	r2, [r4, #0]
 800c37e:	6004      	str	r4, [r0, #0]
 800c380:	e7ec      	b.n	800c35c <_free_r+0x24>
 800c382:	4613      	mov	r3, r2
 800c384:	685a      	ldr	r2, [r3, #4]
 800c386:	b10a      	cbz	r2, 800c38c <_free_r+0x54>
 800c388:	42a2      	cmp	r2, r4
 800c38a:	d9fa      	bls.n	800c382 <_free_r+0x4a>
 800c38c:	6819      	ldr	r1, [r3, #0]
 800c38e:	1858      	adds	r0, r3, r1
 800c390:	42a0      	cmp	r0, r4
 800c392:	d10b      	bne.n	800c3ac <_free_r+0x74>
 800c394:	6820      	ldr	r0, [r4, #0]
 800c396:	4401      	add	r1, r0
 800c398:	1858      	adds	r0, r3, r1
 800c39a:	4282      	cmp	r2, r0
 800c39c:	6019      	str	r1, [r3, #0]
 800c39e:	d1dd      	bne.n	800c35c <_free_r+0x24>
 800c3a0:	6810      	ldr	r0, [r2, #0]
 800c3a2:	6852      	ldr	r2, [r2, #4]
 800c3a4:	605a      	str	r2, [r3, #4]
 800c3a6:	4401      	add	r1, r0
 800c3a8:	6019      	str	r1, [r3, #0]
 800c3aa:	e7d7      	b.n	800c35c <_free_r+0x24>
 800c3ac:	d902      	bls.n	800c3b4 <_free_r+0x7c>
 800c3ae:	230c      	movs	r3, #12
 800c3b0:	602b      	str	r3, [r5, #0]
 800c3b2:	e7d3      	b.n	800c35c <_free_r+0x24>
 800c3b4:	6820      	ldr	r0, [r4, #0]
 800c3b6:	1821      	adds	r1, r4, r0
 800c3b8:	428a      	cmp	r2, r1
 800c3ba:	bf04      	itt	eq
 800c3bc:	6811      	ldreq	r1, [r2, #0]
 800c3be:	6852      	ldreq	r2, [r2, #4]
 800c3c0:	6062      	str	r2, [r4, #4]
 800c3c2:	bf04      	itt	eq
 800c3c4:	1809      	addeq	r1, r1, r0
 800c3c6:	6021      	streq	r1, [r4, #0]
 800c3c8:	605c      	str	r4, [r3, #4]
 800c3ca:	e7c7      	b.n	800c35c <_free_r+0x24>
 800c3cc:	bd38      	pop	{r3, r4, r5, pc}
 800c3ce:	bf00      	nop
 800c3d0:	200003b0 	.word	0x200003b0

0800c3d4 <_malloc_r>:
 800c3d4:	b570      	push	{r4, r5, r6, lr}
 800c3d6:	1ccd      	adds	r5, r1, #3
 800c3d8:	f025 0503 	bic.w	r5, r5, #3
 800c3dc:	3508      	adds	r5, #8
 800c3de:	2d0c      	cmp	r5, #12
 800c3e0:	bf38      	it	cc
 800c3e2:	250c      	movcc	r5, #12
 800c3e4:	2d00      	cmp	r5, #0
 800c3e6:	4606      	mov	r6, r0
 800c3e8:	db01      	blt.n	800c3ee <_malloc_r+0x1a>
 800c3ea:	42a9      	cmp	r1, r5
 800c3ec:	d903      	bls.n	800c3f6 <_malloc_r+0x22>
 800c3ee:	230c      	movs	r3, #12
 800c3f0:	6033      	str	r3, [r6, #0]
 800c3f2:	2000      	movs	r0, #0
 800c3f4:	bd70      	pop	{r4, r5, r6, pc}
 800c3f6:	f000 f9e1 	bl	800c7bc <__malloc_lock>
 800c3fa:	4a21      	ldr	r2, [pc, #132]	; (800c480 <_malloc_r+0xac>)
 800c3fc:	6814      	ldr	r4, [r2, #0]
 800c3fe:	4621      	mov	r1, r4
 800c400:	b991      	cbnz	r1, 800c428 <_malloc_r+0x54>
 800c402:	4c20      	ldr	r4, [pc, #128]	; (800c484 <_malloc_r+0xb0>)
 800c404:	6823      	ldr	r3, [r4, #0]
 800c406:	b91b      	cbnz	r3, 800c410 <_malloc_r+0x3c>
 800c408:	4630      	mov	r0, r6
 800c40a:	f000 f98f 	bl	800c72c <_sbrk_r>
 800c40e:	6020      	str	r0, [r4, #0]
 800c410:	4629      	mov	r1, r5
 800c412:	4630      	mov	r0, r6
 800c414:	f000 f98a 	bl	800c72c <_sbrk_r>
 800c418:	1c43      	adds	r3, r0, #1
 800c41a:	d124      	bne.n	800c466 <_malloc_r+0x92>
 800c41c:	230c      	movs	r3, #12
 800c41e:	6033      	str	r3, [r6, #0]
 800c420:	4630      	mov	r0, r6
 800c422:	f000 f9cc 	bl	800c7be <__malloc_unlock>
 800c426:	e7e4      	b.n	800c3f2 <_malloc_r+0x1e>
 800c428:	680b      	ldr	r3, [r1, #0]
 800c42a:	1b5b      	subs	r3, r3, r5
 800c42c:	d418      	bmi.n	800c460 <_malloc_r+0x8c>
 800c42e:	2b0b      	cmp	r3, #11
 800c430:	d90f      	bls.n	800c452 <_malloc_r+0x7e>
 800c432:	600b      	str	r3, [r1, #0]
 800c434:	50cd      	str	r5, [r1, r3]
 800c436:	18cc      	adds	r4, r1, r3
 800c438:	4630      	mov	r0, r6
 800c43a:	f000 f9c0 	bl	800c7be <__malloc_unlock>
 800c43e:	f104 000b 	add.w	r0, r4, #11
 800c442:	1d23      	adds	r3, r4, #4
 800c444:	f020 0007 	bic.w	r0, r0, #7
 800c448:	1ac3      	subs	r3, r0, r3
 800c44a:	d0d3      	beq.n	800c3f4 <_malloc_r+0x20>
 800c44c:	425a      	negs	r2, r3
 800c44e:	50e2      	str	r2, [r4, r3]
 800c450:	e7d0      	b.n	800c3f4 <_malloc_r+0x20>
 800c452:	428c      	cmp	r4, r1
 800c454:	684b      	ldr	r3, [r1, #4]
 800c456:	bf16      	itet	ne
 800c458:	6063      	strne	r3, [r4, #4]
 800c45a:	6013      	streq	r3, [r2, #0]
 800c45c:	460c      	movne	r4, r1
 800c45e:	e7eb      	b.n	800c438 <_malloc_r+0x64>
 800c460:	460c      	mov	r4, r1
 800c462:	6849      	ldr	r1, [r1, #4]
 800c464:	e7cc      	b.n	800c400 <_malloc_r+0x2c>
 800c466:	1cc4      	adds	r4, r0, #3
 800c468:	f024 0403 	bic.w	r4, r4, #3
 800c46c:	42a0      	cmp	r0, r4
 800c46e:	d005      	beq.n	800c47c <_malloc_r+0xa8>
 800c470:	1a21      	subs	r1, r4, r0
 800c472:	4630      	mov	r0, r6
 800c474:	f000 f95a 	bl	800c72c <_sbrk_r>
 800c478:	3001      	adds	r0, #1
 800c47a:	d0cf      	beq.n	800c41c <_malloc_r+0x48>
 800c47c:	6025      	str	r5, [r4, #0]
 800c47e:	e7db      	b.n	800c438 <_malloc_r+0x64>
 800c480:	200003b0 	.word	0x200003b0
 800c484:	200003b4 	.word	0x200003b4

0800c488 <__ssputs_r>:
 800c488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c48c:	688e      	ldr	r6, [r1, #8]
 800c48e:	429e      	cmp	r6, r3
 800c490:	4682      	mov	sl, r0
 800c492:	460c      	mov	r4, r1
 800c494:	4690      	mov	r8, r2
 800c496:	4699      	mov	r9, r3
 800c498:	d837      	bhi.n	800c50a <__ssputs_r+0x82>
 800c49a:	898a      	ldrh	r2, [r1, #12]
 800c49c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4a0:	d031      	beq.n	800c506 <__ssputs_r+0x7e>
 800c4a2:	6825      	ldr	r5, [r4, #0]
 800c4a4:	6909      	ldr	r1, [r1, #16]
 800c4a6:	1a6f      	subs	r7, r5, r1
 800c4a8:	6965      	ldr	r5, [r4, #20]
 800c4aa:	2302      	movs	r3, #2
 800c4ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4b0:	fb95 f5f3 	sdiv	r5, r5, r3
 800c4b4:	f109 0301 	add.w	r3, r9, #1
 800c4b8:	443b      	add	r3, r7
 800c4ba:	429d      	cmp	r5, r3
 800c4bc:	bf38      	it	cc
 800c4be:	461d      	movcc	r5, r3
 800c4c0:	0553      	lsls	r3, r2, #21
 800c4c2:	d530      	bpl.n	800c526 <__ssputs_r+0x9e>
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	f7ff ff85 	bl	800c3d4 <_malloc_r>
 800c4ca:	4606      	mov	r6, r0
 800c4cc:	b950      	cbnz	r0, 800c4e4 <__ssputs_r+0x5c>
 800c4ce:	230c      	movs	r3, #12
 800c4d0:	f8ca 3000 	str.w	r3, [sl]
 800c4d4:	89a3      	ldrh	r3, [r4, #12]
 800c4d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4da:	81a3      	strh	r3, [r4, #12]
 800c4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e4:	463a      	mov	r2, r7
 800c4e6:	6921      	ldr	r1, [r4, #16]
 800c4e8:	f7ff fb0e 	bl	800bb08 <memcpy>
 800c4ec:	89a3      	ldrh	r3, [r4, #12]
 800c4ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4f6:	81a3      	strh	r3, [r4, #12]
 800c4f8:	6126      	str	r6, [r4, #16]
 800c4fa:	6165      	str	r5, [r4, #20]
 800c4fc:	443e      	add	r6, r7
 800c4fe:	1bed      	subs	r5, r5, r7
 800c500:	6026      	str	r6, [r4, #0]
 800c502:	60a5      	str	r5, [r4, #8]
 800c504:	464e      	mov	r6, r9
 800c506:	454e      	cmp	r6, r9
 800c508:	d900      	bls.n	800c50c <__ssputs_r+0x84>
 800c50a:	464e      	mov	r6, r9
 800c50c:	4632      	mov	r2, r6
 800c50e:	4641      	mov	r1, r8
 800c510:	6820      	ldr	r0, [r4, #0]
 800c512:	f000 f93a 	bl	800c78a <memmove>
 800c516:	68a3      	ldr	r3, [r4, #8]
 800c518:	1b9b      	subs	r3, r3, r6
 800c51a:	60a3      	str	r3, [r4, #8]
 800c51c:	6823      	ldr	r3, [r4, #0]
 800c51e:	441e      	add	r6, r3
 800c520:	6026      	str	r6, [r4, #0]
 800c522:	2000      	movs	r0, #0
 800c524:	e7dc      	b.n	800c4e0 <__ssputs_r+0x58>
 800c526:	462a      	mov	r2, r5
 800c528:	f000 f94a 	bl	800c7c0 <_realloc_r>
 800c52c:	4606      	mov	r6, r0
 800c52e:	2800      	cmp	r0, #0
 800c530:	d1e2      	bne.n	800c4f8 <__ssputs_r+0x70>
 800c532:	6921      	ldr	r1, [r4, #16]
 800c534:	4650      	mov	r0, sl
 800c536:	f7ff feff 	bl	800c338 <_free_r>
 800c53a:	e7c8      	b.n	800c4ce <__ssputs_r+0x46>

0800c53c <_svfiprintf_r>:
 800c53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c540:	461d      	mov	r5, r3
 800c542:	898b      	ldrh	r3, [r1, #12]
 800c544:	061f      	lsls	r7, r3, #24
 800c546:	b09d      	sub	sp, #116	; 0x74
 800c548:	4680      	mov	r8, r0
 800c54a:	460c      	mov	r4, r1
 800c54c:	4616      	mov	r6, r2
 800c54e:	d50f      	bpl.n	800c570 <_svfiprintf_r+0x34>
 800c550:	690b      	ldr	r3, [r1, #16]
 800c552:	b96b      	cbnz	r3, 800c570 <_svfiprintf_r+0x34>
 800c554:	2140      	movs	r1, #64	; 0x40
 800c556:	f7ff ff3d 	bl	800c3d4 <_malloc_r>
 800c55a:	6020      	str	r0, [r4, #0]
 800c55c:	6120      	str	r0, [r4, #16]
 800c55e:	b928      	cbnz	r0, 800c56c <_svfiprintf_r+0x30>
 800c560:	230c      	movs	r3, #12
 800c562:	f8c8 3000 	str.w	r3, [r8]
 800c566:	f04f 30ff 	mov.w	r0, #4294967295
 800c56a:	e0c8      	b.n	800c6fe <_svfiprintf_r+0x1c2>
 800c56c:	2340      	movs	r3, #64	; 0x40
 800c56e:	6163      	str	r3, [r4, #20]
 800c570:	2300      	movs	r3, #0
 800c572:	9309      	str	r3, [sp, #36]	; 0x24
 800c574:	2320      	movs	r3, #32
 800c576:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c57a:	2330      	movs	r3, #48	; 0x30
 800c57c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c580:	9503      	str	r5, [sp, #12]
 800c582:	f04f 0b01 	mov.w	fp, #1
 800c586:	4637      	mov	r7, r6
 800c588:	463d      	mov	r5, r7
 800c58a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c58e:	b10b      	cbz	r3, 800c594 <_svfiprintf_r+0x58>
 800c590:	2b25      	cmp	r3, #37	; 0x25
 800c592:	d13e      	bne.n	800c612 <_svfiprintf_r+0xd6>
 800c594:	ebb7 0a06 	subs.w	sl, r7, r6
 800c598:	d00b      	beq.n	800c5b2 <_svfiprintf_r+0x76>
 800c59a:	4653      	mov	r3, sl
 800c59c:	4632      	mov	r2, r6
 800c59e:	4621      	mov	r1, r4
 800c5a0:	4640      	mov	r0, r8
 800c5a2:	f7ff ff71 	bl	800c488 <__ssputs_r>
 800c5a6:	3001      	adds	r0, #1
 800c5a8:	f000 80a4 	beq.w	800c6f4 <_svfiprintf_r+0x1b8>
 800c5ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ae:	4453      	add	r3, sl
 800c5b0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5b2:	783b      	ldrb	r3, [r7, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	f000 809d 	beq.w	800c6f4 <_svfiprintf_r+0x1b8>
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5c4:	9304      	str	r3, [sp, #16]
 800c5c6:	9307      	str	r3, [sp, #28]
 800c5c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5cc:	931a      	str	r3, [sp, #104]	; 0x68
 800c5ce:	462f      	mov	r7, r5
 800c5d0:	2205      	movs	r2, #5
 800c5d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c5d6:	4850      	ldr	r0, [pc, #320]	; (800c718 <_svfiprintf_r+0x1dc>)
 800c5d8:	f7f3 fe02 	bl	80001e0 <memchr>
 800c5dc:	9b04      	ldr	r3, [sp, #16]
 800c5de:	b9d0      	cbnz	r0, 800c616 <_svfiprintf_r+0xda>
 800c5e0:	06d9      	lsls	r1, r3, #27
 800c5e2:	bf44      	itt	mi
 800c5e4:	2220      	movmi	r2, #32
 800c5e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c5ea:	071a      	lsls	r2, r3, #28
 800c5ec:	bf44      	itt	mi
 800c5ee:	222b      	movmi	r2, #43	; 0x2b
 800c5f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c5f4:	782a      	ldrb	r2, [r5, #0]
 800c5f6:	2a2a      	cmp	r2, #42	; 0x2a
 800c5f8:	d015      	beq.n	800c626 <_svfiprintf_r+0xea>
 800c5fa:	9a07      	ldr	r2, [sp, #28]
 800c5fc:	462f      	mov	r7, r5
 800c5fe:	2000      	movs	r0, #0
 800c600:	250a      	movs	r5, #10
 800c602:	4639      	mov	r1, r7
 800c604:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c608:	3b30      	subs	r3, #48	; 0x30
 800c60a:	2b09      	cmp	r3, #9
 800c60c:	d94d      	bls.n	800c6aa <_svfiprintf_r+0x16e>
 800c60e:	b1b8      	cbz	r0, 800c640 <_svfiprintf_r+0x104>
 800c610:	e00f      	b.n	800c632 <_svfiprintf_r+0xf6>
 800c612:	462f      	mov	r7, r5
 800c614:	e7b8      	b.n	800c588 <_svfiprintf_r+0x4c>
 800c616:	4a40      	ldr	r2, [pc, #256]	; (800c718 <_svfiprintf_r+0x1dc>)
 800c618:	1a80      	subs	r0, r0, r2
 800c61a:	fa0b f000 	lsl.w	r0, fp, r0
 800c61e:	4318      	orrs	r0, r3
 800c620:	9004      	str	r0, [sp, #16]
 800c622:	463d      	mov	r5, r7
 800c624:	e7d3      	b.n	800c5ce <_svfiprintf_r+0x92>
 800c626:	9a03      	ldr	r2, [sp, #12]
 800c628:	1d11      	adds	r1, r2, #4
 800c62a:	6812      	ldr	r2, [r2, #0]
 800c62c:	9103      	str	r1, [sp, #12]
 800c62e:	2a00      	cmp	r2, #0
 800c630:	db01      	blt.n	800c636 <_svfiprintf_r+0xfa>
 800c632:	9207      	str	r2, [sp, #28]
 800c634:	e004      	b.n	800c640 <_svfiprintf_r+0x104>
 800c636:	4252      	negs	r2, r2
 800c638:	f043 0302 	orr.w	r3, r3, #2
 800c63c:	9207      	str	r2, [sp, #28]
 800c63e:	9304      	str	r3, [sp, #16]
 800c640:	783b      	ldrb	r3, [r7, #0]
 800c642:	2b2e      	cmp	r3, #46	; 0x2e
 800c644:	d10c      	bne.n	800c660 <_svfiprintf_r+0x124>
 800c646:	787b      	ldrb	r3, [r7, #1]
 800c648:	2b2a      	cmp	r3, #42	; 0x2a
 800c64a:	d133      	bne.n	800c6b4 <_svfiprintf_r+0x178>
 800c64c:	9b03      	ldr	r3, [sp, #12]
 800c64e:	1d1a      	adds	r2, r3, #4
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	9203      	str	r2, [sp, #12]
 800c654:	2b00      	cmp	r3, #0
 800c656:	bfb8      	it	lt
 800c658:	f04f 33ff 	movlt.w	r3, #4294967295
 800c65c:	3702      	adds	r7, #2
 800c65e:	9305      	str	r3, [sp, #20]
 800c660:	4d2e      	ldr	r5, [pc, #184]	; (800c71c <_svfiprintf_r+0x1e0>)
 800c662:	7839      	ldrb	r1, [r7, #0]
 800c664:	2203      	movs	r2, #3
 800c666:	4628      	mov	r0, r5
 800c668:	f7f3 fdba 	bl	80001e0 <memchr>
 800c66c:	b138      	cbz	r0, 800c67e <_svfiprintf_r+0x142>
 800c66e:	2340      	movs	r3, #64	; 0x40
 800c670:	1b40      	subs	r0, r0, r5
 800c672:	fa03 f000 	lsl.w	r0, r3, r0
 800c676:	9b04      	ldr	r3, [sp, #16]
 800c678:	4303      	orrs	r3, r0
 800c67a:	3701      	adds	r7, #1
 800c67c:	9304      	str	r3, [sp, #16]
 800c67e:	7839      	ldrb	r1, [r7, #0]
 800c680:	4827      	ldr	r0, [pc, #156]	; (800c720 <_svfiprintf_r+0x1e4>)
 800c682:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c686:	2206      	movs	r2, #6
 800c688:	1c7e      	adds	r6, r7, #1
 800c68a:	f7f3 fda9 	bl	80001e0 <memchr>
 800c68e:	2800      	cmp	r0, #0
 800c690:	d038      	beq.n	800c704 <_svfiprintf_r+0x1c8>
 800c692:	4b24      	ldr	r3, [pc, #144]	; (800c724 <_svfiprintf_r+0x1e8>)
 800c694:	bb13      	cbnz	r3, 800c6dc <_svfiprintf_r+0x1a0>
 800c696:	9b03      	ldr	r3, [sp, #12]
 800c698:	3307      	adds	r3, #7
 800c69a:	f023 0307 	bic.w	r3, r3, #7
 800c69e:	3308      	adds	r3, #8
 800c6a0:	9303      	str	r3, [sp, #12]
 800c6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6a4:	444b      	add	r3, r9
 800c6a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6a8:	e76d      	b.n	800c586 <_svfiprintf_r+0x4a>
 800c6aa:	fb05 3202 	mla	r2, r5, r2, r3
 800c6ae:	2001      	movs	r0, #1
 800c6b0:	460f      	mov	r7, r1
 800c6b2:	e7a6      	b.n	800c602 <_svfiprintf_r+0xc6>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	3701      	adds	r7, #1
 800c6b8:	9305      	str	r3, [sp, #20]
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	250a      	movs	r5, #10
 800c6be:	4638      	mov	r0, r7
 800c6c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6c4:	3a30      	subs	r2, #48	; 0x30
 800c6c6:	2a09      	cmp	r2, #9
 800c6c8:	d903      	bls.n	800c6d2 <_svfiprintf_r+0x196>
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d0c8      	beq.n	800c660 <_svfiprintf_r+0x124>
 800c6ce:	9105      	str	r1, [sp, #20]
 800c6d0:	e7c6      	b.n	800c660 <_svfiprintf_r+0x124>
 800c6d2:	fb05 2101 	mla	r1, r5, r1, r2
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	4607      	mov	r7, r0
 800c6da:	e7f0      	b.n	800c6be <_svfiprintf_r+0x182>
 800c6dc:	ab03      	add	r3, sp, #12
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	4622      	mov	r2, r4
 800c6e2:	4b11      	ldr	r3, [pc, #68]	; (800c728 <_svfiprintf_r+0x1ec>)
 800c6e4:	a904      	add	r1, sp, #16
 800c6e6:	4640      	mov	r0, r8
 800c6e8:	f7fc fbf4 	bl	8008ed4 <_printf_float>
 800c6ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c6f0:	4681      	mov	r9, r0
 800c6f2:	d1d6      	bne.n	800c6a2 <_svfiprintf_r+0x166>
 800c6f4:	89a3      	ldrh	r3, [r4, #12]
 800c6f6:	065b      	lsls	r3, r3, #25
 800c6f8:	f53f af35 	bmi.w	800c566 <_svfiprintf_r+0x2a>
 800c6fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6fe:	b01d      	add	sp, #116	; 0x74
 800c700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c704:	ab03      	add	r3, sp, #12
 800c706:	9300      	str	r3, [sp, #0]
 800c708:	4622      	mov	r2, r4
 800c70a:	4b07      	ldr	r3, [pc, #28]	; (800c728 <_svfiprintf_r+0x1ec>)
 800c70c:	a904      	add	r1, sp, #16
 800c70e:	4640      	mov	r0, r8
 800c710:	f7fc fe96 	bl	8009440 <_printf_i>
 800c714:	e7ea      	b.n	800c6ec <_svfiprintf_r+0x1b0>
 800c716:	bf00      	nop
 800c718:	0800dec4 	.word	0x0800dec4
 800c71c:	0800deca 	.word	0x0800deca
 800c720:	0800dece 	.word	0x0800dece
 800c724:	08008ed5 	.word	0x08008ed5
 800c728:	0800c489 	.word	0x0800c489

0800c72c <_sbrk_r>:
 800c72c:	b538      	push	{r3, r4, r5, lr}
 800c72e:	4c06      	ldr	r4, [pc, #24]	; (800c748 <_sbrk_r+0x1c>)
 800c730:	2300      	movs	r3, #0
 800c732:	4605      	mov	r5, r0
 800c734:	4608      	mov	r0, r1
 800c736:	6023      	str	r3, [r4, #0]
 800c738:	f7f7 f80e 	bl	8003758 <_sbrk>
 800c73c:	1c43      	adds	r3, r0, #1
 800c73e:	d102      	bne.n	800c746 <_sbrk_r+0x1a>
 800c740:	6823      	ldr	r3, [r4, #0]
 800c742:	b103      	cbz	r3, 800c746 <_sbrk_r+0x1a>
 800c744:	602b      	str	r3, [r5, #0]
 800c746:	bd38      	pop	{r3, r4, r5, pc}
 800c748:	20000c94 	.word	0x20000c94

0800c74c <strncmp>:
 800c74c:	b510      	push	{r4, lr}
 800c74e:	b16a      	cbz	r2, 800c76c <strncmp+0x20>
 800c750:	3901      	subs	r1, #1
 800c752:	1884      	adds	r4, r0, r2
 800c754:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c758:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d103      	bne.n	800c768 <strncmp+0x1c>
 800c760:	42a0      	cmp	r0, r4
 800c762:	d001      	beq.n	800c768 <strncmp+0x1c>
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1f5      	bne.n	800c754 <strncmp+0x8>
 800c768:	1a98      	subs	r0, r3, r2
 800c76a:	bd10      	pop	{r4, pc}
 800c76c:	4610      	mov	r0, r2
 800c76e:	e7fc      	b.n	800c76a <strncmp+0x1e>

0800c770 <__ascii_wctomb>:
 800c770:	b149      	cbz	r1, 800c786 <__ascii_wctomb+0x16>
 800c772:	2aff      	cmp	r2, #255	; 0xff
 800c774:	bf85      	ittet	hi
 800c776:	238a      	movhi	r3, #138	; 0x8a
 800c778:	6003      	strhi	r3, [r0, #0]
 800c77a:	700a      	strbls	r2, [r1, #0]
 800c77c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c780:	bf98      	it	ls
 800c782:	2001      	movls	r0, #1
 800c784:	4770      	bx	lr
 800c786:	4608      	mov	r0, r1
 800c788:	4770      	bx	lr

0800c78a <memmove>:
 800c78a:	4288      	cmp	r0, r1
 800c78c:	b510      	push	{r4, lr}
 800c78e:	eb01 0302 	add.w	r3, r1, r2
 800c792:	d807      	bhi.n	800c7a4 <memmove+0x1a>
 800c794:	1e42      	subs	r2, r0, #1
 800c796:	4299      	cmp	r1, r3
 800c798:	d00a      	beq.n	800c7b0 <memmove+0x26>
 800c79a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c79e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c7a2:	e7f8      	b.n	800c796 <memmove+0xc>
 800c7a4:	4283      	cmp	r3, r0
 800c7a6:	d9f5      	bls.n	800c794 <memmove+0xa>
 800c7a8:	1881      	adds	r1, r0, r2
 800c7aa:	1ad2      	subs	r2, r2, r3
 800c7ac:	42d3      	cmn	r3, r2
 800c7ae:	d100      	bne.n	800c7b2 <memmove+0x28>
 800c7b0:	bd10      	pop	{r4, pc}
 800c7b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7b6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c7ba:	e7f7      	b.n	800c7ac <memmove+0x22>

0800c7bc <__malloc_lock>:
 800c7bc:	4770      	bx	lr

0800c7be <__malloc_unlock>:
 800c7be:	4770      	bx	lr

0800c7c0 <_realloc_r>:
 800c7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c2:	4607      	mov	r7, r0
 800c7c4:	4614      	mov	r4, r2
 800c7c6:	460e      	mov	r6, r1
 800c7c8:	b921      	cbnz	r1, 800c7d4 <_realloc_r+0x14>
 800c7ca:	4611      	mov	r1, r2
 800c7cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c7d0:	f7ff be00 	b.w	800c3d4 <_malloc_r>
 800c7d4:	b922      	cbnz	r2, 800c7e0 <_realloc_r+0x20>
 800c7d6:	f7ff fdaf 	bl	800c338 <_free_r>
 800c7da:	4625      	mov	r5, r4
 800c7dc:	4628      	mov	r0, r5
 800c7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7e0:	f000 f814 	bl	800c80c <_malloc_usable_size_r>
 800c7e4:	42a0      	cmp	r0, r4
 800c7e6:	d20f      	bcs.n	800c808 <_realloc_r+0x48>
 800c7e8:	4621      	mov	r1, r4
 800c7ea:	4638      	mov	r0, r7
 800c7ec:	f7ff fdf2 	bl	800c3d4 <_malloc_r>
 800c7f0:	4605      	mov	r5, r0
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	d0f2      	beq.n	800c7dc <_realloc_r+0x1c>
 800c7f6:	4631      	mov	r1, r6
 800c7f8:	4622      	mov	r2, r4
 800c7fa:	f7ff f985 	bl	800bb08 <memcpy>
 800c7fe:	4631      	mov	r1, r6
 800c800:	4638      	mov	r0, r7
 800c802:	f7ff fd99 	bl	800c338 <_free_r>
 800c806:	e7e9      	b.n	800c7dc <_realloc_r+0x1c>
 800c808:	4635      	mov	r5, r6
 800c80a:	e7e7      	b.n	800c7dc <_realloc_r+0x1c>

0800c80c <_malloc_usable_size_r>:
 800c80c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c810:	1f18      	subs	r0, r3, #4
 800c812:	2b00      	cmp	r3, #0
 800c814:	bfbc      	itt	lt
 800c816:	580b      	ldrlt	r3, [r1, r0]
 800c818:	18c0      	addlt	r0, r0, r3
 800c81a:	4770      	bx	lr
 800c81c:	0000      	movs	r0, r0
	...

0800c820 <atan>:
 800c820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c824:	ec55 4b10 	vmov	r4, r5, d0
 800c828:	4bc3      	ldr	r3, [pc, #780]	; (800cb38 <atan+0x318>)
 800c82a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c82e:	429e      	cmp	r6, r3
 800c830:	46ab      	mov	fp, r5
 800c832:	dd18      	ble.n	800c866 <atan+0x46>
 800c834:	4bc1      	ldr	r3, [pc, #772]	; (800cb3c <atan+0x31c>)
 800c836:	429e      	cmp	r6, r3
 800c838:	dc01      	bgt.n	800c83e <atan+0x1e>
 800c83a:	d109      	bne.n	800c850 <atan+0x30>
 800c83c:	b144      	cbz	r4, 800c850 <atan+0x30>
 800c83e:	4622      	mov	r2, r4
 800c840:	462b      	mov	r3, r5
 800c842:	4620      	mov	r0, r4
 800c844:	4629      	mov	r1, r5
 800c846:	f7f3 fd21 	bl	800028c <__adddf3>
 800c84a:	4604      	mov	r4, r0
 800c84c:	460d      	mov	r5, r1
 800c84e:	e006      	b.n	800c85e <atan+0x3e>
 800c850:	f1bb 0f00 	cmp.w	fp, #0
 800c854:	f340 8131 	ble.w	800caba <atan+0x29a>
 800c858:	a59b      	add	r5, pc, #620	; (adr r5, 800cac8 <atan+0x2a8>)
 800c85a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c85e:	ec45 4b10 	vmov	d0, r4, r5
 800c862:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c866:	4bb6      	ldr	r3, [pc, #728]	; (800cb40 <atan+0x320>)
 800c868:	429e      	cmp	r6, r3
 800c86a:	dc14      	bgt.n	800c896 <atan+0x76>
 800c86c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c870:	429e      	cmp	r6, r3
 800c872:	dc0d      	bgt.n	800c890 <atan+0x70>
 800c874:	a396      	add	r3, pc, #600	; (adr r3, 800cad0 <atan+0x2b0>)
 800c876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87a:	ee10 0a10 	vmov	r0, s0
 800c87e:	4629      	mov	r1, r5
 800c880:	f7f3 fd04 	bl	800028c <__adddf3>
 800c884:	2200      	movs	r2, #0
 800c886:	4baf      	ldr	r3, [pc, #700]	; (800cb44 <atan+0x324>)
 800c888:	f7f4 f946 	bl	8000b18 <__aeabi_dcmpgt>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d1e6      	bne.n	800c85e <atan+0x3e>
 800c890:	f04f 3aff 	mov.w	sl, #4294967295
 800c894:	e02b      	b.n	800c8ee <atan+0xce>
 800c896:	f000 f963 	bl	800cb60 <fabs>
 800c89a:	4bab      	ldr	r3, [pc, #684]	; (800cb48 <atan+0x328>)
 800c89c:	429e      	cmp	r6, r3
 800c89e:	ec55 4b10 	vmov	r4, r5, d0
 800c8a2:	f300 80bf 	bgt.w	800ca24 <atan+0x204>
 800c8a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c8aa:	429e      	cmp	r6, r3
 800c8ac:	f300 80a0 	bgt.w	800c9f0 <atan+0x1d0>
 800c8b0:	ee10 2a10 	vmov	r2, s0
 800c8b4:	ee10 0a10 	vmov	r0, s0
 800c8b8:	462b      	mov	r3, r5
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	f7f3 fce6 	bl	800028c <__adddf3>
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	4ba0      	ldr	r3, [pc, #640]	; (800cb44 <atan+0x324>)
 800c8c4:	f7f3 fce0 	bl	8000288 <__aeabi_dsub>
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	4606      	mov	r6, r0
 800c8cc:	460f      	mov	r7, r1
 800c8ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	4629      	mov	r1, r5
 800c8d6:	f7f3 fcd9 	bl	800028c <__adddf3>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	460b      	mov	r3, r1
 800c8de:	4630      	mov	r0, r6
 800c8e0:	4639      	mov	r1, r7
 800c8e2:	f7f3 ffb3 	bl	800084c <__aeabi_ddiv>
 800c8e6:	f04f 0a00 	mov.w	sl, #0
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	460d      	mov	r5, r1
 800c8ee:	4622      	mov	r2, r4
 800c8f0:	462b      	mov	r3, r5
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	f7f3 fe7f 	bl	80005f8 <__aeabi_dmul>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	4680      	mov	r8, r0
 800c900:	4689      	mov	r9, r1
 800c902:	f7f3 fe79 	bl	80005f8 <__aeabi_dmul>
 800c906:	a374      	add	r3, pc, #464	; (adr r3, 800cad8 <atan+0x2b8>)
 800c908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90c:	4606      	mov	r6, r0
 800c90e:	460f      	mov	r7, r1
 800c910:	f7f3 fe72 	bl	80005f8 <__aeabi_dmul>
 800c914:	a372      	add	r3, pc, #456	; (adr r3, 800cae0 <atan+0x2c0>)
 800c916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91a:	f7f3 fcb7 	bl	800028c <__adddf3>
 800c91e:	4632      	mov	r2, r6
 800c920:	463b      	mov	r3, r7
 800c922:	f7f3 fe69 	bl	80005f8 <__aeabi_dmul>
 800c926:	a370      	add	r3, pc, #448	; (adr r3, 800cae8 <atan+0x2c8>)
 800c928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92c:	f7f3 fcae 	bl	800028c <__adddf3>
 800c930:	4632      	mov	r2, r6
 800c932:	463b      	mov	r3, r7
 800c934:	f7f3 fe60 	bl	80005f8 <__aeabi_dmul>
 800c938:	a36d      	add	r3, pc, #436	; (adr r3, 800caf0 <atan+0x2d0>)
 800c93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93e:	f7f3 fca5 	bl	800028c <__adddf3>
 800c942:	4632      	mov	r2, r6
 800c944:	463b      	mov	r3, r7
 800c946:	f7f3 fe57 	bl	80005f8 <__aeabi_dmul>
 800c94a:	a36b      	add	r3, pc, #428	; (adr r3, 800caf8 <atan+0x2d8>)
 800c94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c950:	f7f3 fc9c 	bl	800028c <__adddf3>
 800c954:	4632      	mov	r2, r6
 800c956:	463b      	mov	r3, r7
 800c958:	f7f3 fe4e 	bl	80005f8 <__aeabi_dmul>
 800c95c:	a368      	add	r3, pc, #416	; (adr r3, 800cb00 <atan+0x2e0>)
 800c95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c962:	f7f3 fc93 	bl	800028c <__adddf3>
 800c966:	4642      	mov	r2, r8
 800c968:	464b      	mov	r3, r9
 800c96a:	f7f3 fe45 	bl	80005f8 <__aeabi_dmul>
 800c96e:	a366      	add	r3, pc, #408	; (adr r3, 800cb08 <atan+0x2e8>)
 800c970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c974:	4680      	mov	r8, r0
 800c976:	4689      	mov	r9, r1
 800c978:	4630      	mov	r0, r6
 800c97a:	4639      	mov	r1, r7
 800c97c:	f7f3 fe3c 	bl	80005f8 <__aeabi_dmul>
 800c980:	a363      	add	r3, pc, #396	; (adr r3, 800cb10 <atan+0x2f0>)
 800c982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c986:	f7f3 fc7f 	bl	8000288 <__aeabi_dsub>
 800c98a:	4632      	mov	r2, r6
 800c98c:	463b      	mov	r3, r7
 800c98e:	f7f3 fe33 	bl	80005f8 <__aeabi_dmul>
 800c992:	a361      	add	r3, pc, #388	; (adr r3, 800cb18 <atan+0x2f8>)
 800c994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c998:	f7f3 fc76 	bl	8000288 <__aeabi_dsub>
 800c99c:	4632      	mov	r2, r6
 800c99e:	463b      	mov	r3, r7
 800c9a0:	f7f3 fe2a 	bl	80005f8 <__aeabi_dmul>
 800c9a4:	a35e      	add	r3, pc, #376	; (adr r3, 800cb20 <atan+0x300>)
 800c9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9aa:	f7f3 fc6d 	bl	8000288 <__aeabi_dsub>
 800c9ae:	4632      	mov	r2, r6
 800c9b0:	463b      	mov	r3, r7
 800c9b2:	f7f3 fe21 	bl	80005f8 <__aeabi_dmul>
 800c9b6:	a35c      	add	r3, pc, #368	; (adr r3, 800cb28 <atan+0x308>)
 800c9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9bc:	f7f3 fc64 	bl	8000288 <__aeabi_dsub>
 800c9c0:	4632      	mov	r2, r6
 800c9c2:	463b      	mov	r3, r7
 800c9c4:	f7f3 fe18 	bl	80005f8 <__aeabi_dmul>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	4640      	mov	r0, r8
 800c9ce:	4649      	mov	r1, r9
 800c9d0:	f7f3 fc5c 	bl	800028c <__adddf3>
 800c9d4:	4622      	mov	r2, r4
 800c9d6:	462b      	mov	r3, r5
 800c9d8:	f7f3 fe0e 	bl	80005f8 <__aeabi_dmul>
 800c9dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	d14b      	bne.n	800ca7e <atan+0x25e>
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	4629      	mov	r1, r5
 800c9ea:	f7f3 fc4d 	bl	8000288 <__aeabi_dsub>
 800c9ee:	e72c      	b.n	800c84a <atan+0x2a>
 800c9f0:	ee10 0a10 	vmov	r0, s0
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	4b53      	ldr	r3, [pc, #332]	; (800cb44 <atan+0x324>)
 800c9f8:	4629      	mov	r1, r5
 800c9fa:	f7f3 fc45 	bl	8000288 <__aeabi_dsub>
 800c9fe:	2200      	movs	r2, #0
 800ca00:	4606      	mov	r6, r0
 800ca02:	460f      	mov	r7, r1
 800ca04:	4b4f      	ldr	r3, [pc, #316]	; (800cb44 <atan+0x324>)
 800ca06:	4620      	mov	r0, r4
 800ca08:	4629      	mov	r1, r5
 800ca0a:	f7f3 fc3f 	bl	800028c <__adddf3>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	460b      	mov	r3, r1
 800ca12:	4630      	mov	r0, r6
 800ca14:	4639      	mov	r1, r7
 800ca16:	f7f3 ff19 	bl	800084c <__aeabi_ddiv>
 800ca1a:	f04f 0a01 	mov.w	sl, #1
 800ca1e:	4604      	mov	r4, r0
 800ca20:	460d      	mov	r5, r1
 800ca22:	e764      	b.n	800c8ee <atan+0xce>
 800ca24:	4b49      	ldr	r3, [pc, #292]	; (800cb4c <atan+0x32c>)
 800ca26:	429e      	cmp	r6, r3
 800ca28:	dc1d      	bgt.n	800ca66 <atan+0x246>
 800ca2a:	ee10 0a10 	vmov	r0, s0
 800ca2e:	2200      	movs	r2, #0
 800ca30:	4b47      	ldr	r3, [pc, #284]	; (800cb50 <atan+0x330>)
 800ca32:	4629      	mov	r1, r5
 800ca34:	f7f3 fc28 	bl	8000288 <__aeabi_dsub>
 800ca38:	2200      	movs	r2, #0
 800ca3a:	4606      	mov	r6, r0
 800ca3c:	460f      	mov	r7, r1
 800ca3e:	4b44      	ldr	r3, [pc, #272]	; (800cb50 <atan+0x330>)
 800ca40:	4620      	mov	r0, r4
 800ca42:	4629      	mov	r1, r5
 800ca44:	f7f3 fdd8 	bl	80005f8 <__aeabi_dmul>
 800ca48:	2200      	movs	r2, #0
 800ca4a:	4b3e      	ldr	r3, [pc, #248]	; (800cb44 <atan+0x324>)
 800ca4c:	f7f3 fc1e 	bl	800028c <__adddf3>
 800ca50:	4602      	mov	r2, r0
 800ca52:	460b      	mov	r3, r1
 800ca54:	4630      	mov	r0, r6
 800ca56:	4639      	mov	r1, r7
 800ca58:	f7f3 fef8 	bl	800084c <__aeabi_ddiv>
 800ca5c:	f04f 0a02 	mov.w	sl, #2
 800ca60:	4604      	mov	r4, r0
 800ca62:	460d      	mov	r5, r1
 800ca64:	e743      	b.n	800c8ee <atan+0xce>
 800ca66:	462b      	mov	r3, r5
 800ca68:	ee10 2a10 	vmov	r2, s0
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	4939      	ldr	r1, [pc, #228]	; (800cb54 <atan+0x334>)
 800ca70:	f7f3 feec 	bl	800084c <__aeabi_ddiv>
 800ca74:	f04f 0a03 	mov.w	sl, #3
 800ca78:	4604      	mov	r4, r0
 800ca7a:	460d      	mov	r5, r1
 800ca7c:	e737      	b.n	800c8ee <atan+0xce>
 800ca7e:	4b36      	ldr	r3, [pc, #216]	; (800cb58 <atan+0x338>)
 800ca80:	4e36      	ldr	r6, [pc, #216]	; (800cb5c <atan+0x33c>)
 800ca82:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800ca86:	4456      	add	r6, sl
 800ca88:	449a      	add	sl, r3
 800ca8a:	e9da 2300 	ldrd	r2, r3, [sl]
 800ca8e:	f7f3 fbfb 	bl	8000288 <__aeabi_dsub>
 800ca92:	4622      	mov	r2, r4
 800ca94:	462b      	mov	r3, r5
 800ca96:	f7f3 fbf7 	bl	8000288 <__aeabi_dsub>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800caa2:	f7f3 fbf1 	bl	8000288 <__aeabi_dsub>
 800caa6:	f1bb 0f00 	cmp.w	fp, #0
 800caaa:	4604      	mov	r4, r0
 800caac:	460d      	mov	r5, r1
 800caae:	f6bf aed6 	bge.w	800c85e <atan+0x3e>
 800cab2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cab6:	461d      	mov	r5, r3
 800cab8:	e6d1      	b.n	800c85e <atan+0x3e>
 800caba:	a51d      	add	r5, pc, #116	; (adr r5, 800cb30 <atan+0x310>)
 800cabc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cac0:	e6cd      	b.n	800c85e <atan+0x3e>
 800cac2:	bf00      	nop
 800cac4:	f3af 8000 	nop.w
 800cac8:	54442d18 	.word	0x54442d18
 800cacc:	3ff921fb 	.word	0x3ff921fb
 800cad0:	8800759c 	.word	0x8800759c
 800cad4:	7e37e43c 	.word	0x7e37e43c
 800cad8:	e322da11 	.word	0xe322da11
 800cadc:	3f90ad3a 	.word	0x3f90ad3a
 800cae0:	24760deb 	.word	0x24760deb
 800cae4:	3fa97b4b 	.word	0x3fa97b4b
 800cae8:	a0d03d51 	.word	0xa0d03d51
 800caec:	3fb10d66 	.word	0x3fb10d66
 800caf0:	c54c206e 	.word	0xc54c206e
 800caf4:	3fb745cd 	.word	0x3fb745cd
 800caf8:	920083ff 	.word	0x920083ff
 800cafc:	3fc24924 	.word	0x3fc24924
 800cb00:	5555550d 	.word	0x5555550d
 800cb04:	3fd55555 	.word	0x3fd55555
 800cb08:	2c6a6c2f 	.word	0x2c6a6c2f
 800cb0c:	bfa2b444 	.word	0xbfa2b444
 800cb10:	52defd9a 	.word	0x52defd9a
 800cb14:	3fadde2d 	.word	0x3fadde2d
 800cb18:	af749a6d 	.word	0xaf749a6d
 800cb1c:	3fb3b0f2 	.word	0x3fb3b0f2
 800cb20:	fe231671 	.word	0xfe231671
 800cb24:	3fbc71c6 	.word	0x3fbc71c6
 800cb28:	9998ebc4 	.word	0x9998ebc4
 800cb2c:	3fc99999 	.word	0x3fc99999
 800cb30:	54442d18 	.word	0x54442d18
 800cb34:	bff921fb 	.word	0xbff921fb
 800cb38:	440fffff 	.word	0x440fffff
 800cb3c:	7ff00000 	.word	0x7ff00000
 800cb40:	3fdbffff 	.word	0x3fdbffff
 800cb44:	3ff00000 	.word	0x3ff00000
 800cb48:	3ff2ffff 	.word	0x3ff2ffff
 800cb4c:	40037fff 	.word	0x40037fff
 800cb50:	3ff80000 	.word	0x3ff80000
 800cb54:	bff00000 	.word	0xbff00000
 800cb58:	0800dff8 	.word	0x0800dff8
 800cb5c:	0800dfd8 	.word	0x0800dfd8

0800cb60 <fabs>:
 800cb60:	ec51 0b10 	vmov	r0, r1, d0
 800cb64:	ee10 2a10 	vmov	r2, s0
 800cb68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb6c:	ec43 2b10 	vmov	d0, r2, r3
 800cb70:	4770      	bx	lr
	...

0800cb74 <pow>:
 800cb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb78:	ed2d 8b04 	vpush	{d8-d9}
 800cb7c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800ce50 <pow+0x2dc>
 800cb80:	b08d      	sub	sp, #52	; 0x34
 800cb82:	ec57 6b10 	vmov	r6, r7, d0
 800cb86:	ec55 4b11 	vmov	r4, r5, d1
 800cb8a:	f000 f9bd 	bl	800cf08 <__ieee754_pow>
 800cb8e:	f999 3000 	ldrsb.w	r3, [r9]
 800cb92:	9300      	str	r3, [sp, #0]
 800cb94:	3301      	adds	r3, #1
 800cb96:	eeb0 8a40 	vmov.f32	s16, s0
 800cb9a:	eef0 8a60 	vmov.f32	s17, s1
 800cb9e:	46c8      	mov	r8, r9
 800cba0:	d05f      	beq.n	800cc62 <pow+0xee>
 800cba2:	4622      	mov	r2, r4
 800cba4:	462b      	mov	r3, r5
 800cba6:	4620      	mov	r0, r4
 800cba8:	4629      	mov	r1, r5
 800cbaa:	f7f3 ffbf 	bl	8000b2c <__aeabi_dcmpun>
 800cbae:	4683      	mov	fp, r0
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	d156      	bne.n	800cc62 <pow+0xee>
 800cbb4:	4632      	mov	r2, r6
 800cbb6:	463b      	mov	r3, r7
 800cbb8:	4630      	mov	r0, r6
 800cbba:	4639      	mov	r1, r7
 800cbbc:	f7f3 ffb6 	bl	8000b2c <__aeabi_dcmpun>
 800cbc0:	9001      	str	r0, [sp, #4]
 800cbc2:	b1e8      	cbz	r0, 800cc00 <pow+0x8c>
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	4620      	mov	r0, r4
 800cbca:	4629      	mov	r1, r5
 800cbcc:	f7f3 ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	d046      	beq.n	800cc62 <pow+0xee>
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	9302      	str	r3, [sp, #8]
 800cbd8:	4b96      	ldr	r3, [pc, #600]	; (800ce34 <pow+0x2c0>)
 800cbda:	9303      	str	r3, [sp, #12]
 800cbdc:	4b96      	ldr	r3, [pc, #600]	; (800ce38 <pow+0x2c4>)
 800cbde:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cbe8:	9b00      	ldr	r3, [sp, #0]
 800cbea:	2b02      	cmp	r3, #2
 800cbec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cbf0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cbf4:	d033      	beq.n	800cc5e <pow+0xea>
 800cbf6:	a802      	add	r0, sp, #8
 800cbf8:	f000 ff4c 	bl	800da94 <matherr>
 800cbfc:	bb48      	cbnz	r0, 800cc52 <pow+0xde>
 800cbfe:	e05d      	b.n	800ccbc <pow+0x148>
 800cc00:	f04f 0a00 	mov.w	sl, #0
 800cc04:	f04f 0b00 	mov.w	fp, #0
 800cc08:	4652      	mov	r2, sl
 800cc0a:	465b      	mov	r3, fp
 800cc0c:	4630      	mov	r0, r6
 800cc0e:	4639      	mov	r1, r7
 800cc10:	f7f3 ff5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc14:	ec4b ab19 	vmov	d9, sl, fp
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	d054      	beq.n	800ccc6 <pow+0x152>
 800cc1c:	4652      	mov	r2, sl
 800cc1e:	465b      	mov	r3, fp
 800cc20:	4620      	mov	r0, r4
 800cc22:	4629      	mov	r1, r5
 800cc24:	f7f3 ff50 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc28:	4680      	mov	r8, r0
 800cc2a:	b318      	cbz	r0, 800cc74 <pow+0x100>
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	9302      	str	r3, [sp, #8]
 800cc30:	4b80      	ldr	r3, [pc, #512]	; (800ce34 <pow+0x2c0>)
 800cc32:	9303      	str	r3, [sp, #12]
 800cc34:	9b01      	ldr	r3, [sp, #4]
 800cc36:	930a      	str	r3, [sp, #40]	; 0x28
 800cc38:	9b00      	ldr	r3, [sp, #0]
 800cc3a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cc3e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cc42:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d0d5      	beq.n	800cbf6 <pow+0x82>
 800cc4a:	4b7b      	ldr	r3, [pc, #492]	; (800ce38 <pow+0x2c4>)
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cc52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc54:	b11b      	cbz	r3, 800cc5e <pow+0xea>
 800cc56:	f7fc f877 	bl	8008d48 <__errno>
 800cc5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc5c:	6003      	str	r3, [r0, #0]
 800cc5e:	ed9d 8b08 	vldr	d8, [sp, #32]
 800cc62:	eeb0 0a48 	vmov.f32	s0, s16
 800cc66:	eef0 0a68 	vmov.f32	s1, s17
 800cc6a:	b00d      	add	sp, #52	; 0x34
 800cc6c:	ecbd 8b04 	vpop	{d8-d9}
 800cc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc74:	ec45 4b10 	vmov	d0, r4, r5
 800cc78:	f000 ff04 	bl	800da84 <finite>
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	d0f0      	beq.n	800cc62 <pow+0xee>
 800cc80:	4652      	mov	r2, sl
 800cc82:	465b      	mov	r3, fp
 800cc84:	4620      	mov	r0, r4
 800cc86:	4629      	mov	r1, r5
 800cc88:	f7f3 ff28 	bl	8000adc <__aeabi_dcmplt>
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d0e8      	beq.n	800cc62 <pow+0xee>
 800cc90:	2301      	movs	r3, #1
 800cc92:	9302      	str	r3, [sp, #8]
 800cc94:	4b67      	ldr	r3, [pc, #412]	; (800ce34 <pow+0x2c0>)
 800cc96:	9303      	str	r3, [sp, #12]
 800cc98:	f999 3000 	ldrsb.w	r3, [r9]
 800cc9c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800cca0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cca4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cca8:	b913      	cbnz	r3, 800ccb0 <pow+0x13c>
 800ccaa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ccae:	e7a2      	b.n	800cbf6 <pow+0x82>
 800ccb0:	4962      	ldr	r1, [pc, #392]	; (800ce3c <pow+0x2c8>)
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ccb8:	2b02      	cmp	r3, #2
 800ccba:	d19c      	bne.n	800cbf6 <pow+0x82>
 800ccbc:	f7fc f844 	bl	8008d48 <__errno>
 800ccc0:	2321      	movs	r3, #33	; 0x21
 800ccc2:	6003      	str	r3, [r0, #0]
 800ccc4:	e7c5      	b.n	800cc52 <pow+0xde>
 800ccc6:	eeb0 0a48 	vmov.f32	s0, s16
 800ccca:	eef0 0a68 	vmov.f32	s1, s17
 800ccce:	f000 fed9 	bl	800da84 <finite>
 800ccd2:	9000      	str	r0, [sp, #0]
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	f040 8081 	bne.w	800cddc <pow+0x268>
 800ccda:	ec47 6b10 	vmov	d0, r6, r7
 800ccde:	f000 fed1 	bl	800da84 <finite>
 800cce2:	2800      	cmp	r0, #0
 800cce4:	d07a      	beq.n	800cddc <pow+0x268>
 800cce6:	ec45 4b10 	vmov	d0, r4, r5
 800ccea:	f000 fecb 	bl	800da84 <finite>
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	d074      	beq.n	800cddc <pow+0x268>
 800ccf2:	ec53 2b18 	vmov	r2, r3, d8
 800ccf6:	ee18 0a10 	vmov	r0, s16
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	f7f3 ff16 	bl	8000b2c <__aeabi_dcmpun>
 800cd00:	f999 9000 	ldrsb.w	r9, [r9]
 800cd04:	4b4b      	ldr	r3, [pc, #300]	; (800ce34 <pow+0x2c0>)
 800cd06:	b1b0      	cbz	r0, 800cd36 <pow+0x1c2>
 800cd08:	2201      	movs	r2, #1
 800cd0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd0e:	9b00      	ldr	r3, [sp, #0]
 800cd10:	930a      	str	r3, [sp, #40]	; 0x28
 800cd12:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cd16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cd1a:	f1b9 0f00 	cmp.w	r9, #0
 800cd1e:	d0c4      	beq.n	800ccaa <pow+0x136>
 800cd20:	4652      	mov	r2, sl
 800cd22:	465b      	mov	r3, fp
 800cd24:	4650      	mov	r0, sl
 800cd26:	4659      	mov	r1, fp
 800cd28:	f7f3 fd90 	bl	800084c <__aeabi_ddiv>
 800cd2c:	f1b9 0f02 	cmp.w	r9, #2
 800cd30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cd34:	e7c1      	b.n	800ccba <pow+0x146>
 800cd36:	2203      	movs	r2, #3
 800cd38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd3c:	900a      	str	r0, [sp, #40]	; 0x28
 800cd3e:	4629      	mov	r1, r5
 800cd40:	4620      	mov	r0, r4
 800cd42:	2200      	movs	r2, #0
 800cd44:	4b3e      	ldr	r3, [pc, #248]	; (800ce40 <pow+0x2cc>)
 800cd46:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800cd4a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800cd4e:	f7f3 fc53 	bl	80005f8 <__aeabi_dmul>
 800cd52:	4604      	mov	r4, r0
 800cd54:	460d      	mov	r5, r1
 800cd56:	f1b9 0f00 	cmp.w	r9, #0
 800cd5a:	d124      	bne.n	800cda6 <pow+0x232>
 800cd5c:	4b39      	ldr	r3, [pc, #228]	; (800ce44 <pow+0x2d0>)
 800cd5e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800cd62:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cd66:	4630      	mov	r0, r6
 800cd68:	4652      	mov	r2, sl
 800cd6a:	465b      	mov	r3, fp
 800cd6c:	4639      	mov	r1, r7
 800cd6e:	f7f3 feb5 	bl	8000adc <__aeabi_dcmplt>
 800cd72:	2800      	cmp	r0, #0
 800cd74:	d056      	beq.n	800ce24 <pow+0x2b0>
 800cd76:	ec45 4b10 	vmov	d0, r4, r5
 800cd7a:	f000 fe95 	bl	800daa8 <rint>
 800cd7e:	4622      	mov	r2, r4
 800cd80:	462b      	mov	r3, r5
 800cd82:	ec51 0b10 	vmov	r0, r1, d0
 800cd86:	f7f3 fe9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd8a:	b920      	cbnz	r0, 800cd96 <pow+0x222>
 800cd8c:	4b2e      	ldr	r3, [pc, #184]	; (800ce48 <pow+0x2d4>)
 800cd8e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800cd92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cd96:	f998 3000 	ldrsb.w	r3, [r8]
 800cd9a:	2b02      	cmp	r3, #2
 800cd9c:	d142      	bne.n	800ce24 <pow+0x2b0>
 800cd9e:	f7fb ffd3 	bl	8008d48 <__errno>
 800cda2:	2322      	movs	r3, #34	; 0x22
 800cda4:	e78d      	b.n	800ccc2 <pow+0x14e>
 800cda6:	4b29      	ldr	r3, [pc, #164]	; (800ce4c <pow+0x2d8>)
 800cda8:	2200      	movs	r2, #0
 800cdaa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cdae:	4630      	mov	r0, r6
 800cdb0:	4652      	mov	r2, sl
 800cdb2:	465b      	mov	r3, fp
 800cdb4:	4639      	mov	r1, r7
 800cdb6:	f7f3 fe91 	bl	8000adc <__aeabi_dcmplt>
 800cdba:	2800      	cmp	r0, #0
 800cdbc:	d0eb      	beq.n	800cd96 <pow+0x222>
 800cdbe:	ec45 4b10 	vmov	d0, r4, r5
 800cdc2:	f000 fe71 	bl	800daa8 <rint>
 800cdc6:	4622      	mov	r2, r4
 800cdc8:	462b      	mov	r3, r5
 800cdca:	ec51 0b10 	vmov	r0, r1, d0
 800cdce:	f7f3 fe7b 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdd2:	2800      	cmp	r0, #0
 800cdd4:	d1df      	bne.n	800cd96 <pow+0x222>
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	4b18      	ldr	r3, [pc, #96]	; (800ce3c <pow+0x2c8>)
 800cdda:	e7da      	b.n	800cd92 <pow+0x21e>
 800cddc:	2200      	movs	r2, #0
 800cdde:	2300      	movs	r3, #0
 800cde0:	ec51 0b18 	vmov	r0, r1, d8
 800cde4:	f7f3 fe70 	bl	8000ac8 <__aeabi_dcmpeq>
 800cde8:	2800      	cmp	r0, #0
 800cdea:	f43f af3a 	beq.w	800cc62 <pow+0xee>
 800cdee:	ec47 6b10 	vmov	d0, r6, r7
 800cdf2:	f000 fe47 	bl	800da84 <finite>
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	f43f af33 	beq.w	800cc62 <pow+0xee>
 800cdfc:	ec45 4b10 	vmov	d0, r4, r5
 800ce00:	f000 fe40 	bl	800da84 <finite>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	f43f af2c 	beq.w	800cc62 <pow+0xee>
 800ce0a:	2304      	movs	r3, #4
 800ce0c:	9302      	str	r3, [sp, #8]
 800ce0e:	4b09      	ldr	r3, [pc, #36]	; (800ce34 <pow+0x2c0>)
 800ce10:	9303      	str	r3, [sp, #12]
 800ce12:	2300      	movs	r3, #0
 800ce14:	930a      	str	r3, [sp, #40]	; 0x28
 800ce16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ce1a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ce1e:	ed8d 9b08 	vstr	d9, [sp, #32]
 800ce22:	e7b8      	b.n	800cd96 <pow+0x222>
 800ce24:	a802      	add	r0, sp, #8
 800ce26:	f000 fe35 	bl	800da94 <matherr>
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	f47f af11 	bne.w	800cc52 <pow+0xde>
 800ce30:	e7b5      	b.n	800cd9e <pow+0x22a>
 800ce32:	bf00      	nop
 800ce34:	0800e018 	.word	0x0800e018
 800ce38:	3ff00000 	.word	0x3ff00000
 800ce3c:	fff00000 	.word	0xfff00000
 800ce40:	3fe00000 	.word	0x3fe00000
 800ce44:	47efffff 	.word	0x47efffff
 800ce48:	c7efffff 	.word	0xc7efffff
 800ce4c:	7ff00000 	.word	0x7ff00000
 800ce50:	20000258 	.word	0x20000258

0800ce54 <sqrt>:
 800ce54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce58:	ed2d 8b02 	vpush	{d8}
 800ce5c:	b08b      	sub	sp, #44	; 0x2c
 800ce5e:	ec55 4b10 	vmov	r4, r5, d0
 800ce62:	f000 fd5f 	bl	800d924 <__ieee754_sqrt>
 800ce66:	4b26      	ldr	r3, [pc, #152]	; (800cf00 <sqrt+0xac>)
 800ce68:	eeb0 8a40 	vmov.f32	s16, s0
 800ce6c:	eef0 8a60 	vmov.f32	s17, s1
 800ce70:	f993 6000 	ldrsb.w	r6, [r3]
 800ce74:	1c73      	adds	r3, r6, #1
 800ce76:	d02a      	beq.n	800cece <sqrt+0x7a>
 800ce78:	4622      	mov	r2, r4
 800ce7a:	462b      	mov	r3, r5
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	4629      	mov	r1, r5
 800ce80:	f7f3 fe54 	bl	8000b2c <__aeabi_dcmpun>
 800ce84:	4607      	mov	r7, r0
 800ce86:	bb10      	cbnz	r0, 800cece <sqrt+0x7a>
 800ce88:	f04f 0800 	mov.w	r8, #0
 800ce8c:	f04f 0900 	mov.w	r9, #0
 800ce90:	4642      	mov	r2, r8
 800ce92:	464b      	mov	r3, r9
 800ce94:	4620      	mov	r0, r4
 800ce96:	4629      	mov	r1, r5
 800ce98:	f7f3 fe20 	bl	8000adc <__aeabi_dcmplt>
 800ce9c:	b1b8      	cbz	r0, 800cece <sqrt+0x7a>
 800ce9e:	2301      	movs	r3, #1
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	4b18      	ldr	r3, [pc, #96]	; (800cf04 <sqrt+0xb0>)
 800cea4:	9301      	str	r3, [sp, #4]
 800cea6:	9708      	str	r7, [sp, #32]
 800cea8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ceac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ceb0:	b9b6      	cbnz	r6, 800cee0 <sqrt+0x8c>
 800ceb2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ceb6:	4668      	mov	r0, sp
 800ceb8:	f000 fdec 	bl	800da94 <matherr>
 800cebc:	b1d0      	cbz	r0, 800cef4 <sqrt+0xa0>
 800cebe:	9b08      	ldr	r3, [sp, #32]
 800cec0:	b11b      	cbz	r3, 800ceca <sqrt+0x76>
 800cec2:	f7fb ff41 	bl	8008d48 <__errno>
 800cec6:	9b08      	ldr	r3, [sp, #32]
 800cec8:	6003      	str	r3, [r0, #0]
 800ceca:	ed9d 8b06 	vldr	d8, [sp, #24]
 800cece:	eeb0 0a48 	vmov.f32	s0, s16
 800ced2:	eef0 0a68 	vmov.f32	s1, s17
 800ced6:	b00b      	add	sp, #44	; 0x2c
 800ced8:	ecbd 8b02 	vpop	{d8}
 800cedc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cee0:	4642      	mov	r2, r8
 800cee2:	464b      	mov	r3, r9
 800cee4:	4640      	mov	r0, r8
 800cee6:	4649      	mov	r1, r9
 800cee8:	f7f3 fcb0 	bl	800084c <__aeabi_ddiv>
 800ceec:	2e02      	cmp	r6, #2
 800ceee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cef2:	d1e0      	bne.n	800ceb6 <sqrt+0x62>
 800cef4:	f7fb ff28 	bl	8008d48 <__errno>
 800cef8:	2321      	movs	r3, #33	; 0x21
 800cefa:	6003      	str	r3, [r0, #0]
 800cefc:	e7df      	b.n	800cebe <sqrt+0x6a>
 800cefe:	bf00      	nop
 800cf00:	20000258 	.word	0x20000258
 800cf04:	0800e01c 	.word	0x0800e01c

0800cf08 <__ieee754_pow>:
 800cf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0c:	b091      	sub	sp, #68	; 0x44
 800cf0e:	ed8d 1b00 	vstr	d1, [sp]
 800cf12:	e9dd 2900 	ldrd	r2, r9, [sp]
 800cf16:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800cf1a:	ea58 0302 	orrs.w	r3, r8, r2
 800cf1e:	ec57 6b10 	vmov	r6, r7, d0
 800cf22:	f000 84be 	beq.w	800d8a2 <__ieee754_pow+0x99a>
 800cf26:	4b7a      	ldr	r3, [pc, #488]	; (800d110 <__ieee754_pow+0x208>)
 800cf28:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800cf2c:	429c      	cmp	r4, r3
 800cf2e:	463d      	mov	r5, r7
 800cf30:	ee10 aa10 	vmov	sl, s0
 800cf34:	dc09      	bgt.n	800cf4a <__ieee754_pow+0x42>
 800cf36:	d103      	bne.n	800cf40 <__ieee754_pow+0x38>
 800cf38:	b93e      	cbnz	r6, 800cf4a <__ieee754_pow+0x42>
 800cf3a:	45a0      	cmp	r8, r4
 800cf3c:	dc0d      	bgt.n	800cf5a <__ieee754_pow+0x52>
 800cf3e:	e001      	b.n	800cf44 <__ieee754_pow+0x3c>
 800cf40:	4598      	cmp	r8, r3
 800cf42:	dc02      	bgt.n	800cf4a <__ieee754_pow+0x42>
 800cf44:	4598      	cmp	r8, r3
 800cf46:	d10e      	bne.n	800cf66 <__ieee754_pow+0x5e>
 800cf48:	b16a      	cbz	r2, 800cf66 <__ieee754_pow+0x5e>
 800cf4a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cf4e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cf52:	ea54 030a 	orrs.w	r3, r4, sl
 800cf56:	f000 84a4 	beq.w	800d8a2 <__ieee754_pow+0x99a>
 800cf5a:	486e      	ldr	r0, [pc, #440]	; (800d114 <__ieee754_pow+0x20c>)
 800cf5c:	b011      	add	sp, #68	; 0x44
 800cf5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf62:	f000 bd99 	b.w	800da98 <nan>
 800cf66:	2d00      	cmp	r5, #0
 800cf68:	da53      	bge.n	800d012 <__ieee754_pow+0x10a>
 800cf6a:	4b6b      	ldr	r3, [pc, #428]	; (800d118 <__ieee754_pow+0x210>)
 800cf6c:	4598      	cmp	r8, r3
 800cf6e:	dc4d      	bgt.n	800d00c <__ieee754_pow+0x104>
 800cf70:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cf74:	4598      	cmp	r8, r3
 800cf76:	dd4c      	ble.n	800d012 <__ieee754_pow+0x10a>
 800cf78:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cf7c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cf80:	2b14      	cmp	r3, #20
 800cf82:	dd26      	ble.n	800cfd2 <__ieee754_pow+0xca>
 800cf84:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cf88:	fa22 f103 	lsr.w	r1, r2, r3
 800cf8c:	fa01 f303 	lsl.w	r3, r1, r3
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d13e      	bne.n	800d012 <__ieee754_pow+0x10a>
 800cf94:	f001 0101 	and.w	r1, r1, #1
 800cf98:	f1c1 0b02 	rsb	fp, r1, #2
 800cf9c:	2a00      	cmp	r2, #0
 800cf9e:	d15b      	bne.n	800d058 <__ieee754_pow+0x150>
 800cfa0:	4b5b      	ldr	r3, [pc, #364]	; (800d110 <__ieee754_pow+0x208>)
 800cfa2:	4598      	cmp	r8, r3
 800cfa4:	d124      	bne.n	800cff0 <__ieee754_pow+0xe8>
 800cfa6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cfaa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cfae:	ea53 030a 	orrs.w	r3, r3, sl
 800cfb2:	f000 8476 	beq.w	800d8a2 <__ieee754_pow+0x99a>
 800cfb6:	4b59      	ldr	r3, [pc, #356]	; (800d11c <__ieee754_pow+0x214>)
 800cfb8:	429c      	cmp	r4, r3
 800cfba:	dd2d      	ble.n	800d018 <__ieee754_pow+0x110>
 800cfbc:	f1b9 0f00 	cmp.w	r9, #0
 800cfc0:	f280 8473 	bge.w	800d8aa <__ieee754_pow+0x9a2>
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	ec41 0b10 	vmov	d0, r0, r1
 800cfcc:	b011      	add	sp, #68	; 0x44
 800cfce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd2:	2a00      	cmp	r2, #0
 800cfd4:	d13e      	bne.n	800d054 <__ieee754_pow+0x14c>
 800cfd6:	f1c3 0314 	rsb	r3, r3, #20
 800cfda:	fa48 f103 	asr.w	r1, r8, r3
 800cfde:	fa01 f303 	lsl.w	r3, r1, r3
 800cfe2:	4543      	cmp	r3, r8
 800cfe4:	f040 8469 	bne.w	800d8ba <__ieee754_pow+0x9b2>
 800cfe8:	f001 0101 	and.w	r1, r1, #1
 800cfec:	f1c1 0b02 	rsb	fp, r1, #2
 800cff0:	4b4b      	ldr	r3, [pc, #300]	; (800d120 <__ieee754_pow+0x218>)
 800cff2:	4598      	cmp	r8, r3
 800cff4:	d118      	bne.n	800d028 <__ieee754_pow+0x120>
 800cff6:	f1b9 0f00 	cmp.w	r9, #0
 800cffa:	f280 845a 	bge.w	800d8b2 <__ieee754_pow+0x9aa>
 800cffe:	4948      	ldr	r1, [pc, #288]	; (800d120 <__ieee754_pow+0x218>)
 800d000:	4632      	mov	r2, r6
 800d002:	463b      	mov	r3, r7
 800d004:	2000      	movs	r0, #0
 800d006:	f7f3 fc21 	bl	800084c <__aeabi_ddiv>
 800d00a:	e7dd      	b.n	800cfc8 <__ieee754_pow+0xc0>
 800d00c:	f04f 0b02 	mov.w	fp, #2
 800d010:	e7c4      	b.n	800cf9c <__ieee754_pow+0x94>
 800d012:	f04f 0b00 	mov.w	fp, #0
 800d016:	e7c1      	b.n	800cf9c <__ieee754_pow+0x94>
 800d018:	f1b9 0f00 	cmp.w	r9, #0
 800d01c:	dad2      	bge.n	800cfc4 <__ieee754_pow+0xbc>
 800d01e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d022:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d026:	e7cf      	b.n	800cfc8 <__ieee754_pow+0xc0>
 800d028:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d02c:	d106      	bne.n	800d03c <__ieee754_pow+0x134>
 800d02e:	4632      	mov	r2, r6
 800d030:	463b      	mov	r3, r7
 800d032:	4610      	mov	r0, r2
 800d034:	4619      	mov	r1, r3
 800d036:	f7f3 fadf 	bl	80005f8 <__aeabi_dmul>
 800d03a:	e7c5      	b.n	800cfc8 <__ieee754_pow+0xc0>
 800d03c:	4b39      	ldr	r3, [pc, #228]	; (800d124 <__ieee754_pow+0x21c>)
 800d03e:	4599      	cmp	r9, r3
 800d040:	d10a      	bne.n	800d058 <__ieee754_pow+0x150>
 800d042:	2d00      	cmp	r5, #0
 800d044:	db08      	blt.n	800d058 <__ieee754_pow+0x150>
 800d046:	ec47 6b10 	vmov	d0, r6, r7
 800d04a:	b011      	add	sp, #68	; 0x44
 800d04c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d050:	f000 bc68 	b.w	800d924 <__ieee754_sqrt>
 800d054:	f04f 0b00 	mov.w	fp, #0
 800d058:	ec47 6b10 	vmov	d0, r6, r7
 800d05c:	f7ff fd80 	bl	800cb60 <fabs>
 800d060:	ec51 0b10 	vmov	r0, r1, d0
 800d064:	f1ba 0f00 	cmp.w	sl, #0
 800d068:	d127      	bne.n	800d0ba <__ieee754_pow+0x1b2>
 800d06a:	b124      	cbz	r4, 800d076 <__ieee754_pow+0x16e>
 800d06c:	4b2c      	ldr	r3, [pc, #176]	; (800d120 <__ieee754_pow+0x218>)
 800d06e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d072:	429a      	cmp	r2, r3
 800d074:	d121      	bne.n	800d0ba <__ieee754_pow+0x1b2>
 800d076:	f1b9 0f00 	cmp.w	r9, #0
 800d07a:	da05      	bge.n	800d088 <__ieee754_pow+0x180>
 800d07c:	4602      	mov	r2, r0
 800d07e:	460b      	mov	r3, r1
 800d080:	2000      	movs	r0, #0
 800d082:	4927      	ldr	r1, [pc, #156]	; (800d120 <__ieee754_pow+0x218>)
 800d084:	f7f3 fbe2 	bl	800084c <__aeabi_ddiv>
 800d088:	2d00      	cmp	r5, #0
 800d08a:	da9d      	bge.n	800cfc8 <__ieee754_pow+0xc0>
 800d08c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d090:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d094:	ea54 030b 	orrs.w	r3, r4, fp
 800d098:	d108      	bne.n	800d0ac <__ieee754_pow+0x1a4>
 800d09a:	4602      	mov	r2, r0
 800d09c:	460b      	mov	r3, r1
 800d09e:	4610      	mov	r0, r2
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	f7f3 f8f1 	bl	8000288 <__aeabi_dsub>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	e7ac      	b.n	800d006 <__ieee754_pow+0xfe>
 800d0ac:	f1bb 0f01 	cmp.w	fp, #1
 800d0b0:	d18a      	bne.n	800cfc8 <__ieee754_pow+0xc0>
 800d0b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	e786      	b.n	800cfc8 <__ieee754_pow+0xc0>
 800d0ba:	0fed      	lsrs	r5, r5, #31
 800d0bc:	1e6b      	subs	r3, r5, #1
 800d0be:	930d      	str	r3, [sp, #52]	; 0x34
 800d0c0:	ea5b 0303 	orrs.w	r3, fp, r3
 800d0c4:	d102      	bne.n	800d0cc <__ieee754_pow+0x1c4>
 800d0c6:	4632      	mov	r2, r6
 800d0c8:	463b      	mov	r3, r7
 800d0ca:	e7e8      	b.n	800d09e <__ieee754_pow+0x196>
 800d0cc:	4b16      	ldr	r3, [pc, #88]	; (800d128 <__ieee754_pow+0x220>)
 800d0ce:	4598      	cmp	r8, r3
 800d0d0:	f340 80fe 	ble.w	800d2d0 <__ieee754_pow+0x3c8>
 800d0d4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d0d8:	4598      	cmp	r8, r3
 800d0da:	dd0a      	ble.n	800d0f2 <__ieee754_pow+0x1ea>
 800d0dc:	4b0f      	ldr	r3, [pc, #60]	; (800d11c <__ieee754_pow+0x214>)
 800d0de:	429c      	cmp	r4, r3
 800d0e0:	dc0d      	bgt.n	800d0fe <__ieee754_pow+0x1f6>
 800d0e2:	f1b9 0f00 	cmp.w	r9, #0
 800d0e6:	f6bf af6d 	bge.w	800cfc4 <__ieee754_pow+0xbc>
 800d0ea:	a307      	add	r3, pc, #28	; (adr r3, 800d108 <__ieee754_pow+0x200>)
 800d0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f0:	e79f      	b.n	800d032 <__ieee754_pow+0x12a>
 800d0f2:	4b0e      	ldr	r3, [pc, #56]	; (800d12c <__ieee754_pow+0x224>)
 800d0f4:	429c      	cmp	r4, r3
 800d0f6:	ddf4      	ble.n	800d0e2 <__ieee754_pow+0x1da>
 800d0f8:	4b09      	ldr	r3, [pc, #36]	; (800d120 <__ieee754_pow+0x218>)
 800d0fa:	429c      	cmp	r4, r3
 800d0fc:	dd18      	ble.n	800d130 <__ieee754_pow+0x228>
 800d0fe:	f1b9 0f00 	cmp.w	r9, #0
 800d102:	dcf2      	bgt.n	800d0ea <__ieee754_pow+0x1e2>
 800d104:	e75e      	b.n	800cfc4 <__ieee754_pow+0xbc>
 800d106:	bf00      	nop
 800d108:	8800759c 	.word	0x8800759c
 800d10c:	7e37e43c 	.word	0x7e37e43c
 800d110:	7ff00000 	.word	0x7ff00000
 800d114:	0800dec9 	.word	0x0800dec9
 800d118:	433fffff 	.word	0x433fffff
 800d11c:	3fefffff 	.word	0x3fefffff
 800d120:	3ff00000 	.word	0x3ff00000
 800d124:	3fe00000 	.word	0x3fe00000
 800d128:	41e00000 	.word	0x41e00000
 800d12c:	3feffffe 	.word	0x3feffffe
 800d130:	2200      	movs	r2, #0
 800d132:	4b63      	ldr	r3, [pc, #396]	; (800d2c0 <__ieee754_pow+0x3b8>)
 800d134:	f7f3 f8a8 	bl	8000288 <__aeabi_dsub>
 800d138:	a355      	add	r3, pc, #340	; (adr r3, 800d290 <__ieee754_pow+0x388>)
 800d13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13e:	4604      	mov	r4, r0
 800d140:	460d      	mov	r5, r1
 800d142:	f7f3 fa59 	bl	80005f8 <__aeabi_dmul>
 800d146:	a354      	add	r3, pc, #336	; (adr r3, 800d298 <__ieee754_pow+0x390>)
 800d148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14c:	4606      	mov	r6, r0
 800d14e:	460f      	mov	r7, r1
 800d150:	4620      	mov	r0, r4
 800d152:	4629      	mov	r1, r5
 800d154:	f7f3 fa50 	bl	80005f8 <__aeabi_dmul>
 800d158:	2200      	movs	r2, #0
 800d15a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d15e:	4b59      	ldr	r3, [pc, #356]	; (800d2c4 <__ieee754_pow+0x3bc>)
 800d160:	4620      	mov	r0, r4
 800d162:	4629      	mov	r1, r5
 800d164:	f7f3 fa48 	bl	80005f8 <__aeabi_dmul>
 800d168:	4602      	mov	r2, r0
 800d16a:	460b      	mov	r3, r1
 800d16c:	a14c      	add	r1, pc, #304	; (adr r1, 800d2a0 <__ieee754_pow+0x398>)
 800d16e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d172:	f7f3 f889 	bl	8000288 <__aeabi_dsub>
 800d176:	4622      	mov	r2, r4
 800d178:	462b      	mov	r3, r5
 800d17a:	f7f3 fa3d 	bl	80005f8 <__aeabi_dmul>
 800d17e:	4602      	mov	r2, r0
 800d180:	460b      	mov	r3, r1
 800d182:	2000      	movs	r0, #0
 800d184:	4950      	ldr	r1, [pc, #320]	; (800d2c8 <__ieee754_pow+0x3c0>)
 800d186:	f7f3 f87f 	bl	8000288 <__aeabi_dsub>
 800d18a:	4622      	mov	r2, r4
 800d18c:	462b      	mov	r3, r5
 800d18e:	4680      	mov	r8, r0
 800d190:	4689      	mov	r9, r1
 800d192:	4620      	mov	r0, r4
 800d194:	4629      	mov	r1, r5
 800d196:	f7f3 fa2f 	bl	80005f8 <__aeabi_dmul>
 800d19a:	4602      	mov	r2, r0
 800d19c:	460b      	mov	r3, r1
 800d19e:	4640      	mov	r0, r8
 800d1a0:	4649      	mov	r1, r9
 800d1a2:	f7f3 fa29 	bl	80005f8 <__aeabi_dmul>
 800d1a6:	a340      	add	r3, pc, #256	; (adr r3, 800d2a8 <__ieee754_pow+0x3a0>)
 800d1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ac:	f7f3 fa24 	bl	80005f8 <__aeabi_dmul>
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	460b      	mov	r3, r1
 800d1b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1b8:	f7f3 f866 	bl	8000288 <__aeabi_dsub>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	460b      	mov	r3, r1
 800d1c0:	4604      	mov	r4, r0
 800d1c2:	460d      	mov	r5, r1
 800d1c4:	4630      	mov	r0, r6
 800d1c6:	4639      	mov	r1, r7
 800d1c8:	f7f3 f860 	bl	800028c <__adddf3>
 800d1cc:	2000      	movs	r0, #0
 800d1ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d1d2:	4632      	mov	r2, r6
 800d1d4:	463b      	mov	r3, r7
 800d1d6:	f7f3 f857 	bl	8000288 <__aeabi_dsub>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	460b      	mov	r3, r1
 800d1de:	4620      	mov	r0, r4
 800d1e0:	4629      	mov	r1, r5
 800d1e2:	f7f3 f851 	bl	8000288 <__aeabi_dsub>
 800d1e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1e8:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	4606      	mov	r6, r0
 800d1f0:	460f      	mov	r7, r1
 800d1f2:	f040 81eb 	bne.w	800d5cc <__ieee754_pow+0x6c4>
 800d1f6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800d2b0 <__ieee754_pow+0x3a8>
 800d1fa:	e9dd 4500 	ldrd	r4, r5, [sp]
 800d1fe:	2400      	movs	r4, #0
 800d200:	4622      	mov	r2, r4
 800d202:	462b      	mov	r3, r5
 800d204:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d208:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d20c:	f7f3 f83c 	bl	8000288 <__aeabi_dsub>
 800d210:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d214:	f7f3 f9f0 	bl	80005f8 <__aeabi_dmul>
 800d218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d21c:	4680      	mov	r8, r0
 800d21e:	4689      	mov	r9, r1
 800d220:	4630      	mov	r0, r6
 800d222:	4639      	mov	r1, r7
 800d224:	f7f3 f9e8 	bl	80005f8 <__aeabi_dmul>
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	4640      	mov	r0, r8
 800d22e:	4649      	mov	r1, r9
 800d230:	f7f3 f82c 	bl	800028c <__adddf3>
 800d234:	4622      	mov	r2, r4
 800d236:	462b      	mov	r3, r5
 800d238:	4680      	mov	r8, r0
 800d23a:	4689      	mov	r9, r1
 800d23c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d240:	f7f3 f9da 	bl	80005f8 <__aeabi_dmul>
 800d244:	460b      	mov	r3, r1
 800d246:	4604      	mov	r4, r0
 800d248:	460d      	mov	r5, r1
 800d24a:	4602      	mov	r2, r0
 800d24c:	4649      	mov	r1, r9
 800d24e:	4640      	mov	r0, r8
 800d250:	e9cd 4500 	strd	r4, r5, [sp]
 800d254:	f7f3 f81a 	bl	800028c <__adddf3>
 800d258:	4b1c      	ldr	r3, [pc, #112]	; (800d2cc <__ieee754_pow+0x3c4>)
 800d25a:	4299      	cmp	r1, r3
 800d25c:	4606      	mov	r6, r0
 800d25e:	460f      	mov	r7, r1
 800d260:	468b      	mov	fp, r1
 800d262:	f340 82f7 	ble.w	800d854 <__ieee754_pow+0x94c>
 800d266:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d26a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d26e:	4303      	orrs	r3, r0
 800d270:	f000 81ea 	beq.w	800d648 <__ieee754_pow+0x740>
 800d274:	a310      	add	r3, pc, #64	; (adr r3, 800d2b8 <__ieee754_pow+0x3b0>)
 800d276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d27e:	f7f3 f9bb 	bl	80005f8 <__aeabi_dmul>
 800d282:	a30d      	add	r3, pc, #52	; (adr r3, 800d2b8 <__ieee754_pow+0x3b0>)
 800d284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d288:	e6d5      	b.n	800d036 <__ieee754_pow+0x12e>
 800d28a:	bf00      	nop
 800d28c:	f3af 8000 	nop.w
 800d290:	60000000 	.word	0x60000000
 800d294:	3ff71547 	.word	0x3ff71547
 800d298:	f85ddf44 	.word	0xf85ddf44
 800d29c:	3e54ae0b 	.word	0x3e54ae0b
 800d2a0:	55555555 	.word	0x55555555
 800d2a4:	3fd55555 	.word	0x3fd55555
 800d2a8:	652b82fe 	.word	0x652b82fe
 800d2ac:	3ff71547 	.word	0x3ff71547
 800d2b0:	00000000 	.word	0x00000000
 800d2b4:	bff00000 	.word	0xbff00000
 800d2b8:	8800759c 	.word	0x8800759c
 800d2bc:	7e37e43c 	.word	0x7e37e43c
 800d2c0:	3ff00000 	.word	0x3ff00000
 800d2c4:	3fd00000 	.word	0x3fd00000
 800d2c8:	3fe00000 	.word	0x3fe00000
 800d2cc:	408fffff 	.word	0x408fffff
 800d2d0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d2d4:	f04f 0200 	mov.w	r2, #0
 800d2d8:	da05      	bge.n	800d2e6 <__ieee754_pow+0x3de>
 800d2da:	4bd3      	ldr	r3, [pc, #844]	; (800d628 <__ieee754_pow+0x720>)
 800d2dc:	f7f3 f98c 	bl	80005f8 <__aeabi_dmul>
 800d2e0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d2e4:	460c      	mov	r4, r1
 800d2e6:	1523      	asrs	r3, r4, #20
 800d2e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d2ec:	4413      	add	r3, r2
 800d2ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d2f0:	4bce      	ldr	r3, [pc, #824]	; (800d62c <__ieee754_pow+0x724>)
 800d2f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d2f6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d2fa:	429c      	cmp	r4, r3
 800d2fc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d300:	dd08      	ble.n	800d314 <__ieee754_pow+0x40c>
 800d302:	4bcb      	ldr	r3, [pc, #812]	; (800d630 <__ieee754_pow+0x728>)
 800d304:	429c      	cmp	r4, r3
 800d306:	f340 815e 	ble.w	800d5c6 <__ieee754_pow+0x6be>
 800d30a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d30c:	3301      	adds	r3, #1
 800d30e:	9309      	str	r3, [sp, #36]	; 0x24
 800d310:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d314:	f04f 0a00 	mov.w	sl, #0
 800d318:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d31c:	930c      	str	r3, [sp, #48]	; 0x30
 800d31e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d320:	4bc4      	ldr	r3, [pc, #784]	; (800d634 <__ieee754_pow+0x72c>)
 800d322:	4413      	add	r3, r2
 800d324:	ed93 7b00 	vldr	d7, [r3]
 800d328:	4629      	mov	r1, r5
 800d32a:	ec53 2b17 	vmov	r2, r3, d7
 800d32e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d332:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d336:	f7f2 ffa7 	bl	8000288 <__aeabi_dsub>
 800d33a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d33e:	4606      	mov	r6, r0
 800d340:	460f      	mov	r7, r1
 800d342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d346:	f7f2 ffa1 	bl	800028c <__adddf3>
 800d34a:	4602      	mov	r2, r0
 800d34c:	460b      	mov	r3, r1
 800d34e:	2000      	movs	r0, #0
 800d350:	49b9      	ldr	r1, [pc, #740]	; (800d638 <__ieee754_pow+0x730>)
 800d352:	f7f3 fa7b 	bl	800084c <__aeabi_ddiv>
 800d356:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d35a:	4602      	mov	r2, r0
 800d35c:	460b      	mov	r3, r1
 800d35e:	4630      	mov	r0, r6
 800d360:	4639      	mov	r1, r7
 800d362:	f7f3 f949 	bl	80005f8 <__aeabi_dmul>
 800d366:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d36a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d36e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d372:	2300      	movs	r3, #0
 800d374:	9302      	str	r3, [sp, #8]
 800d376:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d37a:	106d      	asrs	r5, r5, #1
 800d37c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d380:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d384:	2200      	movs	r2, #0
 800d386:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800d38a:	4640      	mov	r0, r8
 800d38c:	4649      	mov	r1, r9
 800d38e:	4614      	mov	r4, r2
 800d390:	461d      	mov	r5, r3
 800d392:	f7f3 f931 	bl	80005f8 <__aeabi_dmul>
 800d396:	4602      	mov	r2, r0
 800d398:	460b      	mov	r3, r1
 800d39a:	4630      	mov	r0, r6
 800d39c:	4639      	mov	r1, r7
 800d39e:	f7f2 ff73 	bl	8000288 <__aeabi_dsub>
 800d3a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3a6:	4606      	mov	r6, r0
 800d3a8:	460f      	mov	r7, r1
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	4629      	mov	r1, r5
 800d3ae:	f7f2 ff6b 	bl	8000288 <__aeabi_dsub>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d3ba:	f7f2 ff65 	bl	8000288 <__aeabi_dsub>
 800d3be:	4642      	mov	r2, r8
 800d3c0:	464b      	mov	r3, r9
 800d3c2:	f7f3 f919 	bl	80005f8 <__aeabi_dmul>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	4639      	mov	r1, r7
 800d3ce:	f7f2 ff5b 	bl	8000288 <__aeabi_dsub>
 800d3d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d3d6:	f7f3 f90f 	bl	80005f8 <__aeabi_dmul>
 800d3da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d3e2:	4610      	mov	r0, r2
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	f7f3 f907 	bl	80005f8 <__aeabi_dmul>
 800d3ea:	a37b      	add	r3, pc, #492	; (adr r3, 800d5d8 <__ieee754_pow+0x6d0>)
 800d3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f0:	4604      	mov	r4, r0
 800d3f2:	460d      	mov	r5, r1
 800d3f4:	f7f3 f900 	bl	80005f8 <__aeabi_dmul>
 800d3f8:	a379      	add	r3, pc, #484	; (adr r3, 800d5e0 <__ieee754_pow+0x6d8>)
 800d3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3fe:	f7f2 ff45 	bl	800028c <__adddf3>
 800d402:	4622      	mov	r2, r4
 800d404:	462b      	mov	r3, r5
 800d406:	f7f3 f8f7 	bl	80005f8 <__aeabi_dmul>
 800d40a:	a377      	add	r3, pc, #476	; (adr r3, 800d5e8 <__ieee754_pow+0x6e0>)
 800d40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d410:	f7f2 ff3c 	bl	800028c <__adddf3>
 800d414:	4622      	mov	r2, r4
 800d416:	462b      	mov	r3, r5
 800d418:	f7f3 f8ee 	bl	80005f8 <__aeabi_dmul>
 800d41c:	a374      	add	r3, pc, #464	; (adr r3, 800d5f0 <__ieee754_pow+0x6e8>)
 800d41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d422:	f7f2 ff33 	bl	800028c <__adddf3>
 800d426:	4622      	mov	r2, r4
 800d428:	462b      	mov	r3, r5
 800d42a:	f7f3 f8e5 	bl	80005f8 <__aeabi_dmul>
 800d42e:	a372      	add	r3, pc, #456	; (adr r3, 800d5f8 <__ieee754_pow+0x6f0>)
 800d430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d434:	f7f2 ff2a 	bl	800028c <__adddf3>
 800d438:	4622      	mov	r2, r4
 800d43a:	462b      	mov	r3, r5
 800d43c:	f7f3 f8dc 	bl	80005f8 <__aeabi_dmul>
 800d440:	a36f      	add	r3, pc, #444	; (adr r3, 800d600 <__ieee754_pow+0x6f8>)
 800d442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d446:	f7f2 ff21 	bl	800028c <__adddf3>
 800d44a:	4622      	mov	r2, r4
 800d44c:	4606      	mov	r6, r0
 800d44e:	460f      	mov	r7, r1
 800d450:	462b      	mov	r3, r5
 800d452:	4620      	mov	r0, r4
 800d454:	4629      	mov	r1, r5
 800d456:	f7f3 f8cf 	bl	80005f8 <__aeabi_dmul>
 800d45a:	4602      	mov	r2, r0
 800d45c:	460b      	mov	r3, r1
 800d45e:	4630      	mov	r0, r6
 800d460:	4639      	mov	r1, r7
 800d462:	f7f3 f8c9 	bl	80005f8 <__aeabi_dmul>
 800d466:	4642      	mov	r2, r8
 800d468:	4604      	mov	r4, r0
 800d46a:	460d      	mov	r5, r1
 800d46c:	464b      	mov	r3, r9
 800d46e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d472:	f7f2 ff0b 	bl	800028c <__adddf3>
 800d476:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d47a:	f7f3 f8bd 	bl	80005f8 <__aeabi_dmul>
 800d47e:	4622      	mov	r2, r4
 800d480:	462b      	mov	r3, r5
 800d482:	f7f2 ff03 	bl	800028c <__adddf3>
 800d486:	4642      	mov	r2, r8
 800d488:	4606      	mov	r6, r0
 800d48a:	460f      	mov	r7, r1
 800d48c:	464b      	mov	r3, r9
 800d48e:	4640      	mov	r0, r8
 800d490:	4649      	mov	r1, r9
 800d492:	f7f3 f8b1 	bl	80005f8 <__aeabi_dmul>
 800d496:	2200      	movs	r2, #0
 800d498:	4b68      	ldr	r3, [pc, #416]	; (800d63c <__ieee754_pow+0x734>)
 800d49a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d49e:	f7f2 fef5 	bl	800028c <__adddf3>
 800d4a2:	4632      	mov	r2, r6
 800d4a4:	463b      	mov	r3, r7
 800d4a6:	f7f2 fef1 	bl	800028c <__adddf3>
 800d4aa:	9802      	ldr	r0, [sp, #8]
 800d4ac:	460d      	mov	r5, r1
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	460b      	mov	r3, r1
 800d4b4:	4640      	mov	r0, r8
 800d4b6:	4649      	mov	r1, r9
 800d4b8:	f7f3 f89e 	bl	80005f8 <__aeabi_dmul>
 800d4bc:	2200      	movs	r2, #0
 800d4be:	4680      	mov	r8, r0
 800d4c0:	4689      	mov	r9, r1
 800d4c2:	4b5e      	ldr	r3, [pc, #376]	; (800d63c <__ieee754_pow+0x734>)
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	4629      	mov	r1, r5
 800d4c8:	f7f2 fede 	bl	8000288 <__aeabi_dsub>
 800d4cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d4d0:	f7f2 feda 	bl	8000288 <__aeabi_dsub>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	4630      	mov	r0, r6
 800d4da:	4639      	mov	r1, r7
 800d4dc:	f7f2 fed4 	bl	8000288 <__aeabi_dsub>
 800d4e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4e4:	f7f3 f888 	bl	80005f8 <__aeabi_dmul>
 800d4e8:	4622      	mov	r2, r4
 800d4ea:	4606      	mov	r6, r0
 800d4ec:	460f      	mov	r7, r1
 800d4ee:	462b      	mov	r3, r5
 800d4f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4f4:	f7f3 f880 	bl	80005f8 <__aeabi_dmul>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	460b      	mov	r3, r1
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	4639      	mov	r1, r7
 800d500:	f7f2 fec4 	bl	800028c <__adddf3>
 800d504:	4606      	mov	r6, r0
 800d506:	460f      	mov	r7, r1
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	4640      	mov	r0, r8
 800d50e:	4649      	mov	r1, r9
 800d510:	f7f2 febc 	bl	800028c <__adddf3>
 800d514:	9802      	ldr	r0, [sp, #8]
 800d516:	a33c      	add	r3, pc, #240	; (adr r3, 800d608 <__ieee754_pow+0x700>)
 800d518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51c:	4604      	mov	r4, r0
 800d51e:	460d      	mov	r5, r1
 800d520:	f7f3 f86a 	bl	80005f8 <__aeabi_dmul>
 800d524:	4642      	mov	r2, r8
 800d526:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d52a:	464b      	mov	r3, r9
 800d52c:	4620      	mov	r0, r4
 800d52e:	4629      	mov	r1, r5
 800d530:	f7f2 feaa 	bl	8000288 <__aeabi_dsub>
 800d534:	4602      	mov	r2, r0
 800d536:	460b      	mov	r3, r1
 800d538:	4630      	mov	r0, r6
 800d53a:	4639      	mov	r1, r7
 800d53c:	f7f2 fea4 	bl	8000288 <__aeabi_dsub>
 800d540:	a333      	add	r3, pc, #204	; (adr r3, 800d610 <__ieee754_pow+0x708>)
 800d542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d546:	f7f3 f857 	bl	80005f8 <__aeabi_dmul>
 800d54a:	a333      	add	r3, pc, #204	; (adr r3, 800d618 <__ieee754_pow+0x710>)
 800d54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d550:	4606      	mov	r6, r0
 800d552:	460f      	mov	r7, r1
 800d554:	4620      	mov	r0, r4
 800d556:	4629      	mov	r1, r5
 800d558:	f7f3 f84e 	bl	80005f8 <__aeabi_dmul>
 800d55c:	4602      	mov	r2, r0
 800d55e:	460b      	mov	r3, r1
 800d560:	4630      	mov	r0, r6
 800d562:	4639      	mov	r1, r7
 800d564:	f7f2 fe92 	bl	800028c <__adddf3>
 800d568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d56a:	4b35      	ldr	r3, [pc, #212]	; (800d640 <__ieee754_pow+0x738>)
 800d56c:	4413      	add	r3, r2
 800d56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d572:	f7f2 fe8b 	bl	800028c <__adddf3>
 800d576:	4604      	mov	r4, r0
 800d578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d57a:	460d      	mov	r5, r1
 800d57c:	f7f2 ffd2 	bl	8000524 <__aeabi_i2d>
 800d580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d582:	4b30      	ldr	r3, [pc, #192]	; (800d644 <__ieee754_pow+0x73c>)
 800d584:	4413      	add	r3, r2
 800d586:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d58a:	4606      	mov	r6, r0
 800d58c:	460f      	mov	r7, r1
 800d58e:	4622      	mov	r2, r4
 800d590:	462b      	mov	r3, r5
 800d592:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d596:	f7f2 fe79 	bl	800028c <__adddf3>
 800d59a:	4642      	mov	r2, r8
 800d59c:	464b      	mov	r3, r9
 800d59e:	f7f2 fe75 	bl	800028c <__adddf3>
 800d5a2:	4632      	mov	r2, r6
 800d5a4:	463b      	mov	r3, r7
 800d5a6:	f7f2 fe71 	bl	800028c <__adddf3>
 800d5aa:	9802      	ldr	r0, [sp, #8]
 800d5ac:	4632      	mov	r2, r6
 800d5ae:	463b      	mov	r3, r7
 800d5b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5b4:	f7f2 fe68 	bl	8000288 <__aeabi_dsub>
 800d5b8:	4642      	mov	r2, r8
 800d5ba:	464b      	mov	r3, r9
 800d5bc:	f7f2 fe64 	bl	8000288 <__aeabi_dsub>
 800d5c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d5c4:	e607      	b.n	800d1d6 <__ieee754_pow+0x2ce>
 800d5c6:	f04f 0a01 	mov.w	sl, #1
 800d5ca:	e6a5      	b.n	800d318 <__ieee754_pow+0x410>
 800d5cc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800d620 <__ieee754_pow+0x718>
 800d5d0:	e613      	b.n	800d1fa <__ieee754_pow+0x2f2>
 800d5d2:	bf00      	nop
 800d5d4:	f3af 8000 	nop.w
 800d5d8:	4a454eef 	.word	0x4a454eef
 800d5dc:	3fca7e28 	.word	0x3fca7e28
 800d5e0:	93c9db65 	.word	0x93c9db65
 800d5e4:	3fcd864a 	.word	0x3fcd864a
 800d5e8:	a91d4101 	.word	0xa91d4101
 800d5ec:	3fd17460 	.word	0x3fd17460
 800d5f0:	518f264d 	.word	0x518f264d
 800d5f4:	3fd55555 	.word	0x3fd55555
 800d5f8:	db6fabff 	.word	0xdb6fabff
 800d5fc:	3fdb6db6 	.word	0x3fdb6db6
 800d600:	33333303 	.word	0x33333303
 800d604:	3fe33333 	.word	0x3fe33333
 800d608:	e0000000 	.word	0xe0000000
 800d60c:	3feec709 	.word	0x3feec709
 800d610:	dc3a03fd 	.word	0xdc3a03fd
 800d614:	3feec709 	.word	0x3feec709
 800d618:	145b01f5 	.word	0x145b01f5
 800d61c:	be3e2fe0 	.word	0xbe3e2fe0
 800d620:	00000000 	.word	0x00000000
 800d624:	3ff00000 	.word	0x3ff00000
 800d628:	43400000 	.word	0x43400000
 800d62c:	0003988e 	.word	0x0003988e
 800d630:	000bb679 	.word	0x000bb679
 800d634:	0800e028 	.word	0x0800e028
 800d638:	3ff00000 	.word	0x3ff00000
 800d63c:	40080000 	.word	0x40080000
 800d640:	0800e048 	.word	0x0800e048
 800d644:	0800e038 	.word	0x0800e038
 800d648:	a3b4      	add	r3, pc, #720	; (adr r3, 800d91c <__ieee754_pow+0xa14>)
 800d64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64e:	4640      	mov	r0, r8
 800d650:	4649      	mov	r1, r9
 800d652:	f7f2 fe1b 	bl	800028c <__adddf3>
 800d656:	4622      	mov	r2, r4
 800d658:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d65c:	462b      	mov	r3, r5
 800d65e:	4630      	mov	r0, r6
 800d660:	4639      	mov	r1, r7
 800d662:	f7f2 fe11 	bl	8000288 <__aeabi_dsub>
 800d666:	4602      	mov	r2, r0
 800d668:	460b      	mov	r3, r1
 800d66a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d66e:	f7f3 fa53 	bl	8000b18 <__aeabi_dcmpgt>
 800d672:	2800      	cmp	r0, #0
 800d674:	f47f adfe 	bne.w	800d274 <__ieee754_pow+0x36c>
 800d678:	4aa3      	ldr	r2, [pc, #652]	; (800d908 <__ieee754_pow+0xa00>)
 800d67a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d67e:	4293      	cmp	r3, r2
 800d680:	f340 810a 	ble.w	800d898 <__ieee754_pow+0x990>
 800d684:	151b      	asrs	r3, r3, #20
 800d686:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d68a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d68e:	fa4a f303 	asr.w	r3, sl, r3
 800d692:	445b      	add	r3, fp
 800d694:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d698:	4e9c      	ldr	r6, [pc, #624]	; (800d90c <__ieee754_pow+0xa04>)
 800d69a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d69e:	4116      	asrs	r6, r2
 800d6a0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d6a4:	2000      	movs	r0, #0
 800d6a6:	ea23 0106 	bic.w	r1, r3, r6
 800d6aa:	f1c2 0214 	rsb	r2, r2, #20
 800d6ae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d6b2:	fa4a fa02 	asr.w	sl, sl, r2
 800d6b6:	f1bb 0f00 	cmp.w	fp, #0
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	460b      	mov	r3, r1
 800d6be:	4620      	mov	r0, r4
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	bfb8      	it	lt
 800d6c4:	f1ca 0a00 	rsblt	sl, sl, #0
 800d6c8:	f7f2 fdde 	bl	8000288 <__aeabi_dsub>
 800d6cc:	e9cd 0100 	strd	r0, r1, [sp]
 800d6d0:	4642      	mov	r2, r8
 800d6d2:	464b      	mov	r3, r9
 800d6d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6d8:	f7f2 fdd8 	bl	800028c <__adddf3>
 800d6dc:	2000      	movs	r0, #0
 800d6de:	a378      	add	r3, pc, #480	; (adr r3, 800d8c0 <__ieee754_pow+0x9b8>)
 800d6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e4:	4604      	mov	r4, r0
 800d6e6:	460d      	mov	r5, r1
 800d6e8:	f7f2 ff86 	bl	80005f8 <__aeabi_dmul>
 800d6ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6f0:	4606      	mov	r6, r0
 800d6f2:	460f      	mov	r7, r1
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	4629      	mov	r1, r5
 800d6f8:	f7f2 fdc6 	bl	8000288 <__aeabi_dsub>
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	460b      	mov	r3, r1
 800d700:	4640      	mov	r0, r8
 800d702:	4649      	mov	r1, r9
 800d704:	f7f2 fdc0 	bl	8000288 <__aeabi_dsub>
 800d708:	a36f      	add	r3, pc, #444	; (adr r3, 800d8c8 <__ieee754_pow+0x9c0>)
 800d70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70e:	f7f2 ff73 	bl	80005f8 <__aeabi_dmul>
 800d712:	a36f      	add	r3, pc, #444	; (adr r3, 800d8d0 <__ieee754_pow+0x9c8>)
 800d714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d718:	4680      	mov	r8, r0
 800d71a:	4689      	mov	r9, r1
 800d71c:	4620      	mov	r0, r4
 800d71e:	4629      	mov	r1, r5
 800d720:	f7f2 ff6a 	bl	80005f8 <__aeabi_dmul>
 800d724:	4602      	mov	r2, r0
 800d726:	460b      	mov	r3, r1
 800d728:	4640      	mov	r0, r8
 800d72a:	4649      	mov	r1, r9
 800d72c:	f7f2 fdae 	bl	800028c <__adddf3>
 800d730:	4604      	mov	r4, r0
 800d732:	460d      	mov	r5, r1
 800d734:	4602      	mov	r2, r0
 800d736:	460b      	mov	r3, r1
 800d738:	4630      	mov	r0, r6
 800d73a:	4639      	mov	r1, r7
 800d73c:	f7f2 fda6 	bl	800028c <__adddf3>
 800d740:	4632      	mov	r2, r6
 800d742:	463b      	mov	r3, r7
 800d744:	4680      	mov	r8, r0
 800d746:	4689      	mov	r9, r1
 800d748:	f7f2 fd9e 	bl	8000288 <__aeabi_dsub>
 800d74c:	4602      	mov	r2, r0
 800d74e:	460b      	mov	r3, r1
 800d750:	4620      	mov	r0, r4
 800d752:	4629      	mov	r1, r5
 800d754:	f7f2 fd98 	bl	8000288 <__aeabi_dsub>
 800d758:	4642      	mov	r2, r8
 800d75a:	4606      	mov	r6, r0
 800d75c:	460f      	mov	r7, r1
 800d75e:	464b      	mov	r3, r9
 800d760:	4640      	mov	r0, r8
 800d762:	4649      	mov	r1, r9
 800d764:	f7f2 ff48 	bl	80005f8 <__aeabi_dmul>
 800d768:	a35b      	add	r3, pc, #364	; (adr r3, 800d8d8 <__ieee754_pow+0x9d0>)
 800d76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76e:	4604      	mov	r4, r0
 800d770:	460d      	mov	r5, r1
 800d772:	f7f2 ff41 	bl	80005f8 <__aeabi_dmul>
 800d776:	a35a      	add	r3, pc, #360	; (adr r3, 800d8e0 <__ieee754_pow+0x9d8>)
 800d778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77c:	f7f2 fd84 	bl	8000288 <__aeabi_dsub>
 800d780:	4622      	mov	r2, r4
 800d782:	462b      	mov	r3, r5
 800d784:	f7f2 ff38 	bl	80005f8 <__aeabi_dmul>
 800d788:	a357      	add	r3, pc, #348	; (adr r3, 800d8e8 <__ieee754_pow+0x9e0>)
 800d78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78e:	f7f2 fd7d 	bl	800028c <__adddf3>
 800d792:	4622      	mov	r2, r4
 800d794:	462b      	mov	r3, r5
 800d796:	f7f2 ff2f 	bl	80005f8 <__aeabi_dmul>
 800d79a:	a355      	add	r3, pc, #340	; (adr r3, 800d8f0 <__ieee754_pow+0x9e8>)
 800d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a0:	f7f2 fd72 	bl	8000288 <__aeabi_dsub>
 800d7a4:	4622      	mov	r2, r4
 800d7a6:	462b      	mov	r3, r5
 800d7a8:	f7f2 ff26 	bl	80005f8 <__aeabi_dmul>
 800d7ac:	a352      	add	r3, pc, #328	; (adr r3, 800d8f8 <__ieee754_pow+0x9f0>)
 800d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b2:	f7f2 fd6b 	bl	800028c <__adddf3>
 800d7b6:	4622      	mov	r2, r4
 800d7b8:	462b      	mov	r3, r5
 800d7ba:	f7f2 ff1d 	bl	80005f8 <__aeabi_dmul>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	4640      	mov	r0, r8
 800d7c4:	4649      	mov	r1, r9
 800d7c6:	f7f2 fd5f 	bl	8000288 <__aeabi_dsub>
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	460d      	mov	r5, r1
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	4640      	mov	r0, r8
 800d7d4:	4649      	mov	r1, r9
 800d7d6:	f7f2 ff0f 	bl	80005f8 <__aeabi_dmul>
 800d7da:	2200      	movs	r2, #0
 800d7dc:	e9cd 0100 	strd	r0, r1, [sp]
 800d7e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	4629      	mov	r1, r5
 800d7e8:	f7f2 fd4e 	bl	8000288 <__aeabi_dsub>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7f4:	f7f3 f82a 	bl	800084c <__aeabi_ddiv>
 800d7f8:	4632      	mov	r2, r6
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	460d      	mov	r5, r1
 800d7fe:	463b      	mov	r3, r7
 800d800:	4640      	mov	r0, r8
 800d802:	4649      	mov	r1, r9
 800d804:	f7f2 fef8 	bl	80005f8 <__aeabi_dmul>
 800d808:	4632      	mov	r2, r6
 800d80a:	463b      	mov	r3, r7
 800d80c:	f7f2 fd3e 	bl	800028c <__adddf3>
 800d810:	4602      	mov	r2, r0
 800d812:	460b      	mov	r3, r1
 800d814:	4620      	mov	r0, r4
 800d816:	4629      	mov	r1, r5
 800d818:	f7f2 fd36 	bl	8000288 <__aeabi_dsub>
 800d81c:	4642      	mov	r2, r8
 800d81e:	464b      	mov	r3, r9
 800d820:	f7f2 fd32 	bl	8000288 <__aeabi_dsub>
 800d824:	4602      	mov	r2, r0
 800d826:	460b      	mov	r3, r1
 800d828:	2000      	movs	r0, #0
 800d82a:	4939      	ldr	r1, [pc, #228]	; (800d910 <__ieee754_pow+0xa08>)
 800d82c:	f7f2 fd2c 	bl	8000288 <__aeabi_dsub>
 800d830:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d834:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d838:	4602      	mov	r2, r0
 800d83a:	460b      	mov	r3, r1
 800d83c:	da2f      	bge.n	800d89e <__ieee754_pow+0x996>
 800d83e:	4650      	mov	r0, sl
 800d840:	ec43 2b10 	vmov	d0, r2, r3
 800d844:	f000 f9b4 	bl	800dbb0 <scalbn>
 800d848:	ec51 0b10 	vmov	r0, r1, d0
 800d84c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d850:	f7ff bbf1 	b.w	800d036 <__ieee754_pow+0x12e>
 800d854:	4b2f      	ldr	r3, [pc, #188]	; (800d914 <__ieee754_pow+0xa0c>)
 800d856:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d85a:	429e      	cmp	r6, r3
 800d85c:	f77f af0c 	ble.w	800d678 <__ieee754_pow+0x770>
 800d860:	4b2d      	ldr	r3, [pc, #180]	; (800d918 <__ieee754_pow+0xa10>)
 800d862:	440b      	add	r3, r1
 800d864:	4303      	orrs	r3, r0
 800d866:	d00b      	beq.n	800d880 <__ieee754_pow+0x978>
 800d868:	a325      	add	r3, pc, #148	; (adr r3, 800d900 <__ieee754_pow+0x9f8>)
 800d86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d872:	f7f2 fec1 	bl	80005f8 <__aeabi_dmul>
 800d876:	a322      	add	r3, pc, #136	; (adr r3, 800d900 <__ieee754_pow+0x9f8>)
 800d878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87c:	f7ff bbdb 	b.w	800d036 <__ieee754_pow+0x12e>
 800d880:	4622      	mov	r2, r4
 800d882:	462b      	mov	r3, r5
 800d884:	f7f2 fd00 	bl	8000288 <__aeabi_dsub>
 800d888:	4642      	mov	r2, r8
 800d88a:	464b      	mov	r3, r9
 800d88c:	f7f3 f93a 	bl	8000b04 <__aeabi_dcmpge>
 800d890:	2800      	cmp	r0, #0
 800d892:	f43f aef1 	beq.w	800d678 <__ieee754_pow+0x770>
 800d896:	e7e7      	b.n	800d868 <__ieee754_pow+0x960>
 800d898:	f04f 0a00 	mov.w	sl, #0
 800d89c:	e718      	b.n	800d6d0 <__ieee754_pow+0x7c8>
 800d89e:	4621      	mov	r1, r4
 800d8a0:	e7d4      	b.n	800d84c <__ieee754_pow+0x944>
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	491a      	ldr	r1, [pc, #104]	; (800d910 <__ieee754_pow+0xa08>)
 800d8a6:	f7ff bb8f 	b.w	800cfc8 <__ieee754_pow+0xc0>
 800d8aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8ae:	f7ff bb8b 	b.w	800cfc8 <__ieee754_pow+0xc0>
 800d8b2:	4630      	mov	r0, r6
 800d8b4:	4639      	mov	r1, r7
 800d8b6:	f7ff bb87 	b.w	800cfc8 <__ieee754_pow+0xc0>
 800d8ba:	4693      	mov	fp, r2
 800d8bc:	f7ff bb98 	b.w	800cff0 <__ieee754_pow+0xe8>
 800d8c0:	00000000 	.word	0x00000000
 800d8c4:	3fe62e43 	.word	0x3fe62e43
 800d8c8:	fefa39ef 	.word	0xfefa39ef
 800d8cc:	3fe62e42 	.word	0x3fe62e42
 800d8d0:	0ca86c39 	.word	0x0ca86c39
 800d8d4:	be205c61 	.word	0xbe205c61
 800d8d8:	72bea4d0 	.word	0x72bea4d0
 800d8dc:	3e663769 	.word	0x3e663769
 800d8e0:	c5d26bf1 	.word	0xc5d26bf1
 800d8e4:	3ebbbd41 	.word	0x3ebbbd41
 800d8e8:	af25de2c 	.word	0xaf25de2c
 800d8ec:	3f11566a 	.word	0x3f11566a
 800d8f0:	16bebd93 	.word	0x16bebd93
 800d8f4:	3f66c16c 	.word	0x3f66c16c
 800d8f8:	5555553e 	.word	0x5555553e
 800d8fc:	3fc55555 	.word	0x3fc55555
 800d900:	c2f8f359 	.word	0xc2f8f359
 800d904:	01a56e1f 	.word	0x01a56e1f
 800d908:	3fe00000 	.word	0x3fe00000
 800d90c:	000fffff 	.word	0x000fffff
 800d910:	3ff00000 	.word	0x3ff00000
 800d914:	4090cbff 	.word	0x4090cbff
 800d918:	3f6f3400 	.word	0x3f6f3400
 800d91c:	652b82fe 	.word	0x652b82fe
 800d920:	3c971547 	.word	0x3c971547

0800d924 <__ieee754_sqrt>:
 800d924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d928:	4955      	ldr	r1, [pc, #340]	; (800da80 <__ieee754_sqrt+0x15c>)
 800d92a:	ec55 4b10 	vmov	r4, r5, d0
 800d92e:	43a9      	bics	r1, r5
 800d930:	462b      	mov	r3, r5
 800d932:	462a      	mov	r2, r5
 800d934:	d112      	bne.n	800d95c <__ieee754_sqrt+0x38>
 800d936:	ee10 2a10 	vmov	r2, s0
 800d93a:	ee10 0a10 	vmov	r0, s0
 800d93e:	4629      	mov	r1, r5
 800d940:	f7f2 fe5a 	bl	80005f8 <__aeabi_dmul>
 800d944:	4602      	mov	r2, r0
 800d946:	460b      	mov	r3, r1
 800d948:	4620      	mov	r0, r4
 800d94a:	4629      	mov	r1, r5
 800d94c:	f7f2 fc9e 	bl	800028c <__adddf3>
 800d950:	4604      	mov	r4, r0
 800d952:	460d      	mov	r5, r1
 800d954:	ec45 4b10 	vmov	d0, r4, r5
 800d958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d95c:	2d00      	cmp	r5, #0
 800d95e:	ee10 0a10 	vmov	r0, s0
 800d962:	4621      	mov	r1, r4
 800d964:	dc0f      	bgt.n	800d986 <__ieee754_sqrt+0x62>
 800d966:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d96a:	4330      	orrs	r0, r6
 800d96c:	d0f2      	beq.n	800d954 <__ieee754_sqrt+0x30>
 800d96e:	b155      	cbz	r5, 800d986 <__ieee754_sqrt+0x62>
 800d970:	ee10 2a10 	vmov	r2, s0
 800d974:	4620      	mov	r0, r4
 800d976:	4629      	mov	r1, r5
 800d978:	f7f2 fc86 	bl	8000288 <__aeabi_dsub>
 800d97c:	4602      	mov	r2, r0
 800d97e:	460b      	mov	r3, r1
 800d980:	f7f2 ff64 	bl	800084c <__aeabi_ddiv>
 800d984:	e7e4      	b.n	800d950 <__ieee754_sqrt+0x2c>
 800d986:	151b      	asrs	r3, r3, #20
 800d988:	d073      	beq.n	800da72 <__ieee754_sqrt+0x14e>
 800d98a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d98e:	07dd      	lsls	r5, r3, #31
 800d990:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d994:	bf48      	it	mi
 800d996:	0fc8      	lsrmi	r0, r1, #31
 800d998:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d99c:	bf44      	itt	mi
 800d99e:	0049      	lslmi	r1, r1, #1
 800d9a0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800d9a4:	2500      	movs	r5, #0
 800d9a6:	1058      	asrs	r0, r3, #1
 800d9a8:	0fcb      	lsrs	r3, r1, #31
 800d9aa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800d9ae:	0049      	lsls	r1, r1, #1
 800d9b0:	2316      	movs	r3, #22
 800d9b2:	462c      	mov	r4, r5
 800d9b4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d9b8:	19a7      	adds	r7, r4, r6
 800d9ba:	4297      	cmp	r7, r2
 800d9bc:	bfde      	ittt	le
 800d9be:	19bc      	addle	r4, r7, r6
 800d9c0:	1bd2      	suble	r2, r2, r7
 800d9c2:	19ad      	addle	r5, r5, r6
 800d9c4:	0fcf      	lsrs	r7, r1, #31
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800d9cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d9d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d9d4:	d1f0      	bne.n	800d9b8 <__ieee754_sqrt+0x94>
 800d9d6:	f04f 0c20 	mov.w	ip, #32
 800d9da:	469e      	mov	lr, r3
 800d9dc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d9e0:	42a2      	cmp	r2, r4
 800d9e2:	eb06 070e 	add.w	r7, r6, lr
 800d9e6:	dc02      	bgt.n	800d9ee <__ieee754_sqrt+0xca>
 800d9e8:	d112      	bne.n	800da10 <__ieee754_sqrt+0xec>
 800d9ea:	428f      	cmp	r7, r1
 800d9ec:	d810      	bhi.n	800da10 <__ieee754_sqrt+0xec>
 800d9ee:	2f00      	cmp	r7, #0
 800d9f0:	eb07 0e06 	add.w	lr, r7, r6
 800d9f4:	da42      	bge.n	800da7c <__ieee754_sqrt+0x158>
 800d9f6:	f1be 0f00 	cmp.w	lr, #0
 800d9fa:	db3f      	blt.n	800da7c <__ieee754_sqrt+0x158>
 800d9fc:	f104 0801 	add.w	r8, r4, #1
 800da00:	1b12      	subs	r2, r2, r4
 800da02:	428f      	cmp	r7, r1
 800da04:	bf88      	it	hi
 800da06:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800da0a:	1bc9      	subs	r1, r1, r7
 800da0c:	4433      	add	r3, r6
 800da0e:	4644      	mov	r4, r8
 800da10:	0052      	lsls	r2, r2, #1
 800da12:	f1bc 0c01 	subs.w	ip, ip, #1
 800da16:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800da1a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800da1e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800da22:	d1dd      	bne.n	800d9e0 <__ieee754_sqrt+0xbc>
 800da24:	430a      	orrs	r2, r1
 800da26:	d006      	beq.n	800da36 <__ieee754_sqrt+0x112>
 800da28:	1c5c      	adds	r4, r3, #1
 800da2a:	bf13      	iteet	ne
 800da2c:	3301      	addne	r3, #1
 800da2e:	3501      	addeq	r5, #1
 800da30:	4663      	moveq	r3, ip
 800da32:	f023 0301 	bicne.w	r3, r3, #1
 800da36:	106a      	asrs	r2, r5, #1
 800da38:	085b      	lsrs	r3, r3, #1
 800da3a:	07e9      	lsls	r1, r5, #31
 800da3c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800da40:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800da44:	bf48      	it	mi
 800da46:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800da4a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800da4e:	461c      	mov	r4, r3
 800da50:	e780      	b.n	800d954 <__ieee754_sqrt+0x30>
 800da52:	0aca      	lsrs	r2, r1, #11
 800da54:	3815      	subs	r0, #21
 800da56:	0549      	lsls	r1, r1, #21
 800da58:	2a00      	cmp	r2, #0
 800da5a:	d0fa      	beq.n	800da52 <__ieee754_sqrt+0x12e>
 800da5c:	02d6      	lsls	r6, r2, #11
 800da5e:	d50a      	bpl.n	800da76 <__ieee754_sqrt+0x152>
 800da60:	f1c3 0420 	rsb	r4, r3, #32
 800da64:	fa21 f404 	lsr.w	r4, r1, r4
 800da68:	1e5d      	subs	r5, r3, #1
 800da6a:	4099      	lsls	r1, r3
 800da6c:	4322      	orrs	r2, r4
 800da6e:	1b43      	subs	r3, r0, r5
 800da70:	e78b      	b.n	800d98a <__ieee754_sqrt+0x66>
 800da72:	4618      	mov	r0, r3
 800da74:	e7f0      	b.n	800da58 <__ieee754_sqrt+0x134>
 800da76:	0052      	lsls	r2, r2, #1
 800da78:	3301      	adds	r3, #1
 800da7a:	e7ef      	b.n	800da5c <__ieee754_sqrt+0x138>
 800da7c:	46a0      	mov	r8, r4
 800da7e:	e7bf      	b.n	800da00 <__ieee754_sqrt+0xdc>
 800da80:	7ff00000 	.word	0x7ff00000

0800da84 <finite>:
 800da84:	ee10 3a90 	vmov	r3, s1
 800da88:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800da8c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800da90:	0fc0      	lsrs	r0, r0, #31
 800da92:	4770      	bx	lr

0800da94 <matherr>:
 800da94:	2000      	movs	r0, #0
 800da96:	4770      	bx	lr

0800da98 <nan>:
 800da98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800daa0 <nan+0x8>
 800da9c:	4770      	bx	lr
 800da9e:	bf00      	nop
 800daa0:	00000000 	.word	0x00000000
 800daa4:	7ff80000 	.word	0x7ff80000

0800daa8 <rint>:
 800daa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800daaa:	ec51 0b10 	vmov	r0, r1, d0
 800daae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dab2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800dab6:	2e13      	cmp	r6, #19
 800dab8:	460b      	mov	r3, r1
 800daba:	ee10 4a10 	vmov	r4, s0
 800dabe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800dac2:	dc56      	bgt.n	800db72 <rint+0xca>
 800dac4:	2e00      	cmp	r6, #0
 800dac6:	da2b      	bge.n	800db20 <rint+0x78>
 800dac8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800dacc:	4302      	orrs	r2, r0
 800dace:	d023      	beq.n	800db18 <rint+0x70>
 800dad0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800dad4:	4302      	orrs	r2, r0
 800dad6:	4254      	negs	r4, r2
 800dad8:	4314      	orrs	r4, r2
 800dada:	0c4b      	lsrs	r3, r1, #17
 800dadc:	0b24      	lsrs	r4, r4, #12
 800dade:	045b      	lsls	r3, r3, #17
 800dae0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800dae4:	ea44 0103 	orr.w	r1, r4, r3
 800dae8:	460b      	mov	r3, r1
 800daea:	492f      	ldr	r1, [pc, #188]	; (800dba8 <rint+0x100>)
 800daec:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800daf0:	e9d1 6700 	ldrd	r6, r7, [r1]
 800daf4:	4602      	mov	r2, r0
 800daf6:	4639      	mov	r1, r7
 800daf8:	4630      	mov	r0, r6
 800dafa:	f7f2 fbc7 	bl	800028c <__adddf3>
 800dafe:	e9cd 0100 	strd	r0, r1, [sp]
 800db02:	463b      	mov	r3, r7
 800db04:	4632      	mov	r2, r6
 800db06:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db0a:	f7f2 fbbd 	bl	8000288 <__aeabi_dsub>
 800db0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db12:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800db16:	4639      	mov	r1, r7
 800db18:	ec41 0b10 	vmov	d0, r0, r1
 800db1c:	b003      	add	sp, #12
 800db1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db20:	4a22      	ldr	r2, [pc, #136]	; (800dbac <rint+0x104>)
 800db22:	4132      	asrs	r2, r6
 800db24:	ea01 0702 	and.w	r7, r1, r2
 800db28:	4307      	orrs	r7, r0
 800db2a:	d0f5      	beq.n	800db18 <rint+0x70>
 800db2c:	0852      	lsrs	r2, r2, #1
 800db2e:	4011      	ands	r1, r2
 800db30:	430c      	orrs	r4, r1
 800db32:	d00b      	beq.n	800db4c <rint+0xa4>
 800db34:	ea23 0202 	bic.w	r2, r3, r2
 800db38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800db3c:	2e13      	cmp	r6, #19
 800db3e:	fa43 f306 	asr.w	r3, r3, r6
 800db42:	bf0c      	ite	eq
 800db44:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800db48:	2400      	movne	r4, #0
 800db4a:	4313      	orrs	r3, r2
 800db4c:	4916      	ldr	r1, [pc, #88]	; (800dba8 <rint+0x100>)
 800db4e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800db52:	4622      	mov	r2, r4
 800db54:	e9d5 4500 	ldrd	r4, r5, [r5]
 800db58:	4620      	mov	r0, r4
 800db5a:	4629      	mov	r1, r5
 800db5c:	f7f2 fb96 	bl	800028c <__adddf3>
 800db60:	e9cd 0100 	strd	r0, r1, [sp]
 800db64:	4622      	mov	r2, r4
 800db66:	462b      	mov	r3, r5
 800db68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db6c:	f7f2 fb8c 	bl	8000288 <__aeabi_dsub>
 800db70:	e7d2      	b.n	800db18 <rint+0x70>
 800db72:	2e33      	cmp	r6, #51	; 0x33
 800db74:	dd07      	ble.n	800db86 <rint+0xde>
 800db76:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800db7a:	d1cd      	bne.n	800db18 <rint+0x70>
 800db7c:	ee10 2a10 	vmov	r2, s0
 800db80:	f7f2 fb84 	bl	800028c <__adddf3>
 800db84:	e7c8      	b.n	800db18 <rint+0x70>
 800db86:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800db8a:	f04f 32ff 	mov.w	r2, #4294967295
 800db8e:	40f2      	lsrs	r2, r6
 800db90:	4210      	tst	r0, r2
 800db92:	d0c1      	beq.n	800db18 <rint+0x70>
 800db94:	0852      	lsrs	r2, r2, #1
 800db96:	4210      	tst	r0, r2
 800db98:	bf1f      	itttt	ne
 800db9a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800db9e:	ea20 0202 	bicne.w	r2, r0, r2
 800dba2:	4134      	asrne	r4, r6
 800dba4:	4314      	orrne	r4, r2
 800dba6:	e7d1      	b.n	800db4c <rint+0xa4>
 800dba8:	0800e058 	.word	0x0800e058
 800dbac:	000fffff 	.word	0x000fffff

0800dbb0 <scalbn>:
 800dbb0:	b570      	push	{r4, r5, r6, lr}
 800dbb2:	ec55 4b10 	vmov	r4, r5, d0
 800dbb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800dbba:	4606      	mov	r6, r0
 800dbbc:	462b      	mov	r3, r5
 800dbbe:	b9aa      	cbnz	r2, 800dbec <scalbn+0x3c>
 800dbc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dbc4:	4323      	orrs	r3, r4
 800dbc6:	d03b      	beq.n	800dc40 <scalbn+0x90>
 800dbc8:	4b31      	ldr	r3, [pc, #196]	; (800dc90 <scalbn+0xe0>)
 800dbca:	4629      	mov	r1, r5
 800dbcc:	2200      	movs	r2, #0
 800dbce:	ee10 0a10 	vmov	r0, s0
 800dbd2:	f7f2 fd11 	bl	80005f8 <__aeabi_dmul>
 800dbd6:	4b2f      	ldr	r3, [pc, #188]	; (800dc94 <scalbn+0xe4>)
 800dbd8:	429e      	cmp	r6, r3
 800dbda:	4604      	mov	r4, r0
 800dbdc:	460d      	mov	r5, r1
 800dbde:	da12      	bge.n	800dc06 <scalbn+0x56>
 800dbe0:	a327      	add	r3, pc, #156	; (adr r3, 800dc80 <scalbn+0xd0>)
 800dbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe6:	f7f2 fd07 	bl	80005f8 <__aeabi_dmul>
 800dbea:	e009      	b.n	800dc00 <scalbn+0x50>
 800dbec:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800dbf0:	428a      	cmp	r2, r1
 800dbf2:	d10c      	bne.n	800dc0e <scalbn+0x5e>
 800dbf4:	ee10 2a10 	vmov	r2, s0
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	4629      	mov	r1, r5
 800dbfc:	f7f2 fb46 	bl	800028c <__adddf3>
 800dc00:	4604      	mov	r4, r0
 800dc02:	460d      	mov	r5, r1
 800dc04:	e01c      	b.n	800dc40 <scalbn+0x90>
 800dc06:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	3a36      	subs	r2, #54	; 0x36
 800dc0e:	4432      	add	r2, r6
 800dc10:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dc14:	428a      	cmp	r2, r1
 800dc16:	dd0b      	ble.n	800dc30 <scalbn+0x80>
 800dc18:	ec45 4b11 	vmov	d1, r4, r5
 800dc1c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800dc88 <scalbn+0xd8>
 800dc20:	f000 f83c 	bl	800dc9c <copysign>
 800dc24:	a318      	add	r3, pc, #96	; (adr r3, 800dc88 <scalbn+0xd8>)
 800dc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2a:	ec51 0b10 	vmov	r0, r1, d0
 800dc2e:	e7da      	b.n	800dbe6 <scalbn+0x36>
 800dc30:	2a00      	cmp	r2, #0
 800dc32:	dd08      	ble.n	800dc46 <scalbn+0x96>
 800dc34:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dc38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dc3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dc40:	ec45 4b10 	vmov	d0, r4, r5
 800dc44:	bd70      	pop	{r4, r5, r6, pc}
 800dc46:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dc4a:	da0d      	bge.n	800dc68 <scalbn+0xb8>
 800dc4c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dc50:	429e      	cmp	r6, r3
 800dc52:	ec45 4b11 	vmov	d1, r4, r5
 800dc56:	dce1      	bgt.n	800dc1c <scalbn+0x6c>
 800dc58:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800dc80 <scalbn+0xd0>
 800dc5c:	f000 f81e 	bl	800dc9c <copysign>
 800dc60:	a307      	add	r3, pc, #28	; (adr r3, 800dc80 <scalbn+0xd0>)
 800dc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc66:	e7e0      	b.n	800dc2a <scalbn+0x7a>
 800dc68:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dc6c:	3236      	adds	r2, #54	; 0x36
 800dc6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dc72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dc76:	4620      	mov	r0, r4
 800dc78:	4629      	mov	r1, r5
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	4b06      	ldr	r3, [pc, #24]	; (800dc98 <scalbn+0xe8>)
 800dc7e:	e7b2      	b.n	800dbe6 <scalbn+0x36>
 800dc80:	c2f8f359 	.word	0xc2f8f359
 800dc84:	01a56e1f 	.word	0x01a56e1f
 800dc88:	8800759c 	.word	0x8800759c
 800dc8c:	7e37e43c 	.word	0x7e37e43c
 800dc90:	43500000 	.word	0x43500000
 800dc94:	ffff3cb0 	.word	0xffff3cb0
 800dc98:	3c900000 	.word	0x3c900000

0800dc9c <copysign>:
 800dc9c:	ec51 0b10 	vmov	r0, r1, d0
 800dca0:	ee11 0a90 	vmov	r0, s3
 800dca4:	ee10 2a10 	vmov	r2, s0
 800dca8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dcac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800dcb0:	ea41 0300 	orr.w	r3, r1, r0
 800dcb4:	ec43 2b10 	vmov	d0, r2, r3
 800dcb8:	4770      	bx	lr
	...

0800dcbc <_init>:
 800dcbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcbe:	bf00      	nop
 800dcc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcc2:	bc08      	pop	{r3}
 800dcc4:	469e      	mov	lr, r3
 800dcc6:	4770      	bx	lr

0800dcc8 <_fini>:
 800dcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcca:	bf00      	nop
 800dccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcce:	bc08      	pop	{r3}
 800dcd0:	469e      	mov	lr, r3
 800dcd2:	4770      	bx	lr
